// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package awscost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AwsCostClient is the client API for AwsCost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AwsCostClient interface {
	// Streams back the usage-based cost details of an AWS account. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	StreamReadAccountCosts(ctx context.Context, in *StreamReadAccountCostsRequest, opts ...grpc.CallOption) (AwsCost_StreamReadAccountCostsClient, error)
	// Streams back the usage-based cost details of a company. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	StreamReadCompanyCosts(ctx context.Context, in *StreamReadCompanyCostsRequest, opts ...grpc.CallOption) (AwsCost_StreamReadCompanyCostsClient, error)
	// Streams back the usage-based cost details of a billing group. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	StreamReadBillingGroupCosts(ctx context.Context, in *StreamReadBillingGroupCostsRequest, opts ...grpc.CallOption) (AwsCost_StreamReadBillingGroupCostsClient, error)
	// Streams back the fee-based details of an AWS account. This API covers non-usage-based
	// fees, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	StreamReadAccountFees(ctx context.Context, in *StreamReadAccountFeesRequest, opts ...grpc.CallOption) (AwsCost_StreamReadAccountFeesClient, error)
	// Streams back the fee-based details of a company. This API covers non-usage-based
	// fees, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	StreamReadCompanyFees(ctx context.Context, in *StreamReadCompanyFeesRequest, opts ...grpc.CallOption) (AwsCost_StreamReadCompanyFeesClient, error)
	// Streams back the fee-based details of a billing group. This API covers non-usage-based
	// fees, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	StreamReadBillingGroupFees(ctx context.Context, in *StreamReadBillingGroupFeesRequest, opts ...grpc.CallOption) (AwsCost_StreamReadBillingGroupFeesClient, error)
}

type awsCostClient struct {
	cc grpc.ClientConnInterface
}

func NewAwsCostClient(cc grpc.ClientConnInterface) AwsCostClient {
	return &awsCostClient{cc}
}

func (c *awsCostClient) StreamReadAccountCosts(ctx context.Context, in *StreamReadAccountCostsRequest, opts ...grpc.CallOption) (AwsCost_StreamReadAccountCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[0], "/blueapi.awscost.v1.AwsCost/StreamReadAccountCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostStreamReadAccountCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_StreamReadAccountCostsClient interface {
	Recv() (*Cost, error)
	grpc.ClientStream
}

type awsCostStreamReadAccountCostsClient struct {
	grpc.ClientStream
}

func (x *awsCostStreamReadAccountCostsClient) Recv() (*Cost, error) {
	m := new(Cost)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *awsCostClient) StreamReadCompanyCosts(ctx context.Context, in *StreamReadCompanyCostsRequest, opts ...grpc.CallOption) (AwsCost_StreamReadCompanyCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[1], "/blueapi.awscost.v1.AwsCost/StreamReadCompanyCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostStreamReadCompanyCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_StreamReadCompanyCostsClient interface {
	Recv() (*Cost, error)
	grpc.ClientStream
}

type awsCostStreamReadCompanyCostsClient struct {
	grpc.ClientStream
}

func (x *awsCostStreamReadCompanyCostsClient) Recv() (*Cost, error) {
	m := new(Cost)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *awsCostClient) StreamReadBillingGroupCosts(ctx context.Context, in *StreamReadBillingGroupCostsRequest, opts ...grpc.CallOption) (AwsCost_StreamReadBillingGroupCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[2], "/blueapi.awscost.v1.AwsCost/StreamReadBillingGroupCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostStreamReadBillingGroupCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_StreamReadBillingGroupCostsClient interface {
	Recv() (*Cost, error)
	grpc.ClientStream
}

type awsCostStreamReadBillingGroupCostsClient struct {
	grpc.ClientStream
}

func (x *awsCostStreamReadBillingGroupCostsClient) Recv() (*Cost, error) {
	m := new(Cost)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *awsCostClient) StreamReadAccountFees(ctx context.Context, in *StreamReadAccountFeesRequest, opts ...grpc.CallOption) (AwsCost_StreamReadAccountFeesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[3], "/blueapi.awscost.v1.AwsCost/StreamReadAccountFees", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostStreamReadAccountFeesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_StreamReadAccountFeesClient interface {
	Recv() (*Fee, error)
	grpc.ClientStream
}

type awsCostStreamReadAccountFeesClient struct {
	grpc.ClientStream
}

func (x *awsCostStreamReadAccountFeesClient) Recv() (*Fee, error) {
	m := new(Fee)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *awsCostClient) StreamReadCompanyFees(ctx context.Context, in *StreamReadCompanyFeesRequest, opts ...grpc.CallOption) (AwsCost_StreamReadCompanyFeesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[4], "/blueapi.awscost.v1.AwsCost/StreamReadCompanyFees", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostStreamReadCompanyFeesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_StreamReadCompanyFeesClient interface {
	Recv() (*Fee, error)
	grpc.ClientStream
}

type awsCostStreamReadCompanyFeesClient struct {
	grpc.ClientStream
}

func (x *awsCostStreamReadCompanyFeesClient) Recv() (*Fee, error) {
	m := new(Fee)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *awsCostClient) StreamReadBillingGroupFees(ctx context.Context, in *StreamReadBillingGroupFeesRequest, opts ...grpc.CallOption) (AwsCost_StreamReadBillingGroupFeesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[5], "/blueapi.awscost.v1.AwsCost/StreamReadBillingGroupFees", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostStreamReadBillingGroupFeesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_StreamReadBillingGroupFeesClient interface {
	Recv() (*Fee, error)
	grpc.ClientStream
}

type awsCostStreamReadBillingGroupFeesClient struct {
	grpc.ClientStream
}

func (x *awsCostStreamReadBillingGroupFeesClient) Recv() (*Fee, error) {
	m := new(Fee)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AwsCostServer is the server API for AwsCost service.
// All implementations must embed UnimplementedAwsCostServer
// for forward compatibility
type AwsCostServer interface {
	// Streams back the usage-based cost details of an AWS account. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	StreamReadAccountCosts(*StreamReadAccountCostsRequest, AwsCost_StreamReadAccountCostsServer) error
	// Streams back the usage-based cost details of a company. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	StreamReadCompanyCosts(*StreamReadCompanyCostsRequest, AwsCost_StreamReadCompanyCostsServer) error
	// Streams back the usage-based cost details of a billing group. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	StreamReadBillingGroupCosts(*StreamReadBillingGroupCostsRequest, AwsCost_StreamReadBillingGroupCostsServer) error
	// Streams back the fee-based details of an AWS account. This API covers non-usage-based
	// fees, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	StreamReadAccountFees(*StreamReadAccountFeesRequest, AwsCost_StreamReadAccountFeesServer) error
	// Streams back the fee-based details of a company. This API covers non-usage-based
	// fees, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	StreamReadCompanyFees(*StreamReadCompanyFeesRequest, AwsCost_StreamReadCompanyFeesServer) error
	// Streams back the fee-based details of a billing group. This API covers non-usage-based
	// fees, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	StreamReadBillingGroupFees(*StreamReadBillingGroupFeesRequest, AwsCost_StreamReadBillingGroupFeesServer) error
	mustEmbedUnimplementedAwsCostServer()
}

// UnimplementedAwsCostServer must be embedded to have forward compatible implementations.
type UnimplementedAwsCostServer struct {
}

func (UnimplementedAwsCostServer) StreamReadAccountCosts(*StreamReadAccountCostsRequest, AwsCost_StreamReadAccountCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReadAccountCosts not implemented")
}
func (UnimplementedAwsCostServer) StreamReadCompanyCosts(*StreamReadCompanyCostsRequest, AwsCost_StreamReadCompanyCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReadCompanyCosts not implemented")
}
func (UnimplementedAwsCostServer) StreamReadBillingGroupCosts(*StreamReadBillingGroupCostsRequest, AwsCost_StreamReadBillingGroupCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReadBillingGroupCosts not implemented")
}
func (UnimplementedAwsCostServer) StreamReadAccountFees(*StreamReadAccountFeesRequest, AwsCost_StreamReadAccountFeesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReadAccountFees not implemented")
}
func (UnimplementedAwsCostServer) StreamReadCompanyFees(*StreamReadCompanyFeesRequest, AwsCost_StreamReadCompanyFeesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReadCompanyFees not implemented")
}
func (UnimplementedAwsCostServer) StreamReadBillingGroupFees(*StreamReadBillingGroupFeesRequest, AwsCost_StreamReadBillingGroupFeesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReadBillingGroupFees not implemented")
}
func (UnimplementedAwsCostServer) mustEmbedUnimplementedAwsCostServer() {}

// UnsafeAwsCostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AwsCostServer will
// result in compilation errors.
type UnsafeAwsCostServer interface {
	mustEmbedUnimplementedAwsCostServer()
}

func RegisterAwsCostServer(s grpc.ServiceRegistrar, srv AwsCostServer) {
	s.RegisterService(&AwsCost_ServiceDesc, srv)
}

func _AwsCost_StreamReadAccountCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReadAccountCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).StreamReadAccountCosts(m, &awsCostStreamReadAccountCostsServer{stream})
}

type AwsCost_StreamReadAccountCostsServer interface {
	Send(*Cost) error
	grpc.ServerStream
}

type awsCostStreamReadAccountCostsServer struct {
	grpc.ServerStream
}

func (x *awsCostStreamReadAccountCostsServer) Send(m *Cost) error {
	return x.ServerStream.SendMsg(m)
}

func _AwsCost_StreamReadCompanyCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReadCompanyCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).StreamReadCompanyCosts(m, &awsCostStreamReadCompanyCostsServer{stream})
}

type AwsCost_StreamReadCompanyCostsServer interface {
	Send(*Cost) error
	grpc.ServerStream
}

type awsCostStreamReadCompanyCostsServer struct {
	grpc.ServerStream
}

func (x *awsCostStreamReadCompanyCostsServer) Send(m *Cost) error {
	return x.ServerStream.SendMsg(m)
}

func _AwsCost_StreamReadBillingGroupCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReadBillingGroupCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).StreamReadBillingGroupCosts(m, &awsCostStreamReadBillingGroupCostsServer{stream})
}

type AwsCost_StreamReadBillingGroupCostsServer interface {
	Send(*Cost) error
	grpc.ServerStream
}

type awsCostStreamReadBillingGroupCostsServer struct {
	grpc.ServerStream
}

func (x *awsCostStreamReadBillingGroupCostsServer) Send(m *Cost) error {
	return x.ServerStream.SendMsg(m)
}

func _AwsCost_StreamReadAccountFees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReadAccountFeesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).StreamReadAccountFees(m, &awsCostStreamReadAccountFeesServer{stream})
}

type AwsCost_StreamReadAccountFeesServer interface {
	Send(*Fee) error
	grpc.ServerStream
}

type awsCostStreamReadAccountFeesServer struct {
	grpc.ServerStream
}

func (x *awsCostStreamReadAccountFeesServer) Send(m *Fee) error {
	return x.ServerStream.SendMsg(m)
}

func _AwsCost_StreamReadCompanyFees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReadCompanyFeesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).StreamReadCompanyFees(m, &awsCostStreamReadCompanyFeesServer{stream})
}

type AwsCost_StreamReadCompanyFeesServer interface {
	Send(*Fee) error
	grpc.ServerStream
}

type awsCostStreamReadCompanyFeesServer struct {
	grpc.ServerStream
}

func (x *awsCostStreamReadCompanyFeesServer) Send(m *Fee) error {
	return x.ServerStream.SendMsg(m)
}

func _AwsCost_StreamReadBillingGroupFees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReadBillingGroupFeesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).StreamReadBillingGroupFees(m, &awsCostStreamReadBillingGroupFeesServer{stream})
}

type AwsCost_StreamReadBillingGroupFeesServer interface {
	Send(*Fee) error
	grpc.ServerStream
}

type awsCostStreamReadBillingGroupFeesServer struct {
	grpc.ServerStream
}

func (x *awsCostStreamReadBillingGroupFeesServer) Send(m *Fee) error {
	return x.ServerStream.SendMsg(m)
}

// AwsCost_ServiceDesc is the grpc.ServiceDesc for AwsCost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AwsCost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.awscost.v1.AwsCost",
	HandlerType: (*AwsCostServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReadAccountCosts",
			Handler:       _AwsCost_StreamReadAccountCosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamReadCompanyCosts",
			Handler:       _AwsCost_StreamReadCompanyCosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamReadBillingGroupCosts",
			Handler:       _AwsCost_StreamReadBillingGroupCosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamReadAccountFees",
			Handler:       _AwsCost_StreamReadAccountFees_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamReadCompanyFees",
			Handler:       _AwsCost_StreamReadCompanyFees_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamReadBillingGroupFees",
			Handler:       _AwsCost_StreamReadBillingGroupFees_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "awscost/v1/awscost.proto",
}
