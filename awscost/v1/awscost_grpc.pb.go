// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package awscost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AwsCostClient is the client API for AwsCost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AwsCostClient interface {
	GetAccountCosts(ctx context.Context, in *GetAccountCostsRequest, opts ...grpc.CallOption) (AwsCost_GetAccountCostsClient, error)
}

type awsCostClient struct {
	cc grpc.ClientConnInterface
}

func NewAwsCostClient(cc grpc.ClientConnInterface) AwsCostClient {
	return &awsCostClient{cc}
}

func (c *awsCostClient) GetAccountCosts(ctx context.Context, in *GetAccountCostsRequest, opts ...grpc.CallOption) (AwsCost_GetAccountCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[0], "/blueapi.awscost.v1.AwsCost/GetAccountCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostGetAccountCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_GetAccountCostsClient interface {
	Recv() (*GetAccountCostsReply, error)
	grpc.ClientStream
}

type awsCostGetAccountCostsClient struct {
	grpc.ClientStream
}

func (x *awsCostGetAccountCostsClient) Recv() (*GetAccountCostsReply, error) {
	m := new(GetAccountCostsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AwsCostServer is the server API for AwsCost service.
// All implementations must embed UnimplementedAwsCostServer
// for forward compatibility
type AwsCostServer interface {
	GetAccountCosts(*GetAccountCostsRequest, AwsCost_GetAccountCostsServer) error
	mustEmbedUnimplementedAwsCostServer()
}

// UnimplementedAwsCostServer must be embedded to have forward compatible implementations.
type UnimplementedAwsCostServer struct {
}

func (UnimplementedAwsCostServer) GetAccountCosts(*GetAccountCostsRequest, AwsCost_GetAccountCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAccountCosts not implemented")
}
func (UnimplementedAwsCostServer) mustEmbedUnimplementedAwsCostServer() {}

// UnsafeAwsCostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AwsCostServer will
// result in compilation errors.
type UnsafeAwsCostServer interface {
	mustEmbedUnimplementedAwsCostServer()
}

func RegisterAwsCostServer(s grpc.ServiceRegistrar, srv AwsCostServer) {
	s.RegisterService(&AwsCost_ServiceDesc, srv)
}

func _AwsCost_GetAccountCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAccountCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).GetAccountCosts(m, &awsCostGetAccountCostsServer{stream})
}

type AwsCost_GetAccountCostsServer interface {
	Send(*GetAccountCostsReply) error
	grpc.ServerStream
}

type awsCostGetAccountCostsServer struct {
	grpc.ServerStream
}

func (x *awsCostGetAccountCostsServer) Send(m *GetAccountCostsReply) error {
	return x.ServerStream.SendMsg(m)
}

// AwsCost_ServiceDesc is the grpc.ServiceDesc for AwsCost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AwsCost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.awscost.v1.AwsCost",
	HandlerType: (*AwsCostServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAccountCosts",
			Handler:       _AwsCost_GetAccountCosts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "awscost/v1/awscost.proto",
}
