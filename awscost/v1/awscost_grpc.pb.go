// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package awscost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AwsCostClient is the client API for AwsCost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AwsCostClient interface {
	// Reads the usage-based cost details of an AWS account. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	ReadAccountCosts(ctx context.Context, in *ReadAccountCostsRequest, opts ...grpc.CallOption) (AwsCost_ReadAccountCostsClient, error)
	// Reads the usage-based cost details of a company. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	ReadCompanyCosts(ctx context.Context, in *ReadCompanyCostsRequest, opts ...grpc.CallOption) (AwsCost_ReadCompanyCostsClient, error)
	// Reads the usage-based cost details of a billing group. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	ReadBillingGroupCosts(ctx context.Context, in *ReadBillingGroupCostsRequest, opts ...grpc.CallOption) (AwsCost_ReadBillingGroupCostsClient, error)
	// Reads the usage-based cost details of an organization (Ripple) or company (Wave).
	// If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadCosts(ctx context.Context, in *ReadCostsRequest, opts ...grpc.CallOption) (AwsCost_ReadCostsClient, error)
	// Reads the non-usaged-based details of an AWS account. This API covers non-usage-based
	// fees, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	ReadAccountFees(ctx context.Context, in *ReadAccountFeesRequest, opts ...grpc.CallOption) (AwsCost_ReadAccountFeesClient, error)
	// Reads the non-usage-based details of a company. This API covers non-usage-based
	// fees, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	ReadCompanyFees(ctx context.Context, in *ReadCompanyFeesRequest, opts ...grpc.CallOption) (AwsCost_ReadCompanyFeesClient, error)
	// Reads the non-usage-based details of a billing group. This API covers non-usage-based
	// fees, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	ReadBillingGroupFees(ctx context.Context, in *ReadBillingGroupFeesRequest, opts ...grpc.CallOption) (AwsCost_ReadBillingGroupFeesClient, error)
	// Reads the non-usage-based details of an organization (Ripple) or company (Wave). This API covers
	// non-usage-based fees, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime
	// range parameters are not set, month-to-date (current month) will be returned.
	ReadFees(ctx context.Context, in *ReadFeesRequest, opts ...grpc.CallOption) (AwsCost_ReadFeesClient, error)
}

type awsCostClient struct {
	cc grpc.ClientConnInterface
}

func NewAwsCostClient(cc grpc.ClientConnInterface) AwsCostClient {
	return &awsCostClient{cc}
}

func (c *awsCostClient) ReadAccountCosts(ctx context.Context, in *ReadAccountCostsRequest, opts ...grpc.CallOption) (AwsCost_ReadAccountCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[0], "/blueapi.awscost.v1.AwsCost/ReadAccountCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostReadAccountCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_ReadAccountCostsClient interface {
	Recv() (*Cost, error)
	grpc.ClientStream
}

type awsCostReadAccountCostsClient struct {
	grpc.ClientStream
}

func (x *awsCostReadAccountCostsClient) Recv() (*Cost, error) {
	m := new(Cost)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *awsCostClient) ReadCompanyCosts(ctx context.Context, in *ReadCompanyCostsRequest, opts ...grpc.CallOption) (AwsCost_ReadCompanyCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[1], "/blueapi.awscost.v1.AwsCost/ReadCompanyCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostReadCompanyCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_ReadCompanyCostsClient interface {
	Recv() (*Cost, error)
	grpc.ClientStream
}

type awsCostReadCompanyCostsClient struct {
	grpc.ClientStream
}

func (x *awsCostReadCompanyCostsClient) Recv() (*Cost, error) {
	m := new(Cost)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *awsCostClient) ReadBillingGroupCosts(ctx context.Context, in *ReadBillingGroupCostsRequest, opts ...grpc.CallOption) (AwsCost_ReadBillingGroupCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[2], "/blueapi.awscost.v1.AwsCost/ReadBillingGroupCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostReadBillingGroupCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_ReadBillingGroupCostsClient interface {
	Recv() (*Cost, error)
	grpc.ClientStream
}

type awsCostReadBillingGroupCostsClient struct {
	grpc.ClientStream
}

func (x *awsCostReadBillingGroupCostsClient) Recv() (*Cost, error) {
	m := new(Cost)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *awsCostClient) ReadCosts(ctx context.Context, in *ReadCostsRequest, opts ...grpc.CallOption) (AwsCost_ReadCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[3], "/blueapi.awscost.v1.AwsCost/ReadCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostReadCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_ReadCostsClient interface {
	Recv() (*Cost, error)
	grpc.ClientStream
}

type awsCostReadCostsClient struct {
	grpc.ClientStream
}

func (x *awsCostReadCostsClient) Recv() (*Cost, error) {
	m := new(Cost)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *awsCostClient) ReadAccountFees(ctx context.Context, in *ReadAccountFeesRequest, opts ...grpc.CallOption) (AwsCost_ReadAccountFeesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[4], "/blueapi.awscost.v1.AwsCost/ReadAccountFees", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostReadAccountFeesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_ReadAccountFeesClient interface {
	Recv() (*Fee, error)
	grpc.ClientStream
}

type awsCostReadAccountFeesClient struct {
	grpc.ClientStream
}

func (x *awsCostReadAccountFeesClient) Recv() (*Fee, error) {
	m := new(Fee)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *awsCostClient) ReadCompanyFees(ctx context.Context, in *ReadCompanyFeesRequest, opts ...grpc.CallOption) (AwsCost_ReadCompanyFeesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[5], "/blueapi.awscost.v1.AwsCost/ReadCompanyFees", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostReadCompanyFeesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_ReadCompanyFeesClient interface {
	Recv() (*Fee, error)
	grpc.ClientStream
}

type awsCostReadCompanyFeesClient struct {
	grpc.ClientStream
}

func (x *awsCostReadCompanyFeesClient) Recv() (*Fee, error) {
	m := new(Fee)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *awsCostClient) ReadBillingGroupFees(ctx context.Context, in *ReadBillingGroupFeesRequest, opts ...grpc.CallOption) (AwsCost_ReadBillingGroupFeesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[6], "/blueapi.awscost.v1.AwsCost/ReadBillingGroupFees", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostReadBillingGroupFeesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_ReadBillingGroupFeesClient interface {
	Recv() (*Fee, error)
	grpc.ClientStream
}

type awsCostReadBillingGroupFeesClient struct {
	grpc.ClientStream
}

func (x *awsCostReadBillingGroupFeesClient) Recv() (*Fee, error) {
	m := new(Fee)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *awsCostClient) ReadFees(ctx context.Context, in *ReadFeesRequest, opts ...grpc.CallOption) (AwsCost_ReadFeesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AwsCost_ServiceDesc.Streams[7], "/blueapi.awscost.v1.AwsCost/ReadFees", opts...)
	if err != nil {
		return nil, err
	}
	x := &awsCostReadFeesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AwsCost_ReadFeesClient interface {
	Recv() (*Fee, error)
	grpc.ClientStream
}

type awsCostReadFeesClient struct {
	grpc.ClientStream
}

func (x *awsCostReadFeesClient) Recv() (*Fee, error) {
	m := new(Fee)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AwsCostServer is the server API for AwsCost service.
// All implementations must embed UnimplementedAwsCostServer
// for forward compatibility
type AwsCostServer interface {
	// Reads the usage-based cost details of an AWS account. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	ReadAccountCosts(*ReadAccountCostsRequest, AwsCost_ReadAccountCostsServer) error
	// Reads the usage-based cost details of a company. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	ReadCompanyCosts(*ReadCompanyCostsRequest, AwsCost_ReadCompanyCostsServer) error
	// Reads the usage-based cost details of a billing group. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	ReadBillingGroupCosts(*ReadBillingGroupCostsRequest, AwsCost_ReadBillingGroupCostsServer) error
	// Reads the usage-based cost details of an organization (Ripple) or company (Wave).
	// If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadCosts(*ReadCostsRequest, AwsCost_ReadCostsServer) error
	// Reads the non-usaged-based details of an AWS account. This API covers non-usage-based
	// fees, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	ReadAccountFees(*ReadAccountFeesRequest, AwsCost_ReadAccountFeesServer) error
	// Reads the non-usage-based details of a company. This API covers non-usage-based
	// fees, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	ReadCompanyFees(*ReadCompanyFeesRequest, AwsCost_ReadCompanyFeesServer) error
	// Reads the non-usage-based details of a billing group. This API covers non-usage-based
	// fees, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime range
	// parameters are not set, month-to-date (current month) will be returned.
	ReadBillingGroupFees(*ReadBillingGroupFeesRequest, AwsCost_ReadBillingGroupFeesServer) error
	// Reads the non-usage-based details of an organization (Ripple) or company (Wave). This API covers
	// non-usage-based fees, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime
	// range parameters are not set, month-to-date (current month) will be returned.
	ReadFees(*ReadFeesRequest, AwsCost_ReadFeesServer) error
	mustEmbedUnimplementedAwsCostServer()
}

// UnimplementedAwsCostServer must be embedded to have forward compatible implementations.
type UnimplementedAwsCostServer struct {
}

func (UnimplementedAwsCostServer) ReadAccountCosts(*ReadAccountCostsRequest, AwsCost_ReadAccountCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadAccountCosts not implemented")
}
func (UnimplementedAwsCostServer) ReadCompanyCosts(*ReadCompanyCostsRequest, AwsCost_ReadCompanyCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadCompanyCosts not implemented")
}
func (UnimplementedAwsCostServer) ReadBillingGroupCosts(*ReadBillingGroupCostsRequest, AwsCost_ReadBillingGroupCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadBillingGroupCosts not implemented")
}
func (UnimplementedAwsCostServer) ReadCosts(*ReadCostsRequest, AwsCost_ReadCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadCosts not implemented")
}
func (UnimplementedAwsCostServer) ReadAccountFees(*ReadAccountFeesRequest, AwsCost_ReadAccountFeesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadAccountFees not implemented")
}
func (UnimplementedAwsCostServer) ReadCompanyFees(*ReadCompanyFeesRequest, AwsCost_ReadCompanyFeesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadCompanyFees not implemented")
}
func (UnimplementedAwsCostServer) ReadBillingGroupFees(*ReadBillingGroupFeesRequest, AwsCost_ReadBillingGroupFeesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadBillingGroupFees not implemented")
}
func (UnimplementedAwsCostServer) ReadFees(*ReadFeesRequest, AwsCost_ReadFeesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFees not implemented")
}
func (UnimplementedAwsCostServer) mustEmbedUnimplementedAwsCostServer() {}

// UnsafeAwsCostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AwsCostServer will
// result in compilation errors.
type UnsafeAwsCostServer interface {
	mustEmbedUnimplementedAwsCostServer()
}

func RegisterAwsCostServer(s grpc.ServiceRegistrar, srv AwsCostServer) {
	s.RegisterService(&AwsCost_ServiceDesc, srv)
}

func _AwsCost_ReadAccountCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadAccountCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).ReadAccountCosts(m, &awsCostReadAccountCostsServer{stream})
}

type AwsCost_ReadAccountCostsServer interface {
	Send(*Cost) error
	grpc.ServerStream
}

type awsCostReadAccountCostsServer struct {
	grpc.ServerStream
}

func (x *awsCostReadAccountCostsServer) Send(m *Cost) error {
	return x.ServerStream.SendMsg(m)
}

func _AwsCost_ReadCompanyCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadCompanyCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).ReadCompanyCosts(m, &awsCostReadCompanyCostsServer{stream})
}

type AwsCost_ReadCompanyCostsServer interface {
	Send(*Cost) error
	grpc.ServerStream
}

type awsCostReadCompanyCostsServer struct {
	grpc.ServerStream
}

func (x *awsCostReadCompanyCostsServer) Send(m *Cost) error {
	return x.ServerStream.SendMsg(m)
}

func _AwsCost_ReadBillingGroupCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadBillingGroupCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).ReadBillingGroupCosts(m, &awsCostReadBillingGroupCostsServer{stream})
}

type AwsCost_ReadBillingGroupCostsServer interface {
	Send(*Cost) error
	grpc.ServerStream
}

type awsCostReadBillingGroupCostsServer struct {
	grpc.ServerStream
}

func (x *awsCostReadBillingGroupCostsServer) Send(m *Cost) error {
	return x.ServerStream.SendMsg(m)
}

func _AwsCost_ReadCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).ReadCosts(m, &awsCostReadCostsServer{stream})
}

type AwsCost_ReadCostsServer interface {
	Send(*Cost) error
	grpc.ServerStream
}

type awsCostReadCostsServer struct {
	grpc.ServerStream
}

func (x *awsCostReadCostsServer) Send(m *Cost) error {
	return x.ServerStream.SendMsg(m)
}

func _AwsCost_ReadAccountFees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadAccountFeesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).ReadAccountFees(m, &awsCostReadAccountFeesServer{stream})
}

type AwsCost_ReadAccountFeesServer interface {
	Send(*Fee) error
	grpc.ServerStream
}

type awsCostReadAccountFeesServer struct {
	grpc.ServerStream
}

func (x *awsCostReadAccountFeesServer) Send(m *Fee) error {
	return x.ServerStream.SendMsg(m)
}

func _AwsCost_ReadCompanyFees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadCompanyFeesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).ReadCompanyFees(m, &awsCostReadCompanyFeesServer{stream})
}

type AwsCost_ReadCompanyFeesServer interface {
	Send(*Fee) error
	grpc.ServerStream
}

type awsCostReadCompanyFeesServer struct {
	grpc.ServerStream
}

func (x *awsCostReadCompanyFeesServer) Send(m *Fee) error {
	return x.ServerStream.SendMsg(m)
}

func _AwsCost_ReadBillingGroupFees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadBillingGroupFeesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).ReadBillingGroupFees(m, &awsCostReadBillingGroupFeesServer{stream})
}

type AwsCost_ReadBillingGroupFeesServer interface {
	Send(*Fee) error
	grpc.ServerStream
}

type awsCostReadBillingGroupFeesServer struct {
	grpc.ServerStream
}

func (x *awsCostReadBillingGroupFeesServer) Send(m *Fee) error {
	return x.ServerStream.SendMsg(m)
}

func _AwsCost_ReadFees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFeesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AwsCostServer).ReadFees(m, &awsCostReadFeesServer{stream})
}

type AwsCost_ReadFeesServer interface {
	Send(*Fee) error
	grpc.ServerStream
}

type awsCostReadFeesServer struct {
	grpc.ServerStream
}

func (x *awsCostReadFeesServer) Send(m *Fee) error {
	return x.ServerStream.SendMsg(m)
}

// AwsCost_ServiceDesc is the grpc.ServiceDesc for AwsCost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AwsCost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.awscost.v1.AwsCost",
	HandlerType: (*AwsCostServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadAccountCosts",
			Handler:       _AwsCost_ReadAccountCosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadCompanyCosts",
			Handler:       _AwsCost_ReadCompanyCosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadBillingGroupCosts",
			Handler:       _AwsCost_ReadBillingGroupCosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadCosts",
			Handler:       _AwsCost_ReadCosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadAccountFees",
			Handler:       _AwsCost_ReadAccountFees_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadCompanyFees",
			Handler:       _AwsCost_ReadCompanyFees_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadBillingGroupFees",
			Handler:       _AwsCost_ReadBillingGroupFees_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadFees",
			Handler:       _AwsCost_ReadFees_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "awscost/v1/awscost.proto",
}
