// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package awscost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AwsCostClient is the client API for AwsCost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AwsCostClient interface {
	GetCosts(ctx context.Context, in *GetCostsRequest, opts ...grpc.CallOption) (*GetCostsReply, error)
}

type awsCostClient struct {
	cc grpc.ClientConnInterface
}

func NewAwsCostClient(cc grpc.ClientConnInterface) AwsCostClient {
	return &awsCostClient{cc}
}

func (c *awsCostClient) GetCosts(ctx context.Context, in *GetCostsRequest, opts ...grpc.CallOption) (*GetCostsReply, error) {
	out := new(GetCostsReply)
	err := c.cc.Invoke(ctx, "/blueapi.awscost.v1.AwsCost/GetCosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AwsCostServer is the server API for AwsCost service.
// All implementations must embed UnimplementedAwsCostServer
// for forward compatibility
type AwsCostServer interface {
	GetCosts(context.Context, *GetCostsRequest) (*GetCostsReply, error)
	mustEmbedUnimplementedAwsCostServer()
}

// UnimplementedAwsCostServer must be embedded to have forward compatible implementations.
type UnimplementedAwsCostServer struct {
}

func (UnimplementedAwsCostServer) GetCosts(context.Context, *GetCostsRequest) (*GetCostsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCosts not implemented")
}
func (UnimplementedAwsCostServer) mustEmbedUnimplementedAwsCostServer() {}

// UnsafeAwsCostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AwsCostServer will
// result in compilation errors.
type UnsafeAwsCostServer interface {
	mustEmbedUnimplementedAwsCostServer()
}

func RegisterAwsCostServer(s grpc.ServiceRegistrar, srv AwsCostServer) {
	s.RegisterService(&AwsCost_ServiceDesc, srv)
}

func _AwsCost_GetCosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsCostServer).GetCosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.awscost.v1.AwsCost/GetCosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsCostServer).GetCosts(ctx, req.(*GetCostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AwsCost_ServiceDesc is the grpc.ServiceDesc for AwsCost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AwsCost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.awscost.v1.AwsCost",
	HandlerType: (*AwsCostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCosts",
			Handler:    _AwsCost_GetCosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "awscost/v1/awscost.proto",
}
