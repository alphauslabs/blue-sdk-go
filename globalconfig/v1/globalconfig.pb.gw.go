// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: globalconfig/v1/globalconfig.proto

/*
Package globalconfig is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package globalconfig

import (
	"context"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray
var _ = metadata.Join

func request_GlobalConfig_StreamReadWaveConfig_0(ctx context.Context, marshaler runtime.Marshaler, client GlobalConfigClient, req *http.Request, pathParams map[string]string) (GlobalConfig_StreamReadWaveConfigClient, runtime.ServerMetadata, error) {
	var protoReq StreamConfigRequest
	var metadata runtime.ServerMetadata

	stream, err := client.StreamReadWaveConfig(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil

}

func request_GlobalConfig_StreamReadRippleConfig_0(ctx context.Context, marshaler runtime.Marshaler, client GlobalConfigClient, req *http.Request, pathParams map[string]string) (GlobalConfig_StreamReadRippleConfigClient, runtime.ServerMetadata, error) {
	var protoReq StreamConfigRequest
	var metadata runtime.ServerMetadata

	stream, err := client.StreamReadRippleConfig(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil

}

// RegisterGlobalConfigHandlerServer registers the http handlers for service GlobalConfig to "mux".
// UnaryRPC     :call GlobalConfigServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterGlobalConfigHandlerFromEndpoint instead.
func RegisterGlobalConfigHandlerServer(ctx context.Context, mux *runtime.ServeMux, server GlobalConfigServer) error {

	mux.Handle("GET", pattern_GlobalConfig_StreamReadWaveConfig_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		err := status.Error(codes.Unimplemented, "streaming calls are not yet supported in the in-process transport")
		_, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
		return
	})

	mux.Handle("GET", pattern_GlobalConfig_StreamReadRippleConfig_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		err := status.Error(codes.Unimplemented, "streaming calls are not yet supported in the in-process transport")
		_, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
		return
	})

	return nil
}

// RegisterGlobalConfigHandlerFromEndpoint is same as RegisterGlobalConfigHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterGlobalConfigHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterGlobalConfigHandler(ctx, mux, conn)
}

// RegisterGlobalConfigHandler registers the http handlers for service GlobalConfig to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterGlobalConfigHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterGlobalConfigHandlerClient(ctx, mux, NewGlobalConfigClient(conn))
}

// RegisterGlobalConfigHandlerClient registers the http handlers for service GlobalConfig
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "GlobalConfigClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "GlobalConfigClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "GlobalConfigClient" to call the correct interceptors.
func RegisterGlobalConfigHandlerClient(ctx context.Context, mux *runtime.ServeMux, client GlobalConfigClient) error {

	mux.Handle("GET", pattern_GlobalConfig_StreamReadWaveConfig_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req, "/blueapi.globalconfig.v1.GlobalConfig/StreamReadWaveConfig", runtime.WithHTTPPathPattern("/wave/v1/config"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_GlobalConfig_StreamReadWaveConfig_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_GlobalConfig_StreamReadWaveConfig_0(ctx, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_GlobalConfig_StreamReadRippleConfig_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req, "/blueapi.globalconfig.v1.GlobalConfig/StreamReadRippleConfig", runtime.WithHTTPPathPattern("/ripple/v1/config"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_GlobalConfig_StreamReadRippleConfig_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_GlobalConfig_StreamReadRippleConfig_0(ctx, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_GlobalConfig_StreamReadWaveConfig_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"wave", "v1", "config"}, ""))

	pattern_GlobalConfig_StreamReadRippleConfig_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"ripple", "v1", "config"}, ""))
)

var (
	forward_GlobalConfig_StreamReadWaveConfig_0 = runtime.ForwardResponseStream

	forward_GlobalConfig_StreamReadRippleConfig_0 = runtime.ForwardResponseStream
)
