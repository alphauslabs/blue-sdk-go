// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package globalconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GlobalConfigClient is the client API for GlobalConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalConfigClient interface {
	StreamReadWaveConfig(ctx context.Context, in *StreamConfigRequest, opts ...grpc.CallOption) (GlobalConfig_StreamReadWaveConfigClient, error)
	StreamReadRippleConfig(ctx context.Context, in *StreamConfigRequest, opts ...grpc.CallOption) (GlobalConfig_StreamReadRippleConfigClient, error)
}

type globalConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalConfigClient(cc grpc.ClientConnInterface) GlobalConfigClient {
	return &globalConfigClient{cc}
}

func (c *globalConfigClient) StreamReadWaveConfig(ctx context.Context, in *StreamConfigRequest, opts ...grpc.CallOption) (GlobalConfig_StreamReadWaveConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &GlobalConfig_ServiceDesc.Streams[0], "/blueapi.globalconfig.v1.GlobalConfig/StreamReadWaveConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &globalConfigStreamReadWaveConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlobalConfig_StreamReadWaveConfigClient interface {
	Recv() (*StreamListConfigResponse, error)
	grpc.ClientStream
}

type globalConfigStreamReadWaveConfigClient struct {
	grpc.ClientStream
}

func (x *globalConfigStreamReadWaveConfigClient) Recv() (*StreamListConfigResponse, error) {
	m := new(StreamListConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *globalConfigClient) StreamReadRippleConfig(ctx context.Context, in *StreamConfigRequest, opts ...grpc.CallOption) (GlobalConfig_StreamReadRippleConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &GlobalConfig_ServiceDesc.Streams[1], "/blueapi.globalconfig.v1.GlobalConfig/StreamReadRippleConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &globalConfigStreamReadRippleConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlobalConfig_StreamReadRippleConfigClient interface {
	Recv() (*StreamListConfigResponse, error)
	grpc.ClientStream
}

type globalConfigStreamReadRippleConfigClient struct {
	grpc.ClientStream
}

func (x *globalConfigStreamReadRippleConfigClient) Recv() (*StreamListConfigResponse, error) {
	m := new(StreamListConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GlobalConfigServer is the server API for GlobalConfig service.
// All implementations must embed UnimplementedGlobalConfigServer
// for forward compatibility
type GlobalConfigServer interface {
	StreamReadWaveConfig(*StreamConfigRequest, GlobalConfig_StreamReadWaveConfigServer) error
	StreamReadRippleConfig(*StreamConfigRequest, GlobalConfig_StreamReadRippleConfigServer) error
	mustEmbedUnimplementedGlobalConfigServer()
}

// UnimplementedGlobalConfigServer must be embedded to have forward compatible implementations.
type UnimplementedGlobalConfigServer struct {
}

func (UnimplementedGlobalConfigServer) StreamReadWaveConfig(*StreamConfigRequest, GlobalConfig_StreamReadWaveConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReadWaveConfig not implemented")
}
func (UnimplementedGlobalConfigServer) StreamReadRippleConfig(*StreamConfigRequest, GlobalConfig_StreamReadRippleConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReadRippleConfig not implemented")
}
func (UnimplementedGlobalConfigServer) mustEmbedUnimplementedGlobalConfigServer() {}

// UnsafeGlobalConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalConfigServer will
// result in compilation errors.
type UnsafeGlobalConfigServer interface {
	mustEmbedUnimplementedGlobalConfigServer()
}

func RegisterGlobalConfigServer(s grpc.ServiceRegistrar, srv GlobalConfigServer) {
	s.RegisterService(&GlobalConfig_ServiceDesc, srv)
}

func _GlobalConfig_StreamReadWaveConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamConfigRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlobalConfigServer).StreamReadWaveConfig(m, &globalConfigStreamReadWaveConfigServer{stream})
}

type GlobalConfig_StreamReadWaveConfigServer interface {
	Send(*StreamListConfigResponse) error
	grpc.ServerStream
}

type globalConfigStreamReadWaveConfigServer struct {
	grpc.ServerStream
}

func (x *globalConfigStreamReadWaveConfigServer) Send(m *StreamListConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GlobalConfig_StreamReadRippleConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamConfigRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlobalConfigServer).StreamReadRippleConfig(m, &globalConfigStreamReadRippleConfigServer{stream})
}

type GlobalConfig_StreamReadRippleConfigServer interface {
	Send(*StreamListConfigResponse) error
	grpc.ServerStream
}

type globalConfigStreamReadRippleConfigServer struct {
	grpc.ServerStream
}

func (x *globalConfigStreamReadRippleConfigServer) Send(m *StreamListConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GlobalConfig_ServiceDesc is the grpc.ServiceDesc for GlobalConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.globalconfig.v1.GlobalConfig",
	HandlerType: (*GlobalConfigServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReadWaveConfig",
			Handler:       _GlobalConfig_StreamReadWaveConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamReadRippleConfig",
			Handler:       _GlobalConfig_StreamReadRippleConfig_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "globalconfig/v1/globalconfig.proto",
}
