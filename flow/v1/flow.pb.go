// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: flow/v1/flow.proto

package flow

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for the Flow.GetInfo rpc.
type GetInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	mi := &file_flow_v1_flow_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{0}
}

// Request message for the Flow.CreateSettings rpc.
type CreateSettingsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The id of the payer.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required. Account scope determines if the account is payer or linked account. Valid values are `payer` or `linked`.
	AccountScope string `protobuf:"bytes,2,opt,name=accountScope,proto3" json:"accountScope,omitempty"`
	// Required. Customization setting for SP. Valid values are `COMPUTE_SP` or `EC2_INSTANCE_SP`.
	Customization string `protobuf:"bytes,3,opt,name=customization,proto3" json:"customization,omitempty"`
	// Required. Term of the SP. Valid values are `ONE_YEAR` or `THREE_YEARS`.
	PlanTerm string `protobuf:"bytes,4,opt,name=planTerm,proto3" json:"planTerm,omitempty"`
	// Required. Payment option for the SP. Valid values are `ALL_UPFRONT`, `PARTIAL_UPFRONT`, or `NO_UPFRONT`.
	PaymentOption string `protobuf:"bytes,5,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	// Required. Lookback period for recommendation. Valid values are `SEVEN_DAYS`, `THIRTY_DAYS`, or `SIXTY_DAYS`.
	LookBackPeriod string `protobuf:"bytes,6,opt,name=lookBackPeriod,proto3" json:"lookBackPeriod,omitempty"`
	// Optional. If EC2 Instance SP is selected in Customization, request will include list of instance family
	InstanceFamily string `protobuf:"bytes,7,opt,name=instanceFamily,proto3" json:"instanceFamily,omitempty"`
	// Optional. Annual budget input for SP.
	AnnualBudget float64 `protobuf:"fixed64,8,opt,name=annualBudget,proto3" json:"annualBudget,omitempty"`
	// Optional. Purchase approval from the payer for the SP. Default value is `false`.
	Approval      bool `protobuf:"varint,9,opt,name=approval,proto3" json:"approval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSettingsRequest) Reset() {
	*x = CreateSettingsRequest{}
	mi := &file_flow_v1_flow_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSettingsRequest) ProtoMessage() {}

func (x *CreateSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSettingsRequest.ProtoReflect.Descriptor instead.
func (*CreateSettingsRequest) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSettingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateSettingsRequest) GetAccountScope() string {
	if x != nil {
		return x.AccountScope
	}
	return ""
}

func (x *CreateSettingsRequest) GetCustomization() string {
	if x != nil {
		return x.Customization
	}
	return ""
}

func (x *CreateSettingsRequest) GetPlanTerm() string {
	if x != nil {
		return x.PlanTerm
	}
	return ""
}

func (x *CreateSettingsRequest) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *CreateSettingsRequest) GetLookBackPeriod() string {
	if x != nil {
		return x.LookBackPeriod
	}
	return ""
}

func (x *CreateSettingsRequest) GetInstanceFamily() string {
	if x != nil {
		return x.InstanceFamily
	}
	return ""
}

func (x *CreateSettingsRequest) GetAnnualBudget() float64 {
	if x != nil {
		return x.AnnualBudget
	}
	return 0
}

func (x *CreateSettingsRequest) GetApproval() bool {
	if x != nil {
		return x.Approval
	}
	return false
}

// Request message for the Flow.UpdateSettings rpc.
type UpdateSettingsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The id of the payer to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. Update account scope (payer or linked).
	AccountScope *string `protobuf:"bytes,2,opt,name=accountScope,proto3,oneof" json:"accountScope,omitempty"`
	// Optional. Update customization setting.
	Customization *string `protobuf:"bytes,3,opt,name=customization,proto3,oneof" json:"customization,omitempty"`
	// Optional. Update term of the SP.
	PlanTerm *string `protobuf:"bytes,4,opt,name=planTerm,proto3,oneof" json:"planTerm,omitempty"`
	// Optional. Update payment option.
	PaymentOption *string `protobuf:"bytes,5,opt,name=paymentOption,proto3,oneof" json:"paymentOption,omitempty"`
	// Optional. Update lookback period.
	LookBackPeriod *string `protobuf:"bytes,6,opt,name=lookBackPeriod,proto3,oneof" json:"lookBackPeriod,omitempty"`
	// Optional. Update list of instance families.
	InstanceFamily *string `protobuf:"bytes,7,opt,name=instanceFamily,proto3,oneof" json:"instanceFamily,omitempty"`
	// Optional. Update annual budget.
	AnnualBudget *float64 `protobuf:"fixed64,8,opt,name=annualBudget,proto3,oneof" json:"annualBudget,omitempty"`
	// Optional. Update purchase approval.
	Approval      *bool `protobuf:"varint,9,opt,name=approval,proto3,oneof" json:"approval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSettingsRequest) Reset() {
	*x = UpdateSettingsRequest{}
	mi := &file_flow_v1_flow_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingsRequest) ProtoMessage() {}

func (x *UpdateSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSettingsRequest) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateSettingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSettingsRequest) GetAccountScope() string {
	if x != nil && x.AccountScope != nil {
		return *x.AccountScope
	}
	return ""
}

func (x *UpdateSettingsRequest) GetCustomization() string {
	if x != nil && x.Customization != nil {
		return *x.Customization
	}
	return ""
}

func (x *UpdateSettingsRequest) GetPlanTerm() string {
	if x != nil && x.PlanTerm != nil {
		return *x.PlanTerm
	}
	return ""
}

func (x *UpdateSettingsRequest) GetPaymentOption() string {
	if x != nil && x.PaymentOption != nil {
		return *x.PaymentOption
	}
	return ""
}

func (x *UpdateSettingsRequest) GetLookBackPeriod() string {
	if x != nil && x.LookBackPeriod != nil {
		return *x.LookBackPeriod
	}
	return ""
}

func (x *UpdateSettingsRequest) GetInstanceFamily() string {
	if x != nil && x.InstanceFamily != nil {
		return *x.InstanceFamily
	}
	return ""
}

func (x *UpdateSettingsRequest) GetAnnualBudget() float64 {
	if x != nil && x.AnnualBudget != nil {
		return *x.AnnualBudget
	}
	return 0
}

func (x *UpdateSettingsRequest) GetApproval() bool {
	if x != nil && x.Approval != nil {
		return *x.Approval
	}
	return false
}

// Request message for fetching previous settings configuration of a user.
type GetSettingsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The id of the payer to fetch settings for.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSettingsRequest) Reset() {
	*x = GetSettingsRequest{}
	mi := &file_flow_v1_flow_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsRequest) ProtoMessage() {}

func (x *GetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{3}
}

func (x *GetSettingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response message for the Flow.GetInfo rpc.
type GetInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      string                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInfoResponse) Reset() {
	*x = GetInfoResponse{}
	mi := &file_flow_v1_flow_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoResponse) ProtoMessage() {}

func (x *GetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{4}
}

func (x *GetInfoResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Response message for the Flow.CreateSettings rpc.
type CreateSettingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      string                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSettingsResponse) Reset() {
	*x = CreateSettingsResponse{}
	mi := &file_flow_v1_flow_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSettingsResponse) ProtoMessage() {}

func (x *CreateSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSettingsResponse.ProtoReflect.Descriptor instead.
func (*CreateSettingsResponse) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{5}
}

func (x *CreateSettingsResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type UpdateSettingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      string                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSettingsResponse) Reset() {
	*x = UpdateSettingsResponse{}
	mi := &file_flow_v1_flow_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingsResponse) ProtoMessage() {}

func (x *UpdateSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdateSettingsResponse) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateSettingsResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Response message for fetching previous settings configuration of a user.
type GetSettingsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountScope   string                 `protobuf:"bytes,2,opt,name=accountScope,proto3" json:"accountScope,omitempty"`
	Customization  string                 `protobuf:"bytes,3,opt,name=customization,proto3" json:"customization,omitempty"`
	PlanTerm       string                 `protobuf:"bytes,4,opt,name=planTerm,proto3" json:"planTerm,omitempty"`
	PaymentOption  string                 `protobuf:"bytes,5,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	LookBackPeriod string                 `protobuf:"bytes,6,opt,name=lookBackPeriod,proto3" json:"lookBackPeriod,omitempty"`
	InstanceFamily string                 `protobuf:"bytes,7,opt,name=instanceFamily,proto3" json:"instanceFamily,omitempty"`
	AnnualBudget   float64                `protobuf:"fixed64,8,opt,name=annualBudget,proto3" json:"annualBudget,omitempty"`
	Approval       bool                   `protobuf:"varint,9,opt,name=approval,proto3" json:"approval,omitempty"`
	LastUpdated    string                 `protobuf:"bytes,10,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetSettingsResponse) Reset() {
	*x = GetSettingsResponse{}
	mi := &file_flow_v1_flow_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsResponse) ProtoMessage() {}

func (x *GetSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetSettingsResponse) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{7}
}

func (x *GetSettingsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetSettingsResponse) GetAccountScope() string {
	if x != nil {
		return x.AccountScope
	}
	return ""
}

func (x *GetSettingsResponse) GetCustomization() string {
	if x != nil {
		return x.Customization
	}
	return ""
}

func (x *GetSettingsResponse) GetPlanTerm() string {
	if x != nil {
		return x.PlanTerm
	}
	return ""
}

func (x *GetSettingsResponse) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *GetSettingsResponse) GetLookBackPeriod() string {
	if x != nil {
		return x.LookBackPeriod
	}
	return ""
}

func (x *GetSettingsResponse) GetInstanceFamily() string {
	if x != nil {
		return x.InstanceFamily
	}
	return ""
}

func (x *GetSettingsResponse) GetAnnualBudget() float64 {
	if x != nil {
		return x.AnnualBudget
	}
	return 0
}

func (x *GetSettingsResponse) GetApproval() bool {
	if x != nil {
		return x.Approval
	}
	return false
}

func (x *GetSettingsResponse) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

var File_flow_v1_flow_proto protoreflect.FileDescriptor

var file_flow_v1_flow_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc3, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x22, 0xf1, 0x03, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63,
	0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x42,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x08, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x6c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x22,
	0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xe3, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f,
	0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x75,
	0x61, 0x6c, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x32, 0xf0, 0x04, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x5e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x7a, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x7f, 0x0a, 0x0e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x1a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x73, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x1a, 0x95, 0x01, 0x92, 0x41, 0x91, 0x01, 0x12, 0x41, 0x28, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x29, 0x20, 0x46, 0x6c, 0x6f, 0x77, 0x20, 0x41, 0x50, 0x49, 0x2e, 0x20, 0x42, 0x61, 0x73, 0x65,
	0x20, 0x55, 0x52, 0x4c, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x6d, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x4c, 0x0a, 0x12, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62,
	0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x6d,
	0x61, 0x69, 0x6e, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x42, 0x48, 0x0a, 0x16, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x42, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x23,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x6c, 0x6f, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_flow_v1_flow_proto_rawDescOnce sync.Once
	file_flow_v1_flow_proto_rawDescData []byte
)

func file_flow_v1_flow_proto_rawDescGZIP() []byte {
	file_flow_v1_flow_proto_rawDescOnce.Do(func() {
		file_flow_v1_flow_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_flow_v1_flow_proto_rawDesc), len(file_flow_v1_flow_proto_rawDesc)))
	})
	return file_flow_v1_flow_proto_rawDescData
}

var file_flow_v1_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_flow_v1_flow_proto_goTypes = []any{
	(*GetInfoRequest)(nil),         // 0: blueapi.flow.v1.GetInfoRequest
	(*CreateSettingsRequest)(nil),  // 1: blueapi.flow.v1.CreateSettingsRequest
	(*UpdateSettingsRequest)(nil),  // 2: blueapi.flow.v1.UpdateSettingsRequest
	(*GetSettingsRequest)(nil),     // 3: blueapi.flow.v1.GetSettingsRequest
	(*GetInfoResponse)(nil),        // 4: blueapi.flow.v1.GetInfoResponse
	(*CreateSettingsResponse)(nil), // 5: blueapi.flow.v1.CreateSettingsResponse
	(*UpdateSettingsResponse)(nil), // 6: blueapi.flow.v1.UpdateSettingsResponse
	(*GetSettingsResponse)(nil),    // 7: blueapi.flow.v1.GetSettingsResponse
}
var file_flow_v1_flow_proto_depIdxs = []int32{
	0, // 0: blueapi.flow.v1.Flow.GetInfo:input_type -> blueapi.flow.v1.GetInfoRequest
	1, // 1: blueapi.flow.v1.Flow.CreateSettings:input_type -> blueapi.flow.v1.CreateSettingsRequest
	2, // 2: blueapi.flow.v1.Flow.UpdateSettings:input_type -> blueapi.flow.v1.UpdateSettingsRequest
	3, // 3: blueapi.flow.v1.Flow.GetSettings:input_type -> blueapi.flow.v1.GetSettingsRequest
	4, // 4: blueapi.flow.v1.Flow.GetInfo:output_type -> blueapi.flow.v1.GetInfoResponse
	5, // 5: blueapi.flow.v1.Flow.CreateSettings:output_type -> blueapi.flow.v1.CreateSettingsResponse
	6, // 6: blueapi.flow.v1.Flow.UpdateSettings:output_type -> blueapi.flow.v1.UpdateSettingsResponse
	7, // 7: blueapi.flow.v1.Flow.GetSettings:output_type -> blueapi.flow.v1.GetSettingsResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_flow_v1_flow_proto_init() }
func file_flow_v1_flow_proto_init() {
	if File_flow_v1_flow_proto != nil {
		return
	}
	file_flow_v1_flow_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_flow_v1_flow_proto_rawDesc), len(file_flow_v1_flow_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flow_v1_flow_proto_goTypes,
		DependencyIndexes: file_flow_v1_flow_proto_depIdxs,
		MessageInfos:      file_flow_v1_flow_proto_msgTypes,
	}.Build()
	File_flow_v1_flow_proto = out.File
	file_flow_v1_flow_proto_goTypes = nil
	file_flow_v1_flow_proto_depIdxs = nil
}
