// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: flow/v1/flow.proto

package flow

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for the Flow.GetInfo rpc.
type GetInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	mi := &file_flow_v1_flow_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{0}
}

// Request message for the Flow.CreateSettings rpc.
type CreateSettingsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The id of the payer.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required. Account scope determines if the account is payer or linked account. Valid values are `payer` or `linked`.
	AccountScope string `protobuf:"bytes,2,opt,name=accountScope,proto3" json:"accountScope,omitempty"`
	// Required. Customization setting for SP. Valid values are `COMPUTE_SP` or `EC2_INSTANCE_SP`.
	Customization string `protobuf:"bytes,3,opt,name=customization,proto3" json:"customization,omitempty"`
	// Required. Term of the SP. Valid values are `ONE_YEAR` or `THREE_YEARS`.
	PlanTerm string `protobuf:"bytes,4,opt,name=planTerm,proto3" json:"planTerm,omitempty"`
	// Required. Payment option for the SP. Valid values are `ALL_UPFRONT`, `PARTIAL_UPFRONT`, or `NO_UPFRONT`.
	PaymentOption string `protobuf:"bytes,5,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	// Required. Lookback period for recommendation. Valid values are `SEVEN_DAYS`, `THIRTY_DAYS`, or `SIXTY_DAYS`.
	LookBackPeriod string `protobuf:"bytes,6,opt,name=lookBackPeriod,proto3" json:"lookBackPeriod,omitempty"`
	// Optional. If EC2 Instance SP is selected in Customization, request will include list of instance family
	InstanceFamily string `protobuf:"bytes,7,opt,name=instanceFamily,proto3" json:"instanceFamily,omitempty"`
	// Optional. Annual budget input for SP.
	AnnualBudget float64 `protobuf:"fixed64,8,opt,name=annualBudget,proto3" json:"annualBudget,omitempty"`
	// Optional. Purchase approval from the payer for the SP. Default value is `false`.
	Approval bool `protobuf:"varint,9,opt,name=approval,proto3" json:"approval,omitempty"`
	// Required. Payer account ID
	PayerId       string `protobuf:"bytes,10,opt,name=payerId,proto3" json:"payerId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSettingsRequest) Reset() {
	*x = CreateSettingsRequest{}
	mi := &file_flow_v1_flow_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSettingsRequest) ProtoMessage() {}

func (x *CreateSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSettingsRequest.ProtoReflect.Descriptor instead.
func (*CreateSettingsRequest) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSettingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateSettingsRequest) GetAccountScope() string {
	if x != nil {
		return x.AccountScope
	}
	return ""
}

func (x *CreateSettingsRequest) GetCustomization() string {
	if x != nil {
		return x.Customization
	}
	return ""
}

func (x *CreateSettingsRequest) GetPlanTerm() string {
	if x != nil {
		return x.PlanTerm
	}
	return ""
}

func (x *CreateSettingsRequest) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *CreateSettingsRequest) GetLookBackPeriod() string {
	if x != nil {
		return x.LookBackPeriod
	}
	return ""
}

func (x *CreateSettingsRequest) GetInstanceFamily() string {
	if x != nil {
		return x.InstanceFamily
	}
	return ""
}

func (x *CreateSettingsRequest) GetAnnualBudget() float64 {
	if x != nil {
		return x.AnnualBudget
	}
	return 0
}

func (x *CreateSettingsRequest) GetApproval() bool {
	if x != nil {
		return x.Approval
	}
	return false
}

func (x *CreateSettingsRequest) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

// Request message for the Flow.UpdateSettings rpc.
type UpdateSettingsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The id of the payer to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. Update account scope (payer or linked).
	AccountScope *string `protobuf:"bytes,2,opt,name=accountScope,proto3,oneof" json:"accountScope,omitempty"`
	// Optional. Update customization setting.
	Customization *string `protobuf:"bytes,3,opt,name=customization,proto3,oneof" json:"customization,omitempty"`
	// Optional. Update term of the SP.
	PlanTerm *string `protobuf:"bytes,4,opt,name=planTerm,proto3,oneof" json:"planTerm,omitempty"`
	// Optional. Update payment option.
	PaymentOption *string `protobuf:"bytes,5,opt,name=paymentOption,proto3,oneof" json:"paymentOption,omitempty"`
	// Optional. Update lookback period.
	LookBackPeriod *string `protobuf:"bytes,6,opt,name=lookBackPeriod,proto3,oneof" json:"lookBackPeriod,omitempty"`
	// Optional. Update list of instance families.
	InstanceFamily *string `protobuf:"bytes,7,opt,name=instanceFamily,proto3,oneof" json:"instanceFamily,omitempty"`
	// Optional. Update annual budget.
	AnnualBudget *float64 `protobuf:"fixed64,8,opt,name=annualBudget,proto3,oneof" json:"annualBudget,omitempty"`
	// Optional. Update purchase approval.
	Approval *bool `protobuf:"varint,9,opt,name=approval,proto3,oneof" json:"approval,omitempty"`
	// Optional. Update used payerId.
	PayerId       *string `protobuf:"bytes,10,opt,name=payerId,proto3,oneof" json:"payerId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSettingsRequest) Reset() {
	*x = UpdateSettingsRequest{}
	mi := &file_flow_v1_flow_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingsRequest) ProtoMessage() {}

func (x *UpdateSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSettingsRequest) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateSettingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSettingsRequest) GetAccountScope() string {
	if x != nil && x.AccountScope != nil {
		return *x.AccountScope
	}
	return ""
}

func (x *UpdateSettingsRequest) GetCustomization() string {
	if x != nil && x.Customization != nil {
		return *x.Customization
	}
	return ""
}

func (x *UpdateSettingsRequest) GetPlanTerm() string {
	if x != nil && x.PlanTerm != nil {
		return *x.PlanTerm
	}
	return ""
}

func (x *UpdateSettingsRequest) GetPaymentOption() string {
	if x != nil && x.PaymentOption != nil {
		return *x.PaymentOption
	}
	return ""
}

func (x *UpdateSettingsRequest) GetLookBackPeriod() string {
	if x != nil && x.LookBackPeriod != nil {
		return *x.LookBackPeriod
	}
	return ""
}

func (x *UpdateSettingsRequest) GetInstanceFamily() string {
	if x != nil && x.InstanceFamily != nil {
		return *x.InstanceFamily
	}
	return ""
}

func (x *UpdateSettingsRequest) GetAnnualBudget() float64 {
	if x != nil && x.AnnualBudget != nil {
		return *x.AnnualBudget
	}
	return 0
}

func (x *UpdateSettingsRequest) GetApproval() bool {
	if x != nil && x.Approval != nil {
		return *x.Approval
	}
	return false
}

func (x *UpdateSettingsRequest) GetPayerId() string {
	if x != nil && x.PayerId != nil {
		return *x.PayerId
	}
	return ""
}

// Request message for fetching previous settings configuration of a user.
type GetSettingsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The id of the payer to fetch settings for.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSettingsRequest) Reset() {
	*x = GetSettingsRequest{}
	mi := &file_flow_v1_flow_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsRequest) ProtoMessage() {}

func (x *GetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{3}
}

func (x *GetSettingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetRecommendationDetailsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The id of the payer to fetch recommendation details for.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecommendationDetailsRequest) Reset() {
	*x = GetRecommendationDetailsRequest{}
	mi := &file_flow_v1_flow_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecommendationDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationDetailsRequest) ProtoMessage() {}

func (x *GetRecommendationDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetRecommendationDetailsRequest) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{4}
}

func (x *GetRecommendationDetailsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the Flow.GetCostExplorerAccessTemplateUrl rpc.
// This endpoint only supports the 'apionly' template type.
type GetCostExplorerAccessTemplateUrlRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCostExplorerAccessTemplateUrlRequest) Reset() {
	*x = GetCostExplorerAccessTemplateUrlRequest{}
	mi := &file_flow_v1_flow_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCostExplorerAccessTemplateUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostExplorerAccessTemplateUrlRequest) ProtoMessage() {}

func (x *GetCostExplorerAccessTemplateUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostExplorerAccessTemplateUrlRequest.ProtoReflect.Descriptor instead.
func (*GetCostExplorerAccessTemplateUrlRequest) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{5}
}

// Request message for the Flow.GetSettingsHistory rpc.
type GetSettingsHistoryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The id of the payer to fetch settings history for.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSettingsHistoryRequest) Reset() {
	*x = GetSettingsHistoryRequest{}
	mi := &file_flow_v1_flow_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSettingsHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsHistoryRequest) ProtoMessage() {}

func (x *GetSettingsHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetSettingsHistoryRequest) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{6}
}

func (x *GetSettingsHistoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the Flow.CreateCostExplorerAccess rpc.
// This endpoint only supports the 'apionly' template type.
type CreateCostExplorerAccessRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The target AWS account to validate.
	Target        string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCostExplorerAccessRequest) Reset() {
	*x = CreateCostExplorerAccessRequest{}
	mi := &file_flow_v1_flow_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCostExplorerAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCostExplorerAccessRequest) ProtoMessage() {}

func (x *CreateCostExplorerAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCostExplorerAccessRequest.ProtoReflect.Descriptor instead.
func (*CreateCostExplorerAccessRequest) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{7}
}

func (x *CreateCostExplorerAccessRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// Request message for the Flow.GetDailyUsageCostDetailsRequest rpc.
type GetDailyUsageCostDetailsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The id of the payer to fetch savings plan details for.
	PayerId string `protobuf:"bytes,1,opt,name=payerId,proto3" json:"payerId,omitempty"`
	// Required. The start date of the range for the savings plan details.
	StartDate string `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate,omitempty"`
	// Required. The end date of the range for the savings plan details.
	EndDate       string `protobuf:"bytes,3,opt,name=endDate,proto3" json:"endDate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDailyUsageCostDetailsRequest) Reset() {
	*x = GetDailyUsageCostDetailsRequest{}
	mi := &file_flow_v1_flow_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDailyUsageCostDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyUsageCostDetailsRequest) ProtoMessage() {}

func (x *GetDailyUsageCostDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyUsageCostDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetDailyUsageCostDetailsRequest) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{8}
}

func (x *GetDailyUsageCostDetailsRequest) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

func (x *GetDailyUsageCostDetailsRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetDailyUsageCostDetailsRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// Response message for the Flow.GetInfo rpc.
type GetInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      string                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInfoResponse) Reset() {
	*x = GetInfoResponse{}
	mi := &file_flow_v1_flow_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoResponse) ProtoMessage() {}

func (x *GetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{9}
}

func (x *GetInfoResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Response message for the Flow.CreateSettings rpc.
type CreateSettingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      string                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSettingsResponse) Reset() {
	*x = CreateSettingsResponse{}
	mi := &file_flow_v1_flow_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSettingsResponse) ProtoMessage() {}

func (x *CreateSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSettingsResponse.ProtoReflect.Descriptor instead.
func (*CreateSettingsResponse) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{10}
}

func (x *CreateSettingsResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type UpdateSettingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      string                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSettingsResponse) Reset() {
	*x = UpdateSettingsResponse{}
	mi := &file_flow_v1_flow_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingsResponse) ProtoMessage() {}

func (x *UpdateSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdateSettingsResponse) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateSettingsResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Response message for fetching previous settings configuration of a user.
type GetSettingsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountScope   string                 `protobuf:"bytes,2,opt,name=accountScope,proto3" json:"accountScope,omitempty"`
	Customization  string                 `protobuf:"bytes,3,opt,name=customization,proto3" json:"customization,omitempty"`
	PlanTerm       string                 `protobuf:"bytes,4,opt,name=planTerm,proto3" json:"planTerm,omitempty"`
	PaymentOption  string                 `protobuf:"bytes,5,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	LookBackPeriod string                 `protobuf:"bytes,6,opt,name=lookBackPeriod,proto3" json:"lookBackPeriod,omitempty"`
	InstanceFamily string                 `protobuf:"bytes,7,opt,name=instanceFamily,proto3" json:"instanceFamily,omitempty"`
	AnnualBudget   float64                `protobuf:"fixed64,8,opt,name=annualBudget,proto3" json:"annualBudget,omitempty"`
	Approval       bool                   `protobuf:"varint,9,opt,name=approval,proto3" json:"approval,omitempty"`
	LastUpdated    string                 `protobuf:"bytes,10,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	PayerId        string                 `protobuf:"bytes,11,opt,name=payerId,proto3" json:"payerId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetSettingsResponse) Reset() {
	*x = GetSettingsResponse{}
	mi := &file_flow_v1_flow_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsResponse) ProtoMessage() {}

func (x *GetSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetSettingsResponse) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{12}
}

func (x *GetSettingsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetSettingsResponse) GetAccountScope() string {
	if x != nil {
		return x.AccountScope
	}
	return ""
}

func (x *GetSettingsResponse) GetCustomization() string {
	if x != nil {
		return x.Customization
	}
	return ""
}

func (x *GetSettingsResponse) GetPlanTerm() string {
	if x != nil {
		return x.PlanTerm
	}
	return ""
}

func (x *GetSettingsResponse) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *GetSettingsResponse) GetLookBackPeriod() string {
	if x != nil {
		return x.LookBackPeriod
	}
	return ""
}

func (x *GetSettingsResponse) GetInstanceFamily() string {
	if x != nil {
		return x.InstanceFamily
	}
	return ""
}

func (x *GetSettingsResponse) GetAnnualBudget() float64 {
	if x != nil {
		return x.AnnualBudget
	}
	return 0
}

func (x *GetSettingsResponse) GetApproval() bool {
	if x != nil {
		return x.Approval
	}
	return false
}

func (x *GetSettingsResponse) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *GetSettingsResponse) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

type GetRecommendationDetailsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique ID of the recommendation details entry
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Projected monthly on-demand spend without Savings Plans, normalized from lookback period
	CurrentMonthlyOnDemandSpend float64 `protobuf:"fixed64,2,opt,name=currentMonthlyOnDemandSpend,proto3" json:"currentMonthlyOnDemandSpend,omitempty"`
	// Projected total monthly spend after applying the recommended Savings Plan, normalized
	EstimatedMonthlySpend float64 `protobuf:"fixed64,3,opt,name=estimatedMonthlySpend,proto3" json:"estimatedMonthlySpend,omitempty"`
	// Difference between on-demand and post-SP spend, computed from normalized values
	EstimatedMonthlySavingsDerived float64 `protobuf:"fixed64,4,opt,name=estimatedMonthlySavingsDerived,proto3" json:"estimatedMonthlySavingsDerived,omitempty"`
	// Total current daily cost from usage, before applying any SP recommendation (Derived)
	TotalDailyCost float64 `protobuf:"fixed64,5,opt,name=totalDailyCost,proto3" json:"totalDailyCost,omitempty"`
	// Current Savings Plan commitment applied
	CurrentSPCommitment float64 `protobuf:"fixed64,6,opt,name=currentSPCommitment,proto3" json:"currentSPCommitment,omitempty"`
	// Estimated daily on-demand cost without any Savings Plans
	EstimatedOnDemandCost float64 `protobuf:"fixed64,7,opt,name=estimatedOnDemandCost,proto3" json:"estimatedOnDemandCost,omitempty"`
	// Suggested hourly commitment to purchase in USD
	HourlyCommitment float64 `protobuf:"fixed64,8,opt,name=hourlyCommitment,proto3" json:"hourlyCommitment,omitempty"`
	// Projected monthly savings from the recommended savings plan
	EstimatedMonthlySavings float64 `protobuf:"fixed64,9,opt,name=estimatedMonthlySavings,proto3" json:"estimatedMonthlySavings,omitempty"`
	// Percentage of potential savings from savings plan
	EstimatedSavings float64 `protobuf:"fixed64,10,opt,name=estimatedSavings,proto3" json:"estimatedSavings,omitempty"`
	// Customization setting for savings plan
	RecommendationLevel string `protobuf:"bytes,11,opt,name=recommendationLevel,proto3" json:"recommendationLevel,omitempty"`
	// Savings plan type.
	PlanType string `protobuf:"bytes,12,opt,name=planType,proto3" json:"planType,omitempty"`
	// Savings plan duration.
	PlanTerm string `protobuf:"bytes,13,opt,name=planTerm,proto3" json:"planTerm,omitempty"`
	// Savings plan payment option.
	PaymentOption string `protobuf:"bytes,14,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	// Savings plan lookback period used for analysis.
	LookBackPeriod string `protobuf:"bytes,15,opt,name=lookBackPeriod,proto3" json:"lookBackPeriod,omitempty"`
	// Savings plan estimated return on investment.
	EstimatedROI float64 `protobuf:"fixed64,16,opt,name=estimatedROI,proto3" json:"estimatedROI,omitempty"`
	// Savings plan total projected cost over the term.
	EstimatedSPCost float64 `protobuf:"fixed64,17,opt,name=estimatedSPCost,proto3" json:"estimatedSPCost,omitempty"`
	// Savings plan estimated total cost and including on-demand.
	EstimatedTotalCost float64 `protobuf:"fixed64,18,opt,name=estimatedTotalCost,proto3" json:"estimatedTotalCost,omitempty"`
	// Savings plan last updated
	LastUpdated   string `protobuf:"bytes,19,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecommendationDetailsResponse) Reset() {
	*x = GetRecommendationDetailsResponse{}
	mi := &file_flow_v1_flow_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecommendationDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationDetailsResponse) ProtoMessage() {}

func (x *GetRecommendationDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetRecommendationDetailsResponse) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{13}
}

func (x *GetRecommendationDetailsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetRecommendationDetailsResponse) GetCurrentMonthlyOnDemandSpend() float64 {
	if x != nil {
		return x.CurrentMonthlyOnDemandSpend
	}
	return 0
}

func (x *GetRecommendationDetailsResponse) GetEstimatedMonthlySpend() float64 {
	if x != nil {
		return x.EstimatedMonthlySpend
	}
	return 0
}

func (x *GetRecommendationDetailsResponse) GetEstimatedMonthlySavingsDerived() float64 {
	if x != nil {
		return x.EstimatedMonthlySavingsDerived
	}
	return 0
}

func (x *GetRecommendationDetailsResponse) GetTotalDailyCost() float64 {
	if x != nil {
		return x.TotalDailyCost
	}
	return 0
}

func (x *GetRecommendationDetailsResponse) GetCurrentSPCommitment() float64 {
	if x != nil {
		return x.CurrentSPCommitment
	}
	return 0
}

func (x *GetRecommendationDetailsResponse) GetEstimatedOnDemandCost() float64 {
	if x != nil {
		return x.EstimatedOnDemandCost
	}
	return 0
}

func (x *GetRecommendationDetailsResponse) GetHourlyCommitment() float64 {
	if x != nil {
		return x.HourlyCommitment
	}
	return 0
}

func (x *GetRecommendationDetailsResponse) GetEstimatedMonthlySavings() float64 {
	if x != nil {
		return x.EstimatedMonthlySavings
	}
	return 0
}

func (x *GetRecommendationDetailsResponse) GetEstimatedSavings() float64 {
	if x != nil {
		return x.EstimatedSavings
	}
	return 0
}

func (x *GetRecommendationDetailsResponse) GetRecommendationLevel() string {
	if x != nil {
		return x.RecommendationLevel
	}
	return ""
}

func (x *GetRecommendationDetailsResponse) GetPlanType() string {
	if x != nil {
		return x.PlanType
	}
	return ""
}

func (x *GetRecommendationDetailsResponse) GetPlanTerm() string {
	if x != nil {
		return x.PlanTerm
	}
	return ""
}

func (x *GetRecommendationDetailsResponse) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *GetRecommendationDetailsResponse) GetLookBackPeriod() string {
	if x != nil {
		return x.LookBackPeriod
	}
	return ""
}

func (x *GetRecommendationDetailsResponse) GetEstimatedROI() float64 {
	if x != nil {
		return x.EstimatedROI
	}
	return 0
}

func (x *GetRecommendationDetailsResponse) GetEstimatedSPCost() float64 {
	if x != nil {
		return x.EstimatedSPCost
	}
	return 0
}

func (x *GetRecommendationDetailsResponse) GetEstimatedTotalCost() float64 {
	if x != nil {
		return x.EstimatedTotalCost
	}
	return 0
}

func (x *GetRecommendationDetailsResponse) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

// Response message for the Flow.GetCostExplorerAccessTemplateUrl rpc.
type GetCostExplorerAccessTemplateUrlResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The CloudFormation launch url. Open it in your browser.
	LaunchUrl string `protobuf:"bytes,1,opt,name=launchUrl,proto3" json:"launchUrl,omitempty"`
	// The latest CloudFormation template. The version is included in the filename.
	TemplateUrl string `protobuf:"bytes,2,opt,name=templateUrl,proto3" json:"templateUrl,omitempty"`
	// The default stack name used. Can be modified.
	StackName string `protobuf:"bytes,3,opt,name=stackName,proto3" json:"stackName,omitempty"`
	// The AWS account that will receive the access. Do not change.
	Principal string `protobuf:"bytes,4,opt,name=principal,proto3" json:"principal,omitempty"`
	// The external id for this role. Do not change.
	ExternalId    string `protobuf:"bytes,5,opt,name=externalId,proto3" json:"externalId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCostExplorerAccessTemplateUrlResponse) Reset() {
	*x = GetCostExplorerAccessTemplateUrlResponse{}
	mi := &file_flow_v1_flow_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCostExplorerAccessTemplateUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostExplorerAccessTemplateUrlResponse) ProtoMessage() {}

func (x *GetCostExplorerAccessTemplateUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostExplorerAccessTemplateUrlResponse.ProtoReflect.Descriptor instead.
func (*GetCostExplorerAccessTemplateUrlResponse) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{14}
}

func (x *GetCostExplorerAccessTemplateUrlResponse) GetLaunchUrl() string {
	if x != nil {
		return x.LaunchUrl
	}
	return ""
}

func (x *GetCostExplorerAccessTemplateUrlResponse) GetTemplateUrl() string {
	if x != nil {
		return x.TemplateUrl
	}
	return ""
}

func (x *GetCostExplorerAccessTemplateUrlResponse) GetStackName() string {
	if x != nil {
		return x.StackName
	}
	return ""
}

func (x *GetCostExplorerAccessTemplateUrlResponse) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *GetCostExplorerAccessTemplateUrlResponse) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

// Settings history message.
type SettingsHistory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Payer account ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Account scope determines if the account is payer or linked account.
	AccountScope string `protobuf:"bytes,2,opt,name=accountScope,proto3" json:"accountScope,omitempty"`
	// Customization setting for SP.
	Customization string `protobuf:"bytes,3,opt,name=customization,proto3" json:"customization,omitempty"`
	// Term of the SP.
	PlanTerm string `protobuf:"bytes,4,opt,name=planTerm,proto3" json:"planTerm,omitempty"`
	// Payment option for the SP.
	PaymentOption string `protobuf:"bytes,5,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	// Lookback period for recommendation.
	LookBackPeriod string `protobuf:"bytes,6,opt,name=lookBackPeriod,proto3" json:"lookBackPeriod,omitempty"`
	// If EC2 Instance SP is selected in Customization, request will include list of instance family
	InstanceFamily string `protobuf:"bytes,7,opt,name=instanceFamily,proto3" json:"instanceFamily,omitempty"`
	// Annual budget input for SP.
	AnnualBudget float64 `protobuf:"fixed64,8,opt,name=annualBudget,proto3" json:"annualBudget,omitempty"`
	// Purchase approval from the payer for the SP.
	Approval bool `protobuf:"varint,9,opt,name=approval,proto3" json:"approval,omitempty"`
	// Last updated timestamp of the settings configuration.
	LastUpdated   string `protobuf:"bytes,10,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SettingsHistory) Reset() {
	*x = SettingsHistory{}
	mi := &file_flow_v1_flow_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SettingsHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsHistory) ProtoMessage() {}

func (x *SettingsHistory) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsHistory.ProtoReflect.Descriptor instead.
func (*SettingsHistory) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{15}
}

func (x *SettingsHistory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SettingsHistory) GetAccountScope() string {
	if x != nil {
		return x.AccountScope
	}
	return ""
}

func (x *SettingsHistory) GetCustomization() string {
	if x != nil {
		return x.Customization
	}
	return ""
}

func (x *SettingsHistory) GetPlanTerm() string {
	if x != nil {
		return x.PlanTerm
	}
	return ""
}

func (x *SettingsHistory) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *SettingsHistory) GetLookBackPeriod() string {
	if x != nil {
		return x.LookBackPeriod
	}
	return ""
}

func (x *SettingsHistory) GetInstanceFamily() string {
	if x != nil {
		return x.InstanceFamily
	}
	return ""
}

func (x *SettingsHistory) GetAnnualBudget() float64 {
	if x != nil {
		return x.AnnualBudget
	}
	return 0
}

func (x *SettingsHistory) GetApproval() bool {
	if x != nil {
		return x.Approval
	}
	return false
}

func (x *SettingsHistory) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

// Response message for the Flow.GetSettingsHistory rpc.
type GetSettingsHistoryResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SettingsHistory []*SettingsHistory     `protobuf:"bytes,1,rep,name=settingsHistory,proto3" json:"settingsHistory,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetSettingsHistoryResponse) Reset() {
	*x = GetSettingsHistoryResponse{}
	mi := &file_flow_v1_flow_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSettingsHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsHistoryResponse) ProtoMessage() {}

func (x *GetSettingsHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetSettingsHistoryResponse) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{16}
}

func (x *GetSettingsHistoryResponse) GetSettingsHistory() []*SettingsHistory {
	if x != nil {
		return x.SettingsHistory
	}
	return nil
}

// Response message for the Flow.CreateCostExplorerAccess rpc.
type CreateCostExplorerAccessResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The queried target account.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The role ARN that provides the cross-account access permissions.
	RoleArn string `protobuf:"bytes,2,opt,name=roleArn,proto3" json:"roleArn,omitempty"`
	// The external id for this role.
	ExternalId string `protobuf:"bytes,3,opt,name=externalId,proto3" json:"externalId,omitempty"`
	// The id of the CloudFormation stack deployed in the target account.
	StackId string `protobuf:"bytes,4,opt,name=stackId,proto3" json:"stackId,omitempty"`
	// The region where the stack is deployed.
	StackRegion string `protobuf:"bytes,5,opt,name=stackRegion,proto3" json:"stackRegion,omitempty"`
	// The latest template used to deploy the stack.
	TemplateUrl string `protobuf:"bytes,6,opt,name=templateUrl,proto3" json:"templateUrl,omitempty"`
	// This can be `latest`, `outdated`, or some error information.
	Status string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	// The last updated timestamp, RFC3339 UTC.
	LastUpdated   string `protobuf:"bytes,8,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCostExplorerAccessResponse) Reset() {
	*x = CreateCostExplorerAccessResponse{}
	mi := &file_flow_v1_flow_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCostExplorerAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCostExplorerAccessResponse) ProtoMessage() {}

func (x *CreateCostExplorerAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCostExplorerAccessResponse.ProtoReflect.Descriptor instead.
func (*CreateCostExplorerAccessResponse) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{17}
}

func (x *CreateCostExplorerAccessResponse) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *CreateCostExplorerAccessResponse) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

func (x *CreateCostExplorerAccessResponse) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *CreateCostExplorerAccessResponse) GetStackId() string {
	if x != nil {
		return x.StackId
	}
	return ""
}

func (x *CreateCostExplorerAccessResponse) GetStackRegion() string {
	if x != nil {
		return x.StackRegion
	}
	return ""
}

func (x *CreateCostExplorerAccessResponse) GetTemplateUrl() string {
	if x != nil {
		return x.TemplateUrl
	}
	return ""
}

func (x *CreateCostExplorerAccessResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateCostExplorerAccessResponse) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

// Savings Plan Details to be used in the GetDailyUsageCostDetailsResponse.
type SpDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The payer account ID for which the savings plan details are fetched.
	PayerId string `protobuf:"bytes,1,opt,name=payerId,proto3" json:"payerId,omitempty"`
	// The savings plan type, e.g., `Compute`, `Ec2`.
	SavingsPlanType string `protobuf:"bytes,2,opt,name=savingsPlanType,proto3" json:"savingsPlanType,omitempty"`
	// The current state of the savings plan, e.g., `ACTIVE`, `EXPIRED`, `PENDING`.
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// The start time of the savings plan.
	StartTime string `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// The end time of the savings plan.
	EndTime string `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	// The date until which the savings plan is returnable, if applicable.
	ReturnableUntil string `protobuf:"bytes,6,opt,name=returnableUntil,proto3" json:"returnableUntil,omitempty"`
	// The currency in which the savings plan is priced, e.g., `USD`.
	Currency string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	// The commitment amount per hour for the savings plan in USD.
	Commitment float64 `protobuf:"fixed64,8,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// A description of the savings plan, including details like the instance family and payment option.
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// The payment option for the savings plan, e.g., `All Upfront`, `Partial Upfront`, `No Upfront`.
	PaymentOption string `protobuf:"bytes,10,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	// The product types covered by the savings plan, e.g., `EC2`, `Lambda`.
	ProductTypes []string `protobuf:"bytes,11,rep,name=productTypes,proto3" json:"productTypes,omitempty"`
	// The EC2 instance families covered by the savings plan, e.g., `m5`, `c5`.
	Ec2InstanceFamily []string `protobuf:"bytes,12,rep,name=ec2InstanceFamily,proto3" json:"ec2InstanceFamily,omitempty"`
	// The periodic (usually monthly) charge to pay over the term of the plan.
	RecurringPaymentAmount float64 `protobuf:"fixed64,13,opt,name=recurringPaymentAmount,proto3" json:"recurringPaymentAmount,omitempty"`
	// The total amount paid at the start of the Savings Plan, if applicable.
	UpfrontPaymentAmount float64 `protobuf:"fixed64,14,opt,name=upfrontPaymentAmount,proto3" json:"upfrontPaymentAmount,omitempty"`
	// The tag that refers to the one who purchased the Savings Plan.
	Tags          string `protobuf:"bytes,15,opt,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpDetails) Reset() {
	*x = SpDetails{}
	mi := &file_flow_v1_flow_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpDetails) ProtoMessage() {}

func (x *SpDetails) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpDetails.ProtoReflect.Descriptor instead.
func (*SpDetails) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{18}
}

func (x *SpDetails) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

func (x *SpDetails) GetSavingsPlanType() string {
	if x != nil {
		return x.SavingsPlanType
	}
	return ""
}

func (x *SpDetails) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SpDetails) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SpDetails) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *SpDetails) GetReturnableUntil() string {
	if x != nil {
		return x.ReturnableUntil
	}
	return ""
}

func (x *SpDetails) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *SpDetails) GetCommitment() float64 {
	if x != nil {
		return x.Commitment
	}
	return 0
}

func (x *SpDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SpDetails) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *SpDetails) GetProductTypes() []string {
	if x != nil {
		return x.ProductTypes
	}
	return nil
}

func (x *SpDetails) GetEc2InstanceFamily() []string {
	if x != nil {
		return x.Ec2InstanceFamily
	}
	return nil
}

func (x *SpDetails) GetRecurringPaymentAmount() float64 {
	if x != nil {
		return x.RecurringPaymentAmount
	}
	return 0
}

func (x *SpDetails) GetUpfrontPaymentAmount() float64 {
	if x != nil {
		return x.UpfrontPaymentAmount
	}
	return 0
}

func (x *SpDetails) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

// Usage and Cost Details to be used in the GetDailyUsageCostDetailsResponse.
type UsageCostDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The specific date this entry represents, corresponding to one day within the requested date range.
	CurrentDate string `protobuf:"bytes,1,opt,name=currentDate,proto3" json:"currentDate,omitempty"`
	// The product code for which the usage and cost details are provided.
	ProductCode string `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	// Total On-Demand usage in hours for the date.
	OndemandUsage float64 `protobuf:"fixed64,3,opt,name=ondemandUsage,proto3" json:"ondemandUsage,omitempty"`
	// Total On-Demand cost in USD for the date.
	OndemandCost float64 `protobuf:"fixed64,4,opt,name=ondemandCost,proto3" json:"ondemandCost,omitempty"`
	// Total Reserved Instance usage in hours for the date.
	ReservedUsage float64 `protobuf:"fixed64,5,opt,name=reservedUsage,proto3" json:"reservedUsage,omitempty"`
	// Total Reserved Instance cost in USD for the date.
	ReservedCost float64 `protobuf:"fixed64,6,opt,name=reservedCost,proto3" json:"reservedCost,omitempty"`
	// Total Savings Plan usage in hours for the date purchased by Flow.
	SavingsPlanUsageByFlow float64 `protobuf:"fixed64,7,opt,name=savingsPlanUsageByFlow,proto3" json:"savingsPlanUsageByFlow,omitempty"`
	// Total Savings Plan cost in USD for the date purchased by Flow.
	SavingsPlanCostByFlow float64 `protobuf:"fixed64,8,opt,name=savingsPlanCostByFlow,proto3" json:"savingsPlanCostByFlow,omitempty"`
	// Total Savings Plan usage in hours for the date purchased by user.
	SavingsPlanUsageByUser float64 `protobuf:"fixed64,9,opt,name=savingsPlanUsageByUser,proto3" json:"savingsPlanUsageByUser,omitempty"`
	// Total Savings Plan cost in USD for the date purchased by user.
	SavingsPlanCostByUser float64 `protobuf:"fixed64,10,opt,name=savingsPlanCostByUser,proto3" json:"savingsPlanCostByUser,omitempty"`
	// Total Spot Instance usage in hours for the date.
	SpotUsage float64 `protobuf:"fixed64,11,opt,name=spotUsage,proto3" json:"spotUsage,omitempty"`
	// Total Spot Instance cost in USD for the date.
	SpotCost float64 `protobuf:"fixed64,12,opt,name=spotCost,proto3" json:"spotCost,omitempty"`
	// Percentage of Savings Plan coverage for the date.
	CoveragePercentage float64 `protobuf:"fixed64,13,opt,name=coveragePercentage,proto3" json:"coveragePercentage,omitempty"`
	// Percentage of Savings Plan utilization for the date.
	UtilizationPercentage float64 `protobuf:"fixed64,14,opt,name=utilizationPercentage,proto3" json:"utilizationPercentage,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UsageCostDetails) Reset() {
	*x = UsageCostDetails{}
	mi := &file_flow_v1_flow_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsageCostDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageCostDetails) ProtoMessage() {}

func (x *UsageCostDetails) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageCostDetails.ProtoReflect.Descriptor instead.
func (*UsageCostDetails) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{19}
}

func (x *UsageCostDetails) GetCurrentDate() string {
	if x != nil {
		return x.CurrentDate
	}
	return ""
}

func (x *UsageCostDetails) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *UsageCostDetails) GetOndemandUsage() float64 {
	if x != nil {
		return x.OndemandUsage
	}
	return 0
}

func (x *UsageCostDetails) GetOndemandCost() float64 {
	if x != nil {
		return x.OndemandCost
	}
	return 0
}

func (x *UsageCostDetails) GetReservedUsage() float64 {
	if x != nil {
		return x.ReservedUsage
	}
	return 0
}

func (x *UsageCostDetails) GetReservedCost() float64 {
	if x != nil {
		return x.ReservedCost
	}
	return 0
}

func (x *UsageCostDetails) GetSavingsPlanUsageByFlow() float64 {
	if x != nil {
		return x.SavingsPlanUsageByFlow
	}
	return 0
}

func (x *UsageCostDetails) GetSavingsPlanCostByFlow() float64 {
	if x != nil {
		return x.SavingsPlanCostByFlow
	}
	return 0
}

func (x *UsageCostDetails) GetSavingsPlanUsageByUser() float64 {
	if x != nil {
		return x.SavingsPlanUsageByUser
	}
	return 0
}

func (x *UsageCostDetails) GetSavingsPlanCostByUser() float64 {
	if x != nil {
		return x.SavingsPlanCostByUser
	}
	return 0
}

func (x *UsageCostDetails) GetSpotUsage() float64 {
	if x != nil {
		return x.SpotUsage
	}
	return 0
}

func (x *UsageCostDetails) GetSpotCost() float64 {
	if x != nil {
		return x.SpotCost
	}
	return 0
}

func (x *UsageCostDetails) GetCoveragePercentage() float64 {
	if x != nil {
		return x.CoveragePercentage
	}
	return 0
}

func (x *UsageCostDetails) GetUtilizationPercentage() float64 {
	if x != nil {
		return x.UtilizationPercentage
	}
	return 0
}

// Response message for the Flow.GetDailyUsageCostDetailsResponse rpc.
type GetDailyUsageCostDetailsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The payer account ID for which the savings plan details are fetched.
	PayerId string `protobuf:"bytes,1,opt,name=payerId,proto3" json:"payerId,omitempty"`
	// Actual monthly on-demand cost for the payer account.
	MonthlyOnDemandCost float64 `protobuf:"fixed64,2,opt,name=monthlyOnDemandCost,proto3" json:"monthlyOnDemandCost,omitempty"`
	// Actual monthly effective cost after applying Savings Plans.
	MonthlyEffectiveCost float64 `protobuf:"fixed64,3,opt,name=monthlyEffectiveCost,proto3" json:"monthlyEffectiveCost,omitempty"`
	// Actual total monthly savings from Savings Plan usage.
	MonthlyTotalSavings float64 `protobuf:"fixed64,4,opt,name=monthlyTotalSavings,proto3" json:"monthlyTotalSavings,omitempty"`
	// Purchased Savings Plan details for the payer account.
	SpDetails *SpDetails `protobuf:"bytes,5,opt,name=spDetails,proto3" json:"spDetails,omitempty"`
	// Daily Savings Plan usage and cost details
	UsageCostDetails []*UsageCostDetails `protobuf:"bytes,6,rep,name=usageCostDetails,proto3" json:"usageCostDetails,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetDailyUsageCostDetailsResponse) Reset() {
	*x = GetDailyUsageCostDetailsResponse{}
	mi := &file_flow_v1_flow_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDailyUsageCostDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyUsageCostDetailsResponse) ProtoMessage() {}

func (x *GetDailyUsageCostDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flow_v1_flow_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyUsageCostDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetDailyUsageCostDetailsResponse) Descriptor() ([]byte, []int) {
	return file_flow_v1_flow_proto_rawDescGZIP(), []int{20}
}

func (x *GetDailyUsageCostDetailsResponse) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

func (x *GetDailyUsageCostDetailsResponse) GetMonthlyOnDemandCost() float64 {
	if x != nil {
		return x.MonthlyOnDemandCost
	}
	return 0
}

func (x *GetDailyUsageCostDetailsResponse) GetMonthlyEffectiveCost() float64 {
	if x != nil {
		return x.MonthlyEffectiveCost
	}
	return 0
}

func (x *GetDailyUsageCostDetailsResponse) GetMonthlyTotalSavings() float64 {
	if x != nil {
		return x.MonthlyTotalSavings
	}
	return 0
}

func (x *GetDailyUsageCostDetailsResponse) GetSpDetails() *SpDetails {
	if x != nil {
		return x.SpDetails
	}
	return nil
}

func (x *GetDailyUsageCostDetailsResponse) GetUsageCostDetails() []*UsageCostDetails {
	if x != nil {
		return x.UsageCostDetails
	}
	return nil
}

var File_flow_v1_flow_proto protoreflect.FileDescriptor

var file_flow_v1_flow_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdd, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9c, 0x04, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x72,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x42,
	0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x6e, 0x6e,
	0x75, 0x61, 0x6c, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x06, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x65,
	0x72, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63,
	0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a,
	0x27, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x22, 0x73, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x2d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xfd, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f,
	0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x75,
	0x61, 0x6c, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xec, 0x06, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x46, 0x0a,
	0x1e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x50, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x50, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x72,
	0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x72,
	0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x42,
	0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x4f, 0x49, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x4f, 0x49, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x50, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x53, 0x50, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0xc6, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xdf, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x65,
	0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x65,
	0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b,
	0x42, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x75,
	0x61, 0x6c, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x22, 0x8c, 0x02, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x22, 0x9d, 0x04, 0x0a, 0x09, 0x53, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x63, 0x32, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x65, 0x63, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x16, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x75,
	0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x75, 0x70, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0xe6, 0x04, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x6f, 0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x64, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x16, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x16, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x46, 0x6c, 0x6f,
	0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x36,
	0x0a, 0x16, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16,
	0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x70, 0x6f, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x73, 0x70, 0x6f, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70,
	0x6f, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x70,
	0x6f, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xdd, 0x02, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x14, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x09, 0x73, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4d, 0x0a,
	0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x10, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x32, 0xa1, 0x0b, 0x0a,
	0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x5e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x7a, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11,
	0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x7f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x1a,
	0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x73, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xaa, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb2, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x77, 0x73, 0x2f,
	0x78, 0x61, 0x63, 0x63, 0x74, 0x2f, 0x63, 0x65, 0x61, 0x12, 0x90, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9d, 0x01, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x77, 0x73, 0x2f, 0x78, 0x61, 0x63, 0x63, 0x74, 0x2f, 0x63, 0x65, 0x61, 0x12, 0x99, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x1a, 0x95, 0x01, 0x92, 0x41, 0x91, 0x01, 0x12,
	0x41, 0x28, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x29, 0x20, 0x46, 0x6c, 0x6f, 0x77, 0x20, 0x41, 0x50,
	0x49, 0x2e, 0x20, 0x42, 0x61, 0x73, 0x65, 0x20, 0x55, 0x52, 0x4c, 0x3a, 0x20, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x2f, 0x66, 0x6c,
	0x6f, 0x77, 0x1a, 0x4c, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x42, 0x48, 0x0a, 0x16, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x09, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_flow_v1_flow_proto_rawDescOnce sync.Once
	file_flow_v1_flow_proto_rawDescData []byte
)

func file_flow_v1_flow_proto_rawDescGZIP() []byte {
	file_flow_v1_flow_proto_rawDescOnce.Do(func() {
		file_flow_v1_flow_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_flow_v1_flow_proto_rawDesc), len(file_flow_v1_flow_proto_rawDesc)))
	})
	return file_flow_v1_flow_proto_rawDescData
}

var file_flow_v1_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_flow_v1_flow_proto_goTypes = []any{
	(*GetInfoRequest)(nil),                           // 0: blueapi.flow.v1.GetInfoRequest
	(*CreateSettingsRequest)(nil),                    // 1: blueapi.flow.v1.CreateSettingsRequest
	(*UpdateSettingsRequest)(nil),                    // 2: blueapi.flow.v1.UpdateSettingsRequest
	(*GetSettingsRequest)(nil),                       // 3: blueapi.flow.v1.GetSettingsRequest
	(*GetRecommendationDetailsRequest)(nil),          // 4: blueapi.flow.v1.GetRecommendationDetailsRequest
	(*GetCostExplorerAccessTemplateUrlRequest)(nil),  // 5: blueapi.flow.v1.GetCostExplorerAccessTemplateUrlRequest
	(*GetSettingsHistoryRequest)(nil),                // 6: blueapi.flow.v1.GetSettingsHistoryRequest
	(*CreateCostExplorerAccessRequest)(nil),          // 7: blueapi.flow.v1.CreateCostExplorerAccessRequest
	(*GetDailyUsageCostDetailsRequest)(nil),          // 8: blueapi.flow.v1.GetDailyUsageCostDetailsRequest
	(*GetInfoResponse)(nil),                          // 9: blueapi.flow.v1.GetInfoResponse
	(*CreateSettingsResponse)(nil),                   // 10: blueapi.flow.v1.CreateSettingsResponse
	(*UpdateSettingsResponse)(nil),                   // 11: blueapi.flow.v1.UpdateSettingsResponse
	(*GetSettingsResponse)(nil),                      // 12: blueapi.flow.v1.GetSettingsResponse
	(*GetRecommendationDetailsResponse)(nil),         // 13: blueapi.flow.v1.GetRecommendationDetailsResponse
	(*GetCostExplorerAccessTemplateUrlResponse)(nil), // 14: blueapi.flow.v1.GetCostExplorerAccessTemplateUrlResponse
	(*SettingsHistory)(nil),                          // 15: blueapi.flow.v1.SettingsHistory
	(*GetSettingsHistoryResponse)(nil),               // 16: blueapi.flow.v1.GetSettingsHistoryResponse
	(*CreateCostExplorerAccessResponse)(nil),         // 17: blueapi.flow.v1.CreateCostExplorerAccessResponse
	(*SpDetails)(nil),                                // 18: blueapi.flow.v1.SpDetails
	(*UsageCostDetails)(nil),                         // 19: blueapi.flow.v1.UsageCostDetails
	(*GetDailyUsageCostDetailsResponse)(nil),         // 20: blueapi.flow.v1.GetDailyUsageCostDetailsResponse
}
var file_flow_v1_flow_proto_depIdxs = []int32{
	15, // 0: blueapi.flow.v1.GetSettingsHistoryResponse.settingsHistory:type_name -> blueapi.flow.v1.SettingsHistory
	18, // 1: blueapi.flow.v1.GetDailyUsageCostDetailsResponse.spDetails:type_name -> blueapi.flow.v1.SpDetails
	19, // 2: blueapi.flow.v1.GetDailyUsageCostDetailsResponse.usageCostDetails:type_name -> blueapi.flow.v1.UsageCostDetails
	0,  // 3: blueapi.flow.v1.Flow.GetInfo:input_type -> blueapi.flow.v1.GetInfoRequest
	1,  // 4: blueapi.flow.v1.Flow.CreateSettings:input_type -> blueapi.flow.v1.CreateSettingsRequest
	2,  // 5: blueapi.flow.v1.Flow.UpdateSettings:input_type -> blueapi.flow.v1.UpdateSettingsRequest
	3,  // 6: blueapi.flow.v1.Flow.GetSettings:input_type -> blueapi.flow.v1.GetSettingsRequest
	4,  // 7: blueapi.flow.v1.Flow.GetRecommendationDetails:input_type -> blueapi.flow.v1.GetRecommendationDetailsRequest
	5,  // 8: blueapi.flow.v1.Flow.GetCostExplorerAccessTemplateUrl:input_type -> blueapi.flow.v1.GetCostExplorerAccessTemplateUrlRequest
	6,  // 9: blueapi.flow.v1.Flow.GetSettingsHistory:input_type -> blueapi.flow.v1.GetSettingsHistoryRequest
	7,  // 10: blueapi.flow.v1.Flow.CreateCostExplorerAccess:input_type -> blueapi.flow.v1.CreateCostExplorerAccessRequest
	8,  // 11: blueapi.flow.v1.Flow.GetDailyUsageCostDetails:input_type -> blueapi.flow.v1.GetDailyUsageCostDetailsRequest
	9,  // 12: blueapi.flow.v1.Flow.GetInfo:output_type -> blueapi.flow.v1.GetInfoResponse
	10, // 13: blueapi.flow.v1.Flow.CreateSettings:output_type -> blueapi.flow.v1.CreateSettingsResponse
	11, // 14: blueapi.flow.v1.Flow.UpdateSettings:output_type -> blueapi.flow.v1.UpdateSettingsResponse
	12, // 15: blueapi.flow.v1.Flow.GetSettings:output_type -> blueapi.flow.v1.GetSettingsResponse
	13, // 16: blueapi.flow.v1.Flow.GetRecommendationDetails:output_type -> blueapi.flow.v1.GetRecommendationDetailsResponse
	14, // 17: blueapi.flow.v1.Flow.GetCostExplorerAccessTemplateUrl:output_type -> blueapi.flow.v1.GetCostExplorerAccessTemplateUrlResponse
	16, // 18: blueapi.flow.v1.Flow.GetSettingsHistory:output_type -> blueapi.flow.v1.GetSettingsHistoryResponse
	17, // 19: blueapi.flow.v1.Flow.CreateCostExplorerAccess:output_type -> blueapi.flow.v1.CreateCostExplorerAccessResponse
	20, // 20: blueapi.flow.v1.Flow.GetDailyUsageCostDetails:output_type -> blueapi.flow.v1.GetDailyUsageCostDetailsResponse
	12, // [12:21] is the sub-list for method output_type
	3,  // [3:12] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_flow_v1_flow_proto_init() }
func file_flow_v1_flow_proto_init() {
	if File_flow_v1_flow_proto != nil {
		return
	}
	file_flow_v1_flow_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_flow_v1_flow_proto_rawDesc), len(file_flow_v1_flow_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flow_v1_flow_proto_goTypes,
		DependencyIndexes: file_flow_v1_flow_proto_depIdxs,
		MessageInfos:      file_flow_v1_flow_proto_msgTypes,
	}.Build()
	File_flow_v1_flow_proto = out.File
	file_flow_v1_flow_proto_goTypes = nil
	file_flow_v1_flow_proto_depIdxs = nil
}
