// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: flow/v1/flow.proto

package flow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Flow_GetInfo_FullMethodName                          = "/blueapi.flow.v1.Flow/GetInfo"
	Flow_CreateSettings_FullMethodName                   = "/blueapi.flow.v1.Flow/CreateSettings"
	Flow_UpdateSettings_FullMethodName                   = "/blueapi.flow.v1.Flow/UpdateSettings"
	Flow_GetSettings_FullMethodName                      = "/blueapi.flow.v1.Flow/GetSettings"
	Flow_GetRecommendationDetails_FullMethodName         = "/blueapi.flow.v1.Flow/GetRecommendationDetails"
	Flow_GetCostExplorerAccessTemplateUrl_FullMethodName = "/blueapi.flow.v1.Flow/GetCostExplorerAccessTemplateUrl"
	Flow_GetSettingsHistory_FullMethodName               = "/blueapi.flow.v1.Flow/GetSettingsHistory"
	Flow_CreateCostExplorerAccess_FullMethodName         = "/blueapi.flow.v1.Flow/CreateCostExplorerAccess"
)

// FlowClient is the client API for Flow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Flow service definition.
type FlowClient interface {
	// For Testing Purposes Only.
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// Creates a new settings configuration for the user.
	CreateSettings(ctx context.Context, in *CreateSettingsRequest, opts ...grpc.CallOption) (*CreateSettingsResponse, error)
	// Update the settings configuration for a user.
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error)
	// Fetch previous settings for a user
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	// Fetch user savings plan details
	GetRecommendationDetails(ctx context.Context, in *GetRecommendationDetailsRequest, opts ...grpc.CallOption) (*GetRecommendationDetailsResponse, error)
	// Gets a CloudFormation launch URL for enabling read-only cross-account access to cost explorer information (API only).
	GetCostExplorerAccessTemplateUrl(ctx context.Context, in *GetCostExplorerAccessTemplateUrlRequest, opts ...grpc.CallOption) (*GetCostExplorerAccessTemplateUrlResponse, error)
	// Gets the settings configuration history for a user.
	GetSettingsHistory(ctx context.Context, in *GetSettingsHistoryRequest, opts ...grpc.CallOption) (*GetSettingsHistoryResponse, error)
	// Creates a default cross-account access role for cost explorer (API only).
	CreateCostExplorerAccess(ctx context.Context, in *CreateCostExplorerAccessRequest, opts ...grpc.CallOption) (*CreateCostExplorerAccessResponse, error)
}

type flowClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowClient(cc grpc.ClientConnInterface) FlowClient {
	return &flowClient{cc}
}

func (c *flowClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, Flow_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) CreateSettings(ctx context.Context, in *CreateSettingsRequest, opts ...grpc.CallOption) (*CreateSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSettingsResponse)
	err := c.cc.Invoke(ctx, Flow_CreateSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSettingsResponse)
	err := c.cc.Invoke(ctx, Flow_UpdateSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, Flow_GetSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetRecommendationDetails(ctx context.Context, in *GetRecommendationDetailsRequest, opts ...grpc.CallOption) (*GetRecommendationDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendationDetailsResponse)
	err := c.cc.Invoke(ctx, Flow_GetRecommendationDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetCostExplorerAccessTemplateUrl(ctx context.Context, in *GetCostExplorerAccessTemplateUrlRequest, opts ...grpc.CallOption) (*GetCostExplorerAccessTemplateUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCostExplorerAccessTemplateUrlResponse)
	err := c.cc.Invoke(ctx, Flow_GetCostExplorerAccessTemplateUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetSettingsHistory(ctx context.Context, in *GetSettingsHistoryRequest, opts ...grpc.CallOption) (*GetSettingsHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSettingsHistoryResponse)
	err := c.cc.Invoke(ctx, Flow_GetSettingsHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) CreateCostExplorerAccess(ctx context.Context, in *CreateCostExplorerAccessRequest, opts ...grpc.CallOption) (*CreateCostExplorerAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCostExplorerAccessResponse)
	err := c.cc.Invoke(ctx, Flow_CreateCostExplorerAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowServer is the server API for Flow service.
// All implementations must embed UnimplementedFlowServer
// for forward compatibility
//
// Flow service definition.
type FlowServer interface {
	// For Testing Purposes Only.
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// Creates a new settings configuration for the user.
	CreateSettings(context.Context, *CreateSettingsRequest) (*CreateSettingsResponse, error)
	// Update the settings configuration for a user.
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error)
	// Fetch previous settings for a user
	GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)
	// Fetch user savings plan details
	GetRecommendationDetails(context.Context, *GetRecommendationDetailsRequest) (*GetRecommendationDetailsResponse, error)
	// Gets a CloudFormation launch URL for enabling read-only cross-account access to cost explorer information (API only).
	GetCostExplorerAccessTemplateUrl(context.Context, *GetCostExplorerAccessTemplateUrlRequest) (*GetCostExplorerAccessTemplateUrlResponse, error)
	// Gets the settings configuration history for a user.
	GetSettingsHistory(context.Context, *GetSettingsHistoryRequest) (*GetSettingsHistoryResponse, error)
	// Creates a default cross-account access role for cost explorer (API only).
	CreateCostExplorerAccess(context.Context, *CreateCostExplorerAccessRequest) (*CreateCostExplorerAccessResponse, error)
	mustEmbedUnimplementedFlowServer()
}

// UnimplementedFlowServer must be embedded to have forward compatible implementations.
type UnimplementedFlowServer struct {
}

func (UnimplementedFlowServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedFlowServer) CreateSettings(context.Context, *CreateSettingsRequest) (*CreateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSettings not implemented")
}
func (UnimplementedFlowServer) UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedFlowServer) GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedFlowServer) GetRecommendationDetails(context.Context, *GetRecommendationDetailsRequest) (*GetRecommendationDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationDetails not implemented")
}
func (UnimplementedFlowServer) GetCostExplorerAccessTemplateUrl(context.Context, *GetCostExplorerAccessTemplateUrlRequest) (*GetCostExplorerAccessTemplateUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostExplorerAccessTemplateUrl not implemented")
}
func (UnimplementedFlowServer) GetSettingsHistory(context.Context, *GetSettingsHistoryRequest) (*GetSettingsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingsHistory not implemented")
}
func (UnimplementedFlowServer) CreateCostExplorerAccess(context.Context, *CreateCostExplorerAccessRequest) (*CreateCostExplorerAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCostExplorerAccess not implemented")
}
func (UnimplementedFlowServer) mustEmbedUnimplementedFlowServer() {}

// UnsafeFlowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowServer will
// result in compilation errors.
type UnsafeFlowServer interface {
	mustEmbedUnimplementedFlowServer()
}

func RegisterFlowServer(s grpc.ServiceRegistrar, srv FlowServer) {
	s.RegisterService(&Flow_ServiceDesc, srv)
}

func _Flow_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_CreateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).CreateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_CreateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).CreateSettings(ctx, req.(*CreateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_UpdateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetRecommendationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetRecommendationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetRecommendationDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetRecommendationDetails(ctx, req.(*GetRecommendationDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetCostExplorerAccessTemplateUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostExplorerAccessTemplateUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetCostExplorerAccessTemplateUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetCostExplorerAccessTemplateUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetCostExplorerAccessTemplateUrl(ctx, req.(*GetCostExplorerAccessTemplateUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetSettingsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetSettingsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetSettingsHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetSettingsHistory(ctx, req.(*GetSettingsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_CreateCostExplorerAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCostExplorerAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).CreateCostExplorerAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_CreateCostExplorerAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).CreateCostExplorerAccess(ctx, req.(*CreateCostExplorerAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Flow_ServiceDesc is the grpc.ServiceDesc for Flow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Flow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.flow.v1.Flow",
	HandlerType: (*FlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Flow_GetInfo_Handler,
		},
		{
			MethodName: "CreateSettings",
			Handler:    _Flow_CreateSettings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _Flow_UpdateSettings_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _Flow_GetSettings_Handler,
		},
		{
			MethodName: "GetRecommendationDetails",
			Handler:    _Flow_GetRecommendationDetails_Handler,
		},
		{
			MethodName: "GetCostExplorerAccessTemplateUrl",
			Handler:    _Flow_GetCostExplorerAccessTemplateUrl_Handler,
		},
		{
			MethodName: "GetSettingsHistory",
			Handler:    _Flow_GetSettingsHistory_Handler,
		},
		{
			MethodName: "CreateCostExplorerAccess",
			Handler:    _Flow_CreateCostExplorerAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flow/v1/flow.proto",
}
