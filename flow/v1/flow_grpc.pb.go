// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: flow/v1/flow.proto

package flow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Flow_GetInfo_FullMethodName                             = "/blueapi.flow.v1.Flow/GetInfo"
	Flow_SetSettings_FullMethodName                         = "/blueapi.flow.v1.Flow/SetSettings"
	Flow_GetSettings_FullMethodName                         = "/blueapi.flow.v1.Flow/GetSettings"
	Flow_GetRecommendationDetails_FullMethodName            = "/blueapi.flow.v1.Flow/GetRecommendationDetails"
	Flow_GetCostExplorerAccessTemplateUrl_FullMethodName    = "/blueapi.flow.v1.Flow/GetCostExplorerAccessTemplateUrl"
	Flow_GetSettingsHistory_FullMethodName                  = "/blueapi.flow.v1.Flow/GetSettingsHistory"
	Flow_CreateCostExplorerAccess_FullMethodName            = "/blueapi.flow.v1.Flow/CreateCostExplorerAccess"
	Flow_GetDailyUsageCostDetails_FullMethodName            = "/blueapi.flow.v1.Flow/GetDailyUsageCostDetails"
	Flow_GetAwsAccounts_FullMethodName                      = "/blueapi.flow.v1.Flow/GetAwsAccounts"
	Flow_GetSPPurchaseAccessTemplateUrl_FullMethodName      = "/blueapi.flow.v1.Flow/GetSPPurchaseAccessTemplateUrl"
	Flow_CreateSPPurchaseAccess_FullMethodName              = "/blueapi.flow.v1.Flow/CreateSPPurchaseAccess"
	Flow_GetCrossAccountAccessDetails_FullMethodName        = "/blueapi.flow.v1.Flow/GetCrossAccountAccessDetails"
	Flow_CreateSPRecommendationNotification_FullMethodName  = "/blueapi.flow.v1.Flow/CreateSPRecommendationNotification"
	Flow_GetSPToPurchaseDetails_FullMethodName              = "/blueapi.flow.v1.Flow/GetSPToPurchaseDetails"
	Flow_SendSPToPurchaseDetailsNotification_FullMethodName = "/blueapi.flow.v1.Flow/SendSPToPurchaseDetailsNotification"
)

// FlowClient is the client API for Flow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Flow service definition.
type FlowClient interface {
	// For Testing Purposes Only.
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// Creates or Updates the settings configuration for recommendation.
	SetSettings(ctx context.Context, in *SetSettingsRequest, opts ...grpc.CallOption) (*SetSettingsResponse, error)
	// Fetch previous settings for a user
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	// Fetch user savings plan details
	GetRecommendationDetails(ctx context.Context, in *GetRecommendationDetailsRequest, opts ...grpc.CallOption) (*GetRecommendationDetailsResponse, error)
	// Gets a CloudFormation launch URL for enabling read-only cross-account access to cost explorer information (API only).
	GetCostExplorerAccessTemplateUrl(ctx context.Context, in *GetCostExplorerAccessTemplateUrlRequest, opts ...grpc.CallOption) (*GetCostExplorerAccessTemplateUrlResponse, error)
	// Gets the settings configuration history for a user.
	GetSettingsHistory(ctx context.Context, in *GetSettingsHistoryRequest, opts ...grpc.CallOption) (*GetSettingsHistoryResponse, error)
	// Creates a default cross-account access role for cost explorer (API only).
	CreateCostExplorerAccess(ctx context.Context, in *CreateCostExplorerAccessRequest, opts ...grpc.CallOption) (*CreateCostExplorerAccessResponse, error)
	// Gets the daily cost and usage details.
	GetDailyUsageCostDetails(ctx context.Context, in *GetDailyUsageCostDetailsRequest, opts ...grpc.CallOption) (*GetDailyUsageCostDetailsResponse, error)
	// Returns all the aws accounts and its payer of the msp id
	GetAwsAccounts(ctx context.Context, in *GetAwsAccountsRequest, opts ...grpc.CallOption) (*GetAwsAccountsResponse, error)
	// Gets a CloudFormation launch URL for Savings Plan purchase capabilities
	GetSPPurchaseAccessTemplateUrl(ctx context.Context, in *GetSPPurchaseAccessTemplateUrlRequest, opts ...grpc.CallOption) (*GetSPPurchaseAccessTemplateUrlResponse, error)
	// Creates a default cross-account access role for Savings Plan (API only).
	CreateSPPurchaseAccess(ctx context.Context, in *CreateSPPurchaseAccessRequest, opts ...grpc.CallOption) (*CreateSPPurchaseAccessResponse, error)
	// Returns the activated cross-account access roles of the target payerId.
	GetCrossAccountAccessDetails(ctx context.Context, in *GetCrossAccountAccessDetailsRequest, opts ...grpc.CallOption) (*GetCrossAccountAccessDetailsResponse, error)
	// Sends configuration and recommendation to a Slack channel
	CreateSPRecommendationNotification(ctx context.Context, in *CreateSPRecommendationNotificationRequest, opts ...grpc.CallOption) (*CreateSPRecommendationNotificationResponse, error)
	// Get savings plan details to be purchased .
	GetSPToPurchaseDetails(ctx context.Context, in *GetSPToPurchaseDetailsRequest, opts ...grpc.CallOption) (*GetSPToPurchaseDetailsResponse, error)
	// Sends savings plan details to be purchased to a Slack channel
	SendSPToPurchaseDetailsNotification(ctx context.Context, in *SendSPToPurchaseDetailsNotificationsRequest, opts ...grpc.CallOption) (*SendSPToPurchaseDetailsNotificationsResponse, error)
}

type flowClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowClient(cc grpc.ClientConnInterface) FlowClient {
	return &flowClient{cc}
}

func (c *flowClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, Flow_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) SetSettings(ctx context.Context, in *SetSettingsRequest, opts ...grpc.CallOption) (*SetSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSettingsResponse)
	err := c.cc.Invoke(ctx, Flow_SetSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, Flow_GetSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetRecommendationDetails(ctx context.Context, in *GetRecommendationDetailsRequest, opts ...grpc.CallOption) (*GetRecommendationDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendationDetailsResponse)
	err := c.cc.Invoke(ctx, Flow_GetRecommendationDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetCostExplorerAccessTemplateUrl(ctx context.Context, in *GetCostExplorerAccessTemplateUrlRequest, opts ...grpc.CallOption) (*GetCostExplorerAccessTemplateUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCostExplorerAccessTemplateUrlResponse)
	err := c.cc.Invoke(ctx, Flow_GetCostExplorerAccessTemplateUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetSettingsHistory(ctx context.Context, in *GetSettingsHistoryRequest, opts ...grpc.CallOption) (*GetSettingsHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSettingsHistoryResponse)
	err := c.cc.Invoke(ctx, Flow_GetSettingsHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) CreateCostExplorerAccess(ctx context.Context, in *CreateCostExplorerAccessRequest, opts ...grpc.CallOption) (*CreateCostExplorerAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCostExplorerAccessResponse)
	err := c.cc.Invoke(ctx, Flow_CreateCostExplorerAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetDailyUsageCostDetails(ctx context.Context, in *GetDailyUsageCostDetailsRequest, opts ...grpc.CallOption) (*GetDailyUsageCostDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailyUsageCostDetailsResponse)
	err := c.cc.Invoke(ctx, Flow_GetDailyUsageCostDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetAwsAccounts(ctx context.Context, in *GetAwsAccountsRequest, opts ...grpc.CallOption) (*GetAwsAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAwsAccountsResponse)
	err := c.cc.Invoke(ctx, Flow_GetAwsAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetSPPurchaseAccessTemplateUrl(ctx context.Context, in *GetSPPurchaseAccessTemplateUrlRequest, opts ...grpc.CallOption) (*GetSPPurchaseAccessTemplateUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSPPurchaseAccessTemplateUrlResponse)
	err := c.cc.Invoke(ctx, Flow_GetSPPurchaseAccessTemplateUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) CreateSPPurchaseAccess(ctx context.Context, in *CreateSPPurchaseAccessRequest, opts ...grpc.CallOption) (*CreateSPPurchaseAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSPPurchaseAccessResponse)
	err := c.cc.Invoke(ctx, Flow_CreateSPPurchaseAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetCrossAccountAccessDetails(ctx context.Context, in *GetCrossAccountAccessDetailsRequest, opts ...grpc.CallOption) (*GetCrossAccountAccessDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCrossAccountAccessDetailsResponse)
	err := c.cc.Invoke(ctx, Flow_GetCrossAccountAccessDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) CreateSPRecommendationNotification(ctx context.Context, in *CreateSPRecommendationNotificationRequest, opts ...grpc.CallOption) (*CreateSPRecommendationNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSPRecommendationNotificationResponse)
	err := c.cc.Invoke(ctx, Flow_CreateSPRecommendationNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) GetSPToPurchaseDetails(ctx context.Context, in *GetSPToPurchaseDetailsRequest, opts ...grpc.CallOption) (*GetSPToPurchaseDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSPToPurchaseDetailsResponse)
	err := c.cc.Invoke(ctx, Flow_GetSPToPurchaseDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowClient) SendSPToPurchaseDetailsNotification(ctx context.Context, in *SendSPToPurchaseDetailsNotificationsRequest, opts ...grpc.CallOption) (*SendSPToPurchaseDetailsNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSPToPurchaseDetailsNotificationsResponse)
	err := c.cc.Invoke(ctx, Flow_SendSPToPurchaseDetailsNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowServer is the server API for Flow service.
// All implementations must embed UnimplementedFlowServer
// for forward compatibility
//
// Flow service definition.
type FlowServer interface {
	// For Testing Purposes Only.
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// Creates or Updates the settings configuration for recommendation.
	SetSettings(context.Context, *SetSettingsRequest) (*SetSettingsResponse, error)
	// Fetch previous settings for a user
	GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)
	// Fetch user savings plan details
	GetRecommendationDetails(context.Context, *GetRecommendationDetailsRequest) (*GetRecommendationDetailsResponse, error)
	// Gets a CloudFormation launch URL for enabling read-only cross-account access to cost explorer information (API only).
	GetCostExplorerAccessTemplateUrl(context.Context, *GetCostExplorerAccessTemplateUrlRequest) (*GetCostExplorerAccessTemplateUrlResponse, error)
	// Gets the settings configuration history for a user.
	GetSettingsHistory(context.Context, *GetSettingsHistoryRequest) (*GetSettingsHistoryResponse, error)
	// Creates a default cross-account access role for cost explorer (API only).
	CreateCostExplorerAccess(context.Context, *CreateCostExplorerAccessRequest) (*CreateCostExplorerAccessResponse, error)
	// Gets the daily cost and usage details.
	GetDailyUsageCostDetails(context.Context, *GetDailyUsageCostDetailsRequest) (*GetDailyUsageCostDetailsResponse, error)
	// Returns all the aws accounts and its payer of the msp id
	GetAwsAccounts(context.Context, *GetAwsAccountsRequest) (*GetAwsAccountsResponse, error)
	// Gets a CloudFormation launch URL for Savings Plan purchase capabilities
	GetSPPurchaseAccessTemplateUrl(context.Context, *GetSPPurchaseAccessTemplateUrlRequest) (*GetSPPurchaseAccessTemplateUrlResponse, error)
	// Creates a default cross-account access role for Savings Plan (API only).
	CreateSPPurchaseAccess(context.Context, *CreateSPPurchaseAccessRequest) (*CreateSPPurchaseAccessResponse, error)
	// Returns the activated cross-account access roles of the target payerId.
	GetCrossAccountAccessDetails(context.Context, *GetCrossAccountAccessDetailsRequest) (*GetCrossAccountAccessDetailsResponse, error)
	// Sends configuration and recommendation to a Slack channel
	CreateSPRecommendationNotification(context.Context, *CreateSPRecommendationNotificationRequest) (*CreateSPRecommendationNotificationResponse, error)
	// Get savings plan details to be purchased .
	GetSPToPurchaseDetails(context.Context, *GetSPToPurchaseDetailsRequest) (*GetSPToPurchaseDetailsResponse, error)
	// Sends savings plan details to be purchased to a Slack channel
	SendSPToPurchaseDetailsNotification(context.Context, *SendSPToPurchaseDetailsNotificationsRequest) (*SendSPToPurchaseDetailsNotificationsResponse, error)
	mustEmbedUnimplementedFlowServer()
}

// UnimplementedFlowServer must be embedded to have forward compatible implementations.
type UnimplementedFlowServer struct {
}

func (UnimplementedFlowServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedFlowServer) SetSettings(context.Context, *SetSettingsRequest) (*SetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSettings not implemented")
}
func (UnimplementedFlowServer) GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedFlowServer) GetRecommendationDetails(context.Context, *GetRecommendationDetailsRequest) (*GetRecommendationDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationDetails not implemented")
}
func (UnimplementedFlowServer) GetCostExplorerAccessTemplateUrl(context.Context, *GetCostExplorerAccessTemplateUrlRequest) (*GetCostExplorerAccessTemplateUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostExplorerAccessTemplateUrl not implemented")
}
func (UnimplementedFlowServer) GetSettingsHistory(context.Context, *GetSettingsHistoryRequest) (*GetSettingsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingsHistory not implemented")
}
func (UnimplementedFlowServer) CreateCostExplorerAccess(context.Context, *CreateCostExplorerAccessRequest) (*CreateCostExplorerAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCostExplorerAccess not implemented")
}
func (UnimplementedFlowServer) GetDailyUsageCostDetails(context.Context, *GetDailyUsageCostDetailsRequest) (*GetDailyUsageCostDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyUsageCostDetails not implemented")
}
func (UnimplementedFlowServer) GetAwsAccounts(context.Context, *GetAwsAccountsRequest) (*GetAwsAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAwsAccounts not implemented")
}
func (UnimplementedFlowServer) GetSPPurchaseAccessTemplateUrl(context.Context, *GetSPPurchaseAccessTemplateUrlRequest) (*GetSPPurchaseAccessTemplateUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSPPurchaseAccessTemplateUrl not implemented")
}
func (UnimplementedFlowServer) CreateSPPurchaseAccess(context.Context, *CreateSPPurchaseAccessRequest) (*CreateSPPurchaseAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSPPurchaseAccess not implemented")
}
func (UnimplementedFlowServer) GetCrossAccountAccessDetails(context.Context, *GetCrossAccountAccessDetailsRequest) (*GetCrossAccountAccessDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrossAccountAccessDetails not implemented")
}
func (UnimplementedFlowServer) CreateSPRecommendationNotification(context.Context, *CreateSPRecommendationNotificationRequest) (*CreateSPRecommendationNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSPRecommendationNotification not implemented")
}
func (UnimplementedFlowServer) GetSPToPurchaseDetails(context.Context, *GetSPToPurchaseDetailsRequest) (*GetSPToPurchaseDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSPToPurchaseDetails not implemented")
}
func (UnimplementedFlowServer) SendSPToPurchaseDetailsNotification(context.Context, *SendSPToPurchaseDetailsNotificationsRequest) (*SendSPToPurchaseDetailsNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSPToPurchaseDetailsNotification not implemented")
}
func (UnimplementedFlowServer) mustEmbedUnimplementedFlowServer() {}

// UnsafeFlowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowServer will
// result in compilation errors.
type UnsafeFlowServer interface {
	mustEmbedUnimplementedFlowServer()
}

func RegisterFlowServer(s grpc.ServiceRegistrar, srv FlowServer) {
	s.RegisterService(&Flow_ServiceDesc, srv)
}

func _Flow_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_SetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).SetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_SetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).SetSettings(ctx, req.(*SetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetRecommendationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetRecommendationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetRecommendationDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetRecommendationDetails(ctx, req.(*GetRecommendationDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetCostExplorerAccessTemplateUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostExplorerAccessTemplateUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetCostExplorerAccessTemplateUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetCostExplorerAccessTemplateUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetCostExplorerAccessTemplateUrl(ctx, req.(*GetCostExplorerAccessTemplateUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetSettingsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetSettingsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetSettingsHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetSettingsHistory(ctx, req.(*GetSettingsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_CreateCostExplorerAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCostExplorerAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).CreateCostExplorerAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_CreateCostExplorerAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).CreateCostExplorerAccess(ctx, req.(*CreateCostExplorerAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetDailyUsageCostDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyUsageCostDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetDailyUsageCostDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetDailyUsageCostDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetDailyUsageCostDetails(ctx, req.(*GetDailyUsageCostDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetAwsAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAwsAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetAwsAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetAwsAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetAwsAccounts(ctx, req.(*GetAwsAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetSPPurchaseAccessTemplateUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSPPurchaseAccessTemplateUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetSPPurchaseAccessTemplateUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetSPPurchaseAccessTemplateUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetSPPurchaseAccessTemplateUrl(ctx, req.(*GetSPPurchaseAccessTemplateUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_CreateSPPurchaseAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSPPurchaseAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).CreateSPPurchaseAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_CreateSPPurchaseAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).CreateSPPurchaseAccess(ctx, req.(*CreateSPPurchaseAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetCrossAccountAccessDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrossAccountAccessDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetCrossAccountAccessDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetCrossAccountAccessDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetCrossAccountAccessDetails(ctx, req.(*GetCrossAccountAccessDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_CreateSPRecommendationNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSPRecommendationNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).CreateSPRecommendationNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_CreateSPRecommendationNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).CreateSPRecommendationNotification(ctx, req.(*CreateSPRecommendationNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_GetSPToPurchaseDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSPToPurchaseDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).GetSPToPurchaseDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_GetSPToPurchaseDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).GetSPToPurchaseDetails(ctx, req.(*GetSPToPurchaseDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flow_SendSPToPurchaseDetailsNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSPToPurchaseDetailsNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowServer).SendSPToPurchaseDetailsNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Flow_SendSPToPurchaseDetailsNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowServer).SendSPToPurchaseDetailsNotification(ctx, req.(*SendSPToPurchaseDetailsNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Flow_ServiceDesc is the grpc.ServiceDesc for Flow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Flow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.flow.v1.Flow",
	HandlerType: (*FlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Flow_GetInfo_Handler,
		},
		{
			MethodName: "SetSettings",
			Handler:    _Flow_SetSettings_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _Flow_GetSettings_Handler,
		},
		{
			MethodName: "GetRecommendationDetails",
			Handler:    _Flow_GetRecommendationDetails_Handler,
		},
		{
			MethodName: "GetCostExplorerAccessTemplateUrl",
			Handler:    _Flow_GetCostExplorerAccessTemplateUrl_Handler,
		},
		{
			MethodName: "GetSettingsHistory",
			Handler:    _Flow_GetSettingsHistory_Handler,
		},
		{
			MethodName: "CreateCostExplorerAccess",
			Handler:    _Flow_CreateCostExplorerAccess_Handler,
		},
		{
			MethodName: "GetDailyUsageCostDetails",
			Handler:    _Flow_GetDailyUsageCostDetails_Handler,
		},
		{
			MethodName: "GetAwsAccounts",
			Handler:    _Flow_GetAwsAccounts_Handler,
		},
		{
			MethodName: "GetSPPurchaseAccessTemplateUrl",
			Handler:    _Flow_GetSPPurchaseAccessTemplateUrl_Handler,
		},
		{
			MethodName: "CreateSPPurchaseAccess",
			Handler:    _Flow_CreateSPPurchaseAccess_Handler,
		},
		{
			MethodName: "GetCrossAccountAccessDetails",
			Handler:    _Flow_GetCrossAccountAccessDetails_Handler,
		},
		{
			MethodName: "CreateSPRecommendationNotification",
			Handler:    _Flow_CreateSPRecommendationNotification_Handler,
		},
		{
			MethodName: "GetSPToPurchaseDetails",
			Handler:    _Flow_GetSPToPurchaseDetails_Handler,
		},
		{
			MethodName: "SendSPToPurchaseDetailsNotification",
			Handler:    _Flow_SendSPToPurchaseDetailsNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flow/v1/flow.proto",
}
