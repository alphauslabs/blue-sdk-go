// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/forecast.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ForecastData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AccountId       string                 `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	ProductCategory string                 `protobuf:"bytes,2,opt,name=productCategory,proto3" json:"productCategory,omitempty"`
	ProductCode     string                 `protobuf:"bytes,3,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Frequency       string                 `protobuf:"bytes,4,opt,name=frequency,proto3" json:"frequency,omitempty"` //daily, monthly
	Date            string                 `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	HistoricalCost  float64                `protobuf:"fixed64,6,opt,name=historicalCost,proto3" json:"historicalCost,omitempty"`
	ForecastedCost  float64                `protobuf:"fixed64,7,opt,name=forecastedCost,proto3" json:"forecastedCost,omitempty"`
	UpperBound      float64                `protobuf:"fixed64,8,opt,name=upperBound,proto3" json:"upperBound,omitempty"`
	LowerBound      float64                `protobuf:"fixed64,9,opt,name=lowerBound,proto3" json:"lowerBound,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ForecastData) Reset() {
	*x = ForecastData{}
	mi := &file_api_forecast_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForecastData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastData) ProtoMessage() {}

func (x *ForecastData) ProtoReflect() protoreflect.Message {
	mi := &file_api_forecast_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastData.ProtoReflect.Descriptor instead.
func (*ForecastData) Descriptor() ([]byte, []int) {
	return file_api_forecast_proto_rawDescGZIP(), []int{0}
}

func (x *ForecastData) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ForecastData) GetProductCategory() string {
	if x != nil {
		return x.ProductCategory
	}
	return ""
}

func (x *ForecastData) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ForecastData) GetFrequency() string {
	if x != nil {
		return x.Frequency
	}
	return ""
}

func (x *ForecastData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ForecastData) GetHistoricalCost() float64 {
	if x != nil {
		return x.HistoricalCost
	}
	return 0
}

func (x *ForecastData) GetForecastedCost() float64 {
	if x != nil {
		return x.ForecastedCost
	}
	return 0
}

func (x *ForecastData) GetUpperBound() float64 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

func (x *ForecastData) GetLowerBound() float64 {
	if x != nil {
		return x.LowerBound
	}
	return 0
}

type AccountGroupForecast struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       string                 `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Data          []*ForecastData        `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountGroupForecast) Reset() {
	*x = AccountGroupForecast{}
	mi := &file_api_forecast_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountGroupForecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountGroupForecast) ProtoMessage() {}

func (x *AccountGroupForecast) ProtoReflect() protoreflect.Message {
	mi := &file_api_forecast_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountGroupForecast.ProtoReflect.Descriptor instead.
func (*AccountGroupForecast) Descriptor() ([]byte, []int) {
	return file_api_forecast_proto_rawDescGZIP(), []int{1}
}

func (x *AccountGroupForecast) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AccountGroupForecast) GetData() []*ForecastData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BillingGroupForecast struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	BillingInternalId string                 `protobuf:"bytes,1,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	Data              []*ForecastData        `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BillingGroupForecast) Reset() {
	*x = BillingGroupForecast{}
	mi := &file_api_forecast_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BillingGroupForecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingGroupForecast) ProtoMessage() {}

func (x *BillingGroupForecast) ProtoReflect() protoreflect.Message {
	mi := &file_api_forecast_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingGroupForecast.ProtoReflect.Descriptor instead.
func (*BillingGroupForecast) Descriptor() ([]byte, []int) {
	return file_api_forecast_proto_rawDescGZIP(), []int{2}
}

func (x *BillingGroupForecast) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *BillingGroupForecast) GetData() []*ForecastData {
	if x != nil {
		return x.Data
	}
	return nil
}

type OrgForecast struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	OrgId         string                  `protobuf:"bytes,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Data          []*BillingGroupForecast `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrgForecast) Reset() {
	*x = OrgForecast{}
	mi := &file_api_forecast_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrgForecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgForecast) ProtoMessage() {}

func (x *OrgForecast) ProtoReflect() protoreflect.Message {
	mi := &file_api_forecast_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgForecast.ProtoReflect.Descriptor instead.
func (*OrgForecast) Descriptor() ([]byte, []int) {
	return file_api_forecast_proto_rawDescGZIP(), []int{3}
}

func (x *OrgForecast) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *OrgForecast) GetData() []*BillingGroupForecast {
	if x != nil {
		return x.Data
	}
	return nil
}

type MonthToDateForecastData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AccountId       string                 `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	ProductCategory string                 `protobuf:"bytes,2,opt,name=productCategory,proto3" json:"productCategory,omitempty"`
	ProductCode     string                 `protobuf:"bytes,3,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Date            string                 `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	AccumulatedCost float64                `protobuf:"fixed64,5,opt,name=accumulatedCost,proto3" json:"accumulatedCost,omitempty"`
	ForecastCost    float64                `protobuf:"fixed64,6,opt,name=forecastCost,proto3" json:"forecastCost,omitempty"`
	Budget          float64                `protobuf:"fixed64,7,opt,name=budget,proto3" json:"budget,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MonthToDateForecastData) Reset() {
	*x = MonthToDateForecastData{}
	mi := &file_api_forecast_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonthToDateForecastData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthToDateForecastData) ProtoMessage() {}

func (x *MonthToDateForecastData) ProtoReflect() protoreflect.Message {
	mi := &file_api_forecast_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthToDateForecastData.ProtoReflect.Descriptor instead.
func (*MonthToDateForecastData) Descriptor() ([]byte, []int) {
	return file_api_forecast_proto_rawDescGZIP(), []int{4}
}

func (x *MonthToDateForecastData) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *MonthToDateForecastData) GetProductCategory() string {
	if x != nil {
		return x.ProductCategory
	}
	return ""
}

func (x *MonthToDateForecastData) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *MonthToDateForecastData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *MonthToDateForecastData) GetAccumulatedCost() float64 {
	if x != nil {
		return x.AccumulatedCost
	}
	return 0
}

func (x *MonthToDateForecastData) GetForecastCost() float64 {
	if x != nil {
		return x.ForecastCost
	}
	return 0
}

func (x *MonthToDateForecastData) GetBudget() float64 {
	if x != nil {
		return x.Budget
	}
	return 0
}

type BillingGroupMonthToDateForecast struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	BillingInternalId string                     `protobuf:"bytes,1,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	Data              []*MonthToDateForecastData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BillingGroupMonthToDateForecast) Reset() {
	*x = BillingGroupMonthToDateForecast{}
	mi := &file_api_forecast_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BillingGroupMonthToDateForecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingGroupMonthToDateForecast) ProtoMessage() {}

func (x *BillingGroupMonthToDateForecast) ProtoReflect() protoreflect.Message {
	mi := &file_api_forecast_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingGroupMonthToDateForecast.ProtoReflect.Descriptor instead.
func (*BillingGroupMonthToDateForecast) Descriptor() ([]byte, []int) {
	return file_api_forecast_proto_rawDescGZIP(), []int{5}
}

func (x *BillingGroupMonthToDateForecast) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *BillingGroupMonthToDateForecast) GetData() []*MonthToDateForecastData {
	if x != nil {
		return x.Data
	}
	return nil
}

type OrgMonthToDateForecast struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	OrgId         string                             `protobuf:"bytes,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Data          []*BillingGroupMonthToDateForecast `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrgMonthToDateForecast) Reset() {
	*x = OrgMonthToDateForecast{}
	mi := &file_api_forecast_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrgMonthToDateForecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgMonthToDateForecast) ProtoMessage() {}

func (x *OrgMonthToDateForecast) ProtoReflect() protoreflect.Message {
	mi := &file_api_forecast_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgMonthToDateForecast.ProtoReflect.Descriptor instead.
func (*OrgMonthToDateForecast) Descriptor() ([]byte, []int) {
	return file_api_forecast_proto_rawDescGZIP(), []int{6}
}

func (x *OrgMonthToDateForecast) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *OrgMonthToDateForecast) GetData() []*BillingGroupMonthToDateForecast {
	if x != nil {
		return x.Data
	}
	return nil
}

type MonthlyCostForecast struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          string                 `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	CostActual    float64                `protobuf:"fixed64,2,opt,name=costActual,proto3" json:"costActual,omitempty"`
	CostForecast  float64                `protobuf:"fixed64,3,opt,name=costForecast,proto3" json:"costForecast,omitempty"`
	Budget        float64                `protobuf:"fixed64,4,opt,name=budget,proto3" json:"budget,omitempty"`
	UpperBound    float64                `protobuf:"fixed64,5,opt,name=upperBound,proto3" json:"upperBound,omitempty"`
	LowerBound    float64                `protobuf:"fixed64,6,opt,name=lowerBound,proto3" json:"lowerBound,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonthlyCostForecast) Reset() {
	*x = MonthlyCostForecast{}
	mi := &file_api_forecast_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonthlyCostForecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyCostForecast) ProtoMessage() {}

func (x *MonthlyCostForecast) ProtoReflect() protoreflect.Message {
	mi := &file_api_forecast_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyCostForecast.ProtoReflect.Descriptor instead.
func (*MonthlyCostForecast) Descriptor() ([]byte, []int) {
	return file_api_forecast_proto_rawDescGZIP(), []int{7}
}

func (x *MonthlyCostForecast) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *MonthlyCostForecast) GetCostActual() float64 {
	if x != nil {
		return x.CostActual
	}
	return 0
}

func (x *MonthlyCostForecast) GetCostForecast() float64 {
	if x != nil {
		return x.CostForecast
	}
	return 0
}

func (x *MonthlyCostForecast) GetBudget() float64 {
	if x != nil {
		return x.Budget
	}
	return 0
}

func (x *MonthlyCostForecast) GetUpperBound() float64 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

func (x *MonthlyCostForecast) GetLowerBound() float64 {
	if x != nil {
		return x.LowerBound
	}
	return 0
}

type MonthOnMonthCostForecast struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Category      string                 `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	CostCurrent   float64                `protobuf:"fixed64,2,opt,name=costCurrent,proto3" json:"costCurrent,omitempty"`
	CostPrev      float64                `protobuf:"fixed64,3,opt,name=costPrev,proto3" json:"costPrev,omitempty"`
	CostForecast  float64                `protobuf:"fixed64,4,opt,name=costForecast,proto3" json:"costForecast,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonthOnMonthCostForecast) Reset() {
	*x = MonthOnMonthCostForecast{}
	mi := &file_api_forecast_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonthOnMonthCostForecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthOnMonthCostForecast) ProtoMessage() {}

func (x *MonthOnMonthCostForecast) ProtoReflect() protoreflect.Message {
	mi := &file_api_forecast_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthOnMonthCostForecast.ProtoReflect.Descriptor instead.
func (*MonthOnMonthCostForecast) Descriptor() ([]byte, []int) {
	return file_api_forecast_proto_rawDescGZIP(), []int{8}
}

func (x *MonthOnMonthCostForecast) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *MonthOnMonthCostForecast) GetCostCurrent() float64 {
	if x != nil {
		return x.CostCurrent
	}
	return 0
}

func (x *MonthOnMonthCostForecast) GetCostPrev() float64 {
	if x != nil {
		return x.CostPrev
	}
	return 0
}

func (x *MonthOnMonthCostForecast) GetCostForecast() float64 {
	if x != nil {
		return x.CostForecast
	}
	return 0
}

type MonthToDateCostForecast struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Date            string                 `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	CostPrev        float64                `protobuf:"fixed64,2,opt,name=costPrev,proto3" json:"costPrev,omitempty"`
	CostAccumulated float64                `protobuf:"fixed64,3,opt,name=costAccumulated,proto3" json:"costAccumulated,omitempty"`
	CostForecast    float64                `protobuf:"fixed64,4,opt,name=costForecast,proto3" json:"costForecast,omitempty"`
	UpperBound      float64                `protobuf:"fixed64,5,opt,name=upperBound,proto3" json:"upperBound,omitempty"`
	LowerBound      float64                `protobuf:"fixed64,6,opt,name=lowerBound,proto3" json:"lowerBound,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MonthToDateCostForecast) Reset() {
	*x = MonthToDateCostForecast{}
	mi := &file_api_forecast_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonthToDateCostForecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthToDateCostForecast) ProtoMessage() {}

func (x *MonthToDateCostForecast) ProtoReflect() protoreflect.Message {
	mi := &file_api_forecast_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthToDateCostForecast.ProtoReflect.Descriptor instead.
func (*MonthToDateCostForecast) Descriptor() ([]byte, []int) {
	return file_api_forecast_proto_rawDescGZIP(), []int{9}
}

func (x *MonthToDateCostForecast) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *MonthToDateCostForecast) GetCostPrev() float64 {
	if x != nil {
		return x.CostPrev
	}
	return 0
}

func (x *MonthToDateCostForecast) GetCostAccumulated() float64 {
	if x != nil {
		return x.CostAccumulated
	}
	return 0
}

func (x *MonthToDateCostForecast) GetCostForecast() float64 {
	if x != nil {
		return x.CostForecast
	}
	return 0
}

func (x *MonthToDateCostForecast) GetUpperBound() float64 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

func (x *MonthToDateCostForecast) GetLowerBound() float64 {
	if x != nil {
		return x.LowerBound
	}
	return 0
}

var File_api_forecast_proto protoreflect.FileDescriptor

const file_api_forecast_proto_rawDesc = "" +
	"\n" +
	"\x12api/forecast.proto\x12\vblueapi.api\"\xba\x02\n" +
	"\fForecastData\x12\x1c\n" +
	"\taccountId\x18\x01 \x01(\tR\taccountId\x12(\n" +
	"\x0fproductCategory\x18\x02 \x01(\tR\x0fproductCategory\x12 \n" +
	"\vproductCode\x18\x03 \x01(\tR\vproductCode\x12\x1c\n" +
	"\tfrequency\x18\x04 \x01(\tR\tfrequency\x12\x12\n" +
	"\x04date\x18\x05 \x01(\tR\x04date\x12&\n" +
	"\x0ehistoricalCost\x18\x06 \x01(\x01R\x0ehistoricalCost\x12&\n" +
	"\x0eforecastedCost\x18\a \x01(\x01R\x0eforecastedCost\x12\x1e\n" +
	"\n" +
	"upperBound\x18\b \x01(\x01R\n" +
	"upperBound\x12\x1e\n" +
	"\n" +
	"lowerBound\x18\t \x01(\x01R\n" +
	"lowerBound\"_\n" +
	"\x14AccountGroupForecast\x12\x18\n" +
	"\agroupId\x18\x01 \x01(\tR\agroupId\x12-\n" +
	"\x04data\x18\x02 \x03(\v2\x19.blueapi.api.ForecastDataR\x04data\"s\n" +
	"\x14BillingGroupForecast\x12,\n" +
	"\x11billingInternalId\x18\x01 \x01(\tR\x11billingInternalId\x12-\n" +
	"\x04data\x18\x02 \x03(\v2\x19.blueapi.api.ForecastDataR\x04data\"Z\n" +
	"\vOrgForecast\x12\x14\n" +
	"\x05orgId\x18\x01 \x01(\tR\x05orgId\x125\n" +
	"\x04data\x18\x02 \x03(\v2!.blueapi.api.BillingGroupForecastR\x04data\"\xfd\x01\n" +
	"\x17MonthToDateForecastData\x12\x1c\n" +
	"\taccountId\x18\x01 \x01(\tR\taccountId\x12(\n" +
	"\x0fproductCategory\x18\x02 \x01(\tR\x0fproductCategory\x12 \n" +
	"\vproductCode\x18\x03 \x01(\tR\vproductCode\x12\x12\n" +
	"\x04date\x18\x04 \x01(\tR\x04date\x12(\n" +
	"\x0faccumulatedCost\x18\x05 \x01(\x01R\x0faccumulatedCost\x12\"\n" +
	"\fforecastCost\x18\x06 \x01(\x01R\fforecastCost\x12\x16\n" +
	"\x06budget\x18\a \x01(\x01R\x06budget\"\x89\x01\n" +
	"\x1fBillingGroupMonthToDateForecast\x12,\n" +
	"\x11billingInternalId\x18\x01 \x01(\tR\x11billingInternalId\x128\n" +
	"\x04data\x18\x02 \x03(\v2$.blueapi.api.MonthToDateForecastDataR\x04data\"p\n" +
	"\x16OrgMonthToDateForecast\x12\x14\n" +
	"\x05orgId\x18\x01 \x01(\tR\x05orgId\x12@\n" +
	"\x04data\x18\x02 \x03(\v2,.blueapi.api.BillingGroupMonthToDateForecastR\x04data\"\xc5\x01\n" +
	"\x13MonthlyCostForecast\x12\x12\n" +
	"\x04date\x18\x01 \x01(\tR\x04date\x12\x1e\n" +
	"\n" +
	"costActual\x18\x02 \x01(\x01R\n" +
	"costActual\x12\"\n" +
	"\fcostForecast\x18\x03 \x01(\x01R\fcostForecast\x12\x16\n" +
	"\x06budget\x18\x04 \x01(\x01R\x06budget\x12\x1e\n" +
	"\n" +
	"upperBound\x18\x05 \x01(\x01R\n" +
	"upperBound\x12\x1e\n" +
	"\n" +
	"lowerBound\x18\x06 \x01(\x01R\n" +
	"lowerBound\"\x98\x01\n" +
	"\x18MonthOnMonthCostForecast\x12\x1a\n" +
	"\bcategory\x18\x01 \x01(\tR\bcategory\x12 \n" +
	"\vcostCurrent\x18\x02 \x01(\x01R\vcostCurrent\x12\x1a\n" +
	"\bcostPrev\x18\x03 \x01(\x01R\bcostPrev\x12\"\n" +
	"\fcostForecast\x18\x04 \x01(\x01R\fcostForecast\"\xd7\x01\n" +
	"\x17MonthToDateCostForecast\x12\x12\n" +
	"\x04date\x18\x01 \x01(\tR\x04date\x12\x1a\n" +
	"\bcostPrev\x18\x02 \x01(\x01R\bcostPrev\x12(\n" +
	"\x0fcostAccumulated\x18\x03 \x01(\x01R\x0fcostAccumulated\x12\"\n" +
	"\fcostForecast\x18\x04 \x01(\x01R\fcostForecast\x12\x1e\n" +
	"\n" +
	"upperBound\x18\x05 \x01(\x01R\n" +
	"upperBound\x12\x1e\n" +
	"\n" +
	"lowerBound\x18\x06 \x01(\x01R\n" +
	"lowerBoundBU\n" +
	"\x19cloud.alphaus.blueapi.apiB\x10ApiForecastProtoZ&github.com/alphauslabs/blue-sdk-go/apib\x06proto3"

var (
	file_api_forecast_proto_rawDescOnce sync.Once
	file_api_forecast_proto_rawDescData []byte
)

func file_api_forecast_proto_rawDescGZIP() []byte {
	file_api_forecast_proto_rawDescOnce.Do(func() {
		file_api_forecast_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_forecast_proto_rawDesc), len(file_api_forecast_proto_rawDesc)))
	})
	return file_api_forecast_proto_rawDescData
}

var file_api_forecast_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_forecast_proto_goTypes = []any{
	(*ForecastData)(nil),                    // 0: blueapi.api.ForecastData
	(*AccountGroupForecast)(nil),            // 1: blueapi.api.AccountGroupForecast
	(*BillingGroupForecast)(nil),            // 2: blueapi.api.BillingGroupForecast
	(*OrgForecast)(nil),                     // 3: blueapi.api.OrgForecast
	(*MonthToDateForecastData)(nil),         // 4: blueapi.api.MonthToDateForecastData
	(*BillingGroupMonthToDateForecast)(nil), // 5: blueapi.api.BillingGroupMonthToDateForecast
	(*OrgMonthToDateForecast)(nil),          // 6: blueapi.api.OrgMonthToDateForecast
	(*MonthlyCostForecast)(nil),             // 7: blueapi.api.MonthlyCostForecast
	(*MonthOnMonthCostForecast)(nil),        // 8: blueapi.api.MonthOnMonthCostForecast
	(*MonthToDateCostForecast)(nil),         // 9: blueapi.api.MonthToDateCostForecast
}
var file_api_forecast_proto_depIdxs = []int32{
	0, // 0: blueapi.api.AccountGroupForecast.data:type_name -> blueapi.api.ForecastData
	0, // 1: blueapi.api.BillingGroupForecast.data:type_name -> blueapi.api.ForecastData
	2, // 2: blueapi.api.OrgForecast.data:type_name -> blueapi.api.BillingGroupForecast
	4, // 3: blueapi.api.BillingGroupMonthToDateForecast.data:type_name -> blueapi.api.MonthToDateForecastData
	5, // 4: blueapi.api.OrgMonthToDateForecast.data:type_name -> blueapi.api.BillingGroupMonthToDateForecast
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_api_forecast_proto_init() }
func file_api_forecast_proto_init() {
	if File_api_forecast_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_forecast_proto_rawDesc), len(file_api_forecast_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_forecast_proto_goTypes,
		DependencyIndexes: file_api_forecast_proto_depIdxs,
		MessageInfos:      file_api_forecast_proto_msgTypes,
	}.Build()
	File_api_forecast_proto = out.File
	file_api_forecast_proto_goTypes = nil
	file_api_forecast_proto_depIdxs = nil
}
