// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: api/ripple/customizedbillingservice.proto

package ripple

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// supported currency.
type MethodConfig_SupportedCurrency int32

const (
	MethodConfig_USD MethodConfig_SupportedCurrency = 0
	MethodConfig_JPY MethodConfig_SupportedCurrency = 1
	MethodConfig_SGD MethodConfig_SupportedCurrency = 2
	MethodConfig_MYR MethodConfig_SupportedCurrency = 3
	MethodConfig_IDR MethodConfig_SupportedCurrency = 4
	MethodConfig_INR MethodConfig_SupportedCurrency = 5
)

// Enum value maps for MethodConfig_SupportedCurrency.
var (
	MethodConfig_SupportedCurrency_name = map[int32]string{
		0: "USD",
		1: "JPY",
		2: "SGD",
		3: "MYR",
		4: "IDR",
		5: "INR",
	}
	MethodConfig_SupportedCurrency_value = map[string]int32{
		"USD": 0,
		"JPY": 1,
		"SGD": 2,
		"MYR": 3,
		"IDR": 4,
		"INR": 5,
	}
)

func (x MethodConfig_SupportedCurrency) Enum() *MethodConfig_SupportedCurrency {
	p := new(MethodConfig_SupportedCurrency)
	*p = x
	return p
}

func (x MethodConfig_SupportedCurrency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MethodConfig_SupportedCurrency) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ripple_customizedbillingservice_proto_enumTypes[0].Descriptor()
}

func (MethodConfig_SupportedCurrency) Type() protoreflect.EnumType {
	return &file_api_ripple_customizedbillingservice_proto_enumTypes[0]
}

func (x MethodConfig_SupportedCurrency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MethodConfig_SupportedCurrency.Descriptor instead.
func (MethodConfig_SupportedCurrency) EnumDescriptor() ([]byte, []int) {
	return file_api_ripple_customizedbillingservice_proto_rawDescGZIP(), []int{1, 0}
}

type MethodConfig_ChargingMethod int32

const (
	MethodConfig_FIXED_FEE               MethodConfig_ChargingMethod = 0
	MethodConfig_PERCENTAGE              MethodConfig_ChargingMethod = 1
	MethodConfig_FIXED_FEE_OR_PERCENTAGE MethodConfig_ChargingMethod = 3
	MethodConfig_TIERED_PRICE            MethodConfig_ChargingMethod = 4
	MethodConfig_TIERED_PERCENTAGE       MethodConfig_ChargingMethod = 5
)

// Enum value maps for MethodConfig_ChargingMethod.
var (
	MethodConfig_ChargingMethod_name = map[int32]string{
		0: "FIXED_FEE",
		1: "PERCENTAGE",
		3: "FIXED_FEE_OR_PERCENTAGE",
		4: "TIERED_PRICE",
		5: "TIERED_PERCENTAGE",
	}
	MethodConfig_ChargingMethod_value = map[string]int32{
		"FIXED_FEE":               0,
		"PERCENTAGE":              1,
		"FIXED_FEE_OR_PERCENTAGE": 3,
		"TIERED_PRICE":            4,
		"TIERED_PERCENTAGE":       5,
	}
)

func (x MethodConfig_ChargingMethod) Enum() *MethodConfig_ChargingMethod {
	p := new(MethodConfig_ChargingMethod)
	*p = x
	return p
}

func (x MethodConfig_ChargingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MethodConfig_ChargingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ripple_customizedbillingservice_proto_enumTypes[1].Descriptor()
}

func (MethodConfig_ChargingMethod) Type() protoreflect.EnumType {
	return &file_api_ripple_customizedbillingservice_proto_enumTypes[1]
}

func (x MethodConfig_ChargingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MethodConfig_ChargingMethod.Descriptor instead.
func (MethodConfig_ChargingMethod) EnumDescriptor() ([]byte, []int) {
	return file_api_ripple_customizedbillingservice_proto_rawDescGZIP(), []int{1, 1}
}

type Percentage_TargetServiceConfig int32

const (
	Percentage_ALL Percentage_TargetServiceConfig = 0
)

// Enum value maps for Percentage_TargetServiceConfig.
var (
	Percentage_TargetServiceConfig_name = map[int32]string{
		0: "ALL",
	}
	Percentage_TargetServiceConfig_value = map[string]int32{
		"ALL": 0,
	}
)

func (x Percentage_TargetServiceConfig) Enum() *Percentage_TargetServiceConfig {
	p := new(Percentage_TargetServiceConfig)
	*p = x
	return p
}

func (x Percentage_TargetServiceConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Percentage_TargetServiceConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ripple_customizedbillingservice_proto_enumTypes[2].Descriptor()
}

func (Percentage_TargetServiceConfig) Type() protoreflect.EnumType {
	return &file_api_ripple_customizedbillingservice_proto_enumTypes[2]
}

func (x Percentage_TargetServiceConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Percentage_TargetServiceConfig.Descriptor instead.
func (Percentage_TargetServiceConfig) EnumDescriptor() ([]byte, []int) {
	return file_api_ripple_customizedbillingservice_proto_rawDescGZIP(), []int{3, 0}
}

type Percentage_TargetUsageConfig int32

const (
	Percentage_USAGE Percentage_TargetUsageConfig = 0
)

// Enum value maps for Percentage_TargetUsageConfig.
var (
	Percentage_TargetUsageConfig_name = map[int32]string{
		0: "USAGE",
	}
	Percentage_TargetUsageConfig_value = map[string]int32{
		"USAGE": 0,
	}
)

func (x Percentage_TargetUsageConfig) Enum() *Percentage_TargetUsageConfig {
	p := new(Percentage_TargetUsageConfig)
	*p = x
	return p
}

func (x Percentage_TargetUsageConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Percentage_TargetUsageConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ripple_customizedbillingservice_proto_enumTypes[3].Descriptor()
}

func (Percentage_TargetUsageConfig) Type() protoreflect.EnumType {
	return &file_api_ripple_customizedbillingservice_proto_enumTypes[3]
}

func (x Percentage_TargetUsageConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Percentage_TargetUsageConfig.Descriptor instead.
func (Percentage_TargetUsageConfig) EnumDescriptor() ([]byte, []int) {
	return file_api_ripple_customizedbillingservice_proto_rawDescGZIP(), []int{3, 1}
}

type FixedFeeOrPercentage_TargetServiceConfig int32

const (
	FixedFeeOrPercentage_ALL FixedFeeOrPercentage_TargetServiceConfig = 0
)

// Enum value maps for FixedFeeOrPercentage_TargetServiceConfig.
var (
	FixedFeeOrPercentage_TargetServiceConfig_name = map[int32]string{
		0: "ALL",
	}
	FixedFeeOrPercentage_TargetServiceConfig_value = map[string]int32{
		"ALL": 0,
	}
)

func (x FixedFeeOrPercentage_TargetServiceConfig) Enum() *FixedFeeOrPercentage_TargetServiceConfig {
	p := new(FixedFeeOrPercentage_TargetServiceConfig)
	*p = x
	return p
}

func (x FixedFeeOrPercentage_TargetServiceConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FixedFeeOrPercentage_TargetServiceConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ripple_customizedbillingservice_proto_enumTypes[4].Descriptor()
}

func (FixedFeeOrPercentage_TargetServiceConfig) Type() protoreflect.EnumType {
	return &file_api_ripple_customizedbillingservice_proto_enumTypes[4]
}

func (x FixedFeeOrPercentage_TargetServiceConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FixedFeeOrPercentage_TargetServiceConfig.Descriptor instead.
func (FixedFeeOrPercentage_TargetServiceConfig) EnumDescriptor() ([]byte, []int) {
	return file_api_ripple_customizedbillingservice_proto_rawDescGZIP(), []int{4, 0}
}

type FixedFeeOrPercentage_TargetUsageConfig int32

const (
	FixedFeeOrPercentage_USAGE FixedFeeOrPercentage_TargetUsageConfig = 0
)

// Enum value maps for FixedFeeOrPercentage_TargetUsageConfig.
var (
	FixedFeeOrPercentage_TargetUsageConfig_name = map[int32]string{
		0: "USAGE",
	}
	FixedFeeOrPercentage_TargetUsageConfig_value = map[string]int32{
		"USAGE": 0,
	}
)

func (x FixedFeeOrPercentage_TargetUsageConfig) Enum() *FixedFeeOrPercentage_TargetUsageConfig {
	p := new(FixedFeeOrPercentage_TargetUsageConfig)
	*p = x
	return p
}

func (x FixedFeeOrPercentage_TargetUsageConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FixedFeeOrPercentage_TargetUsageConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ripple_customizedbillingservice_proto_enumTypes[5].Descriptor()
}

func (FixedFeeOrPercentage_TargetUsageConfig) Type() protoreflect.EnumType {
	return &file_api_ripple_customizedbillingservice_proto_enumTypes[5]
}

func (x FixedFeeOrPercentage_TargetUsageConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FixedFeeOrPercentage_TargetUsageConfig.Descriptor instead.
func (FixedFeeOrPercentage_TargetUsageConfig) EnumDescriptor() ([]byte, []int) {
	return file_api_ripple_customizedbillingservice_proto_rawDescGZIP(), []int{4, 1}
}

// CustomizedBillingService resource definition.
type CustomizedBillingService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MethodConfig *MethodConfig `protobuf:"bytes,4,opt,name=methodConfig,proto3" json:"methodConfig,omitempty"`
	Created      string        `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	Updated      string        `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *CustomizedBillingService) Reset() {
	*x = CustomizedBillingService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomizedBillingService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomizedBillingService) ProtoMessage() {}

func (x *CustomizedBillingService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomizedBillingService.ProtoReflect.Descriptor instead.
func (*CustomizedBillingService) Descriptor() ([]byte, []int) {
	return file_api_ripple_customizedbillingservice_proto_rawDescGZIP(), []int{0}
}

func (x *CustomizedBillingService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CustomizedBillingService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomizedBillingService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomizedBillingService) GetMethodConfig() *MethodConfig {
	if x != nil {
		return x.MethodConfig
	}
	return nil
}

func (x *CustomizedBillingService) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *CustomizedBillingService) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

// MethodConfig resource definition.
type MethodConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency       MethodConfig_SupportedCurrency `protobuf:"varint,1,opt,name=currency,proto3,enum=blueapi.api.ripple.MethodConfig_SupportedCurrency" json:"currency,omitempty"`
	ChargingMethod MethodConfig_ChargingMethod    `protobuf:"varint,2,opt,name=chargingMethod,proto3,enum=blueapi.api.ripple.MethodConfig_ChargingMethod" json:"chargingMethod,omitempty"`
	// Types that are assignable to Config:
	//
	//	*MethodConfig_FixedFee
	//	*MethodConfig_Percentage
	//	*MethodConfig_FixedFeeOrPercentage
	//	*MethodConfig_TieredPrice
	//	*MethodConfig_TieredPercentage
	Config isMethodConfig_Config `protobuf_oneof:"Config"`
}

func (x *MethodConfig) Reset() {
	*x = MethodConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodConfig) ProtoMessage() {}

func (x *MethodConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodConfig.ProtoReflect.Descriptor instead.
func (*MethodConfig) Descriptor() ([]byte, []int) {
	return file_api_ripple_customizedbillingservice_proto_rawDescGZIP(), []int{1}
}

func (x *MethodConfig) GetCurrency() MethodConfig_SupportedCurrency {
	if x != nil {
		return x.Currency
	}
	return MethodConfig_USD
}

func (x *MethodConfig) GetChargingMethod() MethodConfig_ChargingMethod {
	if x != nil {
		return x.ChargingMethod
	}
	return MethodConfig_FIXED_FEE
}

func (m *MethodConfig) GetConfig() isMethodConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *MethodConfig) GetFixedFee() *FixedFee {
	if x, ok := x.GetConfig().(*MethodConfig_FixedFee); ok {
		return x.FixedFee
	}
	return nil
}

func (x *MethodConfig) GetPercentage() *Percentage {
	if x, ok := x.GetConfig().(*MethodConfig_Percentage); ok {
		return x.Percentage
	}
	return nil
}

func (x *MethodConfig) GetFixedFeeOrPercentage() *FixedFeeOrPercentage {
	if x, ok := x.GetConfig().(*MethodConfig_FixedFeeOrPercentage); ok {
		return x.FixedFeeOrPercentage
	}
	return nil
}

func (x *MethodConfig) GetTieredPrice() *TieredPrice {
	if x, ok := x.GetConfig().(*MethodConfig_TieredPrice); ok {
		return x.TieredPrice
	}
	return nil
}

func (x *MethodConfig) GetTieredPercentage() *TieredPercentage {
	if x, ok := x.GetConfig().(*MethodConfig_TieredPercentage); ok {
		return x.TieredPercentage
	}
	return nil
}

type isMethodConfig_Config interface {
	isMethodConfig_Config()
}

type MethodConfig_FixedFee struct {
	FixedFee *FixedFee `protobuf:"bytes,3,opt,name=fixedFee,proto3,oneof"`
}

type MethodConfig_Percentage struct {
	Percentage *Percentage `protobuf:"bytes,4,opt,name=percentage,proto3,oneof"`
}

type MethodConfig_FixedFeeOrPercentage struct {
	FixedFeeOrPercentage *FixedFeeOrPercentage `protobuf:"bytes,5,opt,name=fixedFeeOrPercentage,proto3,oneof"`
}

type MethodConfig_TieredPrice struct {
	TieredPrice *TieredPrice `protobuf:"bytes,6,opt,name=TieredPrice,proto3,oneof"`
}

type MethodConfig_TieredPercentage struct {
	TieredPercentage *TieredPercentage `protobuf:"bytes,7,opt,name=TieredPercentage,proto3,oneof"`
}

func (*MethodConfig_FixedFee) isMethodConfig_Config() {}

func (*MethodConfig_Percentage) isMethodConfig_Config() {}

func (*MethodConfig_FixedFeeOrPercentage) isMethodConfig_Config() {}

func (*MethodConfig_TieredPrice) isMethodConfig_Config() {}

func (*MethodConfig_TieredPercentage) isMethodConfig_Config() {}

// fixed fee
type FixedFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FixedFee) Reset() {
	*x = FixedFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedFee) ProtoMessage() {}

func (x *FixedFee) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedFee.ProtoReflect.Descriptor instead.
func (*FixedFee) Descriptor() ([]byte, []int) {
	return file_api_ripple_customizedbillingservice_proto_rawDescGZIP(), []int{2}
}

func (x *FixedFee) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// percentage
type Percentage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value      float64                        `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Service    Percentage_TargetServiceConfig `protobuf:"varint,2,opt,name=service,proto3,enum=blueapi.api.ripple.Percentage_TargetServiceConfig" json:"service,omitempty"`
	Usage      Percentage_TargetUsageConfig   `protobuf:"varint,3,opt,name=usage,proto3,enum=blueapi.api.ripple.Percentage_TargetUsageConfig" json:"usage,omitempty"`
	Discounted bool                           `protobuf:"varint,4,opt,name=discounted,proto3" json:"discounted,omitempty"`
}

func (x *Percentage) Reset() {
	*x = Percentage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Percentage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Percentage) ProtoMessage() {}

func (x *Percentage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Percentage.ProtoReflect.Descriptor instead.
func (*Percentage) Descriptor() ([]byte, []int) {
	return file_api_ripple_customizedbillingservice_proto_rawDescGZIP(), []int{3}
}

func (x *Percentage) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Percentage) GetService() Percentage_TargetServiceConfig {
	if x != nil {
		return x.Service
	}
	return Percentage_ALL
}

func (x *Percentage) GetUsage() Percentage_TargetUsageConfig {
	if x != nil {
		return x.Usage
	}
	return Percentage_USAGE
}

func (x *Percentage) GetDiscounted() bool {
	if x != nil {
		return x.Discounted
	}
	return false
}

// fixed fee or percentage
type FixedFeeOrPercentage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixedFeeValue   float64                                  `protobuf:"fixed64,1,opt,name=fixedFeeValue,proto3" json:"fixedFeeValue,omitempty"`
	PercentageValue float64                                  `protobuf:"fixed64,2,opt,name=percentageValue,proto3" json:"percentageValue,omitempty"`
	Service         FixedFeeOrPercentage_TargetServiceConfig `protobuf:"varint,3,opt,name=service,proto3,enum=blueapi.api.ripple.FixedFeeOrPercentage_TargetServiceConfig" json:"service,omitempty"`
	Usage           FixedFeeOrPercentage_TargetUsageConfig   `protobuf:"varint,4,opt,name=usage,proto3,enum=blueapi.api.ripple.FixedFeeOrPercentage_TargetUsageConfig" json:"usage,omitempty"`
	Discounted      bool                                     `protobuf:"varint,5,opt,name=discounted,proto3" json:"discounted,omitempty"`
	UpperLimit      float64                                  `protobuf:"fixed64,6,opt,name=upperLimit,proto3" json:"upperLimit,omitempty"`
}

func (x *FixedFeeOrPercentage) Reset() {
	*x = FixedFeeOrPercentage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedFeeOrPercentage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedFeeOrPercentage) ProtoMessage() {}

func (x *FixedFeeOrPercentage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedFeeOrPercentage.ProtoReflect.Descriptor instead.
func (*FixedFeeOrPercentage) Descriptor() ([]byte, []int) {
	return file_api_ripple_customizedbillingservice_proto_rawDescGZIP(), []int{4}
}

func (x *FixedFeeOrPercentage) GetFixedFeeValue() float64 {
	if x != nil {
		return x.FixedFeeValue
	}
	return 0
}

func (x *FixedFeeOrPercentage) GetPercentageValue() float64 {
	if x != nil {
		return x.PercentageValue
	}
	return 0
}

func (x *FixedFeeOrPercentage) GetService() FixedFeeOrPercentage_TargetServiceConfig {
	if x != nil {
		return x.Service
	}
	return FixedFeeOrPercentage_ALL
}

func (x *FixedFeeOrPercentage) GetUsage() FixedFeeOrPercentage_TargetUsageConfig {
	if x != nil {
		return x.Usage
	}
	return FixedFeeOrPercentage_USAGE
}

func (x *FixedFeeOrPercentage) GetDiscounted() bool {
	if x != nil {
		return x.Discounted
	}
	return false
}

func (x *FixedFeeOrPercentage) GetUpperLimit() float64 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

// tired price
type TieredPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TiredConfig []*TierdConfig `protobuf:"bytes,1,rep,name=tiredConfig,proto3" json:"tiredConfig,omitempty"`
}

func (x *TieredPrice) Reset() {
	*x = TieredPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TieredPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TieredPrice) ProtoMessage() {}

func (x *TieredPrice) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TieredPrice.ProtoReflect.Descriptor instead.
func (*TieredPrice) Descriptor() ([]byte, []int) {
	return file_api_ripple_customizedbillingservice_proto_rawDescGZIP(), []int{5}
}

func (x *TieredPrice) GetTiredConfig() []*TierdConfig {
	if x != nil {
		return x.TiredConfig
	}
	return nil
}

// tired percentage
type TieredPercentage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TiredConfig []*TierdConfig `protobuf:"bytes,1,rep,name=tiredConfig,proto3" json:"tiredConfig,omitempty"`
}

func (x *TieredPercentage) Reset() {
	*x = TieredPercentage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TieredPercentage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TieredPercentage) ProtoMessage() {}

func (x *TieredPercentage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TieredPercentage.ProtoReflect.Descriptor instead.
func (*TieredPercentage) Descriptor() ([]byte, []int) {
	return file_api_ripple_customizedbillingservice_proto_rawDescGZIP(), []int{6}
}

func (x *TieredPercentage) GetTiredConfig() []*TierdConfig {
	if x != nil {
		return x.TiredConfig
	}
	return nil
}

// tired config
type TierdConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min   float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"`
	Max   float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"`
	Value float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TierdConfig) Reset() {
	*x = TierdConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TierdConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TierdConfig) ProtoMessage() {}

func (x *TierdConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_customizedbillingservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TierdConfig.ProtoReflect.Descriptor instead.
func (*TierdConfig) Descriptor() ([]byte, []int) {
	return file_api_ripple_customizedbillingservice_proto_rawDescGZIP(), []int{7}
}

func (x *TierdConfig) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *TierdConfig) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *TierdConfig) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_api_ripple_customizedbillingservice_proto protoreflect.FileDescriptor

var file_api_ripple_customizedbillingservice_proto_rawDesc = []byte{
	0x0a, 0x29, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xec, 0x01, 0x0a, 0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1e, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0xfa, 0x05, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x4e, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x57, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x46, 0x65, 0x65, 0x4f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x46, 0x65, 0x65, 0x4f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x14, 0x66, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x54, 0x69, 0x65, 0x72, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x54, 0x69, 0x65, 0x72, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x10,
	0x54, 0x69, 0x65, 0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x65, 0x72,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10,
	0x54, 0x69, 0x65, 0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x22, 0x49, 0x0a, 0x11, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x53, 0x44, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x4a, 0x50, 0x59, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x47, 0x44, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x4d, 0x59, 0x52, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x44, 0x52,
	0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x52, 0x10, 0x05, 0x22, 0x75, 0x0a, 0x0e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0d, 0x0a,
	0x09, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x49, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x49, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45,
	0x10, 0x05, 0x42, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x20, 0x0a, 0x08,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x98,
	0x02, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x46, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x22, 0x1e, 0x0a, 0x13, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x22, 0x1e, 0x0a, 0x11, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x09,
	0x0a, 0x05, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x00, 0x22, 0x90, 0x03, 0x0a, 0x14, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x46, 0x65, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x65,
	0x65, 0x4f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x1e, 0x0a, 0x13,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x22, 0x1e, 0x0a, 0x11,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x00, 0x22, 0x50, 0x0a, 0x0b,
	0x54, 0x69, 0x65, 0x72, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x74,
	0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0b, 0x74, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x55,
	0x0a, 0x10, 0x54, 0x69, 0x65, 0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x65,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x74, 0x69, 0x72, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x47, 0x0a, 0x0b, 0x54, 0x69, 0x65, 0x72, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79,
	0x0a, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70,
	0x6c, 0x65, 0x42, 0x26, 0x41, 0x70, 0x69, 0x52, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61,
	0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_ripple_customizedbillingservice_proto_rawDescOnce sync.Once
	file_api_ripple_customizedbillingservice_proto_rawDescData = file_api_ripple_customizedbillingservice_proto_rawDesc
)

func file_api_ripple_customizedbillingservice_proto_rawDescGZIP() []byte {
	file_api_ripple_customizedbillingservice_proto_rawDescOnce.Do(func() {
		file_api_ripple_customizedbillingservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_ripple_customizedbillingservice_proto_rawDescData)
	})
	return file_api_ripple_customizedbillingservice_proto_rawDescData
}

var file_api_ripple_customizedbillingservice_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_api_ripple_customizedbillingservice_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_api_ripple_customizedbillingservice_proto_goTypes = []any{
	(MethodConfig_SupportedCurrency)(0),           // 0: blueapi.api.ripple.MethodConfig.SupportedCurrency
	(MethodConfig_ChargingMethod)(0),              // 1: blueapi.api.ripple.MethodConfig.ChargingMethod
	(Percentage_TargetServiceConfig)(0),           // 2: blueapi.api.ripple.Percentage.TargetServiceConfig
	(Percentage_TargetUsageConfig)(0),             // 3: blueapi.api.ripple.Percentage.TargetUsageConfig
	(FixedFeeOrPercentage_TargetServiceConfig)(0), // 4: blueapi.api.ripple.FixedFeeOrPercentage.TargetServiceConfig
	(FixedFeeOrPercentage_TargetUsageConfig)(0),   // 5: blueapi.api.ripple.FixedFeeOrPercentage.TargetUsageConfig
	(*CustomizedBillingService)(nil),              // 6: blueapi.api.ripple.CustomizedBillingService
	(*MethodConfig)(nil),                          // 7: blueapi.api.ripple.MethodConfig
	(*FixedFee)(nil),                              // 8: blueapi.api.ripple.FixedFee
	(*Percentage)(nil),                            // 9: blueapi.api.ripple.Percentage
	(*FixedFeeOrPercentage)(nil),                  // 10: blueapi.api.ripple.FixedFeeOrPercentage
	(*TieredPrice)(nil),                           // 11: blueapi.api.ripple.TieredPrice
	(*TieredPercentage)(nil),                      // 12: blueapi.api.ripple.TieredPercentage
	(*TierdConfig)(nil),                           // 13: blueapi.api.ripple.TierdConfig
}
var file_api_ripple_customizedbillingservice_proto_depIdxs = []int32{
	7,  // 0: blueapi.api.ripple.CustomizedBillingService.methodConfig:type_name -> blueapi.api.ripple.MethodConfig
	0,  // 1: blueapi.api.ripple.MethodConfig.currency:type_name -> blueapi.api.ripple.MethodConfig.SupportedCurrency
	1,  // 2: blueapi.api.ripple.MethodConfig.chargingMethod:type_name -> blueapi.api.ripple.MethodConfig.ChargingMethod
	8,  // 3: blueapi.api.ripple.MethodConfig.fixedFee:type_name -> blueapi.api.ripple.FixedFee
	9,  // 4: blueapi.api.ripple.MethodConfig.percentage:type_name -> blueapi.api.ripple.Percentage
	10, // 5: blueapi.api.ripple.MethodConfig.fixedFeeOrPercentage:type_name -> blueapi.api.ripple.FixedFeeOrPercentage
	11, // 6: blueapi.api.ripple.MethodConfig.TieredPrice:type_name -> blueapi.api.ripple.TieredPrice
	12, // 7: blueapi.api.ripple.MethodConfig.TieredPercentage:type_name -> blueapi.api.ripple.TieredPercentage
	2,  // 8: blueapi.api.ripple.Percentage.service:type_name -> blueapi.api.ripple.Percentage.TargetServiceConfig
	3,  // 9: blueapi.api.ripple.Percentage.usage:type_name -> blueapi.api.ripple.Percentage.TargetUsageConfig
	4,  // 10: blueapi.api.ripple.FixedFeeOrPercentage.service:type_name -> blueapi.api.ripple.FixedFeeOrPercentage.TargetServiceConfig
	5,  // 11: blueapi.api.ripple.FixedFeeOrPercentage.usage:type_name -> blueapi.api.ripple.FixedFeeOrPercentage.TargetUsageConfig
	13, // 12: blueapi.api.ripple.TieredPrice.tiredConfig:type_name -> blueapi.api.ripple.TierdConfig
	13, // 13: blueapi.api.ripple.TieredPercentage.tiredConfig:type_name -> blueapi.api.ripple.TierdConfig
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_api_ripple_customizedbillingservice_proto_init() }
func file_api_ripple_customizedbillingservice_proto_init() {
	if File_api_ripple_customizedbillingservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_ripple_customizedbillingservice_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CustomizedBillingService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_ripple_customizedbillingservice_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MethodConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_ripple_customizedbillingservice_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FixedFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_ripple_customizedbillingservice_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Percentage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_ripple_customizedbillingservice_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*FixedFeeOrPercentage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_ripple_customizedbillingservice_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TieredPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_ripple_customizedbillingservice_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TieredPercentage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_ripple_customizedbillingservice_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TierdConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_ripple_customizedbillingservice_proto_msgTypes[1].OneofWrappers = []any{
		(*MethodConfig_FixedFee)(nil),
		(*MethodConfig_Percentage)(nil),
		(*MethodConfig_FixedFeeOrPercentage)(nil),
		(*MethodConfig_TieredPrice)(nil),
		(*MethodConfig_TieredPercentage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_ripple_customizedbillingservice_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_ripple_customizedbillingservice_proto_goTypes,
		DependencyIndexes: file_api_ripple_customizedbillingservice_proto_depIdxs,
		EnumInfos:         file_api_ripple_customizedbillingservice_proto_enumTypes,
		MessageInfos:      file_api_ripple_customizedbillingservice_proto_msgTypes,
	}.Build()
	File_api_ripple_customizedbillingservice_proto = out.File
	file_api_ripple_customizedbillingservice_proto_rawDesc = nil
	file_api_ripple_customizedbillingservice_proto_goTypes = nil
	file_api_ripple_customizedbillingservice_proto_depIdxs = nil
}
