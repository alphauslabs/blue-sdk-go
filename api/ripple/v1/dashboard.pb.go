// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: api/ripple/v1/dashboard.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OverViewSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Currency         string                   `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	InvoiceCost      float64                  `protobuf:"fixed64,4,opt,name=invoiceCost,proto3" json:"invoiceCost,omitempty"`
	ProcurementCost  float64                  `protobuf:"fixed64,5,opt,name=procurementCost,proto3" json:"procurementCost,omitempty"`
	ProfitCost       float64                  `protobuf:"fixed64,6,opt,name=profitCost,proto3" json:"profitCost,omitempty"`
	Options          *OverViewOptionSection   `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	PeriodOverPeriod *PeriodOverPeriodSection `protobuf:"bytes,8,opt,name=periodOverPeriod,proto3" json:"periodOverPeriod,omitempty"`
	AwsSection       *VendorOverViewSection   `protobuf:"bytes,9,opt,name=awsSection,proto3" json:"awsSection,omitempty"`
	AzureSection     *VendorOverViewSection   `protobuf:"bytes,10,opt,name=azureSection,proto3" json:"azureSection,omitempty"`
	GcpSection       *VendorOverViewSection   `protobuf:"bytes,11,opt,name=gcpSection,proto3" json:"gcpSection,omitempty"`
}

func (x *OverViewSection) Reset() {
	*x = OverViewSection{}
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OverViewSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverViewSection) ProtoMessage() {}

func (x *OverViewSection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverViewSection.ProtoReflect.Descriptor instead.
func (*OverViewSection) Descriptor() ([]byte, []int) {
	return file_api_ripple_v1_dashboard_proto_rawDescGZIP(), []int{0}
}

func (x *OverViewSection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OverViewSection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OverViewSection) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OverViewSection) GetInvoiceCost() float64 {
	if x != nil {
		return x.InvoiceCost
	}
	return 0
}

func (x *OverViewSection) GetProcurementCost() float64 {
	if x != nil {
		return x.ProcurementCost
	}
	return 0
}

func (x *OverViewSection) GetProfitCost() float64 {
	if x != nil {
		return x.ProfitCost
	}
	return 0
}

func (x *OverViewSection) GetOptions() *OverViewOptionSection {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *OverViewSection) GetPeriodOverPeriod() *PeriodOverPeriodSection {
	if x != nil {
		return x.PeriodOverPeriod
	}
	return nil
}

func (x *OverViewSection) GetAwsSection() *VendorOverViewSection {
	if x != nil {
		return x.AwsSection
	}
	return nil
}

func (x *OverViewSection) GetAzureSection() *VendorOverViewSection {
	if x != nil {
		return x.AzureSection
	}
	return nil
}

func (x *OverViewSection) GetGcpSection() *VendorOverViewSection {
	if x != nil {
		return x.GcpSection
	}
	return nil
}

type PeriodOverPeriodSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceCost        float64                        `protobuf:"fixed64,1,opt,name=invoiceCost,proto3" json:"invoiceCost,omitempty"`
	ProcurementCost    float64                        `protobuf:"fixed64,2,opt,name=procurementCost,proto3" json:"procurementCost,omitempty"`
	ProfitCost         float64                        `protobuf:"fixed64,3,opt,name=profitCost,proto3" json:"profitCost,omitempty"`
	InvoiceCostPoP     float64                        `protobuf:"fixed64,4,opt,name=invoiceCostPoP,proto3" json:"invoiceCostPoP,omitempty"`
	ProcurementCostPoP float64                        `protobuf:"fixed64,5,opt,name=procurementCostPoP,proto3" json:"procurementCostPoP,omitempty"`
	ProfitCostPoP      float64                        `protobuf:"fixed64,6,opt,name=profitCostPoP,proto3" json:"profitCostPoP,omitempty"`
	Options            *PeriodOverPeriodOptionSection `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *PeriodOverPeriodSection) Reset() {
	*x = PeriodOverPeriodSection{}
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeriodOverPeriodSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodOverPeriodSection) ProtoMessage() {}

func (x *PeriodOverPeriodSection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodOverPeriodSection.ProtoReflect.Descriptor instead.
func (*PeriodOverPeriodSection) Descriptor() ([]byte, []int) {
	return file_api_ripple_v1_dashboard_proto_rawDescGZIP(), []int{1}
}

func (x *PeriodOverPeriodSection) GetInvoiceCost() float64 {
	if x != nil {
		return x.InvoiceCost
	}
	return 0
}

func (x *PeriodOverPeriodSection) GetProcurementCost() float64 {
	if x != nil {
		return x.ProcurementCost
	}
	return 0
}

func (x *PeriodOverPeriodSection) GetProfitCost() float64 {
	if x != nil {
		return x.ProfitCost
	}
	return 0
}

func (x *PeriodOverPeriodSection) GetInvoiceCostPoP() float64 {
	if x != nil {
		return x.InvoiceCostPoP
	}
	return 0
}

func (x *PeriodOverPeriodSection) GetProcurementCostPoP() float64 {
	if x != nil {
		return x.ProcurementCostPoP
	}
	return 0
}

func (x *PeriodOverPeriodSection) GetProfitCostPoP() float64 {
	if x != nil {
		return x.ProfitCostPoP
	}
	return 0
}

func (x *PeriodOverPeriodSection) GetOptions() *PeriodOverPeriodOptionSection {
	if x != nil {
		return x.Options
	}
	return nil
}

type OverViewOptionSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SppDiscountCost float64 `protobuf:"fixed64,1,opt,name=sppDiscountCost,proto3" json:"sppDiscountCost,omitempty"`
}

func (x *OverViewOptionSection) Reset() {
	*x = OverViewOptionSection{}
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OverViewOptionSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverViewOptionSection) ProtoMessage() {}

func (x *OverViewOptionSection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverViewOptionSection.ProtoReflect.Descriptor instead.
func (*OverViewOptionSection) Descriptor() ([]byte, []int) {
	return file_api_ripple_v1_dashboard_proto_rawDescGZIP(), []int{2}
}

func (x *OverViewOptionSection) GetSppDiscountCost() float64 {
	if x != nil {
		return x.SppDiscountCost
	}
	return 0
}

type PeriodOverPeriodOptionSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SppDiscountCost    float64 `protobuf:"fixed64,1,opt,name=sppDiscountCost,proto3" json:"sppDiscountCost,omitempty"`
	SppDiscountCostPoP float64 `protobuf:"fixed64,2,opt,name=sppDiscountCostPoP,proto3" json:"sppDiscountCostPoP,omitempty"`
}

func (x *PeriodOverPeriodOptionSection) Reset() {
	*x = PeriodOverPeriodOptionSection{}
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeriodOverPeriodOptionSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodOverPeriodOptionSection) ProtoMessage() {}

func (x *PeriodOverPeriodOptionSection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodOverPeriodOptionSection.ProtoReflect.Descriptor instead.
func (*PeriodOverPeriodOptionSection) Descriptor() ([]byte, []int) {
	return file_api_ripple_v1_dashboard_proto_rawDescGZIP(), []int{3}
}

func (x *PeriodOverPeriodOptionSection) GetSppDiscountCost() float64 {
	if x != nil {
		return x.SppDiscountCost
	}
	return 0
}

func (x *PeriodOverPeriodOptionSection) GetSppDiscountCostPoP() float64 {
	if x != nil {
		return x.SppDiscountCostPoP
	}
	return 0
}

type VendorOverViewSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Currency         string                   `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	InvoiceCost      float64                  `protobuf:"fixed64,4,opt,name=invoiceCost,proto3" json:"invoiceCost,omitempty"`
	ProcurementCost  float64                  `protobuf:"fixed64,5,opt,name=procurementCost,proto3" json:"procurementCost,omitempty"`
	ProfitCost       float64                  `protobuf:"fixed64,6,opt,name=profitCost,proto3" json:"profitCost,omitempty"`
	Options          *OverViewOptionSection   `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	PeriodOverPeriod *PeriodOverPeriodSection `protobuf:"bytes,8,opt,name=periodOverPeriod,proto3" json:"periodOverPeriod,omitempty"`
}

func (x *VendorOverViewSection) Reset() {
	*x = VendorOverViewSection{}
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorOverViewSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOverViewSection) ProtoMessage() {}

func (x *VendorOverViewSection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOverViewSection.ProtoReflect.Descriptor instead.
func (*VendorOverViewSection) Descriptor() ([]byte, []int) {
	return file_api_ripple_v1_dashboard_proto_rawDescGZIP(), []int{4}
}

func (x *VendorOverViewSection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VendorOverViewSection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VendorOverViewSection) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *VendorOverViewSection) GetInvoiceCost() float64 {
	if x != nil {
		return x.InvoiceCost
	}
	return 0
}

func (x *VendorOverViewSection) GetProcurementCost() float64 {
	if x != nil {
		return x.ProcurementCost
	}
	return 0
}

func (x *VendorOverViewSection) GetProfitCost() float64 {
	if x != nil {
		return x.ProfitCost
	}
	return 0
}

func (x *VendorOverViewSection) GetOptions() *OverViewOptionSection {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *VendorOverViewSection) GetPeriodOverPeriod() *PeriodOverPeriodSection {
	if x != nil {
		return x.PeriodOverPeriod
	}
	return nil
}

type TotalSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Currency        string                    `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	YearMonth       string                    `protobuf:"bytes,4,opt,name=yearMonth,proto3" json:"yearMonth,omitempty"`
	InvoiceCost     float64                   `protobuf:"fixed64,5,opt,name=invoiceCost,proto3" json:"invoiceCost,omitempty"`
	ProcurementCost float64                   `protobuf:"fixed64,6,opt,name=procurementCost,proto3" json:"procurementCost,omitempty"`
	ProfitCost      float64                   `protobuf:"fixed64,7,opt,name=profitCost,proto3" json:"profitCost,omitempty"`
	TotalDeital     *TotalDetailSection       `protobuf:"bytes,8,opt,name=totalDeital,proto3" json:"totalDeital,omitempty"`
	ThirdProfitItem []*ThirdProfitItemSection `protobuf:"bytes,9,rep,name=thirdProfitItem,proto3" json:"thirdProfitItem,omitempty"`
	AwsSection      *VendorTotalSection       `protobuf:"bytes,10,opt,name=awsSection,proto3" json:"awsSection,omitempty"`
	AzureSection    *VendorTotalSection       `protobuf:"bytes,11,opt,name=azureSection,proto3" json:"azureSection,omitempty"`
	GcpSection      *VendorTotalSection       `protobuf:"bytes,12,opt,name=gcpSection,proto3" json:"gcpSection,omitempty"`
}

func (x *TotalSection) Reset() {
	*x = TotalSection{}
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalSection) ProtoMessage() {}

func (x *TotalSection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalSection.ProtoReflect.Descriptor instead.
func (*TotalSection) Descriptor() ([]byte, []int) {
	return file_api_ripple_v1_dashboard_proto_rawDescGZIP(), []int{5}
}

func (x *TotalSection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TotalSection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TotalSection) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TotalSection) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

func (x *TotalSection) GetInvoiceCost() float64 {
	if x != nil {
		return x.InvoiceCost
	}
	return 0
}

func (x *TotalSection) GetProcurementCost() float64 {
	if x != nil {
		return x.ProcurementCost
	}
	return 0
}

func (x *TotalSection) GetProfitCost() float64 {
	if x != nil {
		return x.ProfitCost
	}
	return 0
}

func (x *TotalSection) GetTotalDeital() *TotalDetailSection {
	if x != nil {
		return x.TotalDeital
	}
	return nil
}

func (x *TotalSection) GetThirdProfitItem() []*ThirdProfitItemSection {
	if x != nil {
		return x.ThirdProfitItem
	}
	return nil
}

func (x *TotalSection) GetAwsSection() *VendorTotalSection {
	if x != nil {
		return x.AwsSection
	}
	return nil
}

func (x *TotalSection) GetAzureSection() *VendorTotalSection {
	if x != nil {
		return x.AzureSection
	}
	return nil
}

func (x *TotalSection) GetGcpSection() *VendorTotalSection {
	if x != nil {
		return x.GcpSection
	}
	return nil
}

type VendorTotalSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Currency        string                    `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	YearMonth       string                    `protobuf:"bytes,4,opt,name=yearMonth,proto3" json:"yearMonth,omitempty"`
	InvoiceCost     float64                   `protobuf:"fixed64,5,opt,name=invoiceCost,proto3" json:"invoiceCost,omitempty"`
	ProcurementCost float64                   `protobuf:"fixed64,6,opt,name=procurementCost,proto3" json:"procurementCost,omitempty"`
	ProfitCost      float64                   `protobuf:"fixed64,7,opt,name=profitCost,proto3" json:"profitCost,omitempty"`
	TotalDeital     *TotalDetailSection       `protobuf:"bytes,8,opt,name=totalDeital,proto3" json:"totalDeital,omitempty"`
	ThirdProfitItem []*ThirdProfitItemSection `protobuf:"bytes,9,rep,name=thirdProfitItem,proto3" json:"thirdProfitItem,omitempty"`
}

func (x *VendorTotalSection) Reset() {
	*x = VendorTotalSection{}
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorTotalSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorTotalSection) ProtoMessage() {}

func (x *VendorTotalSection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorTotalSection.ProtoReflect.Descriptor instead.
func (*VendorTotalSection) Descriptor() ([]byte, []int) {
	return file_api_ripple_v1_dashboard_proto_rawDescGZIP(), []int{6}
}

func (x *VendorTotalSection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VendorTotalSection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VendorTotalSection) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *VendorTotalSection) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

func (x *VendorTotalSection) GetInvoiceCost() float64 {
	if x != nil {
		return x.InvoiceCost
	}
	return 0
}

func (x *VendorTotalSection) GetProcurementCost() float64 {
	if x != nil {
		return x.ProcurementCost
	}
	return 0
}

func (x *VendorTotalSection) GetProfitCost() float64 {
	if x != nil {
		return x.ProfitCost
	}
	return 0
}

func (x *VendorTotalSection) GetTotalDeital() *TotalDetailSection {
	if x != nil {
		return x.TotalDeital
	}
	return nil
}

func (x *VendorTotalSection) GetThirdProfitItem() []*ThirdProfitItemSection {
	if x != nil {
		return x.ThirdProfitItem
	}
	return nil
}

type TotalDetailSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrueUnblended   float64 `protobuf:"fixed64,1,opt,name=TrueUnblended,proto3" json:"TrueUnblended,omitempty"`
	SppDiscount     float64 `protobuf:"fixed64,2,opt,name=sppDiscount,proto3" json:"sppDiscount,omitempty"`
	ThirdProfitItem float64 `protobuf:"fixed64,3,opt,name=thirdProfitItem,proto3" json:"thirdProfitItem,omitempty"`
}

func (x *TotalDetailSection) Reset() {
	*x = TotalDetailSection{}
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalDetailSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalDetailSection) ProtoMessage() {}

func (x *TotalDetailSection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalDetailSection.ProtoReflect.Descriptor instead.
func (*TotalDetailSection) Descriptor() ([]byte, []int) {
	return file_api_ripple_v1_dashboard_proto_rawDescGZIP(), []int{7}
}

func (x *TotalDetailSection) GetTrueUnblended() float64 {
	if x != nil {
		return x.TrueUnblended
	}
	return 0
}

func (x *TotalDetailSection) GetSppDiscount() float64 {
	if x != nil {
		return x.SppDiscount
	}
	return 0
}

func (x *TotalDetailSection) GetThirdProfitItem() float64 {
	if x != nil {
		return x.ThirdProfitItem
	}
	return 0
}

type ThirdProfitItemSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Profit float64 `protobuf:"fixed64,3,opt,name=profit,proto3" json:"profit,omitempty"`
}

func (x *ThirdProfitItemSection) Reset() {
	*x = ThirdProfitItemSection{}
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThirdProfitItemSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdProfitItemSection) ProtoMessage() {}

func (x *ThirdProfitItemSection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdProfitItemSection.ProtoReflect.Descriptor instead.
func (*ThirdProfitItemSection) Descriptor() ([]byte, []int) {
	return file_api_ripple_v1_dashboard_proto_rawDescGZIP(), []int{8}
}

func (x *ThirdProfitItemSection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ThirdProfitItemSection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThirdProfitItemSection) GetProfit() float64 {
	if x != nil {
		return x.Profit
	}
	return 0
}

type BillingGroupSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	YearMonth       string  `protobuf:"bytes,3,opt,name=yearMonth,proto3" json:"yearMonth,omitempty"`
	Currency        string  `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	InvocieCost     float64 `protobuf:"fixed64,5,opt,name=invocieCost,proto3" json:"invocieCost,omitempty"`
	ProcurementCost float64 `protobuf:"fixed64,6,opt,name=procurementCost,proto3" json:"procurementCost,omitempty"`
	ProfitCost      float64 `protobuf:"fixed64,7,opt,name=profitCost,proto3" json:"profitCost,omitempty"`
}

func (x *BillingGroupSection) Reset() {
	*x = BillingGroupSection{}
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BillingGroupSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingGroupSection) ProtoMessage() {}

func (x *BillingGroupSection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_v1_dashboard_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingGroupSection.ProtoReflect.Descriptor instead.
func (*BillingGroupSection) Descriptor() ([]byte, []int) {
	return file_api_ripple_v1_dashboard_proto_rawDescGZIP(), []int{9}
}

func (x *BillingGroupSection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BillingGroupSection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BillingGroupSection) GetYearMonth() string {
	if x != nil {
		return x.YearMonth
	}
	return ""
}

func (x *BillingGroupSection) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BillingGroupSection) GetInvocieCost() float64 {
	if x != nil {
		return x.InvocieCost
	}
	return 0
}

func (x *BillingGroupSection) GetProcurementCost() float64 {
	if x != nil {
		return x.ProcurementCost
	}
	return 0
}

func (x *BillingGroupSection) GetProfitCost() float64 {
	if x != nil {
		return x.ProfitCost
	}
	return 0
}

var File_api_ripple_v1_dashboard_proto protoreflect.FileDescriptor

var file_api_ripple_v1_dashboard_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x22, 0xcf, 0x04, 0x0a, 0x0f, 0x4f, 0x76, 0x65, 0x72, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x76, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a,
	0x0a, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x4f, 0x76, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x77,
	0x73, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x76, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x77,
	0x73, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0c, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x76, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x67, 0x63,
	0x70, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x76, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x67, 0x63,
	0x70, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd3, 0x02, 0x0a, 0x17, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x50,
	0x6f, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x50, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x50, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x50, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x50, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x50, 0x12, 0x4e,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x76,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x41,
	0x0a, 0x15, 0x4f, 0x76, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70, 0x70, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x73, 0x70, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x73,
	0x74, 0x22, 0x79, 0x0a, 0x1d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x70, 0x70,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x73, 0x70, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50,
	0x6f, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x73, 0x70, 0x70, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x50, 0x22, 0xe7, 0x02, 0x0a,
	0x15, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72,
	0x56, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x10, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x76, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xe3, 0x04, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x79, 0x65, 0x61, 0x72, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x79, 0x65, 0x61, 0x72,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x69, 0x74, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x57,
	0x0a, 0x0f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x67, 0x63, 0x70, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x67, 0x63, 0x70, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x03, 0x0a,
	0x12, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x79, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x79, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x4b, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x57, 0x0a, 0x0f, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72,
	0x75, 0x65, 0x55, 0x6e, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x54, 0x72, 0x75, 0x65, 0x55, 0x6e, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x70, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x54, 0x0a, 0x16,
	0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x13, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x79, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x79, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f,
	0x63, 0x69, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69,
	0x6e, 0x76, 0x6f, 0x63, 0x69, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x43, 0x6f, 0x73, 0x74, 0x42, 0x70, 0x0a, 0x23, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x17, 0x41, 0x70, 0x69,
	0x52, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75,
	0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x69, 0x70,
	0x70, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_ripple_v1_dashboard_proto_rawDescOnce sync.Once
	file_api_ripple_v1_dashboard_proto_rawDescData = file_api_ripple_v1_dashboard_proto_rawDesc
)

func file_api_ripple_v1_dashboard_proto_rawDescGZIP() []byte {
	file_api_ripple_v1_dashboard_proto_rawDescOnce.Do(func() {
		file_api_ripple_v1_dashboard_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_ripple_v1_dashboard_proto_rawDescData)
	})
	return file_api_ripple_v1_dashboard_proto_rawDescData
}

var file_api_ripple_v1_dashboard_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_ripple_v1_dashboard_proto_goTypes = []any{
	(*OverViewSection)(nil),               // 0: blueapi.api.ripple.v1.OverViewSection
	(*PeriodOverPeriodSection)(nil),       // 1: blueapi.api.ripple.v1.periodOverPeriodSection
	(*OverViewOptionSection)(nil),         // 2: blueapi.api.ripple.v1.OverViewOptionSection
	(*PeriodOverPeriodOptionSection)(nil), // 3: blueapi.api.ripple.v1.periodOverPeriodOptionSection
	(*VendorOverViewSection)(nil),         // 4: blueapi.api.ripple.v1.VendorOverViewSection
	(*TotalSection)(nil),                  // 5: blueapi.api.ripple.v1.TotalSection
	(*VendorTotalSection)(nil),            // 6: blueapi.api.ripple.v1.VendorTotalSection
	(*TotalDetailSection)(nil),            // 7: blueapi.api.ripple.v1.TotalDetailSection
	(*ThirdProfitItemSection)(nil),        // 8: blueapi.api.ripple.v1.ThirdProfitItemSection
	(*BillingGroupSection)(nil),           // 9: blueapi.api.ripple.v1.BillingGroupSection
}
var file_api_ripple_v1_dashboard_proto_depIdxs = []int32{
	2,  // 0: blueapi.api.ripple.v1.OverViewSection.options:type_name -> blueapi.api.ripple.v1.OverViewOptionSection
	1,  // 1: blueapi.api.ripple.v1.OverViewSection.periodOverPeriod:type_name -> blueapi.api.ripple.v1.periodOverPeriodSection
	4,  // 2: blueapi.api.ripple.v1.OverViewSection.awsSection:type_name -> blueapi.api.ripple.v1.VendorOverViewSection
	4,  // 3: blueapi.api.ripple.v1.OverViewSection.azureSection:type_name -> blueapi.api.ripple.v1.VendorOverViewSection
	4,  // 4: blueapi.api.ripple.v1.OverViewSection.gcpSection:type_name -> blueapi.api.ripple.v1.VendorOverViewSection
	3,  // 5: blueapi.api.ripple.v1.periodOverPeriodSection.options:type_name -> blueapi.api.ripple.v1.periodOverPeriodOptionSection
	2,  // 6: blueapi.api.ripple.v1.VendorOverViewSection.options:type_name -> blueapi.api.ripple.v1.OverViewOptionSection
	1,  // 7: blueapi.api.ripple.v1.VendorOverViewSection.periodOverPeriod:type_name -> blueapi.api.ripple.v1.periodOverPeriodSection
	7,  // 8: blueapi.api.ripple.v1.TotalSection.totalDeital:type_name -> blueapi.api.ripple.v1.TotalDetailSection
	8,  // 9: blueapi.api.ripple.v1.TotalSection.thirdProfitItem:type_name -> blueapi.api.ripple.v1.ThirdProfitItemSection
	6,  // 10: blueapi.api.ripple.v1.TotalSection.awsSection:type_name -> blueapi.api.ripple.v1.VendorTotalSection
	6,  // 11: blueapi.api.ripple.v1.TotalSection.azureSection:type_name -> blueapi.api.ripple.v1.VendorTotalSection
	6,  // 12: blueapi.api.ripple.v1.TotalSection.gcpSection:type_name -> blueapi.api.ripple.v1.VendorTotalSection
	7,  // 13: blueapi.api.ripple.v1.VendorTotalSection.totalDeital:type_name -> blueapi.api.ripple.v1.TotalDetailSection
	8,  // 14: blueapi.api.ripple.v1.VendorTotalSection.thirdProfitItem:type_name -> blueapi.api.ripple.v1.ThirdProfitItemSection
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_api_ripple_v1_dashboard_proto_init() }
func file_api_ripple_v1_dashboard_proto_init() {
	if File_api_ripple_v1_dashboard_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_ripple_v1_dashboard_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_ripple_v1_dashboard_proto_goTypes,
		DependencyIndexes: file_api_ripple_v1_dashboard_proto_depIdxs,
		MessageInfos:      file_api_ripple_v1_dashboard_proto_msgTypes,
	}.Build()
	File_api_ripple_v1_dashboard_proto = out.File
	file_api_ripple_v1_dashboard_proto_rawDesc = nil
	file_api_ripple_v1_dashboard_proto_goTypes = nil
	file_api_ripple_v1_dashboard_proto_depIdxs = nil
}
