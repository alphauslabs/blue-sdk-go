// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: api/ripple/invoicelayout.proto

package ripple

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WORK-IN-PROGRESS: InvoiceLayout resource definition.
// Definitions related to invoice display.
type InvoiceLayout struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// total layout
	Account *AccountInvoiceLayout `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// total layout
	Total *TotalInvoiceLayout `protobuf:"bytes,2,opt,name=total,proto3" json:"total,omitempty"`
	// body layout
	Body *BodyInvoiceLayout `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	// footer layout
	Footer *FooterInvoiceLayout `protobuf:"bytes,4,opt,name=footer,proto3" json:"footer,omitempty"`
	// header layout
	Header *HeaderInvoiceLayout `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
	// report layout
	Report        *ReportInvoiceLayout `protobuf:"bytes,6,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvoiceLayout) Reset() {
	*x = InvoiceLayout{}
	mi := &file_api_ripple_invoicelayout_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvoiceLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceLayout) ProtoMessage() {}

func (x *InvoiceLayout) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_invoicelayout_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceLayout.ProtoReflect.Descriptor instead.
func (*InvoiceLayout) Descriptor() ([]byte, []int) {
	return file_api_ripple_invoicelayout_proto_rawDescGZIP(), []int{0}
}

func (x *InvoiceLayout) GetAccount() *AccountInvoiceLayout {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *InvoiceLayout) GetTotal() *TotalInvoiceLayout {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *InvoiceLayout) GetBody() *BodyInvoiceLayout {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *InvoiceLayout) GetFooter() *FooterInvoiceLayout {
	if x != nil {
		return x.Footer
	}
	return nil
}

func (x *InvoiceLayout) GetHeader() *HeaderInvoiceLayout {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *InvoiceLayout) GetReport() *ReportInvoiceLayout {
	if x != nil {
		return x.Report
	}
	return nil
}

// WORK-IN-PROGRESS: accountInvoiceLayout resource definition.
type AccountInvoiceLayout struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The marketplace is name of marketplace usage.
	// ex)ACCT_AWS_MARKETPLACE: "Marketplace利用料金"
	Marketplace string `protobuf:"bytes,1,opt,name=marketplace,proto3" json:"marketplace,omitempty"`
	// The marketplace is name of marketplace fee usage.
	// ex)ACCT_AWS_MARKETPLACE_FEES: "Marketplace 一時金 ご利用金額"
	MarketplaceFee string `protobuf:"bytes,2,opt,name=marketplaceFee,proto3" json:"marketplaceFee,omitempty"`
	// The supportFee is name of support fee usage.
	// ex)ACCT_AWS_SUPPORT_BUSINESS: "AWS保守サービス利用料金"
	SupportFee string `protobuf:"bytes,3,opt,name=supportFee,proto3" json:"supportFee,omitempty"`
	// The accountUsage is name of account total usage.
	// ex)ACCT_AWS_USAGE: "利用料合計"
	AccountUsage string `protobuf:"bytes,4,opt,name=accountUsage,proto3" json:"accountUsage,omitempty"`
	// The accountUsageOnly is name of account usage(Only related to vendor).
	// ex)ACCT_AWS_USAGEONLY: "AWS利用料(MarketPlace利用料除く)"
	AccountUsageOnly string `protobuf:"bytes,5,opt,name=accountUsageOnly,proto3" json:"accountUsageOnly,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AccountInvoiceLayout) Reset() {
	*x = AccountInvoiceLayout{}
	mi := &file_api_ripple_invoicelayout_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountInvoiceLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInvoiceLayout) ProtoMessage() {}

func (x *AccountInvoiceLayout) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_invoicelayout_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInvoiceLayout.ProtoReflect.Descriptor instead.
func (*AccountInvoiceLayout) Descriptor() ([]byte, []int) {
	return file_api_ripple_invoicelayout_proto_rawDescGZIP(), []int{1}
}

func (x *AccountInvoiceLayout) GetMarketplace() string {
	if x != nil {
		return x.Marketplace
	}
	return ""
}

func (x *AccountInvoiceLayout) GetMarketplaceFee() string {
	if x != nil {
		return x.MarketplaceFee
	}
	return ""
}

func (x *AccountInvoiceLayout) GetSupportFee() string {
	if x != nil {
		return x.SupportFee
	}
	return ""
}

func (x *AccountInvoiceLayout) GetAccountUsage() string {
	if x != nil {
		return x.AccountUsage
	}
	return ""
}

func (x *AccountInvoiceLayout) GetAccountUsageOnly() string {
	if x != nil {
		return x.AccountUsageOnly
	}
	return ""
}

// WORK-IN-PROGRESS: totalInvoiceLayout resource definition.
type TotalInvoiceLayout struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The totalMarketplace is name of marketplace total usage.
	// ex)ALL_AWS_MARKETPLACE: ""
	Marketplace string `protobuf:"bytes,1,opt,name=marketplace,proto3" json:"marketplace,omitempty"`
	// The totalMarketplaceFee is name of marketplace total fee usage.
	// ex)ALL_AWS_MARKETPLACE_FEES: ""
	MarketplaceFee string `protobuf:"bytes,2,opt,name=marketplaceFee,proto3" json:"marketplaceFee,omitempty"`
	// The vendorTotal is name of vendor total usage.
	// ex)ALL_AWS_TOTAL: ""
	VendorTotal string `protobuf:"bytes,3,opt,name=vendorTotal,proto3" json:"vendorTotal,omitempty"`
	// The vendorUsageOnly is name of vendor usage only.
	// ex)ALL_AWS_USAGEONLY: ""
	VendorUsageOnly string `protobuf:"bytes,4,opt,name=vendorUsageOnly,proto3" json:"vendorUsageOnly,omitempty"`
	// The vendorTotalUsage is name of vendor total usage.
	// ex)ALL_AWS_USAGE: "AWS利用料"
	VendorlUsage string `protobuf:"bytes,5,opt,name=vendorlUsage,proto3" json:"vendorlUsage,omitempty"`
	// The customTotalUsage is name of custom total usage.
	// ex)ALL_CUSTOM_USAGE: "追加費用合計"
	CustomUsage string `protobuf:"bytes,6,opt,name=customUsage,proto3" json:"customUsage,omitempty"`
	// The discount is name of discount.
	// ex)ALL_DISCOUNT: ""
	Discount string `protobuf:"bytes,7,opt,name=discount,proto3" json:"discount,omitempty"`
	// The discountTotalDiff is name of discount total diff.
	// ex)ALL_DISCOUNT_DIFF: "値引後"
	DiscountDiff string `protobuf:"bytes,8,opt,name=discountDiff,proto3" json:"discountDiff,omitempty"`
	// The subTotal is name of sub total.
	// ex)ALL_SUB_TOTAL: ""
	SubTotal string `protobuf:"bytes,9,opt,name=subTotal,proto3" json:"subTotal,omitempty"`
	// The substitutionTotalFee is name of substitution total fee.
	// ex)ALL_SUBSTITUTION: "請求代行手数料"
	SubstitutionFee string `protobuf:"bytes,10,opt,name=substitutionFee,proto3" json:"substitutionFee,omitempty"`
	// The supportTotalFee is name of support total fee.
	// ex)ALL_SUPPORT_BUSINESS: "サポートビジネス費用"
	SupportFee string `protobuf:"bytes,11,opt,name=supportFee,proto3" json:"supportFee,omitempty"`
	// The tax is name of tax.
	// ex)ALL_TAX: "消費税"
	Tax string `protobuf:"bytes,12,opt,name=tax,proto3" json:"tax,omitempty"`
	// The taxDiff is name of tax diff.
	// ex)ALL_TAX_DIFF: null
	TaxDiff string `protobuf:"bytes,13,opt,name=taxDiff,proto3" json:"taxDiff,omitempty"`
	// The taxFree is name of tax free.
	// ex)ALL_TAX_FREE: ""
	TaxFree string `protobuf:"bytes,14,opt,name=taxFree,proto3" json:"taxFree,omitempty"`
	// The totalExchangeRate is name of total exchange rate.
	// ex)ALL_TOTAL_EXCHANGE: "日本円換算後（$1=JPY）"
	TotalExchangeRate string `protobuf:"bytes,15,opt,name=totalExchangeRate,proto3" json:"totalExchangeRate,omitempty"`
	// The totalUsage is name of total usage.
	// ex)ALL_USAGE_TOTAL: "小計"
	TotalUsage string `protobuf:"bytes,16,opt,name=totalUsage,proto3" json:"totalUsage,omitempty"`
	// The total is name of total.
	// ex)ALL_TOTAL: ""
	Total         string `protobuf:"bytes,17,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TotalInvoiceLayout) Reset() {
	*x = TotalInvoiceLayout{}
	mi := &file_api_ripple_invoicelayout_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalInvoiceLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalInvoiceLayout) ProtoMessage() {}

func (x *TotalInvoiceLayout) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_invoicelayout_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalInvoiceLayout.ProtoReflect.Descriptor instead.
func (*TotalInvoiceLayout) Descriptor() ([]byte, []int) {
	return file_api_ripple_invoicelayout_proto_rawDescGZIP(), []int{2}
}

func (x *TotalInvoiceLayout) GetMarketplace() string {
	if x != nil {
		return x.Marketplace
	}
	return ""
}

func (x *TotalInvoiceLayout) GetMarketplaceFee() string {
	if x != nil {
		return x.MarketplaceFee
	}
	return ""
}

func (x *TotalInvoiceLayout) GetVendorTotal() string {
	if x != nil {
		return x.VendorTotal
	}
	return ""
}

func (x *TotalInvoiceLayout) GetVendorUsageOnly() string {
	if x != nil {
		return x.VendorUsageOnly
	}
	return ""
}

func (x *TotalInvoiceLayout) GetVendorlUsage() string {
	if x != nil {
		return x.VendorlUsage
	}
	return ""
}

func (x *TotalInvoiceLayout) GetCustomUsage() string {
	if x != nil {
		return x.CustomUsage
	}
	return ""
}

func (x *TotalInvoiceLayout) GetDiscount() string {
	if x != nil {
		return x.Discount
	}
	return ""
}

func (x *TotalInvoiceLayout) GetDiscountDiff() string {
	if x != nil {
		return x.DiscountDiff
	}
	return ""
}

func (x *TotalInvoiceLayout) GetSubTotal() string {
	if x != nil {
		return x.SubTotal
	}
	return ""
}

func (x *TotalInvoiceLayout) GetSubstitutionFee() string {
	if x != nil {
		return x.SubstitutionFee
	}
	return ""
}

func (x *TotalInvoiceLayout) GetSupportFee() string {
	if x != nil {
		return x.SupportFee
	}
	return ""
}

func (x *TotalInvoiceLayout) GetTax() string {
	if x != nil {
		return x.Tax
	}
	return ""
}

func (x *TotalInvoiceLayout) GetTaxDiff() string {
	if x != nil {
		return x.TaxDiff
	}
	return ""
}

func (x *TotalInvoiceLayout) GetTaxFree() string {
	if x != nil {
		return x.TaxFree
	}
	return ""
}

func (x *TotalInvoiceLayout) GetTotalExchangeRate() string {
	if x != nil {
		return x.TotalExchangeRate
	}
	return ""
}

func (x *TotalInvoiceLayout) GetTotalUsage() string {
	if x != nil {
		return x.TotalUsage
	}
	return ""
}

func (x *TotalInvoiceLayout) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

// WORK-IN-PROGRESS: bodyInvoiceLayout resource definition.
type BodyInvoiceLayout struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hideSpecificTotalLines is name of hide specific total lines.
	// ex)BODY_HIDE_SPECIFIC_TOTAL_LINES: ["removeThisTextToApply _AWS_SUPPORT_BUSINESS"]
	HideSpecificTotalLines []string `protobuf:"bytes,1,rep,name=hideSpecificTotalLines,proto3" json:"hideSpecificTotalLines,omitempty"`
	// The serviceDiscountDetail is setting for service discount detail.
	// ex)BODY_SERVICE_DISCOUNT_DETAIL: true
	ServiceDiscountDetail bool `protobuf:"varint,2,opt,name=serviceDiscountDetail,proto3" json:"serviceDiscountDetail,omitempty"`
	// The usageDiscount is setting for usage discount.
	// ex)BODY_USAGE_DISCOUNT: true
	UsageDiscount bool `protobuf:"varint,3,opt,name=usageDiscount,proto3" json:"usageDiscount,omitempty"`
	// The hideMarketplace is setting for hide marketplace.
	// ex)BODY_HIDE_MARKETPLACE: true
	HideMarketplace bool `protobuf:"varint,4,opt,name=hideMarketplace,proto3" json:"hideMarketplace,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BodyInvoiceLayout) Reset() {
	*x = BodyInvoiceLayout{}
	mi := &file_api_ripple_invoicelayout_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BodyInvoiceLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyInvoiceLayout) ProtoMessage() {}

func (x *BodyInvoiceLayout) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_invoicelayout_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyInvoiceLayout.ProtoReflect.Descriptor instead.
func (*BodyInvoiceLayout) Descriptor() ([]byte, []int) {
	return file_api_ripple_invoicelayout_proto_rawDescGZIP(), []int{3}
}

func (x *BodyInvoiceLayout) GetHideSpecificTotalLines() []string {
	if x != nil {
		return x.HideSpecificTotalLines
	}
	return nil
}

func (x *BodyInvoiceLayout) GetServiceDiscountDetail() bool {
	if x != nil {
		return x.ServiceDiscountDetail
	}
	return false
}

func (x *BodyInvoiceLayout) GetUsageDiscount() bool {
	if x != nil {
		return x.UsageDiscount
	}
	return false
}

func (x *BodyInvoiceLayout) GetHideMarketplace() bool {
	if x != nil {
		return x.HideMarketplace
	}
	return false
}

// WORK-IN-PROGRESS: footerInvoiceLayout resource definition.
type FooterInvoiceLayout struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The attention is name of attention.
	// ex)FT_ATTENTION: null
	Attention string `protobuf:"bytes,1,opt,name=attention,proto3" json:"attention,omitempty"`
	// The invoiceBank is setting for invoice bank.
	// ex)FT_INVOICE_BANK: true
	InvoiceBank bool `protobuf:"varint,2,opt,name=invoiceBank,proto3" json:"invoiceBank,omitempty"`
	// The invoiceBankContent is information of invoice bank content.
	// ex)FT_INVOICE_BANK_CONTENT: "振込手数料はご負担ください。"
	InvoiceBankContent string `protobuf:"bytes,3,opt,name=invoiceBankContent,proto3" json:"invoiceBankContent,omitempty"`
	// The invoiceMemo is setting for invoice memo.
	// ex)FT_INVOICE_MEMO: true
	InvoiceMemo bool `protobuf:"varint,4,opt,name=invoiceMemo,proto3" json:"invoiceMemo,omitempty"`
	// The invoiceRemarks is setting for invoice remarks.
	// ex)FT_INVOICE_REMARKS: true
	InvoiceRemarks bool `protobuf:"varint,5,opt,name=invoiceRemarks,proto3" json:"invoiceRemarks,omitempty"`
	// The invoiceDiscountZero is setting for invoice discount.
	// ex)FT_INVOICE_DISCOUNT_ZERO: true
	InvoiceDiscountZero bool `protobuf:"varint,6,opt,name=invoiceDiscountZero,proto3" json:"invoiceDiscountZero,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FooterInvoiceLayout) Reset() {
	*x = FooterInvoiceLayout{}
	mi := &file_api_ripple_invoicelayout_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FooterInvoiceLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooterInvoiceLayout) ProtoMessage() {}

func (x *FooterInvoiceLayout) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_invoicelayout_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FooterInvoiceLayout.ProtoReflect.Descriptor instead.
func (*FooterInvoiceLayout) Descriptor() ([]byte, []int) {
	return file_api_ripple_invoicelayout_proto_rawDescGZIP(), []int{4}
}

func (x *FooterInvoiceLayout) GetAttention() string {
	if x != nil {
		return x.Attention
	}
	return ""
}

func (x *FooterInvoiceLayout) GetInvoiceBank() bool {
	if x != nil {
		return x.InvoiceBank
	}
	return false
}

func (x *FooterInvoiceLayout) GetInvoiceBankContent() string {
	if x != nil {
		return x.InvoiceBankContent
	}
	return ""
}

func (x *FooterInvoiceLayout) GetInvoiceMemo() bool {
	if x != nil {
		return x.InvoiceMemo
	}
	return false
}

func (x *FooterInvoiceLayout) GetInvoiceRemarks() bool {
	if x != nil {
		return x.InvoiceRemarks
	}
	return false
}

func (x *FooterInvoiceLayout) GetInvoiceDiscountZero() bool {
	if x != nil {
		return x.InvoiceDiscountZero
	}
	return false
}

// WORK-IN-PROGRESS: headerInvoiceLayout resource definition.
type HeaderInvoiceLayout struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The billingAddress is information of billing address.
	// ex)HEAD_BILLINGADDRESS: billing"
	BillingAddress string `protobuf:"bytes,1,opt,name=billingAddress,proto3" json:"billingAddress,omitempty"`
	// The billingGroupName is setting for billing group name.
	// ex)HEAD_BILLINGGROUPNAME: true
	BillingGroupName bool `protobuf:"varint,2,opt,name=billingGroupName,proto3" json:"billingGroupName,omitempty"`
	// The billingGroupStaff is setting for billing froup staff.
	// ex)HEAD_BILLINGGROUPSTAFF: true
	BillingGroupStaff bool `protobuf:"varint,3,opt,name=billingGroupStaff,proto3" json:"billingGroupStaff,omitempty"`
	// The companyAddress is setting for company address.
	// ex)HEAD_COMPANY_ADDRESS: true
	CompanyAddress bool `protobuf:"varint,4,opt,name=companyAddress,proto3" json:"companyAddress,omitempty"`
	// The companyName is setting for company name.
	// ex)HEAD_COMPANY_NAME: true
	CompanyName bool `protobuf:"varint,5,opt,name=companyName,proto3" json:"companyName,omitempty"`
	// The invoiceDate is setting for invoice date.
	// ex)HEAD_INVOICE_DATE: true
	InvoiceDate bool `protobuf:"varint,6,opt,name=invoiceDate,proto3" json:"invoiceDate,omitempty"`
	// The invoiceDue is setting for invoice due.
	// ex)HEAD_INVOICE_DUE: true
	InvoiceDue bool `protobuf:"varint,7,opt,name=invoiceDue,proto3" json:"invoiceDue,omitempty"`
	// The invoiceNo is setting for invoice No.
	// ex)HEAD_INVOICE_NO: true
	InvoiceNo bool `protobuf:"varint,8,opt,name=invoiceNo,proto3" json:"invoiceNo,omitempty"`
	// The invoiceQuantity is information of invoice quantity.
	// ex)HEAD_INVOICE_QUANTITY: "１ヶ月分"
	InvoiceQuantity string `protobuf:"bytes,9,opt,name=invoiceQuantity,proto3" json:"invoiceQuantity,omitempty"`
	// The invoiceSummary is setting for invoice summary.
	// ex)HEAD_INVOICE_SUMMARY: true
	InvoiceSummary bool `protobuf:"varint,10,opt,name=invoiceSummary,proto3" json:"invoiceSummary,omitempty"`
	// The invoiceTitle is information of invoice title.
	// ex)HEAD_INVOICE_TITLE: "AWSご利用金額"
	InvoiceTitle string `protobuf:"bytes,11,opt,name=invoiceTitle,proto3" json:"invoiceTitle,omitempty"`
	// The issueDateText is information of issue date text.
	// ex)HEAD_ISSUE_DATE_TEXT: "tested message"
	IssueDateText string `protobuf:"bytes,12,opt,name=issueDateText,proto3" json:"issueDateText,omitempty"`
	// The mspInfo is setting for msp information.
	// ex)HEAD_MSPINFO: true
	MspInfo bool `protobuf:"varint,13,opt,name=mspInfo,proto3" json:"mspInfo,omitempty"`
	// The mspLogo is setting for msp logo.
	// ex)HEAD_MSPLOGO: true
	MspLogo bool `protobuf:"varint,14,opt,name=mspLogo,proto3" json:"mspLogo,omitempty"`
	// The mspStamp is setting for msp stamp.
	// ex)HEAD_MSPSTAMP: true
	MspStamp bool `protobuf:"varint,15,opt,name=mspStamp,proto3" json:"mspStamp,omitempty"`
	// The paidText is information of paid text.
	// ex)HEAD_PAID_TEXT: "paid message"
	PaidText      string `protobuf:"bytes,16,opt,name=paidText,proto3" json:"paidText,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeaderInvoiceLayout) Reset() {
	*x = HeaderInvoiceLayout{}
	mi := &file_api_ripple_invoicelayout_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderInvoiceLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderInvoiceLayout) ProtoMessage() {}

func (x *HeaderInvoiceLayout) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_invoicelayout_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderInvoiceLayout.ProtoReflect.Descriptor instead.
func (*HeaderInvoiceLayout) Descriptor() ([]byte, []int) {
	return file_api_ripple_invoicelayout_proto_rawDescGZIP(), []int{5}
}

func (x *HeaderInvoiceLayout) GetBillingAddress() string {
	if x != nil {
		return x.BillingAddress
	}
	return ""
}

func (x *HeaderInvoiceLayout) GetBillingGroupName() bool {
	if x != nil {
		return x.BillingGroupName
	}
	return false
}

func (x *HeaderInvoiceLayout) GetBillingGroupStaff() bool {
	if x != nil {
		return x.BillingGroupStaff
	}
	return false
}

func (x *HeaderInvoiceLayout) GetCompanyAddress() bool {
	if x != nil {
		return x.CompanyAddress
	}
	return false
}

func (x *HeaderInvoiceLayout) GetCompanyName() bool {
	if x != nil {
		return x.CompanyName
	}
	return false
}

func (x *HeaderInvoiceLayout) GetInvoiceDate() bool {
	if x != nil {
		return x.InvoiceDate
	}
	return false
}

func (x *HeaderInvoiceLayout) GetInvoiceDue() bool {
	if x != nil {
		return x.InvoiceDue
	}
	return false
}

func (x *HeaderInvoiceLayout) GetInvoiceNo() bool {
	if x != nil {
		return x.InvoiceNo
	}
	return false
}

func (x *HeaderInvoiceLayout) GetInvoiceQuantity() string {
	if x != nil {
		return x.InvoiceQuantity
	}
	return ""
}

func (x *HeaderInvoiceLayout) GetInvoiceSummary() bool {
	if x != nil {
		return x.InvoiceSummary
	}
	return false
}

func (x *HeaderInvoiceLayout) GetInvoiceTitle() string {
	if x != nil {
		return x.InvoiceTitle
	}
	return ""
}

func (x *HeaderInvoiceLayout) GetIssueDateText() string {
	if x != nil {
		return x.IssueDateText
	}
	return ""
}

func (x *HeaderInvoiceLayout) GetMspInfo() bool {
	if x != nil {
		return x.MspInfo
	}
	return false
}

func (x *HeaderInvoiceLayout) GetMspLogo() bool {
	if x != nil {
		return x.MspLogo
	}
	return false
}

func (x *HeaderInvoiceLayout) GetMspStamp() bool {
	if x != nil {
		return x.MspStamp
	}
	return false
}

func (x *HeaderInvoiceLayout) GetPaidText() string {
	if x != nil {
		return x.PaidText
	}
	return ""
}

// WORK-IN-PROGRESS: headerInvoiceLayout resource definition.
type ReportInvoiceLayout struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The sectionEnable is setting for section.
	// ex)REPORT_SECTION_ENABLE: "{ \"ja\": true, \"en\": true }"
	SectionEnable string `protobuf:"bytes,1,opt,name=sectionEnable,proto3" json:"sectionEnable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportInvoiceLayout) Reset() {
	*x = ReportInvoiceLayout{}
	mi := &file_api_ripple_invoicelayout_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportInvoiceLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportInvoiceLayout) ProtoMessage() {}

func (x *ReportInvoiceLayout) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_invoicelayout_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportInvoiceLayout.ProtoReflect.Descriptor instead.
func (*ReportInvoiceLayout) Descriptor() ([]byte, []int) {
	return file_api_ripple_invoicelayout_proto_rawDescGZIP(), []int{6}
}

func (x *ReportInvoiceLayout) GetSectionEnable() string {
	if x != nil {
		return x.SectionEnable
	}
	return ""
}

var File_api_ripple_invoicelayout_proto protoreflect.FileDescriptor

var file_api_ripple_invoicelayout_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2f, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69,
	0x70, 0x70, 0x6c, 0x65, 0x22, 0x8f, 0x03, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x62, 0x6f, 0x64, 0x79,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x66, 0x6f,
	0x6f, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x46, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x6c,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xc0, 0x04, 0x0a, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x46, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x65, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x44, 0x69, 0x66, 0x66, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x44, 0x69, 0x66, 0x66, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x78, 0x46, 0x72, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x78, 0x46, 0x72, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xd1, 0x01, 0x0a,
	0x11, 0x62, 0x6f, 0x64, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x68, 0x69, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x16, 0x68, 0x69, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x68, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x22, 0x81, 0x02, 0x0a, 0x13, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5a, 0x65, 0x72, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5a, 0x65, 0x72, 0x6f, 0x22, 0xc9, 0x04, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x73, 0x70, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6d, 0x73, 0x70, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73, 0x70, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x73, 0x70, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x69, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x22, 0x3b, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6e, 0x0a,
	0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c,
	0x65, 0x42, 0x1b, 0x41, 0x70, 0x69, 0x52, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d,
	0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_ripple_invoicelayout_proto_rawDescOnce sync.Once
	file_api_ripple_invoicelayout_proto_rawDescData []byte
)

func file_api_ripple_invoicelayout_proto_rawDescGZIP() []byte {
	file_api_ripple_invoicelayout_proto_rawDescOnce.Do(func() {
		file_api_ripple_invoicelayout_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_ripple_invoicelayout_proto_rawDesc), len(file_api_ripple_invoicelayout_proto_rawDesc)))
	})
	return file_api_ripple_invoicelayout_proto_rawDescData
}

var file_api_ripple_invoicelayout_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_api_ripple_invoicelayout_proto_goTypes = []any{
	(*InvoiceLayout)(nil),        // 0: blueapi.api.ripple.InvoiceLayout
	(*AccountInvoiceLayout)(nil), // 1: blueapi.api.ripple.accountInvoiceLayout
	(*TotalInvoiceLayout)(nil),   // 2: blueapi.api.ripple.totalInvoiceLayout
	(*BodyInvoiceLayout)(nil),    // 3: blueapi.api.ripple.bodyInvoiceLayout
	(*FooterInvoiceLayout)(nil),  // 4: blueapi.api.ripple.footerInvoiceLayout
	(*HeaderInvoiceLayout)(nil),  // 5: blueapi.api.ripple.headerInvoiceLayout
	(*ReportInvoiceLayout)(nil),  // 6: blueapi.api.ripple.reportInvoiceLayout
}
var file_api_ripple_invoicelayout_proto_depIdxs = []int32{
	1, // 0: blueapi.api.ripple.InvoiceLayout.account:type_name -> blueapi.api.ripple.accountInvoiceLayout
	2, // 1: blueapi.api.ripple.InvoiceLayout.total:type_name -> blueapi.api.ripple.totalInvoiceLayout
	3, // 2: blueapi.api.ripple.InvoiceLayout.body:type_name -> blueapi.api.ripple.bodyInvoiceLayout
	4, // 3: blueapi.api.ripple.InvoiceLayout.footer:type_name -> blueapi.api.ripple.footerInvoiceLayout
	5, // 4: blueapi.api.ripple.InvoiceLayout.header:type_name -> blueapi.api.ripple.headerInvoiceLayout
	6, // 5: blueapi.api.ripple.InvoiceLayout.report:type_name -> blueapi.api.ripple.reportInvoiceLayout
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_api_ripple_invoicelayout_proto_init() }
func file_api_ripple_invoicelayout_proto_init() {
	if File_api_ripple_invoicelayout_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_ripple_invoicelayout_proto_rawDesc), len(file_api_ripple_invoicelayout_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_ripple_invoicelayout_proto_goTypes,
		DependencyIndexes: file_api_ripple_invoicelayout_proto_depIdxs,
		MessageInfos:      file_api_ripple_invoicelayout_proto_msgTypes,
	}.Build()
	File_api_ripple_invoicelayout_proto = out.File
	file_api_ripple_invoicelayout_proto_goTypes = nil
	file_api_ripple_invoicelayout_proto_depIdxs = nil
}
