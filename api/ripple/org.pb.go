// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/ripple/org.proto

package ripple

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Org resource definition.
type Org struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique name (or id) of the organization.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The registered email of the organization.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// The metadata (key/value pair) of the organization. If hierarchy is supported, it will be
	// separated by '/', such as 'metakey/subkey=value'. See https://alphauslabs.github.io/blueapi/
	// for the list of supported attributes.
	Metadata      map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Org) Reset() {
	*x = Org{}
	mi := &file_api_ripple_org_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Org) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Org) ProtoMessage() {}

func (x *Org) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_org_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Org.ProtoReflect.Descriptor instead.
func (*Org) Descriptor() ([]byte, []int) {
	return file_api_ripple_org_proto_rawDescGZIP(), []int{0}
}

func (x *Org) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Org) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Org) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_api_ripple_org_proto protoreflect.FileDescriptor

const file_api_ripple_org_proto_rawDesc = "" +
	"\n" +
	"\x14api/ripple/org.proto\x12\x12blueapi.api.ripple\"\xaf\x01\n" +
	"\x03Org\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05email\x18\x02 \x01(\tR\x05email\x12A\n" +
	"\bmetadata\x18\x03 \x03(\v2%.blueapi.api.ripple.Org.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01Bd\n" +
	" cloud.alphaus.blueapi.api.rippleB\x11ApiRippleOrgProtoZ-github.com/alphauslabs/blue-sdk-go/api/rippleb\x06proto3"

var (
	file_api_ripple_org_proto_rawDescOnce sync.Once
	file_api_ripple_org_proto_rawDescData []byte
)

func file_api_ripple_org_proto_rawDescGZIP() []byte {
	file_api_ripple_org_proto_rawDescOnce.Do(func() {
		file_api_ripple_org_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_ripple_org_proto_rawDesc), len(file_api_ripple_org_proto_rawDesc)))
	})
	return file_api_ripple_org_proto_rawDescData
}

var file_api_ripple_org_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_ripple_org_proto_goTypes = []any{
	(*Org)(nil), // 0: blueapi.api.ripple.Org
	nil,         // 1: blueapi.api.ripple.Org.MetadataEntry
}
var file_api_ripple_org_proto_depIdxs = []int32{
	1, // 0: blueapi.api.ripple.Org.metadata:type_name -> blueapi.api.ripple.Org.MetadataEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_ripple_org_proto_init() }
func file_api_ripple_org_proto_init() {
	if File_api_ripple_org_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_ripple_org_proto_rawDesc), len(file_api_ripple_org_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_ripple_org_proto_goTypes,
		DependencyIndexes: file_api_ripple_org_proto_depIdxs,
		MessageInfos:      file_api_ripple_org_proto_msgTypes,
	}.Build()
	File_api_ripple_org_proto = out.File
	file_api_ripple_org_proto_goTypes = nil
	file_api_ripple_org_proto_depIdxs = nil
}
