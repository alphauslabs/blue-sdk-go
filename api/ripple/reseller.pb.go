// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: api/ripple/reseller.proto

package ripple

import (
	api "github.com/alphauslabs/blue-sdk-go/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the fields on a Wave root (reseller) account
type Reseller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The email address associated with the account. If there is no email
	// address provided then this field will contain "Not Set"
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// The password associated with the account. This field will only be
	// populated when the reseller is first created
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// The ID of the group to which the user belongs. This will either
	// be a billing group ID or an access group ID
	GroupId string `protobuf:"bytes,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// The name of the group to which the user belongs. This will either
	// be the name of a billing group or an access group
	GroupName string `protobuf:"bytes,4,opt,name=groupName,proto3" json:"groupName,omitempty"`
	// This field describes what type of group to which the user belongs.
	// This field will contain either a value of "billing_group" or "access_group"
	GroupType string `protobuf:"bytes,5,opt,name=groupType,proto3" json:"groupType,omitempty"`
	// A collection of feature flags for Wave and whether or not they should be
	// enabled. For a full list of such flags, see https://alphauslabs.github.io/blueapi/apis/admin.html.
	WaveMeta *api.FeatureFlags `protobuf:"bytes,6,opt,name=waveMeta,proto3" json:"waveMeta,omitempty"`
	// A collection of feature flags for Aqua and whether or not they should be
	// enabled. For a full list of such flags, see https://alphauslabs.github.io/blueapi/apis/admin.html.
	AquaMeta *api.FeatureFlags `protobuf:"bytes,7,opt,name=aquaMeta,proto3" json:"aquaMeta,omitempty"`
	// The time when the password was last updated. This value will be null if
	// the password has never been updated
	PasswordUpdateTime string `protobuf:"bytes,8,opt,name=passwordUpdateTime,proto3" json:"passwordUpdateTime,omitempty"`
	// The time when the user was last updated. This value will be null if the
	// user has never been updated
	UpdateTime string `protobuf:"bytes,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	// An ID that uniquely identifies the user in the context of its access group.
	// If the user does not belong to an access group then this value field will
	// contain the same value as the user ID
	UserAccessId string `protobuf:"bytes,10,opt,name=userAccessId,proto3" json:"userAccessId,omitempty"`
	// An ID that unqiuely identifies the user
	UserId string `protobuf:"bytes,11,opt,name=userId,proto3" json:"userId,omitempty"`
	// How many days of Wave use remain. This value is only used for trial accounts.
	// This field cannot be updated.
	WaveAvailabilityDays int32 `protobuf:"varint,12,opt,name=waveAvailabilityDays,proto3" json:"waveAvailabilityDays,omitempty"`
	// When the user registered on Wave.
	WaveRegistered string `protobuf:"bytes,13,opt,name=waveRegistered,proto3" json:"waveRegistered,omitempty"`
	// The plan associated with the Wave user. Possible values include "trial",
	// "limited3" and "limited4"
	WaveStatus string `protobuf:"bytes,14,opt,name=waveStatus,proto3" json:"waveStatus,omitempty"`
}

func (x *Reseller) Reset() {
	*x = Reseller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_ripple_reseller_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reseller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reseller) ProtoMessage() {}

func (x *Reseller) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_reseller_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reseller.ProtoReflect.Descriptor instead.
func (*Reseller) Descriptor() ([]byte, []int) {
	return file_api_ripple_reseller_proto_rawDescGZIP(), []int{0}
}

func (x *Reseller) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Reseller) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Reseller) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Reseller) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Reseller) GetGroupType() string {
	if x != nil {
		return x.GroupType
	}
	return ""
}

func (x *Reseller) GetWaveMeta() *api.FeatureFlags {
	if x != nil {
		return x.WaveMeta
	}
	return nil
}

func (x *Reseller) GetAquaMeta() *api.FeatureFlags {
	if x != nil {
		return x.AquaMeta
	}
	return nil
}

func (x *Reseller) GetPasswordUpdateTime() string {
	if x != nil {
		return x.PasswordUpdateTime
	}
	return ""
}

func (x *Reseller) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Reseller) GetUserAccessId() string {
	if x != nil {
		return x.UserAccessId
	}
	return ""
}

func (x *Reseller) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Reseller) GetWaveAvailabilityDays() int32 {
	if x != nil {
		return x.WaveAvailabilityDays
	}
	return 0
}

func (x *Reseller) GetWaveRegistered() string {
	if x != nil {
		return x.WaveRegistered
	}
	return ""
}

func (x *Reseller) GetWaveStatus() string {
	if x != nil {
		return x.WaveStatus
	}
	return ""
}

var File_api_ripple_reseller_proto protoreflect.FileDescriptor

var file_api_ripple_reseller_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2f, 0x72, 0x65, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x1a,
	0x0e, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x88, 0x04, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x77, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x52, 0x08, 0x77, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x08, 0x61,
	0x71, 0x75, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x08, 0x61, 0x71, 0x75, 0x61, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x77, 0x61, 0x76, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x79, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x77, 0x61,
	0x76, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x61, 0x76, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x61,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x69, 0x0a, 0x20, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x42, 0x16,
	0x41, 0x70, 0x69, 0x52, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62,
	0x6c, 0x75, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x69, 0x70, 0x70, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_ripple_reseller_proto_rawDescOnce sync.Once
	file_api_ripple_reseller_proto_rawDescData = file_api_ripple_reseller_proto_rawDesc
)

func file_api_ripple_reseller_proto_rawDescGZIP() []byte {
	file_api_ripple_reseller_proto_rawDescOnce.Do(func() {
		file_api_ripple_reseller_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_ripple_reseller_proto_rawDescData)
	})
	return file_api_ripple_reseller_proto_rawDescData
}

var file_api_ripple_reseller_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_api_ripple_reseller_proto_goTypes = []interface{}{
	(*Reseller)(nil),         // 0: blueapi.api.ripple.Reseller
	(*api.FeatureFlags)(nil), // 1: blueapi.api.FeatureFlags
}
var file_api_ripple_reseller_proto_depIdxs = []int32{
	1, // 0: blueapi.api.ripple.Reseller.waveMeta:type_name -> blueapi.api.FeatureFlags
	1, // 1: blueapi.api.ripple.Reseller.aquaMeta:type_name -> blueapi.api.FeatureFlags
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_api_ripple_reseller_proto_init() }
func file_api_ripple_reseller_proto_init() {
	if File_api_ripple_reseller_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_ripple_reseller_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reseller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_ripple_reseller_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_ripple_reseller_proto_goTypes,
		DependencyIndexes: file_api_ripple_reseller_proto_depIdxs,
		MessageInfos:      file_api_ripple_reseller_proto_msgTypes,
	}.Build()
	File_api_ripple_reseller_proto = out.File
	file_api_ripple_reseller_proto_rawDesc = nil
	file_api_ripple_reseller_proto_goTypes = nil
	file_api_ripple_reseller_proto_depIdxs = nil
}
