// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/ripple/reseller.proto

package ripple

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Reseller struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// reseller id. Generated automatically.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// email
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// groupId includes `billingInternalId` or `accessGroupId`
	GroupId string `protobuf:"bytes,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// groupName includes `billingInternalName` or `accessGroupName`
	GroupName string `protobuf:"bytes,4,opt,name=groupName,proto3" json:"groupName,omitempty"`
	// group type
	// Refer to the following for available values
	// billing_group: Billing Group.
	// access_group: Access Group.
	GroupType string `protobuf:"bytes,5,opt,name=groupType,proto3" json:"groupType,omitempty"`
	// wave status
	WaveStatus string `protobuf:"bytes,6,opt,name=waveStatus,proto3" json:"waveStatus,omitempty"`
	// wave feature config
	WaveConfig []*ResellerConfig `protobuf:"bytes,7,rep,name=waveConfig,proto3" json:"waveConfig,omitempty"`
	// aqua feature config
	AquaConfig    []*ResellerConfig `protobuf:"bytes,8,rep,name=aquaConfig,proto3" json:"aquaConfig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reseller) Reset() {
	*x = Reseller{}
	mi := &file_api_ripple_reseller_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reseller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reseller) ProtoMessage() {}

func (x *Reseller) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_reseller_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reseller.ProtoReflect.Descriptor instead.
func (*Reseller) Descriptor() ([]byte, []int) {
	return file_api_ripple_reseller_proto_rawDescGZIP(), []int{0}
}

func (x *Reseller) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Reseller) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Reseller) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Reseller) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Reseller) GetGroupType() string {
	if x != nil {
		return x.GroupType
	}
	return ""
}

func (x *Reseller) GetWaveStatus() string {
	if x != nil {
		return x.WaveStatus
	}
	return ""
}

func (x *Reseller) GetWaveConfig() []*ResellerConfig {
	if x != nil {
		return x.WaveConfig
	}
	return nil
}

func (x *Reseller) GetAquaConfig() []*ResellerConfig {
	if x != nil {
		return x.AquaConfig
	}
	return nil
}

type ResellerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// key
	//
	// For Wave
	// The available values are shown below.
	// - Dashboard
	// `dashboardGraph`: Display graph | Default: true
	// `reportFilters`: Display report filters | Default: false
	//
	// - Usage Reports
	// `usageAccount`: Account | Default: true
	// `usageAccountGraph`: Display graph | Default: true
	// `usageAccountMenuAccountEdit`: Edit account name | Default: false
	// `usageAccountMenuBudget`: Display Budget | Default: false
	// `usageAccountMenuBudgetEdit`: Edit Budget | Default: false
	// `usageAccountMenuFeesFee`: Display fee  | Default: false
	// `usageAccountMenuFeesCredit`: Display credit | Default: false
	// `usageAccountMenuFeesRefund`: Display refund | Default: false
	// `usageAccountMenuFeesOtherFees`: Display other fees | Default: false
	// `usageReportDownload`: Download report data | Default: true
	// `cost_forecast_tab`: Cost Forecast | Default: true
	//
	// - Cross Tag
	// `usageCrosstag`: Cross Tag | Default: true
	// `usageCrosstagGraph`: Display graph | Default: true
	//
	// - Group
	// `usageGroup`: Group
	// `usageGroupGraph`: Display graph | Default: true
	//
	// - Cost management
	// `riPurchased`: Display purchased RI | Default: true
	// `riUtilization`: Display RI Utilization | Default: false
	// `riRecommendation`: Display RI Recommendations | Default: false
	// `spPurchased`: Display purchased Savings Plans | Default: false
	//
	// - Other
	// `invoice`: Invoice link | Default: false
	// `openApi`: API Access Tokens | Default: false
	// `usersManagement`: Sub-user management | Default: true
	// `invoiceDownloadCsvDiscount`: Enable discount CSV download | Default: false
	// `invoiceDownloadCsvMerged`: Enable merged CSV download | Default: false
	// `aquaLink`: Aqua link | Default: false
	// `waveproReportFilters`: WavePro Report Filters | Default: false
	// `budgetalerts`: WavePro Budget Alerts | Default: false
	//
	// For Aqua
	// The available values are shown below.
	// - Instance Usage Status
	// `aqCoverageRatio`: Coverage Ratio | Default: false
	//
	// - Reservations Management
	// `aqRiManagement`: RI Management | Default: false
	// `aqSpManagement`: SP Management | Default: false
	//
	// - Recommendation
	// `aqRiSpInstances`: RI/SP Instances | Default: false
	// `aqRightSizing`: Right Sizing | Default: false
	// `aqScheduling`: Scheduling | Default: false
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value
	Value         bool `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResellerConfig) Reset() {
	*x = ResellerConfig{}
	mi := &file_api_ripple_reseller_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResellerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResellerConfig) ProtoMessage() {}

func (x *ResellerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_ripple_reseller_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResellerConfig.ProtoReflect.Descriptor instead.
func (*ResellerConfig) Descriptor() ([]byte, []int) {
	return file_api_ripple_reseller_proto_rawDescGZIP(), []int{1}
}

func (x *ResellerConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ResellerConfig) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

var File_api_ripple_reseller_proto protoreflect.FileDescriptor

const file_api_ripple_reseller_proto_rawDesc = "" +
	"\n" +
	"\x19api/ripple/reseller.proto\x12\x12blueapi.api.ripple\"\xae\x02\n" +
	"\bReseller\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05email\x18\x02 \x01(\tR\x05email\x12\x18\n" +
	"\agroupId\x18\x03 \x01(\tR\agroupId\x12\x1c\n" +
	"\tgroupName\x18\x04 \x01(\tR\tgroupName\x12\x1c\n" +
	"\tgroupType\x18\x05 \x01(\tR\tgroupType\x12\x1e\n" +
	"\n" +
	"waveStatus\x18\x06 \x01(\tR\n" +
	"waveStatus\x12B\n" +
	"\n" +
	"waveConfig\x18\a \x03(\v2\".blueapi.api.ripple.ResellerConfigR\n" +
	"waveConfig\x12B\n" +
	"\n" +
	"aquaConfig\x18\b \x03(\v2\".blueapi.api.ripple.ResellerConfigR\n" +
	"aquaConfig\"8\n" +
	"\x0eResellerConfig\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05valueBi\n" +
	" cloud.alphaus.blueapi.api.rippleB\x16ApiRippleResellerProtoZ-github.com/alphauslabs/blue-sdk-go/api/rippleb\x06proto3"

var (
	file_api_ripple_reseller_proto_rawDescOnce sync.Once
	file_api_ripple_reseller_proto_rawDescData []byte
)

func file_api_ripple_reseller_proto_rawDescGZIP() []byte {
	file_api_ripple_reseller_proto_rawDescOnce.Do(func() {
		file_api_ripple_reseller_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_ripple_reseller_proto_rawDesc), len(file_api_ripple_reseller_proto_rawDesc)))
	})
	return file_api_ripple_reseller_proto_rawDescData
}

var file_api_ripple_reseller_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_ripple_reseller_proto_goTypes = []any{
	(*Reseller)(nil),       // 0: blueapi.api.ripple.Reseller
	(*ResellerConfig)(nil), // 1: blueapi.api.ripple.ResellerConfig
}
var file_api_ripple_reseller_proto_depIdxs = []int32{
	1, // 0: blueapi.api.ripple.Reseller.waveConfig:type_name -> blueapi.api.ripple.ResellerConfig
	1, // 1: blueapi.api.ripple.Reseller.aquaConfig:type_name -> blueapi.api.ripple.ResellerConfig
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_api_ripple_reseller_proto_init() }
func file_api_ripple_reseller_proto_init() {
	if File_api_ripple_reseller_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_ripple_reseller_proto_rawDesc), len(file_api_ripple_reseller_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_ripple_reseller_proto_goTypes,
		DependencyIndexes: file_api_ripple_reseller_proto_depIdxs,
		MessageInfos:      file_api_ripple_reseller_proto_msgTypes,
	}.Build()
	File_api_ripple_reseller_proto = out.File
	file_api_ripple_reseller_proto_goTypes = nil
	file_api_ripple_reseller_proto_depIdxs = nil
}
