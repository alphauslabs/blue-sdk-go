// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: api/pricing/details.proto

package pricing

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ServiceDetails message
type ServiceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferTermCode               string `protobuf:"bytes,1,opt,name=offerTermCode,proto3" json:"offerTermCode,omitempty"`
	RateCode                    string `protobuf:"bytes,2,opt,name=rateCode,proto3" json:"rateCode,omitempty"`
	TermType                    string `protobuf:"bytes,3,opt,name=termType,proto3" json:"termType,omitempty"`
	PriceDescription            string `protobuf:"bytes,4,opt,name=priceDescription,proto3" json:"priceDescription,omitempty"`
	EffectiveDate               string `protobuf:"bytes,5,opt,name=effectiveDate,proto3" json:"effectiveDate,omitempty"`
	StartingRange               string `protobuf:"bytes,6,opt,name=startingRange,proto3" json:"startingRange,omitempty"`
	EndingRange                 string `protobuf:"bytes,7,opt,name=endingRange,proto3" json:"endingRange,omitempty"`
	Currency                    string `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	RelatedTo                   string `protobuf:"bytes,9,opt,name=relatedTo,proto3" json:"relatedTo,omitempty"`
	LeaseContractLength         string `protobuf:"bytes,10,opt,name=leaseContractLength,proto3" json:"leaseContractLength,omitempty"`
	PurchaseOption              string `protobuf:"bytes,11,opt,name=purchaseOption,proto3" json:"purchaseOption,omitempty"`
	OfferingClass               string `protobuf:"bytes,12,opt,name=offeringClass,proto3" json:"offeringClass,omitempty"`
	ProductFamily               string `protobuf:"bytes,13,opt,name=productFamily,proto3" json:"productFamily,omitempty"`
	ServiceCode                 string `protobuf:"bytes,14,opt,name=serviceCode,proto3" json:"serviceCode,omitempty"`
	Location                    string `protobuf:"bytes,15,opt,name=location,proto3" json:"location,omitempty"`
	LocationType                string `protobuf:"bytes,16,opt,name=locationType,proto3" json:"locationType,omitempty"`
	InstanceType                string `protobuf:"bytes,17,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	CurrentGeneration           string `protobuf:"bytes,18,opt,name=currentGeneration,proto3" json:"currentGeneration,omitempty"`
	InstanceFamily              string `protobuf:"bytes,19,opt,name=instanceFamily,proto3" json:"instanceFamily,omitempty"`
	Vcpu                        string `protobuf:"bytes,20,opt,name=vcpu,proto3" json:"vcpu,omitempty"`
	PhysicalProcessor           string `protobuf:"bytes,21,opt,name=physicalProcessor,proto3" json:"physicalProcessor,omitempty"`
	ClockSpeed                  string `protobuf:"bytes,22,opt,name=clockSpeed,proto3" json:"clockSpeed,omitempty"`
	Memory                      string `protobuf:"bytes,23,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage                     string `protobuf:"bytes,24,opt,name=storage,proto3" json:"storage,omitempty"`
	NetworkPerformance          string `protobuf:"bytes,25,opt,name=networkPerformance,proto3" json:"networkPerformance,omitempty"`
	ProcessorArchitecture       string `protobuf:"bytes,26,opt,name=processorArchitecture,proto3" json:"processorArchitecture,omitempty"`
	StorageMedia                string `protobuf:"bytes,27,opt,name=storageMedia,proto3" json:"storageMedia,omitempty"`
	VolumeType                  string `protobuf:"bytes,28,opt,name=volumeType,proto3" json:"volumeType,omitempty"`
	MaxVolumeSize               string `protobuf:"bytes,29,opt,name=maxVolumeSize,proto3" json:"maxVolumeSize,omitempty"`
	MaxIopsVolume               string `protobuf:"bytes,30,opt,name=maxIopsVolume,proto3" json:"maxIopsVolume,omitempty"`
	MaxIopsBurstPerformance     string `protobuf:"bytes,31,opt,name=maxIopsBurstPerformance,proto3" json:"maxIopsBurstPerformance,omitempty"`
	MaxThroughputVolume         string `protobuf:"bytes,32,opt,name=maxThroughputVolume,proto3" json:"maxThroughputVolume,omitempty"`
	Provisioned                 string `protobuf:"bytes,33,opt,name=provisioned,proto3" json:"provisioned,omitempty"`
	Tenancy                     string `protobuf:"bytes,34,opt,name=tenancy,proto3" json:"tenancy,omitempty"`
	EbsOptimized                string `protobuf:"bytes,35,opt,name=ebsOptimized,proto3" json:"ebsOptimized,omitempty"`
	OperatingSystem             string `protobuf:"bytes,36,opt,name=operatingSystem,proto3" json:"operatingSystem,omitempty"`
	LicenseModel                string `protobuf:"bytes,37,opt,name=licenseModel,proto3" json:"licenseModel,omitempty"`
	Groupings                   string `protobuf:"bytes,38,opt,name=groupings,proto3" json:"groupings,omitempty"`
	GroupDescription            string `protobuf:"bytes,39,opt,name=groupDescription,proto3" json:"groupDescription,omitempty"`
	TransferType                string `protobuf:"bytes,40,opt,name=transferType,proto3" json:"transferType,omitempty"`
	FromLocation                string `protobuf:"bytes,41,opt,name=fromLocation,proto3" json:"fromLocation,omitempty"`
	FromLocationType            string `protobuf:"bytes,42,opt,name=fromLocationType,proto3" json:"fromLocationType,omitempty"`
	ToLocation                  string `protobuf:"bytes,43,opt,name=toLocation,proto3" json:"toLocation,omitempty"`
	ToLocationType              string `protobuf:"bytes,44,opt,name=toLocationType,proto3" json:"toLocationType,omitempty"`
	UsageType                   string `protobuf:"bytes,45,opt,name=usageType,proto3" json:"usageType,omitempty"`
	Operation                   string `protobuf:"bytes,46,opt,name=operation,proto3" json:"operation,omitempty"`
	AvailabilityZone            string `protobuf:"bytes,47,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	CapacityStatus              string `protobuf:"bytes,48,opt,name=capacityStatus,proto3" json:"capacityStatus,omitempty"`
	ClassicNetworkingSupport    string `protobuf:"bytes,49,opt,name=classicNetworkingSupport,proto3" json:"classicNetworkingSupport,omitempty"`
	DedicatedEbsThroughput      string `protobuf:"bytes,50,opt,name=dedicatedEbsThroughput,proto3" json:"dedicatedEbsThroughput,omitempty"`
	Ecu                         string `protobuf:"bytes,51,opt,name=ecu,proto3" json:"ecu,omitempty"`
	ElasticGraphicsType         string `protobuf:"bytes,52,opt,name=elasticGraphicsType,proto3" json:"elasticGraphicsType,omitempty"`
	EnhancedNetworkingSupported string `protobuf:"bytes,53,opt,name=enhancedNetworkingSupported,proto3" json:"enhancedNetworkingSupported,omitempty"`
	FromRegionCode              string `protobuf:"bytes,54,opt,name=fromRegionCode,proto3" json:"fromRegionCode,omitempty"`
	Gpu                         string `protobuf:"bytes,55,opt,name=gpu,proto3" json:"gpu,omitempty"`
	GpuMemory                   string `protobuf:"bytes,56,opt,name=gpuMemory,proto3" json:"gpuMemory,omitempty"`
	Instance                    string `protobuf:"bytes,57,opt,name=instance,proto3" json:"instance,omitempty"`
	InstanceCapacity10Xlarge    string `protobuf:"bytes,58,opt,name=instanceCapacity10xlarge,proto3" json:"instanceCapacity10xlarge,omitempty"`
	InstanceCapacity12Xlarge    string `protobuf:"bytes,59,opt,name=instanceCapacity12xlarge,proto3" json:"instanceCapacity12xlarge,omitempty"`
	InstanceCapacity16Xlarge    string `protobuf:"bytes,60,opt,name=instanceCapacity16xlarge,proto3" json:"instanceCapacity16xlarge,omitempty"`
	InstanceCapacity18Xlarge    string `protobuf:"bytes,61,opt,name=instanceCapacity18xlarge,proto3" json:"instanceCapacity18xlarge,omitempty"`
	InstanceCapacity24Xlarge    string `protobuf:"bytes,62,opt,name=instanceCapacity24xlarge,proto3" json:"instanceCapacity24xlarge,omitempty"`
	InstanceCapacity2Xlarge     string `protobuf:"bytes,63,opt,name=instanceCapacity2xlarge,proto3" json:"instanceCapacity2xlarge,omitempty"`
	InstanceCapacity32Xlarge    string `protobuf:"bytes,64,opt,name=instanceCapacity32xlarge,proto3" json:"instanceCapacity32xlarge,omitempty"`
	InstanceCapacity4Xlarge     string `protobuf:"bytes,65,opt,name=instanceCapacity4xlarge,proto3" json:"instanceCapacity4xlarge,omitempty"`
	InstanceCapacity8Xlarge     string `protobuf:"bytes,66,opt,name=instanceCapacity8xlarge,proto3" json:"instanceCapacity8xlarge,omitempty"`
	InstanceCapacity9Xlarge     string `protobuf:"bytes,67,opt,name=instanceCapacity9xlarge,proto3" json:"instanceCapacity9xlarge,omitempty"`
	InstanceCapacityLarge       string `protobuf:"bytes,68,opt,name=instanceCapacityLarge,proto3" json:"instanceCapacityLarge,omitempty"`
	InstanceCapacityMedium      string `protobuf:"bytes,69,opt,name=instanceCapacityMedium,proto3" json:"instanceCapacityMedium,omitempty"`
	InstanceCapacityMetal       string `protobuf:"bytes,70,opt,name=instanceCapacityMetal,proto3" json:"instanceCapacityMetal,omitempty"`
	InstanceCapacityXLarge      string `protobuf:"bytes,71,opt,name=instanceCapacityXLarge,proto3" json:"instanceCapacityXLarge,omitempty"`
	InstanceSku                 string `protobuf:"bytes,72,opt,name=instanceSku,proto3" json:"instanceSku,omitempty"`
	IntelAvx2Available          string `protobuf:"bytes,73,opt,name=intelAvx2Available,proto3" json:"intelAvx2Available,omitempty"`
	IntelAvxAvailable           string `protobuf:"bytes,74,opt,name=intelAvxAvailable,proto3" json:"intelAvxAvailable,omitempty"`
	IntelTurboAvailable         string `protobuf:"bytes,75,opt,name=intelTurboAvailable,proto3" json:"intelTurboAvailable,omitempty"`
	MarketOption                string `protobuf:"bytes,76,opt,name=marketOption,proto3" json:"marketOption,omitempty"`
	NormalizationSizeFactor     string `protobuf:"bytes,77,opt,name=normalizationSizeFactor,proto3" json:"normalizationSizeFactor,omitempty"`
	PhysicalCores               string `protobuf:"bytes,78,opt,name=physicalCores,proto3" json:"physicalCores,omitempty"`
	PreInstalledSw              string `protobuf:"bytes,79,opt,name=preInstalledSw,proto3" json:"preInstalledSw,omitempty"`
	ProcessorFeatures           string `protobuf:"bytes,80,opt,name=processorFeatures,proto3" json:"processorFeatures,omitempty"`
	ProductType                 string `protobuf:"bytes,81,opt,name=productType,proto3" json:"productType,omitempty"`
	ResourceType                string `protobuf:"bytes,82,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	ServiceName                 string `protobuf:"bytes,83,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	SnapShotArchiveFeeType      string `protobuf:"bytes,84,opt,name=snapShotArchiveFeeType,proto3" json:"snapShotArchiveFeeType,omitempty"`
	ToRegionCode                string `protobuf:"bytes,85,opt,name=toRegionCode,proto3" json:"toRegionCode,omitempty"`
	VolumeApiName               string `protobuf:"bytes,86,opt,name=volumeApiName,proto3" json:"volumeApiName,omitempty"`
	VpcNetworkingSupport        string `protobuf:"bytes,87,opt,name=vpcNetworkingSupport,proto3" json:"vpcNetworkingSupport,omitempty"`
}

func (x *ServiceDetails) Reset() {
	*x = ServiceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pricing_details_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDetails) ProtoMessage() {}

func (x *ServiceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_pricing_details_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDetails.ProtoReflect.Descriptor instead.
func (*ServiceDetails) Descriptor() ([]byte, []int) {
	return file_api_pricing_details_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceDetails) GetOfferTermCode() string {
	if x != nil {
		return x.OfferTermCode
	}
	return ""
}

func (x *ServiceDetails) GetRateCode() string {
	if x != nil {
		return x.RateCode
	}
	return ""
}

func (x *ServiceDetails) GetTermType() string {
	if x != nil {
		return x.TermType
	}
	return ""
}

func (x *ServiceDetails) GetPriceDescription() string {
	if x != nil {
		return x.PriceDescription
	}
	return ""
}

func (x *ServiceDetails) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *ServiceDetails) GetStartingRange() string {
	if x != nil {
		return x.StartingRange
	}
	return ""
}

func (x *ServiceDetails) GetEndingRange() string {
	if x != nil {
		return x.EndingRange
	}
	return ""
}

func (x *ServiceDetails) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ServiceDetails) GetRelatedTo() string {
	if x != nil {
		return x.RelatedTo
	}
	return ""
}

func (x *ServiceDetails) GetLeaseContractLength() string {
	if x != nil {
		return x.LeaseContractLength
	}
	return ""
}

func (x *ServiceDetails) GetPurchaseOption() string {
	if x != nil {
		return x.PurchaseOption
	}
	return ""
}

func (x *ServiceDetails) GetOfferingClass() string {
	if x != nil {
		return x.OfferingClass
	}
	return ""
}

func (x *ServiceDetails) GetProductFamily() string {
	if x != nil {
		return x.ProductFamily
	}
	return ""
}

func (x *ServiceDetails) GetServiceCode() string {
	if x != nil {
		return x.ServiceCode
	}
	return ""
}

func (x *ServiceDetails) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ServiceDetails) GetLocationType() string {
	if x != nil {
		return x.LocationType
	}
	return ""
}

func (x *ServiceDetails) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *ServiceDetails) GetCurrentGeneration() string {
	if x != nil {
		return x.CurrentGeneration
	}
	return ""
}

func (x *ServiceDetails) GetInstanceFamily() string {
	if x != nil {
		return x.InstanceFamily
	}
	return ""
}

func (x *ServiceDetails) GetVcpu() string {
	if x != nil {
		return x.Vcpu
	}
	return ""
}

func (x *ServiceDetails) GetPhysicalProcessor() string {
	if x != nil {
		return x.PhysicalProcessor
	}
	return ""
}

func (x *ServiceDetails) GetClockSpeed() string {
	if x != nil {
		return x.ClockSpeed
	}
	return ""
}

func (x *ServiceDetails) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *ServiceDetails) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *ServiceDetails) GetNetworkPerformance() string {
	if x != nil {
		return x.NetworkPerformance
	}
	return ""
}

func (x *ServiceDetails) GetProcessorArchitecture() string {
	if x != nil {
		return x.ProcessorArchitecture
	}
	return ""
}

func (x *ServiceDetails) GetStorageMedia() string {
	if x != nil {
		return x.StorageMedia
	}
	return ""
}

func (x *ServiceDetails) GetVolumeType() string {
	if x != nil {
		return x.VolumeType
	}
	return ""
}

func (x *ServiceDetails) GetMaxVolumeSize() string {
	if x != nil {
		return x.MaxVolumeSize
	}
	return ""
}

func (x *ServiceDetails) GetMaxIopsVolume() string {
	if x != nil {
		return x.MaxIopsVolume
	}
	return ""
}

func (x *ServiceDetails) GetMaxIopsBurstPerformance() string {
	if x != nil {
		return x.MaxIopsBurstPerformance
	}
	return ""
}

func (x *ServiceDetails) GetMaxThroughputVolume() string {
	if x != nil {
		return x.MaxThroughputVolume
	}
	return ""
}

func (x *ServiceDetails) GetProvisioned() string {
	if x != nil {
		return x.Provisioned
	}
	return ""
}

func (x *ServiceDetails) GetTenancy() string {
	if x != nil {
		return x.Tenancy
	}
	return ""
}

func (x *ServiceDetails) GetEbsOptimized() string {
	if x != nil {
		return x.EbsOptimized
	}
	return ""
}

func (x *ServiceDetails) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *ServiceDetails) GetLicenseModel() string {
	if x != nil {
		return x.LicenseModel
	}
	return ""
}

func (x *ServiceDetails) GetGroupings() string {
	if x != nil {
		return x.Groupings
	}
	return ""
}

func (x *ServiceDetails) GetGroupDescription() string {
	if x != nil {
		return x.GroupDescription
	}
	return ""
}

func (x *ServiceDetails) GetTransferType() string {
	if x != nil {
		return x.TransferType
	}
	return ""
}

func (x *ServiceDetails) GetFromLocation() string {
	if x != nil {
		return x.FromLocation
	}
	return ""
}

func (x *ServiceDetails) GetFromLocationType() string {
	if x != nil {
		return x.FromLocationType
	}
	return ""
}

func (x *ServiceDetails) GetToLocation() string {
	if x != nil {
		return x.ToLocation
	}
	return ""
}

func (x *ServiceDetails) GetToLocationType() string {
	if x != nil {
		return x.ToLocationType
	}
	return ""
}

func (x *ServiceDetails) GetUsageType() string {
	if x != nil {
		return x.UsageType
	}
	return ""
}

func (x *ServiceDetails) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *ServiceDetails) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *ServiceDetails) GetCapacityStatus() string {
	if x != nil {
		return x.CapacityStatus
	}
	return ""
}

func (x *ServiceDetails) GetClassicNetworkingSupport() string {
	if x != nil {
		return x.ClassicNetworkingSupport
	}
	return ""
}

func (x *ServiceDetails) GetDedicatedEbsThroughput() string {
	if x != nil {
		return x.DedicatedEbsThroughput
	}
	return ""
}

func (x *ServiceDetails) GetEcu() string {
	if x != nil {
		return x.Ecu
	}
	return ""
}

func (x *ServiceDetails) GetElasticGraphicsType() string {
	if x != nil {
		return x.ElasticGraphicsType
	}
	return ""
}

func (x *ServiceDetails) GetEnhancedNetworkingSupported() string {
	if x != nil {
		return x.EnhancedNetworkingSupported
	}
	return ""
}

func (x *ServiceDetails) GetFromRegionCode() string {
	if x != nil {
		return x.FromRegionCode
	}
	return ""
}

func (x *ServiceDetails) GetGpu() string {
	if x != nil {
		return x.Gpu
	}
	return ""
}

func (x *ServiceDetails) GetGpuMemory() string {
	if x != nil {
		return x.GpuMemory
	}
	return ""
}

func (x *ServiceDetails) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *ServiceDetails) GetInstanceCapacity10Xlarge() string {
	if x != nil {
		return x.InstanceCapacity10Xlarge
	}
	return ""
}

func (x *ServiceDetails) GetInstanceCapacity12Xlarge() string {
	if x != nil {
		return x.InstanceCapacity12Xlarge
	}
	return ""
}

func (x *ServiceDetails) GetInstanceCapacity16Xlarge() string {
	if x != nil {
		return x.InstanceCapacity16Xlarge
	}
	return ""
}

func (x *ServiceDetails) GetInstanceCapacity18Xlarge() string {
	if x != nil {
		return x.InstanceCapacity18Xlarge
	}
	return ""
}

func (x *ServiceDetails) GetInstanceCapacity24Xlarge() string {
	if x != nil {
		return x.InstanceCapacity24Xlarge
	}
	return ""
}

func (x *ServiceDetails) GetInstanceCapacity2Xlarge() string {
	if x != nil {
		return x.InstanceCapacity2Xlarge
	}
	return ""
}

func (x *ServiceDetails) GetInstanceCapacity32Xlarge() string {
	if x != nil {
		return x.InstanceCapacity32Xlarge
	}
	return ""
}

func (x *ServiceDetails) GetInstanceCapacity4Xlarge() string {
	if x != nil {
		return x.InstanceCapacity4Xlarge
	}
	return ""
}

func (x *ServiceDetails) GetInstanceCapacity8Xlarge() string {
	if x != nil {
		return x.InstanceCapacity8Xlarge
	}
	return ""
}

func (x *ServiceDetails) GetInstanceCapacity9Xlarge() string {
	if x != nil {
		return x.InstanceCapacity9Xlarge
	}
	return ""
}

func (x *ServiceDetails) GetInstanceCapacityLarge() string {
	if x != nil {
		return x.InstanceCapacityLarge
	}
	return ""
}

func (x *ServiceDetails) GetInstanceCapacityMedium() string {
	if x != nil {
		return x.InstanceCapacityMedium
	}
	return ""
}

func (x *ServiceDetails) GetInstanceCapacityMetal() string {
	if x != nil {
		return x.InstanceCapacityMetal
	}
	return ""
}

func (x *ServiceDetails) GetInstanceCapacityXLarge() string {
	if x != nil {
		return x.InstanceCapacityXLarge
	}
	return ""
}

func (x *ServiceDetails) GetInstanceSku() string {
	if x != nil {
		return x.InstanceSku
	}
	return ""
}

func (x *ServiceDetails) GetIntelAvx2Available() string {
	if x != nil {
		return x.IntelAvx2Available
	}
	return ""
}

func (x *ServiceDetails) GetIntelAvxAvailable() string {
	if x != nil {
		return x.IntelAvxAvailable
	}
	return ""
}

func (x *ServiceDetails) GetIntelTurboAvailable() string {
	if x != nil {
		return x.IntelTurboAvailable
	}
	return ""
}

func (x *ServiceDetails) GetMarketOption() string {
	if x != nil {
		return x.MarketOption
	}
	return ""
}

func (x *ServiceDetails) GetNormalizationSizeFactor() string {
	if x != nil {
		return x.NormalizationSizeFactor
	}
	return ""
}

func (x *ServiceDetails) GetPhysicalCores() string {
	if x != nil {
		return x.PhysicalCores
	}
	return ""
}

func (x *ServiceDetails) GetPreInstalledSw() string {
	if x != nil {
		return x.PreInstalledSw
	}
	return ""
}

func (x *ServiceDetails) GetProcessorFeatures() string {
	if x != nil {
		return x.ProcessorFeatures
	}
	return ""
}

func (x *ServiceDetails) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *ServiceDetails) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ServiceDetails) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ServiceDetails) GetSnapShotArchiveFeeType() string {
	if x != nil {
		return x.SnapShotArchiveFeeType
	}
	return ""
}

func (x *ServiceDetails) GetToRegionCode() string {
	if x != nil {
		return x.ToRegionCode
	}
	return ""
}

func (x *ServiceDetails) GetVolumeApiName() string {
	if x != nil {
		return x.VolumeApiName
	}
	return ""
}

func (x *ServiceDetails) GetVpcNetworkingSupport() string {
	if x != nil {
		return x.VpcNetworkingSupport
	}
	return ""
}

var File_api_pricing_details_proto protoreflect.FileDescriptor

var file_api_pricing_details_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x22, 0xc2, 0x1c, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x63, 0x70, 0x75, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x63, 0x70, 0x75, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61,
	0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x49, 0x6f, 0x70, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x49, 0x6f, 0x70, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x49, 0x6f, 0x70, 0x73, 0x42, 0x75, 0x72, 0x73,
	0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x49, 0x6f, 0x70, 0x73, 0x42, 0x75, 0x72, 0x73, 0x74,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6d,
	0x61, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x54, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x62, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x62, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e,
	0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a,
	0x16, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x62, 0x73, 0x54, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x62, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x63, 0x75, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x63, 0x75, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6c, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x65, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x31, 0x30, 0x78, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x31, 0x30, 0x78, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x31,
	0x32, 0x78, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x31,
	0x32, 0x78, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x31, 0x36, 0x78, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x31, 0x36, 0x78, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x31, 0x38, 0x78, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x31, 0x38, 0x78, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x32, 0x34, 0x78, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x32, 0x34, 0x78, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x32,
	0x78, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x32, 0x78,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x33, 0x32, 0x78, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x33, 0x32, 0x78, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x34, 0x78, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x34, 0x78, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x38,
	0x78, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x38, 0x78,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x39, 0x78, 0x6c, 0x61, 0x72, 0x67, 0x65,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x39, 0x78, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x34, 0x0a,
	0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x58, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x58, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6b, 0x75, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6b, 0x75, 0x12, 0x2e, 0x0a,
	0x12, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x41, 0x76, 0x78, 0x32, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x41, 0x76, 0x78, 0x32, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x41, 0x76, 0x78, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x41,
	0x76, 0x78, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x54,
	0x75, 0x72, 0x62, 0x6f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x17, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x53, 0x77, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x77, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x53, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x16, 0x73, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x73, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x6f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x56, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x70, 0x69, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x76, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x76, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6b, 0x0a, 0x21, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x16, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x2d,
	0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_pricing_details_proto_rawDescOnce sync.Once
	file_api_pricing_details_proto_rawDescData = file_api_pricing_details_proto_rawDesc
)

func file_api_pricing_details_proto_rawDescGZIP() []byte {
	file_api_pricing_details_proto_rawDescOnce.Do(func() {
		file_api_pricing_details_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_pricing_details_proto_rawDescData)
	})
	return file_api_pricing_details_proto_rawDescData
}

var file_api_pricing_details_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_api_pricing_details_proto_goTypes = []any{
	(*ServiceDetails)(nil), // 0: blueapi.api.pricing.ServiceDetails
}
var file_api_pricing_details_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_pricing_details_proto_init() }
func file_api_pricing_details_proto_init() {
	if File_api_pricing_details_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_pricing_details_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ServiceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_pricing_details_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_pricing_details_proto_goTypes,
		DependencyIndexes: file_api_pricing_details_proto_depIdxs,
		MessageInfos:      file_api_pricing_details_proto_msgTypes,
	}.Build()
	File_api_pricing_details_proto = out.File
	file_api_pricing_details_proto_rawDesc = nil
	file_api_pricing_details_proto_goTypes = nil
	file_api_pricing_details_proto_depIdxs = nil
}
