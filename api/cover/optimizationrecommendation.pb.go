// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: api/cover/optimizationrecommendation.proto

package cover

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecutedRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecommendationId   string  `protobuf:"bytes,1,opt,name=recommendationId,proto3" json:"recommendationId,omitempty"`
	Recommendaton      string  `protobuf:"bytes,2,opt,name=recommendaton,proto3" json:"recommendaton,omitempty"`
	Target             string  `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	AccountName        string  `protobuf:"bytes,4,opt,name=accountName,proto3" json:"accountName,omitempty"`
	Service            string  `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	CompletedDate      string  `protobuf:"bytes,6,opt,name=completedDate,proto3" json:"completedDate,omitempty"`
	EstSavings         float64 `protobuf:"fixed64,7,opt,name=estSavings,proto3" json:"estSavings,omitempty"`
	EstCost            float64 `protobuf:"fixed64,8,opt,name=estCost,proto3" json:"estCost,omitempty"`
	Vendor             string  `protobuf:"bytes,9,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Category           string  `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
	DateAdded          string  `protobuf:"bytes,11,opt,name=dateAdded,proto3" json:"dateAdded,omitempty"`
	PersonInCharge     string  `protobuf:"bytes,12,opt,name=personInCharge,proto3" json:"personInCharge,omitempty"`
	OptimizationStatus string  `protobuf:"bytes,13,opt,name=optimizationStatus,proto3" json:"optimizationStatus,omitempty"`
}

func (x *ExecutedRecommendationDetails) Reset() {
	*x = ExecutedRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutedRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutedRecommendationDetails) ProtoMessage() {}

func (x *ExecutedRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutedRecommendationDetails.ProtoReflect.Descriptor instead.
func (*ExecutedRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{0}
}

func (x *ExecutedRecommendationDetails) GetRecommendationId() string {
	if x != nil {
		return x.RecommendationId
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetRecommendaton() string {
	if x != nil {
		return x.Recommendaton
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetCompletedDate() string {
	if x != nil {
		return x.CompletedDate
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetEstSavings() float64 {
	if x != nil {
		return x.EstSavings
	}
	return 0
}

func (x *ExecutedRecommendationDetails) GetEstCost() float64 {
	if x != nil {
		return x.EstCost
	}
	return 0
}

func (x *ExecutedRecommendationDetails) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetDateAdded() string {
	if x != nil {
		return x.DateAdded
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetPersonInCharge() string {
	if x != nil {
		return x.PersonInCharge
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetOptimizationStatus() string {
	if x != nil {
		return x.OptimizationStatus
	}
	return ""
}

type AWSRecommendations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                string                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId                         string                             `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	AccountName                       string                             `protobuf:"bytes,3,opt,name=accountName,proto3" json:"accountName,omitempty"`
	InstanceId                        string                             `protobuf:"bytes,4,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	InstanceName                      string                             `protobuf:"bytes,5,opt,name=instanceName,proto3" json:"instanceName,omitempty"`
	Service                           string                             `protobuf:"bytes,6,opt,name=service,proto3" json:"service,omitempty"`
	Source                            string                             `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	CostGroup                         string                             `protobuf:"bytes,8,opt,name=costGroup,proto3" json:"costGroup,omitempty"`
	Recommendation                    string                             `protobuf:"bytes,9,opt,name=recommendation,proto3" json:"recommendation,omitempty"`
	Region                            string                             `protobuf:"bytes,10,opt,name=region,proto3" json:"region,omitempty"`
	Estsavings                        float64                            `protobuf:"fixed64,11,opt,name=estsavings,proto3" json:"estsavings,omitempty"`
	Estcost                           float64                            `protobuf:"fixed64,12,opt,name=estcost,proto3" json:"estcost,omitempty"`
	EstsavingsPercentage              float64                            `protobuf:"fixed64,13,opt,name=estsavingsPercentage,proto3" json:"estsavingsPercentage,omitempty"`
	ResourceArn                       string                             `protobuf:"bytes,14,opt,name=resourceArn,proto3" json:"resourceArn,omitempty"`
	RestartNeeded                     bool                               `protobuf:"varint,15,opt,name=restartNeeded,proto3" json:"restartNeeded,omitempty"`
	RollbackPossible                  bool                               `protobuf:"varint,16,opt,name=rollbackPossible,proto3" json:"rollbackPossible,omitempty"`
	LastUpdatedAt                     string                             `protobuf:"bytes,17,opt,name=lastUpdatedAt,proto3" json:"lastUpdatedAt,omitempty"`
	RecommendationGroup               string                             `protobuf:"bytes,26,opt,name=recommendationGroup,proto3" json:"recommendationGroup,omitempty"`
	Category                          string                             `protobuf:"bytes,27,opt,name=category,proto3" json:"category,omitempty"`
	PurchaseRIRecommendationDetails   *PurchaseRIRecommendationDetails   `protobuf:"bytes,18,opt,name=purchaseRIRecommendationDetails,proto3" json:"purchaseRIRecommendationDetails,omitempty"`
	SavingsPlanRecommendationDetails  *SavingsPlanRecommendationDetails  `protobuf:"bytes,19,opt,name=savingsPlanRecommendationDetails,proto3" json:"savingsPlanRecommendationDetails,omitempty"`
	RightSizingRecommendationDetails  *RightSizingRecommendationDetails  `protobuf:"bytes,20,opt,name=rightSizingRecommendationDetails,proto3" json:"rightSizingRecommendationDetails,omitempty"`
	UpgradeRecommendationDetails      *UpgradeRecommendationDetails      `protobuf:"bytes,21,opt,name=upgradeRecommendationDetails,proto3" json:"upgradeRecommendationDetails,omitempty"`
	MigrateRecommendationDetails      *MigrateRecommendationDetails      `protobuf:"bytes,22,opt,name=migrateRecommendationDetails,proto3" json:"migrateRecommendationDetails,omitempty"`
	StopInstanceRecommendationDetails *StopInstanceRecommendationDetails `protobuf:"bytes,23,opt,name=stopInstanceRecommendationDetails,proto3" json:"stopInstanceRecommendationDetails,omitempty"`
	DeleteRecommendationDetails       *DeleteRecommendationDetails       `protobuf:"bytes,24,opt,name=deleteRecommendationDetails,proto3" json:"deleteRecommendationDetails,omitempty"`
	OtherRecommendationDetails        *OtherRecommendationDetails        `protobuf:"bytes,25,opt,name=otherRecommendationDetails,proto3" json:"otherRecommendationDetails,omitempty"`
}

func (x *AWSRecommendations) Reset() {
	*x = AWSRecommendations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSRecommendations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSRecommendations) ProtoMessage() {}

func (x *AWSRecommendations) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSRecommendations.ProtoReflect.Descriptor instead.
func (*AWSRecommendations) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{1}
}

func (x *AWSRecommendations) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AWSRecommendations) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AWSRecommendations) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AWSRecommendations) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AWSRecommendations) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *AWSRecommendations) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *AWSRecommendations) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AWSRecommendations) GetCostGroup() string {
	if x != nil {
		return x.CostGroup
	}
	return ""
}

func (x *AWSRecommendations) GetRecommendation() string {
	if x != nil {
		return x.Recommendation
	}
	return ""
}

func (x *AWSRecommendations) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSRecommendations) GetEstsavings() float64 {
	if x != nil {
		return x.Estsavings
	}
	return 0
}

func (x *AWSRecommendations) GetEstcost() float64 {
	if x != nil {
		return x.Estcost
	}
	return 0
}

func (x *AWSRecommendations) GetEstsavingsPercentage() float64 {
	if x != nil {
		return x.EstsavingsPercentage
	}
	return 0
}

func (x *AWSRecommendations) GetResourceArn() string {
	if x != nil {
		return x.ResourceArn
	}
	return ""
}

func (x *AWSRecommendations) GetRestartNeeded() bool {
	if x != nil {
		return x.RestartNeeded
	}
	return false
}

func (x *AWSRecommendations) GetRollbackPossible() bool {
	if x != nil {
		return x.RollbackPossible
	}
	return false
}

func (x *AWSRecommendations) GetLastUpdatedAt() string {
	if x != nil {
		return x.LastUpdatedAt
	}
	return ""
}

func (x *AWSRecommendations) GetRecommendationGroup() string {
	if x != nil {
		return x.RecommendationGroup
	}
	return ""
}

func (x *AWSRecommendations) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *AWSRecommendations) GetPurchaseRIRecommendationDetails() *PurchaseRIRecommendationDetails {
	if x != nil {
		return x.PurchaseRIRecommendationDetails
	}
	return nil
}

func (x *AWSRecommendations) GetSavingsPlanRecommendationDetails() *SavingsPlanRecommendationDetails {
	if x != nil {
		return x.SavingsPlanRecommendationDetails
	}
	return nil
}

func (x *AWSRecommendations) GetRightSizingRecommendationDetails() *RightSizingRecommendationDetails {
	if x != nil {
		return x.RightSizingRecommendationDetails
	}
	return nil
}

func (x *AWSRecommendations) GetUpgradeRecommendationDetails() *UpgradeRecommendationDetails {
	if x != nil {
		return x.UpgradeRecommendationDetails
	}
	return nil
}

func (x *AWSRecommendations) GetMigrateRecommendationDetails() *MigrateRecommendationDetails {
	if x != nil {
		return x.MigrateRecommendationDetails
	}
	return nil
}

func (x *AWSRecommendations) GetStopInstanceRecommendationDetails() *StopInstanceRecommendationDetails {
	if x != nil {
		return x.StopInstanceRecommendationDetails
	}
	return nil
}

func (x *AWSRecommendations) GetDeleteRecommendationDetails() *DeleteRecommendationDetails {
	if x != nil {
		return x.DeleteRecommendationDetails
	}
	return nil
}

func (x *AWSRecommendations) GetOtherRecommendationDetails() *OtherRecommendationDetails {
	if x != nil {
		return x.OtherRecommendationDetails
	}
	return nil
}

type PurchaseRIRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ec2Options                             *EC2Details                             `protobuf:"bytes,1,opt,name=ec2Options,proto3" json:"ec2Options,omitempty"`
	ElasticCacheOptions                    *ElasticCacheDetails                    `protobuf:"bytes,2,opt,name=elasticCacheOptions,proto3" json:"elasticCacheOptions,omitempty"`
	EsOptions                              *ESDetails                              `protobuf:"bytes,3,opt,name=esOptions,proto3" json:"esOptions,omitempty"`
	RdsOptions                             *RDSDetails                             `protobuf:"bytes,4,opt,name=rdsOptions,proto3" json:"rdsOptions,omitempty"`
	RedshiftOptions                        *RedshiftDetails                        `protobuf:"bytes,5,opt,name=redshiftOptions,proto3" json:"redshiftOptions,omitempty"`
	MemoryDbDetails                        *MemoryDBDetails                        `protobuf:"bytes,19,opt,name=memoryDbDetails,proto3" json:"memoryDbDetails,omitempty"`
	RecommendedNormalizedUnits             int32                                   `protobuf:"varint,6,opt,name=recommendedNormalizedUnits,proto3" json:"recommendedNormalizedUnits,omitempty"`
	RecommendedNumberOfInstanceToPurchase  int32                                   `protobuf:"varint,7,opt,name=recommendedNumberOfInstanceToPurchase,proto3" json:"recommendedNumberOfInstanceToPurchase,omitempty"`
	PaymentOption                          string                                  `protobuf:"bytes,8,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	OfferingClass                          string                                  `protobuf:"bytes,9,opt,name=offeringClass,proto3" json:"offeringClass,omitempty"`
	Term                                   string                                  `protobuf:"bytes,10,opt,name=term,proto3" json:"term,omitempty"`
	UpfrontCost                            float64                                 `protobuf:"fixed64,11,opt,name=upfrontCost,proto3" json:"upfrontCost,omitempty"`
	InstanceType                           string                                  `protobuf:"bytes,12,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Platform                               string                                  `protobuf:"bytes,13,opt,name=platform,proto3" json:"platform,omitempty"`
	Region                                 string                                  `protobuf:"bytes,14,opt,name=region,proto3" json:"region,omitempty"`
	SizeFlexEligible                       bool                                    `protobuf:"varint,15,opt,name=sizeFlexEligible,proto3" json:"sizeFlexEligible,omitempty"`
	Tenancy                                string                                  `protobuf:"bytes,16,opt,name=tenancy,proto3" json:"tenancy,omitempty"`
	CurrentGeneration                      bool                                    `protobuf:"varint,17,opt,name=currentGeneration,proto3" json:"currentGeneration,omitempty"`
	EstOutcomeFromPurchaseRIRecommendation *EstOutcomeFromPurchaseRIRecommendation `protobuf:"bytes,18,opt,name=estOutcomeFromPurchaseRIRecommendation,proto3" json:"estOutcomeFromPurchaseRIRecommendation,omitempty"`
}

func (x *PurchaseRIRecommendationDetails) Reset() {
	*x = PurchaseRIRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseRIRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseRIRecommendationDetails) ProtoMessage() {}

func (x *PurchaseRIRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseRIRecommendationDetails.ProtoReflect.Descriptor instead.
func (*PurchaseRIRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{2}
}

func (x *PurchaseRIRecommendationDetails) GetEc2Options() *EC2Details {
	if x != nil {
		return x.Ec2Options
	}
	return nil
}

func (x *PurchaseRIRecommendationDetails) GetElasticCacheOptions() *ElasticCacheDetails {
	if x != nil {
		return x.ElasticCacheOptions
	}
	return nil
}

func (x *PurchaseRIRecommendationDetails) GetEsOptions() *ESDetails {
	if x != nil {
		return x.EsOptions
	}
	return nil
}

func (x *PurchaseRIRecommendationDetails) GetRdsOptions() *RDSDetails {
	if x != nil {
		return x.RdsOptions
	}
	return nil
}

func (x *PurchaseRIRecommendationDetails) GetRedshiftOptions() *RedshiftDetails {
	if x != nil {
		return x.RedshiftOptions
	}
	return nil
}

func (x *PurchaseRIRecommendationDetails) GetMemoryDbDetails() *MemoryDBDetails {
	if x != nil {
		return x.MemoryDbDetails
	}
	return nil
}

func (x *PurchaseRIRecommendationDetails) GetRecommendedNormalizedUnits() int32 {
	if x != nil {
		return x.RecommendedNormalizedUnits
	}
	return 0
}

func (x *PurchaseRIRecommendationDetails) GetRecommendedNumberOfInstanceToPurchase() int32 {
	if x != nil {
		return x.RecommendedNumberOfInstanceToPurchase
	}
	return 0
}

func (x *PurchaseRIRecommendationDetails) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *PurchaseRIRecommendationDetails) GetOfferingClass() string {
	if x != nil {
		return x.OfferingClass
	}
	return ""
}

func (x *PurchaseRIRecommendationDetails) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *PurchaseRIRecommendationDetails) GetUpfrontCost() float64 {
	if x != nil {
		return x.UpfrontCost
	}
	return 0
}

func (x *PurchaseRIRecommendationDetails) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *PurchaseRIRecommendationDetails) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PurchaseRIRecommendationDetails) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PurchaseRIRecommendationDetails) GetSizeFlexEligible() bool {
	if x != nil {
		return x.SizeFlexEligible
	}
	return false
}

func (x *PurchaseRIRecommendationDetails) GetTenancy() string {
	if x != nil {
		return x.Tenancy
	}
	return ""
}

func (x *PurchaseRIRecommendationDetails) GetCurrentGeneration() bool {
	if x != nil {
		return x.CurrentGeneration
	}
	return false
}

func (x *PurchaseRIRecommendationDetails) GetEstOutcomeFromPurchaseRIRecommendation() *EstOutcomeFromPurchaseRIRecommendation {
	if x != nil {
		return x.EstOutcomeFromPurchaseRIRecommendation
	}
	return nil
}

type EstOutcomeFromPurchaseRIRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AveUtilization                 float64 `protobuf:"fixed64,1,opt,name=aveUtilization,proto3" json:"aveUtilization,omitempty"`
	AveNormalizedUnitsUsedPerHour  float64 `protobuf:"fixed64,2,opt,name=aveNormalizedUnitsUsedPerHour,proto3" json:"aveNormalizedUnitsUsedPerHour,omitempty"`
	AveNumberofInstanceUsedPerHour float64 `protobuf:"fixed64,3,opt,name=aveNumberofInstanceUsedPerHour,proto3" json:"aveNumberofInstanceUsedPerHour,omitempty"`
	BreakEvenInMonths              float64 `protobuf:"fixed64,4,opt,name=breakEvenInMonths,proto3" json:"breakEvenInMonths,omitempty"`
	MonthlyOnDemandCost            float64 `protobuf:"fixed64,5,opt,name=monthlyOnDemandCost,proto3" json:"monthlyOnDemandCost,omitempty"`
	MonthlyRICost                  float64 `protobuf:"fixed64,6,opt,name=monthlyRICost,proto3" json:"monthlyRICost,omitempty"`
	MonthlySavings                 float64 `protobuf:"fixed64,7,opt,name=monthlySavings,proto3" json:"monthlySavings,omitempty"`
	MonthlySavingsPercentage       float64 `protobuf:"fixed64,8,opt,name=monthlySavingsPercentage,proto3" json:"monthlySavingsPercentage,omitempty"`
	MaxNormalizedUnitsUsedPerHour  float64 `protobuf:"fixed64,9,opt,name=maxNormalizedUnitsUsedPerHour,proto3" json:"maxNormalizedUnitsUsedPerHour,omitempty"`
	MaxNumberOfInstanceUsedPerHour float64 `protobuf:"fixed64,10,opt,name=maxNumberOfInstanceUsedPerHour,proto3" json:"maxNumberOfInstanceUsedPerHour,omitempty"`
	MinNormalizedUnitsUsedPerHour  float64 `protobuf:"fixed64,11,opt,name=minNormalizedUnitsUsedPerHour,proto3" json:"minNormalizedUnitsUsedPerHour,omitempty"`
	MinNumberOfInstanceUsedPerHour float64 `protobuf:"fixed64,12,opt,name=minNumberOfInstanceUsedPerHour,proto3" json:"minNumberOfInstanceUsedPerHour,omitempty"`
}

func (x *EstOutcomeFromPurchaseRIRecommendation) Reset() {
	*x = EstOutcomeFromPurchaseRIRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstOutcomeFromPurchaseRIRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstOutcomeFromPurchaseRIRecommendation) ProtoMessage() {}

func (x *EstOutcomeFromPurchaseRIRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstOutcomeFromPurchaseRIRecommendation.ProtoReflect.Descriptor instead.
func (*EstOutcomeFromPurchaseRIRecommendation) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{3}
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetAveUtilization() float64 {
	if x != nil {
		return x.AveUtilization
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetAveNormalizedUnitsUsedPerHour() float64 {
	if x != nil {
		return x.AveNormalizedUnitsUsedPerHour
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetAveNumberofInstanceUsedPerHour() float64 {
	if x != nil {
		return x.AveNumberofInstanceUsedPerHour
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetBreakEvenInMonths() float64 {
	if x != nil {
		return x.BreakEvenInMonths
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMonthlyOnDemandCost() float64 {
	if x != nil {
		return x.MonthlyOnDemandCost
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMonthlyRICost() float64 {
	if x != nil {
		return x.MonthlyRICost
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMonthlySavings() float64 {
	if x != nil {
		return x.MonthlySavings
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMonthlySavingsPercentage() float64 {
	if x != nil {
		return x.MonthlySavingsPercentage
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMaxNormalizedUnitsUsedPerHour() float64 {
	if x != nil {
		return x.MaxNormalizedUnitsUsedPerHour
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMaxNumberOfInstanceUsedPerHour() float64 {
	if x != nil {
		return x.MaxNumberOfInstanceUsedPerHour
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMinNormalizedUnitsUsedPerHour() float64 {
	if x != nil {
		return x.MinNormalizedUnitsUsedPerHour
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMinNumberOfInstanceUsedPerHour() float64 {
	if x != nil {
		return x.MinNumberOfInstanceUsedPerHour
	}
	return 0
}

type MemoryDBDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentGeneration bool   `protobuf:"varint,1,opt,name=currentGeneration,proto3" json:"currentGeneration,omitempty"`
	Family            string `protobuf:"bytes,2,opt,name=family,proto3" json:"family,omitempty"`
	NodeType          string `protobuf:"bytes,3,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
	Region            string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	SizeFlexEligible  bool   `protobuf:"varint,5,opt,name=sizeFlexEligible,proto3" json:"sizeFlexEligible,omitempty"`
}

func (x *MemoryDBDetails) Reset() {
	*x = MemoryDBDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryDBDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryDBDetails) ProtoMessage() {}

func (x *MemoryDBDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryDBDetails.ProtoReflect.Descriptor instead.
func (*MemoryDBDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{4}
}

func (x *MemoryDBDetails) GetCurrentGeneration() bool {
	if x != nil {
		return x.CurrentGeneration
	}
	return false
}

func (x *MemoryDBDetails) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *MemoryDBDetails) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *MemoryDBDetails) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MemoryDBDetails) GetSizeFlexEligible() bool {
	if x != nil {
		return x.SizeFlexEligible
	}
	return false
}

type EC2Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType string `protobuf:"bytes,1,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Tenancy      string `protobuf:"bytes,2,opt,name=tenancy,proto3" json:"tenancy,omitempty"`
	Family       string `protobuf:"bytes,3,opt,name=family,proto3" json:"family,omitempty"`
	Platform     string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *EC2Details) Reset() {
	*x = EC2Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2Details) ProtoMessage() {}

func (x *EC2Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2Details.ProtoReflect.Descriptor instead.
func (*EC2Details) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{5}
}

func (x *EC2Details) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *EC2Details) GetTenancy() string {
	if x != nil {
		return x.Tenancy
	}
	return ""
}

func (x *EC2Details) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *EC2Details) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type ElasticCacheDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentGeneration bool   `protobuf:"varint,1,opt,name=currentGeneration,proto3" json:"currentGeneration,omitempty"`
	NodeType          string `protobuf:"bytes,2,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
	Family            string `protobuf:"bytes,3,opt,name=family,proto3" json:"family,omitempty"`
}

func (x *ElasticCacheDetails) Reset() {
	*x = ElasticCacheDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticCacheDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticCacheDetails) ProtoMessage() {}

func (x *ElasticCacheDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticCacheDetails.ProtoReflect.Descriptor instead.
func (*ElasticCacheDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{6}
}

func (x *ElasticCacheDetails) GetCurrentGeneration() bool {
	if x != nil {
		return x.CurrentGeneration
	}
	return false
}

func (x *ElasticCacheDetails) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *ElasticCacheDetails) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

type ESDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentGeneration bool   `protobuf:"varint,1,opt,name=currentGeneration,proto3" json:"currentGeneration,omitempty"`
	InstanceClass     string `protobuf:"bytes,2,opt,name=instanceClass,proto3" json:"instanceClass,omitempty"`
	InstanceSize      string `protobuf:"bytes,3,opt,name=instanceSize,proto3" json:"instanceSize,omitempty"`
}

func (x *ESDetails) Reset() {
	*x = ESDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESDetails) ProtoMessage() {}

func (x *ESDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESDetails.ProtoReflect.Descriptor instead.
func (*ESDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{7}
}

func (x *ESDetails) GetCurrentGeneration() bool {
	if x != nil {
		return x.CurrentGeneration
	}
	return false
}

func (x *ESDetails) GetInstanceClass() string {
	if x != nil {
		return x.InstanceClass
	}
	return ""
}

func (x *ESDetails) GetInstanceSize() string {
	if x != nil {
		return x.InstanceSize
	}
	return ""
}

type RDSDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbEdition         string `protobuf:"bytes,1,opt,name=dbEdition,proto3" json:"dbEdition,omitempty"`
	DbEngine          string `protobuf:"bytes,2,opt,name=dbEngine,proto3" json:"dbEngine,omitempty"`
	DeploymentOptions string `protobuf:"bytes,3,opt,name=deploymentOptions,proto3" json:"deploymentOptions,omitempty"`
	Family            string `protobuf:"bytes,4,opt,name=family,proto3" json:"family,omitempty"`
	InstanceType      string `protobuf:"bytes,5,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	LicenseModel      string `protobuf:"bytes,6,opt,name=licenseModel,proto3" json:"licenseModel,omitempty"`
}

func (x *RDSDetails) Reset() {
	*x = RDSDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDSDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDSDetails) ProtoMessage() {}

func (x *RDSDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDSDetails.ProtoReflect.Descriptor instead.
func (*RDSDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{8}
}

func (x *RDSDetails) GetDbEdition() string {
	if x != nil {
		return x.DbEdition
	}
	return ""
}

func (x *RDSDetails) GetDbEngine() string {
	if x != nil {
		return x.DbEngine
	}
	return ""
}

func (x *RDSDetails) GetDeploymentOptions() string {
	if x != nil {
		return x.DeploymentOptions
	}
	return ""
}

func (x *RDSDetails) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *RDSDetails) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *RDSDetails) GetLicenseModel() string {
	if x != nil {
		return x.LicenseModel
	}
	return ""
}

type RedshiftDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentGeneration bool   `protobuf:"varint,1,opt,name=currentGeneration,proto3" json:"currentGeneration,omitempty"`
	NodeType          string `protobuf:"bytes,2,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
	Family            string `protobuf:"bytes,3,opt,name=family,proto3" json:"family,omitempty"`
}

func (x *RedshiftDetails) Reset() {
	*x = RedshiftDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedshiftDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedshiftDetails) ProtoMessage() {}

func (x *RedshiftDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedshiftDetails.ProtoReflect.Descriptor instead.
func (*RedshiftDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{9}
}

func (x *RedshiftDetails) GetCurrentGeneration() bool {
	if x != nil {
		return x.CurrentGeneration
	}
	return false
}

func (x *RedshiftDetails) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *RedshiftDetails) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

type SavingsPlanRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode                   string                          `protobuf:"bytes,1,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	HourlyCommitmentToPurchase     float64                         `protobuf:"fixed64,2,opt,name=hourlyCommitmentToPurchase,proto3" json:"hourlyCommitmentToPurchase,omitempty"`
	OfferingId                     string                          `protobuf:"bytes,3,opt,name=offeringId,proto3" json:"offeringId,omitempty"`
	PaymentOption                  string                          `protobuf:"bytes,4,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	SavingsPlanType                string                          `protobuf:"bytes,5,opt,name=savingsPlanType,proto3" json:"savingsPlanType,omitempty"`
	Term                           string                          `protobuf:"bytes,6,opt,name=term,proto3" json:"term,omitempty"`
	UpfrontCost                    float64                         `protobuf:"fixed64,7,opt,name=upfrontCost,proto3" json:"upfrontCost,omitempty"`
	CurrentUtilizationDetails      *SPCurrentUtilizationDetails    `protobuf:"bytes,8,opt,name=currentUtilizationDetails,proto3" json:"currentUtilizationDetails,omitempty"`
	EstOutcomeFromSPRecommendation *EstOutcomeFromSPRecommendation `protobuf:"bytes,9,opt,name=estOutcomeFromSPRecommendation,proto3" json:"estOutcomeFromSPRecommendation,omitempty"`
}

func (x *SavingsPlanRecommendationDetails) Reset() {
	*x = SavingsPlanRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavingsPlanRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavingsPlanRecommendationDetails) ProtoMessage() {}

func (x *SavingsPlanRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavingsPlanRecommendationDetails.ProtoReflect.Descriptor instead.
func (*SavingsPlanRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{10}
}

func (x *SavingsPlanRecommendationDetails) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *SavingsPlanRecommendationDetails) GetHourlyCommitmentToPurchase() float64 {
	if x != nil {
		return x.HourlyCommitmentToPurchase
	}
	return 0
}

func (x *SavingsPlanRecommendationDetails) GetOfferingId() string {
	if x != nil {
		return x.OfferingId
	}
	return ""
}

func (x *SavingsPlanRecommendationDetails) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *SavingsPlanRecommendationDetails) GetSavingsPlanType() string {
	if x != nil {
		return x.SavingsPlanType
	}
	return ""
}

func (x *SavingsPlanRecommendationDetails) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *SavingsPlanRecommendationDetails) GetUpfrontCost() float64 {
	if x != nil {
		return x.UpfrontCost
	}
	return 0
}

func (x *SavingsPlanRecommendationDetails) GetCurrentUtilizationDetails() *SPCurrentUtilizationDetails {
	if x != nil {
		return x.CurrentUtilizationDetails
	}
	return nil
}

func (x *SavingsPlanRecommendationDetails) GetEstOutcomeFromSPRecommendation() *EstOutcomeFromSPRecommendation {
	if x != nil {
		return x.EstOutcomeFromSPRecommendation
	}
	return nil
}

type SPCurrentUtilizationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AveCoverage                         float64 `protobuf:"fixed64,1,opt,name=aveCoverage,proto3" json:"aveCoverage,omitempty"`
	AveHourOnDemandSpend                float64 `protobuf:"fixed64,2,opt,name=aveHourOnDemandSpend,proto3" json:"aveHourOnDemandSpend,omitempty"`
	MaxHourlyOndemandSpend              float64 `protobuf:"fixed64,3,opt,name=maxHourlyOndemandSpend,proto3" json:"maxHourlyOndemandSpend,omitempty"`
	MinHourlyOndemandSpend              float64 `protobuf:"fixed64,4,opt,name=minHourlyOndemandSpend,proto3" json:"minHourlyOndemandSpend,omitempty"`
	ExistingHourlyCommitment            float64 `protobuf:"fixed64,5,opt,name=existingHourlyCommitment,proto3" json:"existingHourlyCommitment,omitempty"`
	EstOnDemandCostWithHourlyCommitment float64 `protobuf:"fixed64,6,opt,name=estOnDemandCostWithHourlyCommitment,proto3" json:"estOnDemandCostWithHourlyCommitment,omitempty"`
}

func (x *SPCurrentUtilizationDetails) Reset() {
	*x = SPCurrentUtilizationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPCurrentUtilizationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPCurrentUtilizationDetails) ProtoMessage() {}

func (x *SPCurrentUtilizationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPCurrentUtilizationDetails.ProtoReflect.Descriptor instead.
func (*SPCurrentUtilizationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{11}
}

func (x *SPCurrentUtilizationDetails) GetAveCoverage() float64 {
	if x != nil {
		return x.AveCoverage
	}
	return 0
}

func (x *SPCurrentUtilizationDetails) GetAveHourOnDemandSpend() float64 {
	if x != nil {
		return x.AveHourOnDemandSpend
	}
	return 0
}

func (x *SPCurrentUtilizationDetails) GetMaxHourlyOndemandSpend() float64 {
	if x != nil {
		return x.MaxHourlyOndemandSpend
	}
	return 0
}

func (x *SPCurrentUtilizationDetails) GetMinHourlyOndemandSpend() float64 {
	if x != nil {
		return x.MinHourlyOndemandSpend
	}
	return 0
}

func (x *SPCurrentUtilizationDetails) GetExistingHourlyCommitment() float64 {
	if x != nil {
		return x.ExistingHourlyCommitment
	}
	return 0
}

func (x *SPCurrentUtilizationDetails) GetEstOnDemandCostWithHourlyCommitment() float64 {
	if x != nil {
		return x.EstOnDemandCostWithHourlyCommitment
	}
	return 0
}

type EstOutcomeFromSPRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AveCoverage          float64 `protobuf:"fixed64,1,opt,name=aveCoverage,proto3" json:"aveCoverage,omitempty"`
	AveUtilization       float64 `protobuf:"fixed64,2,opt,name=aveUtilization,proto3" json:"aveUtilization,omitempty"`
	MonthlySavingsAmount float64 `protobuf:"fixed64,3,opt,name=monthlySavingsAmount,proto3" json:"monthlySavingsAmount,omitempty"`
	OnDemandCost         float64 `protobuf:"fixed64,4,opt,name=onDemandCost,proto3" json:"onDemandCost,omitempty"`
	Roi                  float64 `protobuf:"fixed64,5,opt,name=roi,proto3" json:"roi,omitempty"`
	SavingsPlanCost      float64 `protobuf:"fixed64,6,opt,name=savingsPlanCost,proto3" json:"savingsPlanCost,omitempty"`
	SavingsPercentage    float64 `protobuf:"fixed64,7,opt,name=savingsPercentage,proto3" json:"savingsPercentage,omitempty"`
}

func (x *EstOutcomeFromSPRecommendation) Reset() {
	*x = EstOutcomeFromSPRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstOutcomeFromSPRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstOutcomeFromSPRecommendation) ProtoMessage() {}

func (x *EstOutcomeFromSPRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstOutcomeFromSPRecommendation.ProtoReflect.Descriptor instead.
func (*EstOutcomeFromSPRecommendation) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{12}
}

func (x *EstOutcomeFromSPRecommendation) GetAveCoverage() float64 {
	if x != nil {
		return x.AveCoverage
	}
	return 0
}

func (x *EstOutcomeFromSPRecommendation) GetAveUtilization() float64 {
	if x != nil {
		return x.AveUtilization
	}
	return 0
}

func (x *EstOutcomeFromSPRecommendation) GetMonthlySavingsAmount() float64 {
	if x != nil {
		return x.MonthlySavingsAmount
	}
	return 0
}

func (x *EstOutcomeFromSPRecommendation) GetOnDemandCost() float64 {
	if x != nil {
		return x.OnDemandCost
	}
	return 0
}

func (x *EstOutcomeFromSPRecommendation) GetRoi() float64 {
	if x != nil {
		return x.Roi
	}
	return 0
}

func (x *EstOutcomeFromSPRecommendation) GetSavingsPlanCost() float64 {
	if x != nil {
		return x.SavingsPlanCost
	}
	return 0
}

func (x *EstOutcomeFromSPRecommendation) GetSavingsPercentage() float64 {
	if x != nil {
		return x.SavingsPercentage
	}
	return 0
}

type RightSizingRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ec2RightSizingDetails                  *EC2RightSizingDetails                  `protobuf:"bytes,1,opt,name=ec2RightSizingDetails,proto3" json:"ec2RightSizingDetails,omitempty"`
	LambdaRightSizingRecommendationDetails *LambdaRightSizingRecommendationDetails `protobuf:"bytes,2,opt,name=lambdaRightSizingRecommendationDetails,proto3" json:"lambdaRightSizingRecommendationDetails,omitempty"`
	EbsRightSizingRecommendationDetails    *EBSDetails                             `protobuf:"bytes,3,opt,name=ebsRightSizingRecommendationDetails,proto3" json:"ebsRightSizingRecommendationDetails,omitempty"`
	EcsRightSizingRecommendationDetails    *EcsRightSizingRecommendationDetails    `protobuf:"bytes,4,opt,name=ecsRightSizingRecommendationDetails,proto3" json:"ecsRightSizingRecommendationDetails,omitempty"`
	RdsRightSizingRecommendationDetails    *RDSRightsizingDetails                  `protobuf:"bytes,7,opt,name=rdsRightSizingRecommendationDetails,proto3" json:"rdsRightSizingRecommendationDetails,omitempty"`
	EstimatedMonthlyCost                   float64                                 `protobuf:"fixed64,5,opt,name=estimatedMonthlyCost,proto3" json:"estimatedMonthlyCost,omitempty"`
	EstimatedMonthlySavings                float64                                 `protobuf:"fixed64,6,opt,name=estimatedMonthlySavings,proto3" json:"estimatedMonthlySavings,omitempty"`
}

func (x *RightSizingRecommendationDetails) Reset() {
	*x = RightSizingRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RightSizingRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RightSizingRecommendationDetails) ProtoMessage() {}

func (x *RightSizingRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RightSizingRecommendationDetails.ProtoReflect.Descriptor instead.
func (*RightSizingRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{13}
}

func (x *RightSizingRecommendationDetails) GetEc2RightSizingDetails() *EC2RightSizingDetails {
	if x != nil {
		return x.Ec2RightSizingDetails
	}
	return nil
}

func (x *RightSizingRecommendationDetails) GetLambdaRightSizingRecommendationDetails() *LambdaRightSizingRecommendationDetails {
	if x != nil {
		return x.LambdaRightSizingRecommendationDetails
	}
	return nil
}

func (x *RightSizingRecommendationDetails) GetEbsRightSizingRecommendationDetails() *EBSDetails {
	if x != nil {
		return x.EbsRightSizingRecommendationDetails
	}
	return nil
}

func (x *RightSizingRecommendationDetails) GetEcsRightSizingRecommendationDetails() *EcsRightSizingRecommendationDetails {
	if x != nil {
		return x.EcsRightSizingRecommendationDetails
	}
	return nil
}

func (x *RightSizingRecommendationDetails) GetRdsRightSizingRecommendationDetails() *RDSRightsizingDetails {
	if x != nil {
		return x.RdsRightSizingRecommendationDetails
	}
	return nil
}

func (x *RightSizingRecommendationDetails) GetEstimatedMonthlyCost() float64 {
	if x != nil {
		return x.EstimatedMonthlyCost
	}
	return 0
}

func (x *RightSizingRecommendationDetails) GetEstimatedMonthlySavings() float64 {
	if x != nil {
		return x.EstimatedMonthlySavings
	}
	return 0
}

type StopRDSDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RdsDBInstance *RDSDBInstance `protobuf:"bytes,1,opt,name=rdsDBInstance,proto3" json:"rdsDBInstance,omitempty"`
}

func (x *StopRDSDetails) Reset() {
	*x = StopRDSDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRDSDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRDSDetails) ProtoMessage() {}

func (x *StopRDSDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRDSDetails.ProtoReflect.Descriptor instead.
func (*StopRDSDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{14}
}

func (x *StopRDSDetails) GetRdsDBInstance() *RDSDBInstance {
	if x != nil {
		return x.RdsDBInstance
	}
	return nil
}

type MigrateRDSDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RdsDbInstance *RDSDBInstance `protobuf:"bytes,1,opt,name=rdsDbInstance,proto3" json:"rdsDbInstance,omitempty"`
}

func (x *MigrateRDSDetails) Reset() {
	*x = MigrateRDSDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateRDSDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateRDSDetails) ProtoMessage() {}

func (x *MigrateRDSDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateRDSDetails.ProtoReflect.Descriptor instead.
func (*MigrateRDSDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{15}
}

func (x *MigrateRDSDetails) GetRdsDbInstance() *RDSDBInstance {
	if x != nil {
		return x.RdsDbInstance
	}
	return nil
}

type RDSUpgradeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RdsDbInstance        *RDSDBInstance        `protobuf:"bytes,1,opt,name=rdsDbInstance,proto3" json:"rdsDbInstance,omitempty"`
	RdsDbInstanceStorage *RDSDBInstanceStorage `protobuf:"bytes,2,opt,name=rdsDbInstanceStorage,proto3" json:"rdsDbInstanceStorage,omitempty"`
}

func (x *RDSUpgradeDetails) Reset() {
	*x = RDSUpgradeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDSUpgradeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDSUpgradeDetails) ProtoMessage() {}

func (x *RDSUpgradeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDSUpgradeDetails.ProtoReflect.Descriptor instead.
func (*RDSUpgradeDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{16}
}

func (x *RDSUpgradeDetails) GetRdsDbInstance() *RDSDBInstance {
	if x != nil {
		return x.RdsDbInstance
	}
	return nil
}

func (x *RDSUpgradeDetails) GetRdsDbInstanceStorage() *RDSDBInstanceStorage {
	if x != nil {
		return x.RdsDbInstanceStorage
	}
	return nil
}

type RDSRightsizingDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RdsDbInstance        *RDSDBInstance        `protobuf:"bytes,1,opt,name=rdsDbInstance,proto3" json:"rdsDbInstance,omitempty"`
	RdsDbInstanceStorage *RDSDBInstanceStorage `protobuf:"bytes,2,opt,name=rdsDbInstanceStorage,proto3" json:"rdsDbInstanceStorage,omitempty"`
}

func (x *RDSRightsizingDetails) Reset() {
	*x = RDSRightsizingDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDSRightsizingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDSRightsizingDetails) ProtoMessage() {}

func (x *RDSRightsizingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDSRightsizingDetails.ProtoReflect.Descriptor instead.
func (*RDSRightsizingDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{17}
}

func (x *RDSRightsizingDetails) GetRdsDbInstance() *RDSDBInstance {
	if x != nil {
		return x.RdsDbInstance
	}
	return nil
}

func (x *RDSRightsizingDetails) GetRdsDbInstanceStorage() *RDSDBInstanceStorage {
	if x != nil {
		return x.RdsDbInstanceStorage
	}
	return nil
}

type RDSDBInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentDetails        *RDSDBInstance_Details `protobuf:"bytes,1,opt,name=currentDetails,proto3" json:"currentDetails,omitempty"`
	RecommendationDetails *RDSDBInstance_Details `protobuf:"bytes,2,opt,name=recommendationDetails,proto3" json:"recommendationDetails,omitempty"`
	CpuUtilization        []*UtilizationData     `protobuf:"bytes,3,rep,name=cpuUtilization,proto3" json:"cpuUtilization,omitempty"`
}

func (x *RDSDBInstance) Reset() {
	*x = RDSDBInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDSDBInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDSDBInstance) ProtoMessage() {}

func (x *RDSDBInstance) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDSDBInstance.ProtoReflect.Descriptor instead.
func (*RDSDBInstance) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{18}
}

func (x *RDSDBInstance) GetCurrentDetails() *RDSDBInstance_Details {
	if x != nil {
		return x.CurrentDetails
	}
	return nil
}

func (x *RDSDBInstance) GetRecommendationDetails() *RDSDBInstance_Details {
	if x != nil {
		return x.RecommendationDetails
	}
	return nil
}

func (x *RDSDBInstance) GetCpuUtilization() []*UtilizationData {
	if x != nil {
		return x.CpuUtilization
	}
	return nil
}

type RDSDBInstanceStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentDetails        *RDSDBInstanceStorage_Details `protobuf:"bytes,1,opt,name=currentDetails,proto3" json:"currentDetails,omitempty"`
	RecommendationDetails *RDSDBInstanceStorage_Details `protobuf:"bytes,2,opt,name=recommendationDetails,proto3" json:"recommendationDetails,omitempty"`
}

func (x *RDSDBInstanceStorage) Reset() {
	*x = RDSDBInstanceStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDSDBInstanceStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDSDBInstanceStorage) ProtoMessage() {}

func (x *RDSDBInstanceStorage) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDSDBInstanceStorage.ProtoReflect.Descriptor instead.
func (*RDSDBInstanceStorage) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{19}
}

func (x *RDSDBInstanceStorage) GetCurrentDetails() *RDSDBInstanceStorage_Details {
	if x != nil {
		return x.CurrentDetails
	}
	return nil
}

func (x *RDSDBInstanceStorage) GetRecommendationDetails() *RDSDBInstanceStorage_Details {
	if x != nil {
		return x.RecommendationDetails
	}
	return nil
}

type EC2RightSizingDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentEC2Details              *CurrentEC2Details              `protobuf:"bytes,1,opt,name=currentEC2Details,proto3" json:"currentEC2Details,omitempty"`
	EC2ModifyRecommendationDetails *EC2ModifyRecommendationDetails `protobuf:"bytes,2,opt,name=eC2ModifyRecommendationDetails,proto3" json:"eC2ModifyRecommendationDetails,omitempty"`
}

func (x *EC2RightSizingDetails) Reset() {
	*x = EC2RightSizingDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2RightSizingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2RightSizingDetails) ProtoMessage() {}

func (x *EC2RightSizingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2RightSizingDetails.ProtoReflect.Descriptor instead.
func (*EC2RightSizingDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{20}
}

func (x *EC2RightSizingDetails) GetCurrentEC2Details() *CurrentEC2Details {
	if x != nil {
		return x.CurrentEC2Details
	}
	return nil
}

func (x *EC2RightSizingDetails) GetEC2ModifyRecommendationDetails() *EC2ModifyRecommendationDetails {
	if x != nil {
		return x.EC2ModifyRecommendationDetails
	}
	return nil
}

type CurrentEC2Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType         string                          `protobuf:"bytes,1,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Os                   string                          `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	Region               string                          `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	CpuUtilization       float64                         `protobuf:"fixed64,4,opt,name=cpuUtilization,proto3" json:"cpuUtilization,omitempty"`
	MemoryUtilization    float64                         `protobuf:"fixed64,5,opt,name=memoryUtilization,proto3" json:"memoryUtilization,omitempty"`
	DiskUtilization      float64                         `protobuf:"fixed64,6,opt,name=diskUtilization,proto3" json:"diskUtilization,omitempty"`
	NetworkCapacity      string                          `protobuf:"bytes,7,opt,name=networkCapacity,proto3" json:"networkCapacity,omitempty"`
	MonthlyCost          float64                         `protobuf:"fixed64,8,opt,name=monthlyCost,proto3" json:"monthlyCost,omitempty"`
	EC2CpuUtilization    []*UtilizationData              `protobuf:"bytes,9,rep,name=eC2CpuUtilization,proto3" json:"eC2CpuUtilization,omitempty"`
	EC2DiskUtilization   []*UtilizationData              `protobuf:"bytes,10,rep,name=eC2DiskUtilization,proto3" json:"eC2DiskUtilization,omitempty"`
	EC2MemoryUtilization []*UtilizationData              `protobuf:"bytes,11,rep,name=eC2MemoryUtilization,proto3" json:"eC2MemoryUtilization,omitempty"`
	NetworkTrafficData   []*UtilizationData              `protobuf:"bytes,12,rep,name=networkTrafficData,proto3" json:"networkTrafficData,omitempty"`
	OtherDetails         *CurrentEC2Details_OtherDetails `protobuf:"bytes,13,opt,name=otherDetails,proto3" json:"otherDetails,omitempty"`
}

func (x *CurrentEC2Details) Reset() {
	*x = CurrentEC2Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentEC2Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentEC2Details) ProtoMessage() {}

func (x *CurrentEC2Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentEC2Details.ProtoReflect.Descriptor instead.
func (*CurrentEC2Details) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{21}
}

func (x *CurrentEC2Details) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *CurrentEC2Details) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *CurrentEC2Details) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CurrentEC2Details) GetCpuUtilization() float64 {
	if x != nil {
		return x.CpuUtilization
	}
	return 0
}

func (x *CurrentEC2Details) GetMemoryUtilization() float64 {
	if x != nil {
		return x.MemoryUtilization
	}
	return 0
}

func (x *CurrentEC2Details) GetDiskUtilization() float64 {
	if x != nil {
		return x.DiskUtilization
	}
	return 0
}

func (x *CurrentEC2Details) GetNetworkCapacity() string {
	if x != nil {
		return x.NetworkCapacity
	}
	return ""
}

func (x *CurrentEC2Details) GetMonthlyCost() float64 {
	if x != nil {
		return x.MonthlyCost
	}
	return 0
}

func (x *CurrentEC2Details) GetEC2CpuUtilization() []*UtilizationData {
	if x != nil {
		return x.EC2CpuUtilization
	}
	return nil
}

func (x *CurrentEC2Details) GetEC2DiskUtilization() []*UtilizationData {
	if x != nil {
		return x.EC2DiskUtilization
	}
	return nil
}

func (x *CurrentEC2Details) GetEC2MemoryUtilization() []*UtilizationData {
	if x != nil {
		return x.EC2MemoryUtilization
	}
	return nil
}

func (x *CurrentEC2Details) GetNetworkTrafficData() []*UtilizationData {
	if x != nil {
		return x.NetworkTrafficData
	}
	return nil
}

func (x *CurrentEC2Details) GetOtherDetails() *CurrentEC2Details_OtherDetails {
	if x != nil {
		return x.OtherDetails
	}
	return nil
}

type EC2ModifyRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType      string  `protobuf:"bytes,1,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Os                string  `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	Region            string  `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	CpuUtilization    float64 `protobuf:"fixed64,4,opt,name=cpuUtilization,proto3" json:"cpuUtilization,omitempty"`
	MemoryUtilization float64 `protobuf:"fixed64,5,opt,name=memoryUtilization,proto3" json:"memoryUtilization,omitempty"`
	DiskUtilization   float64 `protobuf:"fixed64,6,opt,name=diskUtilization,proto3" json:"diskUtilization,omitempty"`
	NetworkCapacity   string  `protobuf:"bytes,7,opt,name=networkCapacity,proto3" json:"networkCapacity,omitempty"`
}

func (x *EC2ModifyRecommendationDetails) Reset() {
	*x = EC2ModifyRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2ModifyRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2ModifyRecommendationDetails) ProtoMessage() {}

func (x *EC2ModifyRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2ModifyRecommendationDetails.ProtoReflect.Descriptor instead.
func (*EC2ModifyRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{22}
}

func (x *EC2ModifyRecommendationDetails) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *EC2ModifyRecommendationDetails) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *EC2ModifyRecommendationDetails) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *EC2ModifyRecommendationDetails) GetCpuUtilization() float64 {
	if x != nil {
		return x.CpuUtilization
	}
	return 0
}

func (x *EC2ModifyRecommendationDetails) GetMemoryUtilization() float64 {
	if x != nil {
		return x.MemoryUtilization
	}
	return 0
}

func (x *EC2ModifyRecommendationDetails) GetDiskUtilization() float64 {
	if x != nil {
		return x.DiskUtilization
	}
	return 0
}

func (x *EC2ModifyRecommendationDetails) GetNetworkCapacity() string {
	if x != nil {
		return x.NetworkCapacity
	}
	return ""
}

type UtilizationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UtilizationData) Reset() {
	*x = UtilizationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtilizationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtilizationData) ProtoMessage() {}

func (x *UtilizationData) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtilizationData.ProtoReflect.Descriptor instead.
func (*UtilizationData) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{23}
}

func (x *UtilizationData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *UtilizationData) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type LambdaRightSizingRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LambdaCurrentConfiguration     *ResourceDetails `protobuf:"bytes,1,opt,name=lambdaCurrentConfiguration,proto3" json:"lambdaCurrentConfiguration,omitempty"`
	LambdaRecommendedConfiguration *ResourceDetails `protobuf:"bytes,2,opt,name=lambdaRecommendedConfiguration,proto3" json:"lambdaRecommendedConfiguration,omitempty"`
}

func (x *LambdaRightSizingRecommendationDetails) Reset() {
	*x = LambdaRightSizingRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LambdaRightSizingRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LambdaRightSizingRecommendationDetails) ProtoMessage() {}

func (x *LambdaRightSizingRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LambdaRightSizingRecommendationDetails.ProtoReflect.Descriptor instead.
func (*LambdaRightSizingRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{24}
}

func (x *LambdaRightSizingRecommendationDetails) GetLambdaCurrentConfiguration() *ResourceDetails {
	if x != nil {
		return x.LambdaCurrentConfiguration
	}
	return nil
}

func (x *LambdaRightSizingRecommendationDetails) GetLambdaRecommendedConfiguration() *ResourceDetails {
	if x != nil {
		return x.LambdaRecommendedConfiguration
	}
	return nil
}

type EcsRightSizingRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EcsCurrentConfiguration     *ResourceDetails `protobuf:"bytes,1,opt,name=EcsCurrentConfiguration,proto3" json:"EcsCurrentConfiguration,omitempty"`
	EcsRecommendedConfiguration *ResourceDetails `protobuf:"bytes,2,opt,name=EcsRecommendedConfiguration,proto3" json:"EcsRecommendedConfiguration,omitempty"`
}

func (x *EcsRightSizingRecommendationDetails) Reset() {
	*x = EcsRightSizingRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcsRightSizingRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcsRightSizingRecommendationDetails) ProtoMessage() {}

func (x *EcsRightSizingRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcsRightSizingRecommendationDetails.ProtoReflect.Descriptor instead.
func (*EcsRightSizingRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{25}
}

func (x *EcsRightSizingRecommendationDetails) GetEcsCurrentConfiguration() *ResourceDetails {
	if x != nil {
		return x.EcsCurrentConfiguration
	}
	return nil
}

func (x *EcsRightSizingRecommendationDetails) GetEcsRecommendedConfiguration() *ResourceDetails {
	if x != nil {
		return x.EcsRecommendedConfiguration
	}
	return nil
}

type ResourceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Architecture    string           `protobuf:"bytes,1,opt,name=architecture,proto3" json:"architecture,omitempty"`
	MemorysizeInMB  float64          `protobuf:"fixed64,2,opt,name=memorysizeInMB,proto3" json:"memorysizeInMB,omitempty"`
	Platform        string           `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	VCpu            int32            `protobuf:"varint,4,opt,name=vCpu,proto3" json:"vCpu,omitempty"`
	CostCalculation *CostCalculation `protobuf:"bytes,5,opt,name=costCalculation,proto3" json:"costCalculation,omitempty"`
	Apn1Details0    *APNDetails      `protobuf:"bytes,6,opt,name=apn1details0,proto3" json:"apn1details0,omitempty"`
	Apn1Details1    *APNDetails      `protobuf:"bytes,7,opt,name=apn1details1,proto3" json:"apn1details1,omitempty"`
}

func (x *ResourceDetails) Reset() {
	*x = ResourceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceDetails) ProtoMessage() {}

func (x *ResourceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceDetails.ProtoReflect.Descriptor instead.
func (*ResourceDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{26}
}

func (x *ResourceDetails) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *ResourceDetails) GetMemorysizeInMB() float64 {
	if x != nil {
		return x.MemorysizeInMB
	}
	return 0
}

func (x *ResourceDetails) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ResourceDetails) GetVCpu() int32 {
	if x != nil {
		return x.VCpu
	}
	return 0
}

func (x *ResourceDetails) GetCostCalculation() *CostCalculation {
	if x != nil {
		return x.CostCalculation
	}
	return nil
}

func (x *ResourceDetails) GetApn1Details0() *APNDetails {
	if x != nil {
		return x.Apn1Details0
	}
	return nil
}

func (x *ResourceDetails) GetApn1Details1() *APNDetails {
	if x != nil {
		return x.Apn1Details1
	}
	return nil
}

type APNDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation   string  `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	ProductCode string  `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Unit        string  `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	UsageAmount float64 `protobuf:"fixed64,4,opt,name=usageAmount,proto3" json:"usageAmount,omitempty"`
	UsageType   string  `protobuf:"bytes,5,opt,name=usageType,proto3" json:"usageType,omitempty"`
}

func (x *APNDetails) Reset() {
	*x = APNDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APNDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APNDetails) ProtoMessage() {}

func (x *APNDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APNDetails.ProtoReflect.Descriptor instead.
func (*APNDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{27}
}

func (x *APNDetails) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *APNDetails) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *APNDetails) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *APNDetails) GetUsageAmount() float64 {
	if x != nil {
		return x.UsageAmount
	}
	return 0
}

func (x *APNDetails) GetUsageType() string {
	if x != nil {
		return x.UsageType
	}
	return ""
}

type UsageTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation   string  `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	ProductCode string  `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Unit        string  `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	UsageAmount float64 `protobuf:"fixed64,4,opt,name=usageAmount,proto3" json:"usageAmount,omitempty"`
	UsageType   string  `protobuf:"bytes,5,opt,name=usageType,proto3" json:"usageType,omitempty"`
}

func (x *UsageTypes) Reset() {
	*x = UsageTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageTypes) ProtoMessage() {}

func (x *UsageTypes) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageTypes.ProtoReflect.Descriptor instead.
func (*UsageTypes) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{28}
}

func (x *UsageTypes) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *UsageTypes) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *UsageTypes) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *UsageTypes) GetUsageAmount() float64 {
	if x != nil {
		return x.UsageAmount
	}
	return 0
}

func (x *UsageTypes) GetUsageType() string {
	if x != nil {
		return x.UsageType
	}
	return ""
}

type CostCalculation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EstCostAfterDiscount             float64       `protobuf:"fixed64,1,opt,name=estCostAfterDiscount,proto3" json:"estCostAfterDiscount,omitempty"`
	EstCostBeforeDiscount            float64       `protobuf:"fixed64,2,opt,name=estCostBeforeDiscount,proto3" json:"estCostBeforeDiscount,omitempty"`
	OtherDiscount                    float64       `protobuf:"fixed64,3,opt,name=otherDiscount,proto3" json:"otherDiscount,omitempty"`
	SavingsPlanDiscount              float64       `protobuf:"fixed64,4,opt,name=savingsPlanDiscount,proto3" json:"savingsPlanDiscount,omitempty"`
	EstNetUnusedAmortizedCommitments float64       `protobuf:"fixed64,5,opt,name=estNetUnusedAmortizedCommitments,proto3" json:"estNetUnusedAmortizedCommitments,omitempty"`
	ReservedInstanceDiscount         float64       `protobuf:"fixed64,7,opt,name=reservedInstanceDiscount,proto3" json:"reservedInstanceDiscount,omitempty"`
	UsageTypes                       []*UsageTypes `protobuf:"bytes,6,rep,name=usageTypes,proto3" json:"usageTypes,omitempty"`
}

func (x *CostCalculation) Reset() {
	*x = CostCalculation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostCalculation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostCalculation) ProtoMessage() {}

func (x *CostCalculation) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostCalculation.ProtoReflect.Descriptor instead.
func (*CostCalculation) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{29}
}

func (x *CostCalculation) GetEstCostAfterDiscount() float64 {
	if x != nil {
		return x.EstCostAfterDiscount
	}
	return 0
}

func (x *CostCalculation) GetEstCostBeforeDiscount() float64 {
	if x != nil {
		return x.EstCostBeforeDiscount
	}
	return 0
}

func (x *CostCalculation) GetOtherDiscount() float64 {
	if x != nil {
		return x.OtherDiscount
	}
	return 0
}

func (x *CostCalculation) GetSavingsPlanDiscount() float64 {
	if x != nil {
		return x.SavingsPlanDiscount
	}
	return 0
}

func (x *CostCalculation) GetEstNetUnusedAmortizedCommitments() float64 {
	if x != nil {
		return x.EstNetUnusedAmortizedCommitments
	}
	return 0
}

func (x *CostCalculation) GetReservedInstanceDiscount() float64 {
	if x != nil {
		return x.ReservedInstanceDiscount
	}
	return 0
}

func (x *CostCalculation) GetUsageTypes() []*UsageTypes {
	if x != nil {
		return x.UsageTypes
	}
	return nil
}

type UpgradeRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradeEC2Details       *UpgradeEC2Details `protobuf:"bytes,1,opt,name=upgradeEC2Details,proto3" json:"upgradeEC2Details,omitempty"`
	UpgradeEBSDetails       *EBSDetails        `protobuf:"bytes,2,opt,name=upgradeEBSDetails,proto3" json:"upgradeEBSDetails,omitempty"`
	UpgradeRDSDetails       *RDSUpgradeDetails `protobuf:"bytes,5,opt,name=upgradeRDSDetails,proto3" json:"upgradeRDSDetails,omitempty"`
	EstimatedMonthlyCost    float64            `protobuf:"fixed64,3,opt,name=estimatedMonthlyCost,proto3" json:"estimatedMonthlyCost,omitempty"`
	EstimatedMonthlySavings float64            `protobuf:"fixed64,4,opt,name=estimatedMonthlySavings,proto3" json:"estimatedMonthlySavings,omitempty"`
}

func (x *UpgradeRecommendationDetails) Reset() {
	*x = UpgradeRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeRecommendationDetails) ProtoMessage() {}

func (x *UpgradeRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeRecommendationDetails.ProtoReflect.Descriptor instead.
func (*UpgradeRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{30}
}

func (x *UpgradeRecommendationDetails) GetUpgradeEC2Details() *UpgradeEC2Details {
	if x != nil {
		return x.UpgradeEC2Details
	}
	return nil
}

func (x *UpgradeRecommendationDetails) GetUpgradeEBSDetails() *EBSDetails {
	if x != nil {
		return x.UpgradeEBSDetails
	}
	return nil
}

func (x *UpgradeRecommendationDetails) GetUpgradeRDSDetails() *RDSUpgradeDetails {
	if x != nil {
		return x.UpgradeRDSDetails
	}
	return nil
}

func (x *UpgradeRecommendationDetails) GetEstimatedMonthlyCost() float64 {
	if x != nil {
		return x.EstimatedMonthlyCost
	}
	return 0
}

func (x *UpgradeRecommendationDetails) GetEstimatedMonthlySavings() float64 {
	if x != nil {
		return x.EstimatedMonthlySavings
	}
	return 0
}

type UpgradeEC2Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EC2CurrentDetails              *EC2UpgadeDetails `protobuf:"bytes,1,opt,name=eC2CurrentDetails,proto3" json:"eC2CurrentDetails,omitempty"`
	UgradeEC2RecommendationDetails *EC2UpgadeDetails `protobuf:"bytes,2,opt,name=ugradeEC2RecommendationDetails,proto3" json:"ugradeEC2RecommendationDetails,omitempty"`
	CurrentCostCalculation         *CostCalculation  `protobuf:"bytes,3,opt,name=currentCostCalculation,proto3" json:"currentCostCalculation,omitempty"`
	EstimatedCostCalculation       *CostCalculation  `protobuf:"bytes,4,opt,name=estimatedCostCalculation,proto3" json:"estimatedCostCalculation,omitempty"`
}

func (x *UpgradeEC2Details) Reset() {
	*x = UpgradeEC2Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeEC2Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeEC2Details) ProtoMessage() {}

func (x *UpgradeEC2Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeEC2Details.ProtoReflect.Descriptor instead.
func (*UpgradeEC2Details) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{31}
}

func (x *UpgradeEC2Details) GetEC2CurrentDetails() *EC2UpgadeDetails {
	if x != nil {
		return x.EC2CurrentDetails
	}
	return nil
}

func (x *UpgradeEC2Details) GetUgradeEC2RecommendationDetails() *EC2UpgadeDetails {
	if x != nil {
		return x.UgradeEC2RecommendationDetails
	}
	return nil
}

func (x *UpgradeEC2Details) GetCurrentCostCalculation() *CostCalculation {
	if x != nil {
		return x.CurrentCostCalculation
	}
	return nil
}

func (x *UpgradeEC2Details) GetEstimatedCostCalculation() *CostCalculation {
	if x != nil {
		return x.EstimatedCostCalculation
	}
	return nil
}

type EC2UpgadeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType string  `protobuf:"bytes,1,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Operation    string  `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	ProductCode  string  `protobuf:"bytes,3,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Unit         string  `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	UsageAmount  float64 `protobuf:"fixed64,5,opt,name=usageAmount,proto3" json:"usageAmount,omitempty"`
	UsageType    string  `protobuf:"bytes,6,opt,name=usageType,proto3" json:"usageType,omitempty"`
}

func (x *EC2UpgadeDetails) Reset() {
	*x = EC2UpgadeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2UpgadeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2UpgadeDetails) ProtoMessage() {}

func (x *EC2UpgadeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2UpgadeDetails.ProtoReflect.Descriptor instead.
func (*EC2UpgadeDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{32}
}

func (x *EC2UpgadeDetails) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *EC2UpgadeDetails) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *EC2UpgadeDetails) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *EC2UpgadeDetails) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *EC2UpgadeDetails) GetUsageAmount() float64 {
	if x != nil {
		return x.UsageAmount
	}
	return 0
}

func (x *EC2UpgadeDetails) GetUsageType() string {
	if x != nil {
		return x.UsageType
	}
	return ""
}

type EBSDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentEBSDetails *CurrentEBSDetails        `protobuf:"bytes,1,opt,name=currentEBSDetails,proto3" json:"currentEBSDetails,omitempty"`
	UpgradeEBSDetails *EBSRecommendationDetails `protobuf:"bytes,2,opt,name=upgradeEBSDetails,proto3" json:"upgradeEBSDetails,omitempty"`
}

func (x *EBSDetails) Reset() {
	*x = EBSDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EBSDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EBSDetails) ProtoMessage() {}

func (x *EBSDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EBSDetails.ProtoReflect.Descriptor instead.
func (*EBSDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{33}
}

func (x *EBSDetails) GetCurrentEBSDetails() *CurrentEBSDetails {
	if x != nil {
		return x.CurrentEBSDetails
	}
	return nil
}

func (x *EBSDetails) GetUpgradeEBSDetails() *EBSRecommendationDetails {
	if x != nil {
		return x.UpgradeEBSDetails
	}
	return nil
}

type EBSRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachmentState     string           `protobuf:"bytes,1,opt,name=attachmentState,proto3" json:"attachmentState,omitempty"`
	Iops                float64          `protobuf:"fixed64,2,opt,name=iops,proto3" json:"iops,omitempty"`
	Throughput          float64          `protobuf:"fixed64,3,opt,name=throughput,proto3" json:"throughput,omitempty"`
	SizeInGb            float64          `protobuf:"fixed64,4,opt,name=sizeInGb,proto3" json:"sizeInGb,omitempty"`
	EstcostCalculation  *CostCalculation `protobuf:"bytes,5,opt,name=EstcostCalculation,proto3" json:"EstcostCalculation,omitempty"`
	VolumeUsageGP3      *APS1EBSDetails  `protobuf:"bytes,6,opt,name=volumeUsageGP3,proto3" json:"volumeUsageGP3,omitempty"`
	VolumeIopsGP3       *APS1EBSDetails  `protobuf:"bytes,7,opt,name=volumeIopsGP3,proto3" json:"volumeIopsGP3,omitempty"`
	VolumeThroughputGP3 *APS1EBSDetails  `protobuf:"bytes,8,opt,name=volumeThroughputGP3,proto3" json:"volumeThroughputGP3,omitempty"`
}

func (x *EBSRecommendationDetails) Reset() {
	*x = EBSRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EBSRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EBSRecommendationDetails) ProtoMessage() {}

func (x *EBSRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EBSRecommendationDetails.ProtoReflect.Descriptor instead.
func (*EBSRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{34}
}

func (x *EBSRecommendationDetails) GetAttachmentState() string {
	if x != nil {
		return x.AttachmentState
	}
	return ""
}

func (x *EBSRecommendationDetails) GetIops() float64 {
	if x != nil {
		return x.Iops
	}
	return 0
}

func (x *EBSRecommendationDetails) GetThroughput() float64 {
	if x != nil {
		return x.Throughput
	}
	return 0
}

func (x *EBSRecommendationDetails) GetSizeInGb() float64 {
	if x != nil {
		return x.SizeInGb
	}
	return 0
}

func (x *EBSRecommendationDetails) GetEstcostCalculation() *CostCalculation {
	if x != nil {
		return x.EstcostCalculation
	}
	return nil
}

func (x *EBSRecommendationDetails) GetVolumeUsageGP3() *APS1EBSDetails {
	if x != nil {
		return x.VolumeUsageGP3
	}
	return nil
}

func (x *EBSRecommendationDetails) GetVolumeIopsGP3() *APS1EBSDetails {
	if x != nil {
		return x.VolumeIopsGP3
	}
	return nil
}

func (x *EBSRecommendationDetails) GetVolumeThroughputGP3() *APS1EBSDetails {
	if x != nil {
		return x.VolumeThroughputGP3
	}
	return nil
}

type CurrentEBSDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachmentState string           `protobuf:"bytes,1,opt,name=attachmentState,proto3" json:"attachmentState,omitempty"`
	Iops            float64          `protobuf:"fixed64,2,opt,name=iops,proto3" json:"iops,omitempty"`
	Throughput      float64          `protobuf:"fixed64,3,opt,name=throughput,proto3" json:"throughput,omitempty"`
	SizeInGb        float64          `protobuf:"fixed64,4,opt,name=sizeInGb,proto3" json:"sizeInGb,omitempty"`
	CostCalculation *CostCalculation `protobuf:"bytes,5,opt,name=costCalculation,proto3" json:"costCalculation,omitempty"`
	VolumeUsage     *APS1EBSDetails  `protobuf:"bytes,6,opt,name=volumeUsage,proto3" json:"volumeUsage,omitempty"`
}

func (x *CurrentEBSDetails) Reset() {
	*x = CurrentEBSDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentEBSDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentEBSDetails) ProtoMessage() {}

func (x *CurrentEBSDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentEBSDetails.ProtoReflect.Descriptor instead.
func (*CurrentEBSDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{35}
}

func (x *CurrentEBSDetails) GetAttachmentState() string {
	if x != nil {
		return x.AttachmentState
	}
	return ""
}

func (x *CurrentEBSDetails) GetIops() float64 {
	if x != nil {
		return x.Iops
	}
	return 0
}

func (x *CurrentEBSDetails) GetThroughput() float64 {
	if x != nil {
		return x.Throughput
	}
	return 0
}

func (x *CurrentEBSDetails) GetSizeInGb() float64 {
	if x != nil {
		return x.SizeInGb
	}
	return 0
}

func (x *CurrentEBSDetails) GetCostCalculation() *CostCalculation {
	if x != nil {
		return x.CostCalculation
	}
	return nil
}

func (x *CurrentEBSDetails) GetVolumeUsage() *APS1EBSDetails {
	if x != nil {
		return x.VolumeUsage
	}
	return nil
}

type APS1EBSDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductCode string  `protobuf:"bytes,1,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Unit        string  `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	UsageAmount float64 `protobuf:"fixed64,3,opt,name=usageAmount,proto3" json:"usageAmount,omitempty"`
}

func (x *APS1EBSDetails) Reset() {
	*x = APS1EBSDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APS1EBSDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APS1EBSDetails) ProtoMessage() {}

func (x *APS1EBSDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APS1EBSDetails.ProtoReflect.Descriptor instead.
func (*APS1EBSDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{36}
}

func (x *APS1EBSDetails) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *APS1EBSDetails) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *APS1EBSDetails) GetUsageAmount() float64 {
	if x != nil {
		return x.UsageAmount
	}
	return 0
}

type MigrateRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MigrateEC2Details       *MigrateEC2Details `protobuf:"bytes,1,opt,name=migrateEC2Details,proto3" json:"migrateEC2Details,omitempty"`
	MigrateRDSDetails       *MigrateRDSDetails `protobuf:"bytes,4,opt,name=migrateRDSDetails,proto3" json:"migrateRDSDetails,omitempty"`
	EstimatedMonthlyCost    float64            `protobuf:"fixed64,2,opt,name=estimatedMonthlyCost,proto3" json:"estimatedMonthlyCost,omitempty"`
	EstimatedMonthlySavings float64            `protobuf:"fixed64,3,opt,name=estimatedMonthlySavings,proto3" json:"estimatedMonthlySavings,omitempty"`
}

func (x *MigrateRecommendationDetails) Reset() {
	*x = MigrateRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateRecommendationDetails) ProtoMessage() {}

func (x *MigrateRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateRecommendationDetails.ProtoReflect.Descriptor instead.
func (*MigrateRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{37}
}

func (x *MigrateRecommendationDetails) GetMigrateEC2Details() *MigrateEC2Details {
	if x != nil {
		return x.MigrateEC2Details
	}
	return nil
}

func (x *MigrateRecommendationDetails) GetMigrateRDSDetails() *MigrateRDSDetails {
	if x != nil {
		return x.MigrateRDSDetails
	}
	return nil
}

func (x *MigrateRecommendationDetails) GetEstimatedMonthlyCost() float64 {
	if x != nil {
		return x.EstimatedMonthlyCost
	}
	return 0
}

func (x *MigrateRecommendationDetails) GetEstimatedMonthlySavings() float64 {
	if x != nil {
		return x.EstimatedMonthlySavings
	}
	return 0
}

type MigrateEC2Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EC2CurrentDetails              *EC2UpgadeDetails `protobuf:"bytes,1,opt,name=eC2CurrentDetails,proto3" json:"eC2CurrentDetails,omitempty"`
	UgradeEC2RecommendationDetails *EC2UpgadeDetails `protobuf:"bytes,2,opt,name=ugradeEC2RecommendationDetails,proto3" json:"ugradeEC2RecommendationDetails,omitempty"`
	CurrentCostCalculation         *CostCalculation  `protobuf:"bytes,3,opt,name=currentCostCalculation,proto3" json:"currentCostCalculation,omitempty"`
	EstCostCalculation             *CostCalculation  `protobuf:"bytes,4,opt,name=estCostCalculation,proto3" json:"estCostCalculation,omitempty"`
}

func (x *MigrateEC2Details) Reset() {
	*x = MigrateEC2Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateEC2Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateEC2Details) ProtoMessage() {}

func (x *MigrateEC2Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateEC2Details.ProtoReflect.Descriptor instead.
func (*MigrateEC2Details) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{38}
}

func (x *MigrateEC2Details) GetEC2CurrentDetails() *EC2UpgadeDetails {
	if x != nil {
		return x.EC2CurrentDetails
	}
	return nil
}

func (x *MigrateEC2Details) GetUgradeEC2RecommendationDetails() *EC2UpgadeDetails {
	if x != nil {
		return x.UgradeEC2RecommendationDetails
	}
	return nil
}

func (x *MigrateEC2Details) GetCurrentCostCalculation() *CostCalculation {
	if x != nil {
		return x.CurrentCostCalculation
	}
	return nil
}

func (x *MigrateEC2Details) GetEstCostCalculation() *CostCalculation {
	if x != nil {
		return x.EstCostCalculation
	}
	return nil
}

type StopInstanceRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopEC2InstanceRecommendationDetails *StopEC2InstanceRecommendationDetails `protobuf:"bytes,1,opt,name=stopEC2InstanceRecommendationDetails,proto3" json:"stopEC2InstanceRecommendationDetails,omitempty"`
	StopRDSRecommendationDetails         *StopRDSDetails                       `protobuf:"bytes,2,opt,name=stopRDSRecommendationDetails,proto3" json:"stopRDSRecommendationDetails,omitempty"`
}

func (x *StopInstanceRecommendationDetails) Reset() {
	*x = StopInstanceRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopInstanceRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInstanceRecommendationDetails) ProtoMessage() {}

func (x *StopInstanceRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInstanceRecommendationDetails.ProtoReflect.Descriptor instead.
func (*StopInstanceRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{39}
}

func (x *StopInstanceRecommendationDetails) GetStopEC2InstanceRecommendationDetails() *StopEC2InstanceRecommendationDetails {
	if x != nil {
		return x.StopEC2InstanceRecommendationDetails
	}
	return nil
}

func (x *StopInstanceRecommendationDetails) GetStopRDSRecommendationDetails() *StopRDSDetails {
	if x != nil {
		return x.StopRDSRecommendationDetails
	}
	return nil
}

type DeleteRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ec2Details              *CurrentEC2Details       `protobuf:"bytes,1,opt,name=ec2Details,proto3" json:"ec2Details,omitempty"`
	EbsVolumeDetails        *EbsVolumeDetails        `protobuf:"bytes,2,opt,name=ebsVolumeDetails,proto3" json:"ebsVolumeDetails,omitempty"`
	ElasticIpAddressDetails *ElasticIpAddressDetails `protobuf:"bytes,3,opt,name=elasticIpAddressDetails,proto3" json:"elasticIpAddressDetails,omitempty"`
	IdleRdsDetails          *IdleRdsDetails          `protobuf:"bytes,4,opt,name=idleRdsDetails,proto3" json:"idleRdsDetails,omitempty"`
	IdleLoadBalancerDetails *IdleLoadBalancerDetails `protobuf:"bytes,5,opt,name=idleLoadBalancerDetails,proto3" json:"idleLoadBalancerDetails,omitempty"`
	ExclusionStatus         string                   `protobuf:"bytes,6,opt,name=exclusionStatus,proto3" json:"exclusionStatus,omitempty"`
	Status                  string                   `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteRecommendationDetails) Reset() {
	*x = DeleteRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecommendationDetails) ProtoMessage() {}

func (x *DeleteRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecommendationDetails.ProtoReflect.Descriptor instead.
func (*DeleteRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteRecommendationDetails) GetEc2Details() *CurrentEC2Details {
	if x != nil {
		return x.Ec2Details
	}
	return nil
}

func (x *DeleteRecommendationDetails) GetEbsVolumeDetails() *EbsVolumeDetails {
	if x != nil {
		return x.EbsVolumeDetails
	}
	return nil
}

func (x *DeleteRecommendationDetails) GetElasticIpAddressDetails() *ElasticIpAddressDetails {
	if x != nil {
		return x.ElasticIpAddressDetails
	}
	return nil
}

func (x *DeleteRecommendationDetails) GetIdleRdsDetails() *IdleRdsDetails {
	if x != nil {
		return x.IdleRdsDetails
	}
	return nil
}

func (x *DeleteRecommendationDetails) GetIdleLoadBalancerDetails() *IdleLoadBalancerDetails {
	if x != nil {
		return x.IdleLoadBalancerDetails
	}
	return nil
}

func (x *DeleteRecommendationDetails) GetExclusionStatus() string {
	if x != nil {
		return x.ExclusionStatus
	}
	return ""
}

func (x *DeleteRecommendationDetails) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type EbsVolumeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId           string  `protobuf:"bytes,1,opt,name=volumeId,proto3" json:"volumeId,omitempty"`
	VolumeSize         int64   `protobuf:"varint,2,opt,name=volumeSize,proto3" json:"volumeSize,omitempty"`
	VolumeType         string  `protobuf:"bytes,3,opt,name=volumeType,proto3" json:"volumeType,omitempty"`
	MonthlyStorageCost float64 `protobuf:"fixed64,4,opt,name=monthlyStorageCost,proto3" json:"monthlyStorageCost,omitempty"`
}

func (x *EbsVolumeDetails) Reset() {
	*x = EbsVolumeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EbsVolumeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EbsVolumeDetails) ProtoMessage() {}

func (x *EbsVolumeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EbsVolumeDetails.ProtoReflect.Descriptor instead.
func (*EbsVolumeDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{41}
}

func (x *EbsVolumeDetails) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *EbsVolumeDetails) GetVolumeSize() int64 {
	if x != nil {
		return x.VolumeSize
	}
	return 0
}

func (x *EbsVolumeDetails) GetVolumeType() string {
	if x != nil {
		return x.VolumeType
	}
	return ""
}

func (x *EbsVolumeDetails) GetMonthlyStorageCost() float64 {
	if x != nil {
		return x.MonthlyStorageCost
	}
	return 0
}

type ElasticIpAddressDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string `protobuf:"bytes,2,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	Service   string `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *ElasticIpAddressDetails) Reset() {
	*x = ElasticIpAddressDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticIpAddressDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticIpAddressDetails) ProtoMessage() {}

func (x *ElasticIpAddressDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticIpAddressDetails.ProtoReflect.Descriptor instead.
func (*ElasticIpAddressDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{42}
}

func (x *ElasticIpAddressDetails) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ElasticIpAddressDetails) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type IdleRdsDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbInstanceName          string  `protobuf:"bytes,1,opt,name=dbInstanceName,proto3" json:"dbInstanceName,omitempty"`
	DaysSinceLastConnection string  `protobuf:"bytes,2,opt,name=daysSinceLastConnection,proto3" json:"daysSinceLastConnection,omitempty"`
	InstanceType            string  `protobuf:"bytes,3,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	MultiAZ                 string  `protobuf:"bytes,4,opt,name=multiAZ,proto3" json:"multiAZ,omitempty"`
	StorageProvisioned      float64 `protobuf:"fixed64,5,opt,name=storageProvisioned,proto3" json:"storageProvisioned,omitempty"`
}

func (x *IdleRdsDetails) Reset() {
	*x = IdleRdsDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdleRdsDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdleRdsDetails) ProtoMessage() {}

func (x *IdleRdsDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdleRdsDetails.ProtoReflect.Descriptor instead.
func (*IdleRdsDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{43}
}

func (x *IdleRdsDetails) GetDbInstanceName() string {
	if x != nil {
		return x.DbInstanceName
	}
	return ""
}

func (x *IdleRdsDetails) GetDaysSinceLastConnection() string {
	if x != nil {
		return x.DaysSinceLastConnection
	}
	return ""
}

func (x *IdleRdsDetails) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *IdleRdsDetails) GetMultiAZ() string {
	if x != nil {
		return x.MultiAZ
	}
	return ""
}

func (x *IdleRdsDetails) GetStorageProvisioned() float64 {
	if x != nil {
		return x.StorageProvisioned
	}
	return 0
}

type IdleLoadBalancerDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalancerName string `protobuf:"bytes,1,opt,name=loadBalancerName,proto3" json:"loadBalancerName,omitempty"`
	Reason           string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Service          string `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *IdleLoadBalancerDetails) Reset() {
	*x = IdleLoadBalancerDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdleLoadBalancerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdleLoadBalancerDetails) ProtoMessage() {}

func (x *IdleLoadBalancerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdleLoadBalancerDetails.ProtoReflect.Descriptor instead.
func (*IdleLoadBalancerDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{44}
}

func (x *IdleLoadBalancerDetails) GetLoadBalancerName() string {
	if x != nil {
		return x.LoadBalancerName
	}
	return ""
}

func (x *IdleLoadBalancerDetails) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *IdleLoadBalancerDetails) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type OtherRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighErrorRatesLambda                          *HighErrorRatesLambda                          `protobuf:"bytes,1,opt,name=highErrorRatesLambda,proto3" json:"highErrorRatesLambda,omitempty"`
	S3IncompleteMultiPartUploadAbortConfiguration *S3IncompleteMultiPartUploadAbortConfiguration `protobuf:"bytes,2,opt,name=s3IncompleteMultiPartUploadAbortConfiguration,proto3" json:"s3IncompleteMultiPartUploadAbortConfiguration,omitempty"`
	Status                                        string                                         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *OtherRecommendationDetails) Reset() {
	*x = OtherRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherRecommendationDetails) ProtoMessage() {}

func (x *OtherRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherRecommendationDetails.ProtoReflect.Descriptor instead.
func (*OtherRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{45}
}

func (x *OtherRecommendationDetails) GetHighErrorRatesLambda() *HighErrorRatesLambda {
	if x != nil {
		return x.HighErrorRatesLambda
	}
	return nil
}

func (x *OtherRecommendationDetails) GetS3IncompleteMultiPartUploadAbortConfiguration() *S3IncompleteMultiPartUploadAbortConfiguration {
	if x != nil {
		return x.S3IncompleteMultiPartUploadAbortConfiguration
	}
	return nil
}

func (x *OtherRecommendationDetails) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type HighErrorRatesLambda struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgDailyErrorRates   float64 `protobuf:"fixed64,1,opt,name=avgDailyErrorRates,proto3" json:"avgDailyErrorRates,omitempty"`
	AvgDailyInvokes      float64 `protobuf:"fixed64,2,opt,name=avgDailyInvokes,proto3" json:"avgDailyInvokes,omitempty"`
	CurrentDayErrorRates float64 `protobuf:"fixed64,3,opt,name=currentDayErrorRates,proto3" json:"currentDayErrorRates,omitempty"`
	CurrentDayInvokes    float64 `protobuf:"fixed64,4,opt,name=currentDayInvokes,proto3" json:"currentDayInvokes,omitempty"`
	DateForMaxErrorRates string  `protobuf:"bytes,5,opt,name=dateForMaxErrorRates,proto3" json:"dateForMaxErrorRates,omitempty"`
	FunctionArn          string  `protobuf:"bytes,6,opt,name=functionArn,proto3" json:"functionArn,omitempty"`
	LostDailyComputeCost float64 `protobuf:"fixed64,7,opt,name=lostDailyComputeCost,proto3" json:"lostDailyComputeCost,omitempty"`
	MaxDailyErrorRates   float64 `protobuf:"fixed64,8,opt,name=maxDailyErrorRates,proto3" json:"maxDailyErrorRates,omitempty"`
}

func (x *HighErrorRatesLambda) Reset() {
	*x = HighErrorRatesLambda{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighErrorRatesLambda) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighErrorRatesLambda) ProtoMessage() {}

func (x *HighErrorRatesLambda) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighErrorRatesLambda.ProtoReflect.Descriptor instead.
func (*HighErrorRatesLambda) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{46}
}

func (x *HighErrorRatesLambda) GetAvgDailyErrorRates() float64 {
	if x != nil {
		return x.AvgDailyErrorRates
	}
	return 0
}

func (x *HighErrorRatesLambda) GetAvgDailyInvokes() float64 {
	if x != nil {
		return x.AvgDailyInvokes
	}
	return 0
}

func (x *HighErrorRatesLambda) GetCurrentDayErrorRates() float64 {
	if x != nil {
		return x.CurrentDayErrorRates
	}
	return 0
}

func (x *HighErrorRatesLambda) GetCurrentDayInvokes() float64 {
	if x != nil {
		return x.CurrentDayInvokes
	}
	return 0
}

func (x *HighErrorRatesLambda) GetDateForMaxErrorRates() string {
	if x != nil {
		return x.DateForMaxErrorRates
	}
	return ""
}

func (x *HighErrorRatesLambda) GetFunctionArn() string {
	if x != nil {
		return x.FunctionArn
	}
	return ""
}

func (x *HighErrorRatesLambda) GetLostDailyComputeCost() float64 {
	if x != nil {
		return x.LostDailyComputeCost
	}
	return 0
}

func (x *HighErrorRatesLambda) GetMaxDailyErrorRates() float64 {
	if x != nil {
		return x.MaxDailyErrorRates
	}
	return 0
}

type S3IncompleteMultiPartUploadAbortConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketArn                             string `protobuf:"bytes,1,opt,name=bucketArn,proto3" json:"bucketArn,omitempty"`
	BucketName                            string `protobuf:"bytes,2,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	LifeCycleRuleForDeletingIncompleteMCU string `protobuf:"bytes,3,opt,name=lifeCycleRuleForDeletingIncompleteMCU,proto3" json:"lifeCycleRuleForDeletingIncompleteMCU,omitempty"`
	DaysAfterInitiation                   string `protobuf:"bytes,4,opt,name=daysAfterInitiation,proto3" json:"daysAfterInitiation,omitempty"`
}

func (x *S3IncompleteMultiPartUploadAbortConfiguration) Reset() {
	*x = S3IncompleteMultiPartUploadAbortConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3IncompleteMultiPartUploadAbortConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3IncompleteMultiPartUploadAbortConfiguration) ProtoMessage() {}

func (x *S3IncompleteMultiPartUploadAbortConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3IncompleteMultiPartUploadAbortConfiguration.ProtoReflect.Descriptor instead.
func (*S3IncompleteMultiPartUploadAbortConfiguration) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{47}
}

func (x *S3IncompleteMultiPartUploadAbortConfiguration) GetBucketArn() string {
	if x != nil {
		return x.BucketArn
	}
	return ""
}

func (x *S3IncompleteMultiPartUploadAbortConfiguration) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *S3IncompleteMultiPartUploadAbortConfiguration) GetLifeCycleRuleForDeletingIncompleteMCU() string {
	if x != nil {
		return x.LifeCycleRuleForDeletingIncompleteMCU
	}
	return ""
}

func (x *S3IncompleteMultiPartUploadAbortConfiguration) GetDaysAfterInitiation() string {
	if x != nil {
		return x.DaysAfterInitiation
	}
	return ""
}

type StopEC2InstanceRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId               string             `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	InstanceType             string             `protobuf:"bytes,2,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	AveCpuUtilizationBy14Day float64            `protobuf:"fixed64,3,opt,name=AveCpuUtilizationBy14Day,proto3" json:"AveCpuUtilizationBy14Day,omitempty"`
	AveNetworkIOBy14Day      float64            `protobuf:"fixed64,4,opt,name=AveNetworkIOBy14Day,proto3" json:"AveNetworkIOBy14Day,omitempty"`
	CpuUtilization           []*UtilizationData `protobuf:"bytes,5,rep,name=cpuUtilization,proto3" json:"cpuUtilization,omitempty"`
	NetWorkIO                []*UtilizationData `protobuf:"bytes,6,rep,name=netWorkIO,proto3" json:"netWorkIO,omitempty"`
}

func (x *StopEC2InstanceRecommendationDetails) Reset() {
	*x = StopEC2InstanceRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopEC2InstanceRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopEC2InstanceRecommendationDetails) ProtoMessage() {}

func (x *StopEC2InstanceRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopEC2InstanceRecommendationDetails.ProtoReflect.Descriptor instead.
func (*StopEC2InstanceRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{48}
}

func (x *StopEC2InstanceRecommendationDetails) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *StopEC2InstanceRecommendationDetails) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *StopEC2InstanceRecommendationDetails) GetAveCpuUtilizationBy14Day() float64 {
	if x != nil {
		return x.AveCpuUtilizationBy14Day
	}
	return 0
}

func (x *StopEC2InstanceRecommendationDetails) GetAveNetworkIOBy14Day() float64 {
	if x != nil {
		return x.AveNetworkIOBy14Day
	}
	return 0
}

func (x *StopEC2InstanceRecommendationDetails) GetCpuUtilization() []*UtilizationData {
	if x != nil {
		return x.CpuUtilization
	}
	return nil
}

func (x *StopEC2InstanceRecommendationDetails) GetNetWorkIO() []*UtilizationData {
	if x != nil {
		return x.NetWorkIO
	}
	return nil
}

type RDSDBInstance_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceClass   string           `protobuf:"bytes,1,opt,name=instanceClass,proto3" json:"instanceClass,omitempty"`
	CostCalculation *CostCalculation `protobuf:"bytes,2,opt,name=costCalculation,proto3" json:"costCalculation,omitempty"`
}

func (x *RDSDBInstance_Details) Reset() {
	*x = RDSDBInstance_Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDSDBInstance_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDSDBInstance_Details) ProtoMessage() {}

func (x *RDSDBInstance_Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDSDBInstance_Details.ProtoReflect.Descriptor instead.
func (*RDSDBInstance_Details) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{18, 0}
}

func (x *RDSDBInstance_Details) GetInstanceClass() string {
	if x != nil {
		return x.InstanceClass
	}
	return ""
}

func (x *RDSDBInstance_Details) GetCostCalculation() *CostCalculation {
	if x != nil {
		return x.CostCalculation
	}
	return nil
}

type RDSDBInstanceStorage_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocatedStorageInGb float64          `protobuf:"fixed64,1,opt,name=allocatedStorageInGb,proto3" json:"allocatedStorageInGb,omitempty"`
	Iops                 float64          `protobuf:"fixed64,2,opt,name=iops,proto3" json:"iops,omitempty"`
	StorageThroughput    float64          `protobuf:"fixed64,3,opt,name=storageThroughput,proto3" json:"storageThroughput,omitempty"`
	StorageType          string           `protobuf:"bytes,4,opt,name=storageType,proto3" json:"storageType,omitempty"`
	CostCalculation      *CostCalculation `protobuf:"bytes,5,opt,name=costCalculation,proto3" json:"costCalculation,omitempty"`
}

func (x *RDSDBInstanceStorage_Details) Reset() {
	*x = RDSDBInstanceStorage_Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDSDBInstanceStorage_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDSDBInstanceStorage_Details) ProtoMessage() {}

func (x *RDSDBInstanceStorage_Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDSDBInstanceStorage_Details.ProtoReflect.Descriptor instead.
func (*RDSDBInstanceStorage_Details) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{19, 0}
}

func (x *RDSDBInstanceStorage_Details) GetAllocatedStorageInGb() float64 {
	if x != nil {
		return x.AllocatedStorageInGb
	}
	return 0
}

func (x *RDSDBInstanceStorage_Details) GetIops() float64 {
	if x != nil {
		return x.Iops
	}
	return 0
}

func (x *RDSDBInstanceStorage_Details) GetStorageThroughput() float64 {
	if x != nil {
		return x.StorageThroughput
	}
	return 0
}

func (x *RDSDBInstanceStorage_Details) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *RDSDBInstanceStorage_Details) GetCostCalculation() *CostCalculation {
	if x != nil {
		return x.CostCalculation
	}
	return nil
}

type CurrentEC2Details_OtherDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExclusionStatus string `protobuf:"bytes,1,opt,name=exclusionStatus,proto3" json:"exclusionStatus,omitempty"`
	Status          string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Resource        string `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	AwsConfigRule   string `protobuf:"bytes,4,opt,name=awsConfigRule,proto3" json:"awsConfigRule,omitempty"`
	InputParameters string `protobuf:"bytes,5,opt,name=inputParameters,proto3" json:"inputParameters,omitempty"`
}

func (x *CurrentEC2Details_OtherDetails) Reset() {
	*x = CurrentEC2Details_OtherDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentEC2Details_OtherDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentEC2Details_OtherDetails) ProtoMessage() {}

func (x *CurrentEC2Details_OtherDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentEC2Details_OtherDetails.ProtoReflect.Descriptor instead.
func (*CurrentEC2Details_OtherDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CurrentEC2Details_OtherDetails) GetExclusionStatus() string {
	if x != nil {
		return x.ExclusionStatus
	}
	return ""
}

func (x *CurrentEC2Details_OtherDetails) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CurrentEC2Details_OtherDetails) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *CurrentEC2Details_OtherDetails) GetAwsConfigRule() string {
	if x != nil {
		return x.AwsConfigRule
	}
	return ""
}

func (x *CurrentEC2Details_OtherDetails) GetInputParameters() string {
	if x != nil {
		return x.InputParameters
	}
	return ""
}

var File_api_cover_optimizationrecommendation_proto protoreflect.FileDescriptor

var file_api_cover_optimizationrecommendation_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x22,
	0xcf, 0x03, 0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x73, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x65, 0x73, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xde, 0x0c, 0x0a, 0x12, 0x41, 0x57, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x73, 0x74, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x65, 0x73, 0x74, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x73, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65,
	0x73, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x73, 0x74, 0x73, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x73, 0x74, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x7c, 0x0a, 0x1f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x1f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x7f, 0x0a, 0x20, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x20, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x7f, 0x0a, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x73, 0x0a, 0x1c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1c, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x73, 0x0a, 0x1c, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1c,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x82, 0x01, 0x0a,
	0x21, 0x73, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x21,
	0x73, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x70, 0x0a, 0x1b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x6d, 0x0a, 0x1a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0xc9, 0x08, 0x0a, 0x1f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x49, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x63, 0x32, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45,
	0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x65, 0x63, 0x32, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x13, 0x65, 0x6c, 0x61, 0x73,
	0x74, 0x69, 0x63, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3a, 0x0a, 0x09, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x09, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x72,
	0x64, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x44, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a,
	0x72, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65,
	0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x44, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x42, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x62, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x25, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x6f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x6c,
	0x65, 0x78, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x11,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x26, 0x65,
	0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x45, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x26, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe4,
	0x05, 0x0a, 0x26, 0x45, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x76, 0x65,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x61, 0x76, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x1d, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f,
	0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x46, 0x0a, 0x1e, 0x61, 0x76, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1e, 0x61, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12,
	0x2c, 0x0a, 0x11, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x45, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x43, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x49, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52,
	0x49, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a,
	0x18, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x18, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x6d, 0x61, 0x78,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1d, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12,
	0x46, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x6d, 0x69, 0x6e, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d,
	0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x46, 0x0a,
	0x1e, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x48, 0x6f, 0x75, 0x72, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x44, 0x42, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x45,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x69, 0x7a, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x22,
	0x7e, 0x0a, 0x0a, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22,
	0x77, 0x0a, 0x13, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x09, 0x45, 0x53, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xd4,
	0x01, 0x0a, 0x0a, 0x52, 0x44, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x62, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x62, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x62, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x62, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x73, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0x95, 0x04, 0x0a, 0x20, 0x53,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x70,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x19, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x50, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x19, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x79, 0x0a, 0x1e, 0x65, 0x73, 0x74, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x45, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x53, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x1e, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x53, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xf1, 0x02, 0x0a, 0x1b, 0x53, 0x50, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x76, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x4f,
	0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x61, 0x76, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x4f, 0x6e, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x48,
	0x6f, 0x75, 0x72, 0x6c, 0x79, 0x4f, 0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x48, 0x6f, 0x75,
	0x72, 0x6c, 0x79, 0x4f, 0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x12, 0x36, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x4f, 0x6e, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x16, 0x6d, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x4f, 0x6e, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x23, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x48, 0x6f, 0x75, 0x72, 0x6c,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x23, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xac, 0x02, 0x0a, 0x1e, 0x45, 0x73, 0x74, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x65,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x61, 0x76, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61,
	0x76, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x76, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f,
	0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x6f, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x72, 0x6f, 0x69, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50,
	0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xfc, 0x05, 0x0a, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x15, 0x65, 0x63,
	0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x43,
	0x32, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x15, 0x65, 0x63, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x26, 0x6c,
	0x61, 0x6d, 0x62, 0x64, 0x61, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x26, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x6f,
	0x0a, 0x23, 0x65, 0x62, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x23, 0x65, 0x62, 0x73, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x88, 0x01, 0x0a, 0x23, 0x65, 0x63, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x45, 0x63, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x23, 0x65, 0x63, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x7a, 0x0a, 0x23, 0x72, 0x64,
	0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x44, 0x53, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x23, 0x72, 0x64, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x58, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x44, 0x53, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x72, 0x64, 0x73, 0x44, 0x42, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x44, 0x53, 0x44, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0d, 0x72, 0x64, 0x73, 0x44, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5b,
	0x0a, 0x11, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x44, 0x53, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x72, 0x64, 0x73, 0x44, 0x62, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x44, 0x53, 0x44, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x72, 0x64,
	0x73, 0x44, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x11,
	0x52, 0x44, 0x53, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x46, 0x0a, 0x0d, 0x72, 0x64, 0x73, 0x44, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x44, 0x53,
	0x44, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x72, 0x64, 0x73, 0x44,
	0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x72, 0x64, 0x73,
	0x44, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x44, 0x53, 0x44,
	0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x14, 0x72, 0x64, 0x73, 0x44, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x15, 0x52, 0x44, 0x53, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x46, 0x0a, 0x0d, 0x72, 0x64, 0x73, 0x44, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x44, 0x53, 0x44,
	0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x72, 0x64, 0x73, 0x44, 0x62,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x72, 0x64, 0x73, 0x44,
	0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x44, 0x53, 0x44, 0x42,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x14, 0x72, 0x64, 0x73, 0x44, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x8c, 0x03, 0x0a, 0x0d, 0x52, 0x44, 0x53, 0x44, 0x42, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x44, 0x53, 0x44, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x15, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x44, 0x53,
	0x44, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x70, 0x75,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x7d, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x03, 0x0a, 0x14, 0x52, 0x44, 0x53, 0x44, 0x42, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x44, 0x53, 0x44, 0x42, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x65, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x44, 0x53, 0x44, 0x42, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xef, 0x01,
	0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x47,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x69, 0x6f, 0x70,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x63, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xe6, 0x01, 0x0a, 0x15, 0x45, 0x43, 0x32, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x79, 0x0a,
	0x1e, 0x65, 0x43, 0x32, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x43, 0x32, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1e, 0x65, 0x43, 0x32, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x93, 0x07, 0x0a, 0x11, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x70,
	0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x65, 0x43, 0x32, 0x43, 0x70, 0x75,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x65, 0x43, 0x32, 0x43, 0x70, 0x75, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x12, 0x65, 0x43, 0x32, 0x44,
	0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x65, 0x43, 0x32, 0x44, 0x69, 0x73,
	0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x14,
	0x65, 0x43, 0x32, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14,
	0x65, 0x43, 0x32, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a,
	0xbc, 0x01, 0x0a, 0x0c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x77, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x77, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x96,
	0x02, 0x0a, 0x1e, 0x45, 0x43, 0x32, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x69,
	0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x3b, 0x0a, 0x0f, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x26, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x62, 0x0a, 0x1a, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1a, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x1e, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x1e, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xe9, 0x01, 0x0a, 0x23, 0x45, 0x63, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5c, 0x0a, 0x17, 0x45, 0x63, 0x73, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x17, 0x45, 0x63,
	0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x1b, 0x45, 0x63, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1b,
	0x45, 0x63, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x02, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x73, 0x69, 0x7a,
	0x65, 0x49, 0x6e, 0x4d, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x4d, 0x42, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x43, 0x70, 0x75, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x43, 0x70, 0x75, 0x12, 0x4c, 0x0a, 0x0f, 0x63,
	0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x61, 0x70, 0x6e,
	0x31, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x30, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x50, 0x4e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c,
	0x61, 0x70, 0x6e, 0x31, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x30, 0x12, 0x41, 0x0a, 0x0c,
	0x61, 0x70, 0x6e, 0x31, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x31, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x50, 0x4e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x0c, 0x61, 0x70, 0x6e, 0x31, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x31, 0x22,
	0xa0, 0x01, 0x0a, 0x0a, 0x41, 0x50, 0x4e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9a, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x15, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x65,
	0x73, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x72, 0x74,
	0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x20, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x22, 0x81, 0x03, 0x0a, 0x1c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x43,
	0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x43, 0x32,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x44, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x44, 0x53, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x44,
	0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x17,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x8f, 0x03, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x11,
	0x65, 0x43, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x43, 0x32, 0x55,
	0x70, 0x67, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x65, 0x43,
	0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x6b, 0x0a, 0x1e, 0x75, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x43, 0x32, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x43, 0x32, 0x55,
	0x70, 0x67, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1e, 0x75, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x45, 0x43, 0x32, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x16,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x18, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x45, 0x43, 0x32,
	0x55, 0x70, 0x67, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x0a, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x42, 0x53, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x42,
	0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x42, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0xd1, 0x03, 0x0a, 0x18, 0x45, 0x42, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6f,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x12, 0x52, 0x0a, 0x12, 0x45, 0x73,
	0x74, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x45, 0x73, 0x74, 0x63,
	0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47, 0x50, 0x33,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x50, 0x53, 0x31, 0x45,
	0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47, 0x50, 0x33, 0x12, 0x47, 0x0a, 0x0d, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x47, 0x50, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x50, 0x53, 0x31, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x47,
	0x50, 0x33, 0x12, 0x53, 0x0a, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x47, 0x50, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x50, 0x53, 0x31, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x70, 0x75, 0x74, 0x47, 0x50, 0x33, 0x22, 0xa0, 0x02, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73,
	0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x50, 0x53, 0x31, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x68, 0x0a, 0x0e, 0x41, 0x50,
	0x53, 0x31, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb4, 0x02, 0x0a, 0x1c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x45, 0x43, 0x32, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x45,
	0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x44, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x44, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x44, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x83, 0x03, 0x0a, 0x11,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x51, 0x0a, 0x11, 0x65, 0x43, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x45, 0x43, 0x32, 0x55, 0x70, 0x67, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x11, 0x65, 0x43, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x6b, 0x0a, 0x1e, 0x75, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x43,
	0x32, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x45, 0x43, 0x32, 0x55, 0x70, 0x67, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x1e, 0x75, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x43, 0x32, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x5a, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x12, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x98, 0x02, 0x0a, 0x21, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x24, 0x73, 0x74, 0x6f, 0x70,
	0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x45,
	0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x24, 0x73, 0x74, 0x6f, 0x70, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x65, 0x0a, 0x1c, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x44, 0x53,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x52, 0x44, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1c,
	0x73, 0x74, 0x6f, 0x70, 0x52, 0x44, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x8d, 0x04, 0x0a,
	0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x0a,
	0x65, 0x63, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x43, 0x32, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x65, 0x63, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x65, 0x62, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x45, 0x62, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x10, 0x65, 0x62, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x64, 0x0a, 0x17, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x17, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x64, 0x6c,
	0x65, 0x52, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x6c, 0x65, 0x52, 0x64, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x69, 0x64, 0x6c, 0x65, 0x52, 0x64, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x64, 0x0a, 0x17, 0x69, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x6c, 0x65, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x17, 0x69, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9e, 0x01, 0x0a,
	0x10, 0x45, 0x62, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x51, 0x0a,
	0x17, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x49, 0x64, 0x6c, 0x65, 0x52, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x62, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x64,
	0x61, 0x79, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64, 0x61,
	0x79, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x5a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x5a, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x22, 0x77, 0x0a, 0x17, 0x49, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xba, 0x02, 0x0a,
	0x1a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x14, 0x68,
	0x69, 0x67, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x4c, 0x61, 0x6d,
	0x62, 0x64, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x69,
	0x67, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x4c, 0x61, 0x6d, 0x62,
	0x64, 0x61, 0x52, 0x14, 0x68, 0x69, 0x67, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x12, 0xa6, 0x01, 0x0a, 0x2d, 0x73, 0x33, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61,
	0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x33, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x62, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x2d, 0x73, 0x33, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8c, 0x03, 0x0a, 0x14, 0x48, 0x69,
	0x67, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x4c, 0x61, 0x6d, 0x62,
	0x64, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x76, 0x67, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x61, 0x76, 0x67, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x76, 0x67, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x76, 0x67,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x49, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x14, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x6c, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x2d, 0x53, 0x33, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61,
	0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x25, 0x6c, 0x69, 0x66, 0x65,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x43,
	0x55, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x6c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x43, 0x55, 0x12, 0x30,
	0x0a, 0x13, 0x64, 0x61, 0x79, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x61, 0x79,
	0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xe6, 0x02, 0x0a, 0x24, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a,
	0x18, 0x41, 0x76, 0x65, 0x43, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x31, 0x34, 0x44, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x18, 0x41, 0x76, 0x65, 0x43, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x31, 0x34, 0x44, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x76, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x4f, 0x42, 0x79, 0x31, 0x34, 0x44, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x41, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x4f, 0x42, 0x79, 0x31, 0x34, 0x44, 0x61, 0x79, 0x12, 0x4a, 0x0a, 0x0e, 0x63,
	0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x49, 0x4f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09,
	0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x4f, 0x42, 0x78, 0x0a, 0x1f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x27, 0x41, 0x70,
	0x69, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c,
	0x75, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_cover_optimizationrecommendation_proto_rawDescOnce sync.Once
	file_api_cover_optimizationrecommendation_proto_rawDescData = file_api_cover_optimizationrecommendation_proto_rawDesc
)

func file_api_cover_optimizationrecommendation_proto_rawDescGZIP() []byte {
	file_api_cover_optimizationrecommendation_proto_rawDescOnce.Do(func() {
		file_api_cover_optimizationrecommendation_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_cover_optimizationrecommendation_proto_rawDescData)
	})
	return file_api_cover_optimizationrecommendation_proto_rawDescData
}

var file_api_cover_optimizationrecommendation_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_api_cover_optimizationrecommendation_proto_goTypes = []any{
	(*ExecutedRecommendationDetails)(nil),                 // 0: blueapi.api.cover.ExecutedRecommendationDetails
	(*AWSRecommendations)(nil),                            // 1: blueapi.api.cover.AWSRecommendations
	(*PurchaseRIRecommendationDetails)(nil),               // 2: blueapi.api.cover.PurchaseRIRecommendationDetails
	(*EstOutcomeFromPurchaseRIRecommendation)(nil),        // 3: blueapi.api.cover.EstOutcomeFromPurchaseRIRecommendation
	(*MemoryDBDetails)(nil),                               // 4: blueapi.api.cover.MemoryDBDetails
	(*EC2Details)(nil),                                    // 5: blueapi.api.cover.EC2Details
	(*ElasticCacheDetails)(nil),                           // 6: blueapi.api.cover.ElasticCacheDetails
	(*ESDetails)(nil),                                     // 7: blueapi.api.cover.ESDetails
	(*RDSDetails)(nil),                                    // 8: blueapi.api.cover.RDSDetails
	(*RedshiftDetails)(nil),                               // 9: blueapi.api.cover.RedshiftDetails
	(*SavingsPlanRecommendationDetails)(nil),              // 10: blueapi.api.cover.SavingsPlanRecommendationDetails
	(*SPCurrentUtilizationDetails)(nil),                   // 11: blueapi.api.cover.SPCurrentUtilizationDetails
	(*EstOutcomeFromSPRecommendation)(nil),                // 12: blueapi.api.cover.EstOutcomeFromSPRecommendation
	(*RightSizingRecommendationDetails)(nil),              // 13: blueapi.api.cover.RightSizingRecommendationDetails
	(*StopRDSDetails)(nil),                                // 14: blueapi.api.cover.StopRDSDetails
	(*MigrateRDSDetails)(nil),                             // 15: blueapi.api.cover.MigrateRDSDetails
	(*RDSUpgradeDetails)(nil),                             // 16: blueapi.api.cover.RDSUpgradeDetails
	(*RDSRightsizingDetails)(nil),                         // 17: blueapi.api.cover.RDSRightsizingDetails
	(*RDSDBInstance)(nil),                                 // 18: blueapi.api.cover.RDSDBInstance
	(*RDSDBInstanceStorage)(nil),                          // 19: blueapi.api.cover.RDSDBInstanceStorage
	(*EC2RightSizingDetails)(nil),                         // 20: blueapi.api.cover.EC2rightSizingDetails
	(*CurrentEC2Details)(nil),                             // 21: blueapi.api.cover.CurrentEC2Details
	(*EC2ModifyRecommendationDetails)(nil),                // 22: blueapi.api.cover.EC2ModifyRecommendationDetails
	(*UtilizationData)(nil),                               // 23: blueapi.api.cover.UtilizationData
	(*LambdaRightSizingRecommendationDetails)(nil),        // 24: blueapi.api.cover.LambdaRightSizingRecommendationDetails
	(*EcsRightSizingRecommendationDetails)(nil),           // 25: blueapi.api.cover.EcsRightSizingRecommendationDetails
	(*ResourceDetails)(nil),                               // 26: blueapi.api.cover.ResourceDetails
	(*APNDetails)(nil),                                    // 27: blueapi.api.cover.APNDetails
	(*UsageTypes)(nil),                                    // 28: blueapi.api.cover.UsageTypes
	(*CostCalculation)(nil),                               // 29: blueapi.api.cover.CostCalculation
	(*UpgradeRecommendationDetails)(nil),                  // 30: blueapi.api.cover.UpgradeRecommendationDetails
	(*UpgradeEC2Details)(nil),                             // 31: blueapi.api.cover.UpgradeEC2Details
	(*EC2UpgadeDetails)(nil),                              // 32: blueapi.api.cover.EC2UpgadeDetails
	(*EBSDetails)(nil),                                    // 33: blueapi.api.cover.EBSDetails
	(*EBSRecommendationDetails)(nil),                      // 34: blueapi.api.cover.EBSRecommendationDetails
	(*CurrentEBSDetails)(nil),                             // 35: blueapi.api.cover.CurrentEBSDetails
	(*APS1EBSDetails)(nil),                                // 36: blueapi.api.cover.APS1EBSDetails
	(*MigrateRecommendationDetails)(nil),                  // 37: blueapi.api.cover.MigrateRecommendationDetails
	(*MigrateEC2Details)(nil),                             // 38: blueapi.api.cover.MigrateEC2Details
	(*StopInstanceRecommendationDetails)(nil),             // 39: blueapi.api.cover.StopInstanceRecommendationDetails
	(*DeleteRecommendationDetails)(nil),                   // 40: blueapi.api.cover.DeleteRecommendationDetails
	(*EbsVolumeDetails)(nil),                              // 41: blueapi.api.cover.EbsVolumeDetails
	(*ElasticIpAddressDetails)(nil),                       // 42: blueapi.api.cover.ElasticIpAddressDetails
	(*IdleRdsDetails)(nil),                                // 43: blueapi.api.cover.IdleRdsDetails
	(*IdleLoadBalancerDetails)(nil),                       // 44: blueapi.api.cover.IdleLoadBalancerDetails
	(*OtherRecommendationDetails)(nil),                    // 45: blueapi.api.cover.OtherRecommendationDetails
	(*HighErrorRatesLambda)(nil),                          // 46: blueapi.api.cover.HighErrorRatesLambda
	(*S3IncompleteMultiPartUploadAbortConfiguration)(nil), // 47: blueapi.api.cover.S3IncompleteMultiPartUploadAbortConfiguration
	(*StopEC2InstanceRecommendationDetails)(nil),          // 48: blueapi.api.cover.StopEC2InstanceRecommendationDetails
	(*RDSDBInstance_Details)(nil),                         // 49: blueapi.api.cover.RDSDBInstance.Details
	(*RDSDBInstanceStorage_Details)(nil),                  // 50: blueapi.api.cover.RDSDBInstanceStorage.Details
	(*CurrentEC2Details_OtherDetails)(nil),                // 51: blueapi.api.cover.CurrentEC2Details.OtherDetails
}
var file_api_cover_optimizationrecommendation_proto_depIdxs = []int32{
	2,  // 0: blueapi.api.cover.AWSRecommendations.purchaseRIRecommendationDetails:type_name -> blueapi.api.cover.PurchaseRIRecommendationDetails
	10, // 1: blueapi.api.cover.AWSRecommendations.savingsPlanRecommendationDetails:type_name -> blueapi.api.cover.SavingsPlanRecommendationDetails
	13, // 2: blueapi.api.cover.AWSRecommendations.rightSizingRecommendationDetails:type_name -> blueapi.api.cover.RightSizingRecommendationDetails
	30, // 3: blueapi.api.cover.AWSRecommendations.upgradeRecommendationDetails:type_name -> blueapi.api.cover.UpgradeRecommendationDetails
	37, // 4: blueapi.api.cover.AWSRecommendations.migrateRecommendationDetails:type_name -> blueapi.api.cover.MigrateRecommendationDetails
	39, // 5: blueapi.api.cover.AWSRecommendations.stopInstanceRecommendationDetails:type_name -> blueapi.api.cover.StopInstanceRecommendationDetails
	40, // 6: blueapi.api.cover.AWSRecommendations.deleteRecommendationDetails:type_name -> blueapi.api.cover.DeleteRecommendationDetails
	45, // 7: blueapi.api.cover.AWSRecommendations.otherRecommendationDetails:type_name -> blueapi.api.cover.OtherRecommendationDetails
	5,  // 8: blueapi.api.cover.PurchaseRIRecommendationDetails.ec2Options:type_name -> blueapi.api.cover.EC2Details
	6,  // 9: blueapi.api.cover.PurchaseRIRecommendationDetails.elasticCacheOptions:type_name -> blueapi.api.cover.ElasticCacheDetails
	7,  // 10: blueapi.api.cover.PurchaseRIRecommendationDetails.esOptions:type_name -> blueapi.api.cover.ESDetails
	8,  // 11: blueapi.api.cover.PurchaseRIRecommendationDetails.rdsOptions:type_name -> blueapi.api.cover.RDSDetails
	9,  // 12: blueapi.api.cover.PurchaseRIRecommendationDetails.redshiftOptions:type_name -> blueapi.api.cover.RedshiftDetails
	4,  // 13: blueapi.api.cover.PurchaseRIRecommendationDetails.memoryDbDetails:type_name -> blueapi.api.cover.MemoryDBDetails
	3,  // 14: blueapi.api.cover.PurchaseRIRecommendationDetails.estOutcomeFromPurchaseRIRecommendation:type_name -> blueapi.api.cover.EstOutcomeFromPurchaseRIRecommendation
	11, // 15: blueapi.api.cover.SavingsPlanRecommendationDetails.currentUtilizationDetails:type_name -> blueapi.api.cover.SPCurrentUtilizationDetails
	12, // 16: blueapi.api.cover.SavingsPlanRecommendationDetails.estOutcomeFromSPRecommendation:type_name -> blueapi.api.cover.EstOutcomeFromSPRecommendation
	20, // 17: blueapi.api.cover.RightSizingRecommendationDetails.ec2RightSizingDetails:type_name -> blueapi.api.cover.EC2rightSizingDetails
	24, // 18: blueapi.api.cover.RightSizingRecommendationDetails.lambdaRightSizingRecommendationDetails:type_name -> blueapi.api.cover.LambdaRightSizingRecommendationDetails
	33, // 19: blueapi.api.cover.RightSizingRecommendationDetails.ebsRightSizingRecommendationDetails:type_name -> blueapi.api.cover.EBSDetails
	25, // 20: blueapi.api.cover.RightSizingRecommendationDetails.ecsRightSizingRecommendationDetails:type_name -> blueapi.api.cover.EcsRightSizingRecommendationDetails
	17, // 21: blueapi.api.cover.RightSizingRecommendationDetails.rdsRightSizingRecommendationDetails:type_name -> blueapi.api.cover.RDSRightsizingDetails
	18, // 22: blueapi.api.cover.StopRDSDetails.rdsDBInstance:type_name -> blueapi.api.cover.RDSDBInstance
	18, // 23: blueapi.api.cover.MigrateRDSDetails.rdsDbInstance:type_name -> blueapi.api.cover.RDSDBInstance
	18, // 24: blueapi.api.cover.RDSUpgradeDetails.rdsDbInstance:type_name -> blueapi.api.cover.RDSDBInstance
	19, // 25: blueapi.api.cover.RDSUpgradeDetails.rdsDbInstanceStorage:type_name -> blueapi.api.cover.RDSDBInstanceStorage
	18, // 26: blueapi.api.cover.RDSRightsizingDetails.rdsDbInstance:type_name -> blueapi.api.cover.RDSDBInstance
	19, // 27: blueapi.api.cover.RDSRightsizingDetails.rdsDbInstanceStorage:type_name -> blueapi.api.cover.RDSDBInstanceStorage
	49, // 28: blueapi.api.cover.RDSDBInstance.currentDetails:type_name -> blueapi.api.cover.RDSDBInstance.Details
	49, // 29: blueapi.api.cover.RDSDBInstance.recommendationDetails:type_name -> blueapi.api.cover.RDSDBInstance.Details
	23, // 30: blueapi.api.cover.RDSDBInstance.cpuUtilization:type_name -> blueapi.api.cover.UtilizationData
	50, // 31: blueapi.api.cover.RDSDBInstanceStorage.currentDetails:type_name -> blueapi.api.cover.RDSDBInstanceStorage.Details
	50, // 32: blueapi.api.cover.RDSDBInstanceStorage.recommendationDetails:type_name -> blueapi.api.cover.RDSDBInstanceStorage.Details
	21, // 33: blueapi.api.cover.EC2rightSizingDetails.currentEC2Details:type_name -> blueapi.api.cover.CurrentEC2Details
	22, // 34: blueapi.api.cover.EC2rightSizingDetails.eC2ModifyRecommendationDetails:type_name -> blueapi.api.cover.EC2ModifyRecommendationDetails
	23, // 35: blueapi.api.cover.CurrentEC2Details.eC2CpuUtilization:type_name -> blueapi.api.cover.UtilizationData
	23, // 36: blueapi.api.cover.CurrentEC2Details.eC2DiskUtilization:type_name -> blueapi.api.cover.UtilizationData
	23, // 37: blueapi.api.cover.CurrentEC2Details.eC2MemoryUtilization:type_name -> blueapi.api.cover.UtilizationData
	23, // 38: blueapi.api.cover.CurrentEC2Details.networkTrafficData:type_name -> blueapi.api.cover.UtilizationData
	51, // 39: blueapi.api.cover.CurrentEC2Details.otherDetails:type_name -> blueapi.api.cover.CurrentEC2Details.OtherDetails
	26, // 40: blueapi.api.cover.LambdaRightSizingRecommendationDetails.lambdaCurrentConfiguration:type_name -> blueapi.api.cover.ResourceDetails
	26, // 41: blueapi.api.cover.LambdaRightSizingRecommendationDetails.lambdaRecommendedConfiguration:type_name -> blueapi.api.cover.ResourceDetails
	26, // 42: blueapi.api.cover.EcsRightSizingRecommendationDetails.EcsCurrentConfiguration:type_name -> blueapi.api.cover.ResourceDetails
	26, // 43: blueapi.api.cover.EcsRightSizingRecommendationDetails.EcsRecommendedConfiguration:type_name -> blueapi.api.cover.ResourceDetails
	29, // 44: blueapi.api.cover.ResourceDetails.costCalculation:type_name -> blueapi.api.cover.CostCalculation
	27, // 45: blueapi.api.cover.ResourceDetails.apn1details0:type_name -> blueapi.api.cover.APNDetails
	27, // 46: blueapi.api.cover.ResourceDetails.apn1details1:type_name -> blueapi.api.cover.APNDetails
	28, // 47: blueapi.api.cover.CostCalculation.usageTypes:type_name -> blueapi.api.cover.UsageTypes
	31, // 48: blueapi.api.cover.UpgradeRecommendationDetails.upgradeEC2Details:type_name -> blueapi.api.cover.UpgradeEC2Details
	33, // 49: blueapi.api.cover.UpgradeRecommendationDetails.upgradeEBSDetails:type_name -> blueapi.api.cover.EBSDetails
	16, // 50: blueapi.api.cover.UpgradeRecommendationDetails.upgradeRDSDetails:type_name -> blueapi.api.cover.RDSUpgradeDetails
	32, // 51: blueapi.api.cover.UpgradeEC2Details.eC2CurrentDetails:type_name -> blueapi.api.cover.EC2UpgadeDetails
	32, // 52: blueapi.api.cover.UpgradeEC2Details.ugradeEC2RecommendationDetails:type_name -> blueapi.api.cover.EC2UpgadeDetails
	29, // 53: blueapi.api.cover.UpgradeEC2Details.currentCostCalculation:type_name -> blueapi.api.cover.CostCalculation
	29, // 54: blueapi.api.cover.UpgradeEC2Details.estimatedCostCalculation:type_name -> blueapi.api.cover.CostCalculation
	35, // 55: blueapi.api.cover.EBSDetails.currentEBSDetails:type_name -> blueapi.api.cover.CurrentEBSDetails
	34, // 56: blueapi.api.cover.EBSDetails.upgradeEBSDetails:type_name -> blueapi.api.cover.EBSRecommendationDetails
	29, // 57: blueapi.api.cover.EBSRecommendationDetails.EstcostCalculation:type_name -> blueapi.api.cover.CostCalculation
	36, // 58: blueapi.api.cover.EBSRecommendationDetails.volumeUsageGP3:type_name -> blueapi.api.cover.APS1EBSDetails
	36, // 59: blueapi.api.cover.EBSRecommendationDetails.volumeIopsGP3:type_name -> blueapi.api.cover.APS1EBSDetails
	36, // 60: blueapi.api.cover.EBSRecommendationDetails.volumeThroughputGP3:type_name -> blueapi.api.cover.APS1EBSDetails
	29, // 61: blueapi.api.cover.CurrentEBSDetails.costCalculation:type_name -> blueapi.api.cover.CostCalculation
	36, // 62: blueapi.api.cover.CurrentEBSDetails.volumeUsage:type_name -> blueapi.api.cover.APS1EBSDetails
	38, // 63: blueapi.api.cover.MigrateRecommendationDetails.migrateEC2Details:type_name -> blueapi.api.cover.MigrateEC2Details
	15, // 64: blueapi.api.cover.MigrateRecommendationDetails.migrateRDSDetails:type_name -> blueapi.api.cover.MigrateRDSDetails
	32, // 65: blueapi.api.cover.MigrateEC2Details.eC2CurrentDetails:type_name -> blueapi.api.cover.EC2UpgadeDetails
	32, // 66: blueapi.api.cover.MigrateEC2Details.ugradeEC2RecommendationDetails:type_name -> blueapi.api.cover.EC2UpgadeDetails
	29, // 67: blueapi.api.cover.MigrateEC2Details.currentCostCalculation:type_name -> blueapi.api.cover.CostCalculation
	29, // 68: blueapi.api.cover.MigrateEC2Details.estCostCalculation:type_name -> blueapi.api.cover.CostCalculation
	48, // 69: blueapi.api.cover.StopInstanceRecommendationDetails.stopEC2InstanceRecommendationDetails:type_name -> blueapi.api.cover.StopEC2InstanceRecommendationDetails
	14, // 70: blueapi.api.cover.StopInstanceRecommendationDetails.stopRDSRecommendationDetails:type_name -> blueapi.api.cover.StopRDSDetails
	21, // 71: blueapi.api.cover.DeleteRecommendationDetails.ec2Details:type_name -> blueapi.api.cover.CurrentEC2Details
	41, // 72: blueapi.api.cover.DeleteRecommendationDetails.ebsVolumeDetails:type_name -> blueapi.api.cover.EbsVolumeDetails
	42, // 73: blueapi.api.cover.DeleteRecommendationDetails.elasticIpAddressDetails:type_name -> blueapi.api.cover.ElasticIpAddressDetails
	43, // 74: blueapi.api.cover.DeleteRecommendationDetails.idleRdsDetails:type_name -> blueapi.api.cover.IdleRdsDetails
	44, // 75: blueapi.api.cover.DeleteRecommendationDetails.idleLoadBalancerDetails:type_name -> blueapi.api.cover.IdleLoadBalancerDetails
	46, // 76: blueapi.api.cover.OtherRecommendationDetails.highErrorRatesLambda:type_name -> blueapi.api.cover.HighErrorRatesLambda
	47, // 77: blueapi.api.cover.OtherRecommendationDetails.s3IncompleteMultiPartUploadAbortConfiguration:type_name -> blueapi.api.cover.S3IncompleteMultiPartUploadAbortConfiguration
	23, // 78: blueapi.api.cover.StopEC2InstanceRecommendationDetails.cpuUtilization:type_name -> blueapi.api.cover.UtilizationData
	23, // 79: blueapi.api.cover.StopEC2InstanceRecommendationDetails.netWorkIO:type_name -> blueapi.api.cover.UtilizationData
	29, // 80: blueapi.api.cover.RDSDBInstance.Details.costCalculation:type_name -> blueapi.api.cover.CostCalculation
	29, // 81: blueapi.api.cover.RDSDBInstanceStorage.Details.costCalculation:type_name -> blueapi.api.cover.CostCalculation
	82, // [82:82] is the sub-list for method output_type
	82, // [82:82] is the sub-list for method input_type
	82, // [82:82] is the sub-list for extension type_name
	82, // [82:82] is the sub-list for extension extendee
	0,  // [0:82] is the sub-list for field type_name
}

func init() { file_api_cover_optimizationrecommendation_proto_init() }
func file_api_cover_optimizationrecommendation_proto_init() {
	if File_api_cover_optimizationrecommendation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_cover_optimizationrecommendation_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutedRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AWSRecommendations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PurchaseRIRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*EstOutcomeFromPurchaseRIRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MemoryDBDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*EC2Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ElasticCacheDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ESDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RDSDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RedshiftDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SavingsPlanRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SPCurrentUtilizationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*EstOutcomeFromSPRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RightSizingRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*StopRDSDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*MigrateRDSDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*RDSUpgradeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*RDSRightsizingDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*RDSDBInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*RDSDBInstanceStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*EC2RightSizingDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentEC2Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*EC2ModifyRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*UtilizationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*LambdaRightSizingRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*EcsRightSizingRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*APNDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*UsageTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CostCalculation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*UpgradeRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*UpgradeEC2Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*EC2UpgadeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*EBSDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*EBSRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentEBSDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*APS1EBSDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*MigrateRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*MigrateEC2Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*StopInstanceRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*EbsVolumeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*ElasticIpAddressDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*IdleRdsDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*IdleLoadBalancerDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*OtherRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*HighErrorRatesLambda); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*S3IncompleteMultiPartUploadAbortConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*StopEC2InstanceRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*RDSDBInstance_Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*RDSDBInstanceStorage_Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentEC2Details_OtherDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_cover_optimizationrecommendation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_cover_optimizationrecommendation_proto_goTypes,
		DependencyIndexes: file_api_cover_optimizationrecommendation_proto_depIdxs,
		MessageInfos:      file_api_cover_optimizationrecommendation_proto_msgTypes,
	}.Build()
	File_api_cover_optimizationrecommendation_proto = out.File
	file_api_cover_optimizationrecommendation_proto_rawDesc = nil
	file_api_cover_optimizationrecommendation_proto_goTypes = nil
	file_api_cover_optimizationrecommendation_proto_depIdxs = nil
}
