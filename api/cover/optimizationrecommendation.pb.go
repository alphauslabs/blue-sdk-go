// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: api/cover/optimizationrecommendation.proto

package cover

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NoOfExecutedRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                           string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	NumberOfRecommendationExecuted int32  `protobuf:"varint,2,opt,name=numberOfRecommendationExecuted,proto3" json:"numberOfRecommendationExecuted,omitempty"`
}

func (x *NoOfExecutedRecommendation) Reset() {
	*x = NoOfExecutedRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoOfExecutedRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoOfExecutedRecommendation) ProtoMessage() {}

func (x *NoOfExecutedRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoOfExecutedRecommendation.ProtoReflect.Descriptor instead.
func (*NoOfExecutedRecommendation) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{0}
}

func (x *NoOfExecutedRecommendation) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *NoOfExecutedRecommendation) GetNumberOfRecommendationExecuted() int32 {
	if x != nil {
		return x.NumberOfRecommendationExecuted
	}
	return 0
}

type ExecutedRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecommendationId string  `protobuf:"bytes,1,opt,name=recommendationId,proto3" json:"recommendationId,omitempty"`
	Recommendaton    string  `protobuf:"bytes,2,opt,name=recommendaton,proto3" json:"recommendaton,omitempty"`
	Service          string  `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	CompletedDate    string  `protobuf:"bytes,4,opt,name=completedDate,proto3" json:"completedDate,omitempty"`
	EstSavings       float64 `protobuf:"fixed64,5,opt,name=estSavings,proto3" json:"estSavings,omitempty"`
	EstCost          float64 `protobuf:"fixed64,6,opt,name=estCost,proto3" json:"estCost,omitempty"`
	Vendor           string  `protobuf:"bytes,7,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Category         string  `protobuf:"bytes,8,opt,name=category,proto3" json:"category,omitempty"`
	DateAdded        string  `protobuf:"bytes,9,opt,name=dateAdded,proto3" json:"dateAdded,omitempty"`
	PersonInCharge   string  `protobuf:"bytes,10,opt,name=personInCharge,proto3" json:"personInCharge,omitempty"`
}

func (x *ExecutedRecommendationDetails) Reset() {
	*x = ExecutedRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutedRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutedRecommendationDetails) ProtoMessage() {}

func (x *ExecutedRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutedRecommendationDetails.ProtoReflect.Descriptor instead.
func (*ExecutedRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutedRecommendationDetails) GetRecommendationId() string {
	if x != nil {
		return x.RecommendationId
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetRecommendaton() string {
	if x != nil {
		return x.Recommendaton
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetCompletedDate() string {
	if x != nil {
		return x.CompletedDate
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetEstSavings() float64 {
	if x != nil {
		return x.EstSavings
	}
	return 0
}

func (x *ExecutedRecommendationDetails) GetEstCost() float64 {
	if x != nil {
		return x.EstCost
	}
	return 0
}

func (x *ExecutedRecommendationDetails) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetDateAdded() string {
	if x != nil {
		return x.DateAdded
	}
	return ""
}

func (x *ExecutedRecommendationDetails) GetPersonInCharge() string {
	if x != nil {
		return x.PersonInCharge
	}
	return ""
}

type AWSRecommendations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                               string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId                        string                            `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	AccountName                      string                            `protobuf:"bytes,3,opt,name=accountName,proto3" json:"accountName,omitempty"`
	InstanceId                       string                            `protobuf:"bytes,4,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	InstanceName                     string                            `protobuf:"bytes,5,opt,name=instanceName,proto3" json:"instanceName,omitempty"`
	Service                          string                            `protobuf:"bytes,6,opt,name=service,proto3" json:"service,omitempty"`
	Source                           string                            `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	CostGroup                        string                            `protobuf:"bytes,8,opt,name=costGroup,proto3" json:"costGroup,omitempty"`
	Recommendation                   string                            `protobuf:"bytes,9,opt,name=recommendation,proto3" json:"recommendation,omitempty"`
	Region                           string                            `protobuf:"bytes,10,opt,name=region,proto3" json:"region,omitempty"`
	Estsavings                       float64                           `protobuf:"fixed64,11,opt,name=estsavings,proto3" json:"estsavings,omitempty"`
	Estcost                          float64                           `protobuf:"fixed64,12,opt,name=estcost,proto3" json:"estcost,omitempty"`
	EstsavingsPercentage             float64                           `protobuf:"fixed64,13,opt,name=estsavingsPercentage,proto3" json:"estsavingsPercentage,omitempty"`
	ResourceArn                      string                            `protobuf:"bytes,14,opt,name=resourceArn,proto3" json:"resourceArn,omitempty"`
	RestartNeeded                    bool                              `protobuf:"varint,15,opt,name=restartNeeded,proto3" json:"restartNeeded,omitempty"`
	RollbackPossible                 bool                              `protobuf:"varint,16,opt,name=rollbackPossible,proto3" json:"rollbackPossible,omitempty"`
	PurchaseRIRecommendationDetails  *PurchaseRIRecommendationDetails  `protobuf:"bytes,17,opt,name=purchaseRIRecommendationDetails,proto3" json:"purchaseRIRecommendationDetails,omitempty"`
	SavingsPlanRecommendationDetails *SavingsPlanRecommendationDetails `protobuf:"bytes,18,opt,name=savingsPlanRecommendationDetails,proto3" json:"savingsPlanRecommendationDetails,omitempty"`
	RightSizingRecommendationDetails *RightSizingRecommendationDetails `protobuf:"bytes,19,opt,name=rightSizingRecommendationDetails,proto3" json:"rightSizingRecommendationDetails,omitempty"`
	UpgradeRecommendationDetails     *UpgradeRecommendationDetails     `protobuf:"bytes,20,opt,name=upgradeRecommendationDetails,proto3" json:"upgradeRecommendationDetails,omitempty"`
	MigrateRecommendationDetails     *MigrateRecommendationDetails     `protobuf:"bytes,21,opt,name=migrateRecommendationDetails,proto3" json:"migrateRecommendationDetails,omitempty"`
}

func (x *AWSRecommendations) Reset() {
	*x = AWSRecommendations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSRecommendations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSRecommendations) ProtoMessage() {}

func (x *AWSRecommendations) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSRecommendations.ProtoReflect.Descriptor instead.
func (*AWSRecommendations) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{2}
}

func (x *AWSRecommendations) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AWSRecommendations) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AWSRecommendations) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AWSRecommendations) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AWSRecommendations) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *AWSRecommendations) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *AWSRecommendations) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AWSRecommendations) GetCostGroup() string {
	if x != nil {
		return x.CostGroup
	}
	return ""
}

func (x *AWSRecommendations) GetRecommendation() string {
	if x != nil {
		return x.Recommendation
	}
	return ""
}

func (x *AWSRecommendations) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSRecommendations) GetEstsavings() float64 {
	if x != nil {
		return x.Estsavings
	}
	return 0
}

func (x *AWSRecommendations) GetEstcost() float64 {
	if x != nil {
		return x.Estcost
	}
	return 0
}

func (x *AWSRecommendations) GetEstsavingsPercentage() float64 {
	if x != nil {
		return x.EstsavingsPercentage
	}
	return 0
}

func (x *AWSRecommendations) GetResourceArn() string {
	if x != nil {
		return x.ResourceArn
	}
	return ""
}

func (x *AWSRecommendations) GetRestartNeeded() bool {
	if x != nil {
		return x.RestartNeeded
	}
	return false
}

func (x *AWSRecommendations) GetRollbackPossible() bool {
	if x != nil {
		return x.RollbackPossible
	}
	return false
}

func (x *AWSRecommendations) GetPurchaseRIRecommendationDetails() *PurchaseRIRecommendationDetails {
	if x != nil {
		return x.PurchaseRIRecommendationDetails
	}
	return nil
}

func (x *AWSRecommendations) GetSavingsPlanRecommendationDetails() *SavingsPlanRecommendationDetails {
	if x != nil {
		return x.SavingsPlanRecommendationDetails
	}
	return nil
}

func (x *AWSRecommendations) GetRightSizingRecommendationDetails() *RightSizingRecommendationDetails {
	if x != nil {
		return x.RightSizingRecommendationDetails
	}
	return nil
}

func (x *AWSRecommendations) GetUpgradeRecommendationDetails() *UpgradeRecommendationDetails {
	if x != nil {
		return x.UpgradeRecommendationDetails
	}
	return nil
}

func (x *AWSRecommendations) GetMigrateRecommendationDetails() *MigrateRecommendationDetails {
	if x != nil {
		return x.MigrateRecommendationDetails
	}
	return nil
}

type PurchaseRIRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ec2Options                             *EC2Details                             `protobuf:"bytes,1,opt,name=ec2Options,proto3" json:"ec2Options,omitempty"`
	ElasticCacheOptions                    *ElasticCacheDetails                    `protobuf:"bytes,2,opt,name=elasticCacheOptions,proto3" json:"elasticCacheOptions,omitempty"`
	EsOptions                              *ESDetails                              `protobuf:"bytes,3,opt,name=esOptions,proto3" json:"esOptions,omitempty"`
	RdsOptions                             *RDSDetails                             `protobuf:"bytes,4,opt,name=rdsOptions,proto3" json:"rdsOptions,omitempty"`
	RedshiftOptions                        *RedshiftDetails                        `protobuf:"bytes,5,opt,name=redshiftOptions,proto3" json:"redshiftOptions,omitempty"`
	RecommendedNormalizedUnits             int32                                   `protobuf:"varint,6,opt,name=recommendedNormalizedUnits,proto3" json:"recommendedNormalizedUnits,omitempty"`
	RecommendedNumberOfInstanceToPurchase  int32                                   `protobuf:"varint,7,opt,name=recommendedNumberOfInstanceToPurchase,proto3" json:"recommendedNumberOfInstanceToPurchase,omitempty"`
	PaymentOption                          string                                  `protobuf:"bytes,8,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	OfferingClass                          string                                  `protobuf:"bytes,9,opt,name=offeringClass,proto3" json:"offeringClass,omitempty"`
	Term                                   string                                  `protobuf:"bytes,10,opt,name=term,proto3" json:"term,omitempty"`
	UpfrontCost                            float64                                 `protobuf:"fixed64,11,opt,name=upfrontCost,proto3" json:"upfrontCost,omitempty"`
	InstanceType                           string                                  `protobuf:"bytes,12,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Platform                               string                                  `protobuf:"bytes,13,opt,name=platform,proto3" json:"platform,omitempty"`
	Region                                 string                                  `protobuf:"bytes,14,opt,name=region,proto3" json:"region,omitempty"`
	SizeFlexEligible                       bool                                    `protobuf:"varint,15,opt,name=sizeFlexEligible,proto3" json:"sizeFlexEligible,omitempty"`
	Tenancy                                string                                  `protobuf:"bytes,16,opt,name=tenancy,proto3" json:"tenancy,omitempty"`
	CurrentGeneration                      bool                                    `protobuf:"varint,17,opt,name=currentGeneration,proto3" json:"currentGeneration,omitempty"`
	EstOutcomeFromPurchaseRIRecommendation *EstOutcomeFromPurchaseRIRecommendation `protobuf:"bytes,18,opt,name=estOutcomeFromPurchaseRIRecommendation,proto3" json:"estOutcomeFromPurchaseRIRecommendation,omitempty"`
}

func (x *PurchaseRIRecommendationDetails) Reset() {
	*x = PurchaseRIRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseRIRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseRIRecommendationDetails) ProtoMessage() {}

func (x *PurchaseRIRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseRIRecommendationDetails.ProtoReflect.Descriptor instead.
func (*PurchaseRIRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{3}
}

func (x *PurchaseRIRecommendationDetails) GetEc2Options() *EC2Details {
	if x != nil {
		return x.Ec2Options
	}
	return nil
}

func (x *PurchaseRIRecommendationDetails) GetElasticCacheOptions() *ElasticCacheDetails {
	if x != nil {
		return x.ElasticCacheOptions
	}
	return nil
}

func (x *PurchaseRIRecommendationDetails) GetEsOptions() *ESDetails {
	if x != nil {
		return x.EsOptions
	}
	return nil
}

func (x *PurchaseRIRecommendationDetails) GetRdsOptions() *RDSDetails {
	if x != nil {
		return x.RdsOptions
	}
	return nil
}

func (x *PurchaseRIRecommendationDetails) GetRedshiftOptions() *RedshiftDetails {
	if x != nil {
		return x.RedshiftOptions
	}
	return nil
}

func (x *PurchaseRIRecommendationDetails) GetRecommendedNormalizedUnits() int32 {
	if x != nil {
		return x.RecommendedNormalizedUnits
	}
	return 0
}

func (x *PurchaseRIRecommendationDetails) GetRecommendedNumberOfInstanceToPurchase() int32 {
	if x != nil {
		return x.RecommendedNumberOfInstanceToPurchase
	}
	return 0
}

func (x *PurchaseRIRecommendationDetails) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *PurchaseRIRecommendationDetails) GetOfferingClass() string {
	if x != nil {
		return x.OfferingClass
	}
	return ""
}

func (x *PurchaseRIRecommendationDetails) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *PurchaseRIRecommendationDetails) GetUpfrontCost() float64 {
	if x != nil {
		return x.UpfrontCost
	}
	return 0
}

func (x *PurchaseRIRecommendationDetails) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *PurchaseRIRecommendationDetails) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PurchaseRIRecommendationDetails) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PurchaseRIRecommendationDetails) GetSizeFlexEligible() bool {
	if x != nil {
		return x.SizeFlexEligible
	}
	return false
}

func (x *PurchaseRIRecommendationDetails) GetTenancy() string {
	if x != nil {
		return x.Tenancy
	}
	return ""
}

func (x *PurchaseRIRecommendationDetails) GetCurrentGeneration() bool {
	if x != nil {
		return x.CurrentGeneration
	}
	return false
}

func (x *PurchaseRIRecommendationDetails) GetEstOutcomeFromPurchaseRIRecommendation() *EstOutcomeFromPurchaseRIRecommendation {
	if x != nil {
		return x.EstOutcomeFromPurchaseRIRecommendation
	}
	return nil
}

type EstOutcomeFromPurchaseRIRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AveUtilization                 float64 `protobuf:"fixed64,1,opt,name=aveUtilization,proto3" json:"aveUtilization,omitempty"`
	AveNormalizedUnitsUsedPerHour  float64 `protobuf:"fixed64,2,opt,name=aveNormalizedUnitsUsedPerHour,proto3" json:"aveNormalizedUnitsUsedPerHour,omitempty"`
	AveNumberofInstanceUsedPerHour float64 `protobuf:"fixed64,3,opt,name=aveNumberofInstanceUsedPerHour,proto3" json:"aveNumberofInstanceUsedPerHour,omitempty"`
	BreakEvenInMonths              float64 `protobuf:"fixed64,4,opt,name=breakEvenInMonths,proto3" json:"breakEvenInMonths,omitempty"`
	MonthlyOnDemandCost            float64 `protobuf:"fixed64,5,opt,name=monthlyOnDemandCost,proto3" json:"monthlyOnDemandCost,omitempty"`
	MonthlyRICost                  float64 `protobuf:"fixed64,6,opt,name=monthlyRICost,proto3" json:"monthlyRICost,omitempty"`
	MonthlySavings                 float64 `protobuf:"fixed64,7,opt,name=monthlySavings,proto3" json:"monthlySavings,omitempty"`
	MonthlySavingsPercentage       float64 `protobuf:"fixed64,8,opt,name=monthlySavingsPercentage,proto3" json:"monthlySavingsPercentage,omitempty"`
	MaxNormalizedUnitsUsedPerHour  float64 `protobuf:"fixed64,9,opt,name=maxNormalizedUnitsUsedPerHour,proto3" json:"maxNormalizedUnitsUsedPerHour,omitempty"`
	MaxNumberOfInstanceUsedPerHour float64 `protobuf:"fixed64,10,opt,name=maxNumberOfInstanceUsedPerHour,proto3" json:"maxNumberOfInstanceUsedPerHour,omitempty"`
	MinNormalizedUnitsUsedPerHour  float64 `protobuf:"fixed64,11,opt,name=minNormalizedUnitsUsedPerHour,proto3" json:"minNormalizedUnitsUsedPerHour,omitempty"`
	MinNumberOfInstanceUsedPerHour float64 `protobuf:"fixed64,12,opt,name=minNumberOfInstanceUsedPerHour,proto3" json:"minNumberOfInstanceUsedPerHour,omitempty"`
}

func (x *EstOutcomeFromPurchaseRIRecommendation) Reset() {
	*x = EstOutcomeFromPurchaseRIRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstOutcomeFromPurchaseRIRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstOutcomeFromPurchaseRIRecommendation) ProtoMessage() {}

func (x *EstOutcomeFromPurchaseRIRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstOutcomeFromPurchaseRIRecommendation.ProtoReflect.Descriptor instead.
func (*EstOutcomeFromPurchaseRIRecommendation) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{4}
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetAveUtilization() float64 {
	if x != nil {
		return x.AveUtilization
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetAveNormalizedUnitsUsedPerHour() float64 {
	if x != nil {
		return x.AveNormalizedUnitsUsedPerHour
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetAveNumberofInstanceUsedPerHour() float64 {
	if x != nil {
		return x.AveNumberofInstanceUsedPerHour
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetBreakEvenInMonths() float64 {
	if x != nil {
		return x.BreakEvenInMonths
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMonthlyOnDemandCost() float64 {
	if x != nil {
		return x.MonthlyOnDemandCost
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMonthlyRICost() float64 {
	if x != nil {
		return x.MonthlyRICost
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMonthlySavings() float64 {
	if x != nil {
		return x.MonthlySavings
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMonthlySavingsPercentage() float64 {
	if x != nil {
		return x.MonthlySavingsPercentage
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMaxNormalizedUnitsUsedPerHour() float64 {
	if x != nil {
		return x.MaxNormalizedUnitsUsedPerHour
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMaxNumberOfInstanceUsedPerHour() float64 {
	if x != nil {
		return x.MaxNumberOfInstanceUsedPerHour
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMinNormalizedUnitsUsedPerHour() float64 {
	if x != nil {
		return x.MinNormalizedUnitsUsedPerHour
	}
	return 0
}

func (x *EstOutcomeFromPurchaseRIRecommendation) GetMinNumberOfInstanceUsedPerHour() float64 {
	if x != nil {
		return x.MinNumberOfInstanceUsedPerHour
	}
	return 0
}

type EC2Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType string `protobuf:"bytes,1,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Tenancy      string `protobuf:"bytes,2,opt,name=tenancy,proto3" json:"tenancy,omitempty"`
	Family       string `protobuf:"bytes,3,opt,name=family,proto3" json:"family,omitempty"`
	Platform     string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *EC2Details) Reset() {
	*x = EC2Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2Details) ProtoMessage() {}

func (x *EC2Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2Details.ProtoReflect.Descriptor instead.
func (*EC2Details) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{5}
}

func (x *EC2Details) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *EC2Details) GetTenancy() string {
	if x != nil {
		return x.Tenancy
	}
	return ""
}

func (x *EC2Details) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *EC2Details) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type ElasticCacheDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family             string `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	NodeType           string `protobuf:"bytes,2,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
	ProductDescription string `protobuf:"bytes,3,opt,name=productDescription,proto3" json:"productDescription,omitempty"`
}

func (x *ElasticCacheDetails) Reset() {
	*x = ElasticCacheDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticCacheDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticCacheDetails) ProtoMessage() {}

func (x *ElasticCacheDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticCacheDetails.ProtoReflect.Descriptor instead.
func (*ElasticCacheDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{6}
}

func (x *ElasticCacheDetails) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *ElasticCacheDetails) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *ElasticCacheDetails) GetProductDescription() string {
	if x != nil {
		return x.ProductDescription
	}
	return ""
}

type ESDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceClass string `protobuf:"bytes,1,opt,name=instanceClass,proto3" json:"instanceClass,omitempty"`
	InstanceSize  string `protobuf:"bytes,2,opt,name=instanceSize,proto3" json:"instanceSize,omitempty"`
}

func (x *ESDetails) Reset() {
	*x = ESDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESDetails) ProtoMessage() {}

func (x *ESDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESDetails.ProtoReflect.Descriptor instead.
func (*ESDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{7}
}

func (x *ESDetails) GetInstanceClass() string {
	if x != nil {
		return x.InstanceClass
	}
	return ""
}

func (x *ESDetails) GetInstanceSize() string {
	if x != nil {
		return x.InstanceSize
	}
	return ""
}

type RDSDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbEdition         string `protobuf:"bytes,1,opt,name=dbEdition,proto3" json:"dbEdition,omitempty"`
	DbEngine          string `protobuf:"bytes,2,opt,name=dbEngine,proto3" json:"dbEngine,omitempty"`
	DeploymentOptions string `protobuf:"bytes,3,opt,name=deploymentOptions,proto3" json:"deploymentOptions,omitempty"`
	Family            string `protobuf:"bytes,4,opt,name=family,proto3" json:"family,omitempty"`
	InstanceType      string `protobuf:"bytes,5,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	LicenseModel      string `protobuf:"bytes,6,opt,name=licenseModel,proto3" json:"licenseModel,omitempty"`
}

func (x *RDSDetails) Reset() {
	*x = RDSDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDSDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDSDetails) ProtoMessage() {}

func (x *RDSDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDSDetails.ProtoReflect.Descriptor instead.
func (*RDSDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{8}
}

func (x *RDSDetails) GetDbEdition() string {
	if x != nil {
		return x.DbEdition
	}
	return ""
}

func (x *RDSDetails) GetDbEngine() string {
	if x != nil {
		return x.DbEngine
	}
	return ""
}

func (x *RDSDetails) GetDeploymentOptions() string {
	if x != nil {
		return x.DeploymentOptions
	}
	return ""
}

func (x *RDSDetails) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *RDSDetails) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *RDSDetails) GetLicenseModel() string {
	if x != nil {
		return x.LicenseModel
	}
	return ""
}

type RedshiftDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family   string `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	NodeType string `protobuf:"bytes,2,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
}

func (x *RedshiftDetails) Reset() {
	*x = RedshiftDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedshiftDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedshiftDetails) ProtoMessage() {}

func (x *RedshiftDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedshiftDetails.ProtoReflect.Descriptor instead.
func (*RedshiftDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{9}
}

func (x *RedshiftDetails) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *RedshiftDetails) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

type SavingsPlanRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode                   string                          `protobuf:"bytes,1,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	HourlyCommitmentToPurchase     float64                         `protobuf:"fixed64,2,opt,name=hourlyCommitmentToPurchase,proto3" json:"hourlyCommitmentToPurchase,omitempty"`
	OfferingId                     string                          `protobuf:"bytes,3,opt,name=offeringId,proto3" json:"offeringId,omitempty"`
	PaymentOption                  string                          `protobuf:"bytes,4,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	SavingsPlanType                string                          `protobuf:"bytes,5,opt,name=savingsPlanType,proto3" json:"savingsPlanType,omitempty"`
	Term                           string                          `protobuf:"bytes,6,opt,name=term,proto3" json:"term,omitempty"`
	UpfrontCost                    float64                         `protobuf:"fixed64,7,opt,name=upfrontCost,proto3" json:"upfrontCost,omitempty"`
	CurrentUtilizationDetails      *SPCurrentUtilizationDetails    `protobuf:"bytes,8,opt,name=currentUtilizationDetails,proto3" json:"currentUtilizationDetails,omitempty"`
	EstOutcomeFromSPRecommendation *EstOutcomeFromSPRecommendation `protobuf:"bytes,9,opt,name=estOutcomeFromSPRecommendation,proto3" json:"estOutcomeFromSPRecommendation,omitempty"`
}

func (x *SavingsPlanRecommendationDetails) Reset() {
	*x = SavingsPlanRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavingsPlanRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavingsPlanRecommendationDetails) ProtoMessage() {}

func (x *SavingsPlanRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavingsPlanRecommendationDetails.ProtoReflect.Descriptor instead.
func (*SavingsPlanRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{10}
}

func (x *SavingsPlanRecommendationDetails) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *SavingsPlanRecommendationDetails) GetHourlyCommitmentToPurchase() float64 {
	if x != nil {
		return x.HourlyCommitmentToPurchase
	}
	return 0
}

func (x *SavingsPlanRecommendationDetails) GetOfferingId() string {
	if x != nil {
		return x.OfferingId
	}
	return ""
}

func (x *SavingsPlanRecommendationDetails) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *SavingsPlanRecommendationDetails) GetSavingsPlanType() string {
	if x != nil {
		return x.SavingsPlanType
	}
	return ""
}

func (x *SavingsPlanRecommendationDetails) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *SavingsPlanRecommendationDetails) GetUpfrontCost() float64 {
	if x != nil {
		return x.UpfrontCost
	}
	return 0
}

func (x *SavingsPlanRecommendationDetails) GetCurrentUtilizationDetails() *SPCurrentUtilizationDetails {
	if x != nil {
		return x.CurrentUtilizationDetails
	}
	return nil
}

func (x *SavingsPlanRecommendationDetails) GetEstOutcomeFromSPRecommendation() *EstOutcomeFromSPRecommendation {
	if x != nil {
		return x.EstOutcomeFromSPRecommendation
	}
	return nil
}

type SPCurrentUtilizationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AveCoverage                         float64 `protobuf:"fixed64,1,opt,name=aveCoverage,proto3" json:"aveCoverage,omitempty"`
	AveHourOnDemandSpend                float64 `protobuf:"fixed64,2,opt,name=aveHourOnDemandSpend,proto3" json:"aveHourOnDemandSpend,omitempty"`
	MaxHourlyOndemandSpend              float64 `protobuf:"fixed64,3,opt,name=maxHourlyOndemandSpend,proto3" json:"maxHourlyOndemandSpend,omitempty"`
	MinHourlyOndemandSpend              float64 `protobuf:"fixed64,4,opt,name=minHourlyOndemandSpend,proto3" json:"minHourlyOndemandSpend,omitempty"`
	ExistingHourlyCommitment            float64 `protobuf:"fixed64,5,opt,name=existingHourlyCommitment,proto3" json:"existingHourlyCommitment,omitempty"`
	EstOnDemandCostWithHourlyCommitment float64 `protobuf:"fixed64,6,opt,name=estOnDemandCostWithHourlyCommitment,proto3" json:"estOnDemandCostWithHourlyCommitment,omitempty"`
}

func (x *SPCurrentUtilizationDetails) Reset() {
	*x = SPCurrentUtilizationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPCurrentUtilizationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPCurrentUtilizationDetails) ProtoMessage() {}

func (x *SPCurrentUtilizationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPCurrentUtilizationDetails.ProtoReflect.Descriptor instead.
func (*SPCurrentUtilizationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{11}
}

func (x *SPCurrentUtilizationDetails) GetAveCoverage() float64 {
	if x != nil {
		return x.AveCoverage
	}
	return 0
}

func (x *SPCurrentUtilizationDetails) GetAveHourOnDemandSpend() float64 {
	if x != nil {
		return x.AveHourOnDemandSpend
	}
	return 0
}

func (x *SPCurrentUtilizationDetails) GetMaxHourlyOndemandSpend() float64 {
	if x != nil {
		return x.MaxHourlyOndemandSpend
	}
	return 0
}

func (x *SPCurrentUtilizationDetails) GetMinHourlyOndemandSpend() float64 {
	if x != nil {
		return x.MinHourlyOndemandSpend
	}
	return 0
}

func (x *SPCurrentUtilizationDetails) GetExistingHourlyCommitment() float64 {
	if x != nil {
		return x.ExistingHourlyCommitment
	}
	return 0
}

func (x *SPCurrentUtilizationDetails) GetEstOnDemandCostWithHourlyCommitment() float64 {
	if x != nil {
		return x.EstOnDemandCostWithHourlyCommitment
	}
	return 0
}

type EstOutcomeFromSPRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AveCoverage          float64 `protobuf:"fixed64,1,opt,name=aveCoverage,proto3" json:"aveCoverage,omitempty"`
	AveUtilization       float64 `protobuf:"fixed64,2,opt,name=aveUtilization,proto3" json:"aveUtilization,omitempty"`
	MonthlySavingsAmount float64 `protobuf:"fixed64,3,opt,name=monthlySavingsAmount,proto3" json:"monthlySavingsAmount,omitempty"`
	OnDemandCost         float64 `protobuf:"fixed64,4,opt,name=onDemandCost,proto3" json:"onDemandCost,omitempty"`
	Roi                  float64 `protobuf:"fixed64,5,opt,name=roi,proto3" json:"roi,omitempty"`
	SavingsPlanCost      float64 `protobuf:"fixed64,6,opt,name=savingsPlanCost,proto3" json:"savingsPlanCost,omitempty"`
	SavingsPercentage    float64 `protobuf:"fixed64,7,opt,name=savingsPercentage,proto3" json:"savingsPercentage,omitempty"`
}

func (x *EstOutcomeFromSPRecommendation) Reset() {
	*x = EstOutcomeFromSPRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstOutcomeFromSPRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstOutcomeFromSPRecommendation) ProtoMessage() {}

func (x *EstOutcomeFromSPRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstOutcomeFromSPRecommendation.ProtoReflect.Descriptor instead.
func (*EstOutcomeFromSPRecommendation) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{12}
}

func (x *EstOutcomeFromSPRecommendation) GetAveCoverage() float64 {
	if x != nil {
		return x.AveCoverage
	}
	return 0
}

func (x *EstOutcomeFromSPRecommendation) GetAveUtilization() float64 {
	if x != nil {
		return x.AveUtilization
	}
	return 0
}

func (x *EstOutcomeFromSPRecommendation) GetMonthlySavingsAmount() float64 {
	if x != nil {
		return x.MonthlySavingsAmount
	}
	return 0
}

func (x *EstOutcomeFromSPRecommendation) GetOnDemandCost() float64 {
	if x != nil {
		return x.OnDemandCost
	}
	return 0
}

func (x *EstOutcomeFromSPRecommendation) GetRoi() float64 {
	if x != nil {
		return x.Roi
	}
	return 0
}

func (x *EstOutcomeFromSPRecommendation) GetSavingsPlanCost() float64 {
	if x != nil {
		return x.SavingsPlanCost
	}
	return 0
}

func (x *EstOutcomeFromSPRecommendation) GetSavingsPercentage() float64 {
	if x != nil {
		return x.SavingsPercentage
	}
	return 0
}

type RightSizingRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ec2RightSizingDetails                  *EC2RightSizingDetails                  `protobuf:"bytes,1,opt,name=ec2RightSizingDetails,proto3" json:"ec2RightSizingDetails,omitempty"`
	LambdaRightSizingRecommendationDetails *LambdaRightSizingRecommendationDetails `protobuf:"bytes,2,opt,name=lambdaRightSizingRecommendationDetails,proto3" json:"lambdaRightSizingRecommendationDetails,omitempty"`
	EstimatedMonthlyCost                   float64                                 `protobuf:"fixed64,3,opt,name=estimatedMonthlyCost,proto3" json:"estimatedMonthlyCost,omitempty"`
	EstimatedMonthlySavings                float64                                 `protobuf:"fixed64,4,opt,name=estimatedMonthlySavings,proto3" json:"estimatedMonthlySavings,omitempty"`
}

func (x *RightSizingRecommendationDetails) Reset() {
	*x = RightSizingRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RightSizingRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RightSizingRecommendationDetails) ProtoMessage() {}

func (x *RightSizingRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RightSizingRecommendationDetails.ProtoReflect.Descriptor instead.
func (*RightSizingRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{13}
}

func (x *RightSizingRecommendationDetails) GetEc2RightSizingDetails() *EC2RightSizingDetails {
	if x != nil {
		return x.Ec2RightSizingDetails
	}
	return nil
}

func (x *RightSizingRecommendationDetails) GetLambdaRightSizingRecommendationDetails() *LambdaRightSizingRecommendationDetails {
	if x != nil {
		return x.LambdaRightSizingRecommendationDetails
	}
	return nil
}

func (x *RightSizingRecommendationDetails) GetEstimatedMonthlyCost() float64 {
	if x != nil {
		return x.EstimatedMonthlyCost
	}
	return 0
}

func (x *RightSizingRecommendationDetails) GetEstimatedMonthlySavings() float64 {
	if x != nil {
		return x.EstimatedMonthlySavings
	}
	return 0
}

type EC2RightSizingDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentEC2Details              *CurrentEC2Details              `protobuf:"bytes,1,opt,name=currentEC2Details,proto3" json:"currentEC2Details,omitempty"`
	EC2ModifyRecommendationDetails *EC2ModifyRecommendationDetails `protobuf:"bytes,2,opt,name=eC2ModifyRecommendationDetails,proto3" json:"eC2ModifyRecommendationDetails,omitempty"`
}

func (x *EC2RightSizingDetails) Reset() {
	*x = EC2RightSizingDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2RightSizingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2RightSizingDetails) ProtoMessage() {}

func (x *EC2RightSizingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2RightSizingDetails.ProtoReflect.Descriptor instead.
func (*EC2RightSizingDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{14}
}

func (x *EC2RightSizingDetails) GetCurrentEC2Details() *CurrentEC2Details {
	if x != nil {
		return x.CurrentEC2Details
	}
	return nil
}

func (x *EC2RightSizingDetails) GetEC2ModifyRecommendationDetails() *EC2ModifyRecommendationDetails {
	if x != nil {
		return x.EC2ModifyRecommendationDetails
	}
	return nil
}

type CurrentEC2Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType         string                  `protobuf:"bytes,1,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Os                   string                  `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	Region               string                  `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	CpuUtilization       float64                 `protobuf:"fixed64,4,opt,name=cpuUtilization,proto3" json:"cpuUtilization,omitempty"`
	MemoryUtilization    float64                 `protobuf:"fixed64,5,opt,name=memoryUtilization,proto3" json:"memoryUtilization,omitempty"`
	DiskUtilization      float64                 `protobuf:"fixed64,6,opt,name=diskUtilization,proto3" json:"diskUtilization,omitempty"`
	NetworkCapacity      string                  `protobuf:"bytes,7,opt,name=networkCapacity,proto3" json:"networkCapacity,omitempty"`
	MonthlyCost          float64                 `protobuf:"fixed64,8,opt,name=monthlyCost,proto3" json:"monthlyCost,omitempty"`
	EC2CpuUtilization    []*EC2CpuUtilization    `protobuf:"bytes,9,rep,name=eC2CpuUtilization,proto3" json:"eC2CpuUtilization,omitempty"`
	EC2DiskUtilization   []*EC2DiskUtilization   `protobuf:"bytes,10,rep,name=eC2DiskUtilization,proto3" json:"eC2DiskUtilization,omitempty"`
	EC2MemoryUtilization []*EC2MemoryUtilization `protobuf:"bytes,11,rep,name=eC2MemoryUtilization,proto3" json:"eC2MemoryUtilization,omitempty"`
}

func (x *CurrentEC2Details) Reset() {
	*x = CurrentEC2Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentEC2Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentEC2Details) ProtoMessage() {}

func (x *CurrentEC2Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentEC2Details.ProtoReflect.Descriptor instead.
func (*CurrentEC2Details) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{15}
}

func (x *CurrentEC2Details) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *CurrentEC2Details) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *CurrentEC2Details) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CurrentEC2Details) GetCpuUtilization() float64 {
	if x != nil {
		return x.CpuUtilization
	}
	return 0
}

func (x *CurrentEC2Details) GetMemoryUtilization() float64 {
	if x != nil {
		return x.MemoryUtilization
	}
	return 0
}

func (x *CurrentEC2Details) GetDiskUtilization() float64 {
	if x != nil {
		return x.DiskUtilization
	}
	return 0
}

func (x *CurrentEC2Details) GetNetworkCapacity() string {
	if x != nil {
		return x.NetworkCapacity
	}
	return ""
}

func (x *CurrentEC2Details) GetMonthlyCost() float64 {
	if x != nil {
		return x.MonthlyCost
	}
	return 0
}

func (x *CurrentEC2Details) GetEC2CpuUtilization() []*EC2CpuUtilization {
	if x != nil {
		return x.EC2CpuUtilization
	}
	return nil
}

func (x *CurrentEC2Details) GetEC2DiskUtilization() []*EC2DiskUtilization {
	if x != nil {
		return x.EC2DiskUtilization
	}
	return nil
}

func (x *CurrentEC2Details) GetEC2MemoryUtilization() []*EC2MemoryUtilization {
	if x != nil {
		return x.EC2MemoryUtilization
	}
	return nil
}

type EC2ModifyRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType         string  `protobuf:"bytes,1,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Os                   string  `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	Region               string  `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	EstCpuUtilization    float64 `protobuf:"fixed64,4,opt,name=estCpuUtilization,proto3" json:"estCpuUtilization,omitempty"`
	EstMemoryUtilization float64 `protobuf:"fixed64,5,opt,name=estMemoryUtilization,proto3" json:"estMemoryUtilization,omitempty"`
	EstDiskUtilization   float64 `protobuf:"fixed64,6,opt,name=estDiskUtilization,proto3" json:"estDiskUtilization,omitempty"`
	EstNetworkCapacity   string  `protobuf:"bytes,7,opt,name=estNetworkCapacity,proto3" json:"estNetworkCapacity,omitempty"`
}

func (x *EC2ModifyRecommendationDetails) Reset() {
	*x = EC2ModifyRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2ModifyRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2ModifyRecommendationDetails) ProtoMessage() {}

func (x *EC2ModifyRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2ModifyRecommendationDetails.ProtoReflect.Descriptor instead.
func (*EC2ModifyRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{16}
}

func (x *EC2ModifyRecommendationDetails) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *EC2ModifyRecommendationDetails) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *EC2ModifyRecommendationDetails) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *EC2ModifyRecommendationDetails) GetEstCpuUtilization() float64 {
	if x != nil {
		return x.EstCpuUtilization
	}
	return 0
}

func (x *EC2ModifyRecommendationDetails) GetEstMemoryUtilization() float64 {
	if x != nil {
		return x.EstMemoryUtilization
	}
	return 0
}

func (x *EC2ModifyRecommendationDetails) GetEstDiskUtilization() float64 {
	if x != nil {
		return x.EstDiskUtilization
	}
	return 0
}

func (x *EC2ModifyRecommendationDetails) GetEstNetworkCapacity() string {
	if x != nil {
		return x.EstNetworkCapacity
	}
	return ""
}

type EC2CpuUtilization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EC2CpuUtilization) Reset() {
	*x = EC2CpuUtilization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2CpuUtilization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2CpuUtilization) ProtoMessage() {}

func (x *EC2CpuUtilization) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2CpuUtilization.ProtoReflect.Descriptor instead.
func (*EC2CpuUtilization) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{17}
}

func (x *EC2CpuUtilization) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *EC2CpuUtilization) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type EC2DiskUtilization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EC2DiskUtilization) Reset() {
	*x = EC2DiskUtilization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2DiskUtilization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2DiskUtilization) ProtoMessage() {}

func (x *EC2DiskUtilization) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2DiskUtilization.ProtoReflect.Descriptor instead.
func (*EC2DiskUtilization) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{18}
}

func (x *EC2DiskUtilization) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *EC2DiskUtilization) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type EC2MemoryUtilization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EC2MemoryUtilization) Reset() {
	*x = EC2MemoryUtilization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2MemoryUtilization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2MemoryUtilization) ProtoMessage() {}

func (x *EC2MemoryUtilization) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2MemoryUtilization.ProtoReflect.Descriptor instead.
func (*EC2MemoryUtilization) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{19}
}

func (x *EC2MemoryUtilization) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *EC2MemoryUtilization) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type LambdaRightSizingRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LambdaCurrentConfiguration     *LambdaDetails `protobuf:"bytes,1,opt,name=lambdaCurrentConfiguration,proto3" json:"lambdaCurrentConfiguration,omitempty"`
	LambdaRecommendedConfiguration *LambdaDetails `protobuf:"bytes,2,opt,name=lambdaRecommendedConfiguration,proto3" json:"lambdaRecommendedConfiguration,omitempty"`
}

func (x *LambdaRightSizingRecommendationDetails) Reset() {
	*x = LambdaRightSizingRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LambdaRightSizingRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LambdaRightSizingRecommendationDetails) ProtoMessage() {}

func (x *LambdaRightSizingRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LambdaRightSizingRecommendationDetails.ProtoReflect.Descriptor instead.
func (*LambdaRightSizingRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{20}
}

func (x *LambdaRightSizingRecommendationDetails) GetLambdaCurrentConfiguration() *LambdaDetails {
	if x != nil {
		return x.LambdaCurrentConfiguration
	}
	return nil
}

func (x *LambdaRightSizingRecommendationDetails) GetLambdaRecommendedConfiguration() *LambdaDetails {
	if x != nil {
		return x.LambdaRecommendedConfiguration
	}
	return nil
}

type LambdaDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Architecture      string           `protobuf:"bytes,1,opt,name=architecture,proto3" json:"architecture,omitempty"`
	MemorysizeInMB    float64          `protobuf:"fixed64,2,opt,name=memorysizeInMB,proto3" json:"memorysizeInMB,omitempty"`
	Platform          string           `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	VCpu              int32            `protobuf:"varint,4,opt,name=vCpu,proto3" json:"vCpu,omitempty"`
	CostCalculation   *CostCalculation `protobuf:"bytes,5,opt,name=costCalculation,proto3" json:"costCalculation,omitempty"`
	Apn1LambdaGBUsage *APNDetails      `protobuf:"bytes,6,opt,name=apn1LambdaGBUsage,proto3" json:"apn1LambdaGBUsage,omitempty"`
	Apn1RequestUsage  *APNDetails      `protobuf:"bytes,7,opt,name=apn1RequestUsage,proto3" json:"apn1RequestUsage,omitempty"`
}

func (x *LambdaDetails) Reset() {
	*x = LambdaDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LambdaDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LambdaDetails) ProtoMessage() {}

func (x *LambdaDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LambdaDetails.ProtoReflect.Descriptor instead.
func (*LambdaDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{21}
}

func (x *LambdaDetails) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *LambdaDetails) GetMemorysizeInMB() float64 {
	if x != nil {
		return x.MemorysizeInMB
	}
	return 0
}

func (x *LambdaDetails) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *LambdaDetails) GetVCpu() int32 {
	if x != nil {
		return x.VCpu
	}
	return 0
}

func (x *LambdaDetails) GetCostCalculation() *CostCalculation {
	if x != nil {
		return x.CostCalculation
	}
	return nil
}

func (x *LambdaDetails) GetApn1LambdaGBUsage() *APNDetails {
	if x != nil {
		return x.Apn1LambdaGBUsage
	}
	return nil
}

func (x *LambdaDetails) GetApn1RequestUsage() *APNDetails {
	if x != nil {
		return x.Apn1RequestUsage
	}
	return nil
}

type APNDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation   string  `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	ProductCode string  `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Unit        string  `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	UsageAmount float64 `protobuf:"fixed64,4,opt,name=usageAmount,proto3" json:"usageAmount,omitempty"`
	UsageType   string  `protobuf:"bytes,5,opt,name=usageType,proto3" json:"usageType,omitempty"`
}

func (x *APNDetails) Reset() {
	*x = APNDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APNDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APNDetails) ProtoMessage() {}

func (x *APNDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APNDetails.ProtoReflect.Descriptor instead.
func (*APNDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{22}
}

func (x *APNDetails) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *APNDetails) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *APNDetails) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *APNDetails) GetUsageAmount() float64 {
	if x != nil {
		return x.UsageAmount
	}
	return 0
}

func (x *APNDetails) GetUsageType() string {
	if x != nil {
		return x.UsageType
	}
	return ""
}

type CostCalculation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EstCostAfterDiscount             float64 `protobuf:"fixed64,1,opt,name=estCostAfterDiscount,proto3" json:"estCostAfterDiscount,omitempty"`
	EstCostBeforeDiscount            float64 `protobuf:"fixed64,2,opt,name=estCostBeforeDiscount,proto3" json:"estCostBeforeDiscount,omitempty"`
	OtherDiscount                    float64 `protobuf:"fixed64,3,opt,name=otherDiscount,proto3" json:"otherDiscount,omitempty"`
	SavingsPlanDiscount              float64 `protobuf:"fixed64,4,opt,name=savingsPlanDiscount,proto3" json:"savingsPlanDiscount,omitempty"`
	EstNetUnusedAmortizedCommitments float64 `protobuf:"fixed64,5,opt,name=estNetUnusedAmortizedCommitments,proto3" json:"estNetUnusedAmortizedCommitments,omitempty"`
}

func (x *CostCalculation) Reset() {
	*x = CostCalculation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostCalculation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostCalculation) ProtoMessage() {}

func (x *CostCalculation) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostCalculation.ProtoReflect.Descriptor instead.
func (*CostCalculation) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{23}
}

func (x *CostCalculation) GetEstCostAfterDiscount() float64 {
	if x != nil {
		return x.EstCostAfterDiscount
	}
	return 0
}

func (x *CostCalculation) GetEstCostBeforeDiscount() float64 {
	if x != nil {
		return x.EstCostBeforeDiscount
	}
	return 0
}

func (x *CostCalculation) GetOtherDiscount() float64 {
	if x != nil {
		return x.OtherDiscount
	}
	return 0
}

func (x *CostCalculation) GetSavingsPlanDiscount() float64 {
	if x != nil {
		return x.SavingsPlanDiscount
	}
	return 0
}

func (x *CostCalculation) GetEstNetUnusedAmortizedCommitments() float64 {
	if x != nil {
		return x.EstNetUnusedAmortizedCommitments
	}
	return 0
}

type UpgradeRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradeEC2Details *UpgradeEC2Details `protobuf:"bytes,1,opt,name=upgradeEC2Details,proto3" json:"upgradeEC2Details,omitempty"`
	UpgradeEBSDetails *UpgradeEBSDetails `protobuf:"bytes,2,opt,name=upgradeEBSDetails,proto3" json:"upgradeEBSDetails,omitempty"`
}

func (x *UpgradeRecommendationDetails) Reset() {
	*x = UpgradeRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeRecommendationDetails) ProtoMessage() {}

func (x *UpgradeRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeRecommendationDetails.ProtoReflect.Descriptor instead.
func (*UpgradeRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{24}
}

func (x *UpgradeRecommendationDetails) GetUpgradeEC2Details() *UpgradeEC2Details {
	if x != nil {
		return x.UpgradeEC2Details
	}
	return nil
}

func (x *UpgradeRecommendationDetails) GetUpgradeEBSDetails() *UpgradeEBSDetails {
	if x != nil {
		return x.UpgradeEBSDetails
	}
	return nil
}

type UpgradeEC2Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EC2CurrentDetails              *EC2UpgadeDetails `protobuf:"bytes,1,opt,name=eC2CurrentDetails,proto3" json:"eC2CurrentDetails,omitempty"`
	UgradeEC2RecommendationDetails *EC2UpgadeDetails `protobuf:"bytes,2,opt,name=ugradeEC2RecommendationDetails,proto3" json:"ugradeEC2RecommendationDetails,omitempty"`
	CurrentCostCalculation         *CostCalculation  `protobuf:"bytes,3,opt,name=currentCostCalculation,proto3" json:"currentCostCalculation,omitempty"`
	EstimatedCostCalculation       *CostCalculation  `protobuf:"bytes,4,opt,name=estimatedCostCalculation,proto3" json:"estimatedCostCalculation,omitempty"`
	EstimatedMonthlyCost           float64           `protobuf:"fixed64,5,opt,name=estimatedMonthlyCost,proto3" json:"estimatedMonthlyCost,omitempty"`
	EstimatedMonthlySavings        float64           `protobuf:"fixed64,6,opt,name=estimatedMonthlySavings,proto3" json:"estimatedMonthlySavings,omitempty"`
}

func (x *UpgradeEC2Details) Reset() {
	*x = UpgradeEC2Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeEC2Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeEC2Details) ProtoMessage() {}

func (x *UpgradeEC2Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeEC2Details.ProtoReflect.Descriptor instead.
func (*UpgradeEC2Details) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{25}
}

func (x *UpgradeEC2Details) GetEC2CurrentDetails() *EC2UpgadeDetails {
	if x != nil {
		return x.EC2CurrentDetails
	}
	return nil
}

func (x *UpgradeEC2Details) GetUgradeEC2RecommendationDetails() *EC2UpgadeDetails {
	if x != nil {
		return x.UgradeEC2RecommendationDetails
	}
	return nil
}

func (x *UpgradeEC2Details) GetCurrentCostCalculation() *CostCalculation {
	if x != nil {
		return x.CurrentCostCalculation
	}
	return nil
}

func (x *UpgradeEC2Details) GetEstimatedCostCalculation() *CostCalculation {
	if x != nil {
		return x.EstimatedCostCalculation
	}
	return nil
}

func (x *UpgradeEC2Details) GetEstimatedMonthlyCost() float64 {
	if x != nil {
		return x.EstimatedMonthlyCost
	}
	return 0
}

func (x *UpgradeEC2Details) GetEstimatedMonthlySavings() float64 {
	if x != nil {
		return x.EstimatedMonthlySavings
	}
	return 0
}

type EC2UpgadeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType string  `protobuf:"bytes,1,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Operation    string  `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	ProductCode  string  `protobuf:"bytes,3,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Unit         string  `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	UsageAmount  float64 `protobuf:"fixed64,5,opt,name=usageAmount,proto3" json:"usageAmount,omitempty"`
	UsageType    float64 `protobuf:"fixed64,6,opt,name=usageType,proto3" json:"usageType,omitempty"`
}

func (x *EC2UpgadeDetails) Reset() {
	*x = EC2UpgadeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EC2UpgadeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2UpgadeDetails) ProtoMessage() {}

func (x *EC2UpgadeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2UpgadeDetails.ProtoReflect.Descriptor instead.
func (*EC2UpgadeDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{26}
}

func (x *EC2UpgadeDetails) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *EC2UpgadeDetails) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *EC2UpgadeDetails) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *EC2UpgadeDetails) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *EC2UpgadeDetails) GetUsageAmount() float64 {
	if x != nil {
		return x.UsageAmount
	}
	return 0
}

func (x *EC2UpgadeDetails) GetUsageType() float64 {
	if x != nil {
		return x.UsageType
	}
	return 0
}

type UpgradeEBSDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentEBSDetails       *CurrentEBSDetails               `protobuf:"bytes,1,opt,name=currentEBSDetails,proto3" json:"currentEBSDetails,omitempty"`
	UpgradeEBSDetails       *UpgradeEBSRecommendationDetails `protobuf:"bytes,2,opt,name=upgradeEBSDetails,proto3" json:"upgradeEBSDetails,omitempty"`
	EstimatedMonthlyCost    float64                          `protobuf:"fixed64,3,opt,name=estimatedMonthlyCost,proto3" json:"estimatedMonthlyCost,omitempty"`
	EstimatedMonthlySavings float64                          `protobuf:"fixed64,4,opt,name=estimatedMonthlySavings,proto3" json:"estimatedMonthlySavings,omitempty"`
}

func (x *UpgradeEBSDetails) Reset() {
	*x = UpgradeEBSDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeEBSDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeEBSDetails) ProtoMessage() {}

func (x *UpgradeEBSDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeEBSDetails.ProtoReflect.Descriptor instead.
func (*UpgradeEBSDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{27}
}

func (x *UpgradeEBSDetails) GetCurrentEBSDetails() *CurrentEBSDetails {
	if x != nil {
		return x.CurrentEBSDetails
	}
	return nil
}

func (x *UpgradeEBSDetails) GetUpgradeEBSDetails() *UpgradeEBSRecommendationDetails {
	if x != nil {
		return x.UpgradeEBSDetails
	}
	return nil
}

func (x *UpgradeEBSDetails) GetEstimatedMonthlyCost() float64 {
	if x != nil {
		return x.EstimatedMonthlyCost
	}
	return 0
}

func (x *UpgradeEBSDetails) GetEstimatedMonthlySavings() float64 {
	if x != nil {
		return x.EstimatedMonthlySavings
	}
	return 0
}

type UpgradeEBSRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachmentState     string           `protobuf:"bytes,1,opt,name=attachmentState,proto3" json:"attachmentState,omitempty"`
	Iops                float64          `protobuf:"fixed64,2,opt,name=iops,proto3" json:"iops,omitempty"`
	Throughput          float64          `protobuf:"fixed64,3,opt,name=throughput,proto3" json:"throughput,omitempty"`
	SizeInGb            float64          `protobuf:"fixed64,4,opt,name=sizeInGb,proto3" json:"sizeInGb,omitempty"`
	EstcostCalculation  *CostCalculation `protobuf:"bytes,5,opt,name=EstcostCalculation,proto3" json:"EstcostCalculation,omitempty"`
	VolumeUsageGP3      *APS1EBSDetails  `protobuf:"bytes,6,opt,name=volumeUsageGP3,proto3" json:"volumeUsageGP3,omitempty"`
	VolumeIopsGP3       *APS1EBSDetails  `protobuf:"bytes,7,opt,name=volumeIopsGP3,proto3" json:"volumeIopsGP3,omitempty"`
	VolumeThroughputGP3 *APS1EBSDetails  `protobuf:"bytes,8,opt,name=volumeThroughputGP3,proto3" json:"volumeThroughputGP3,omitempty"`
}

func (x *UpgradeEBSRecommendationDetails) Reset() {
	*x = UpgradeEBSRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeEBSRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeEBSRecommendationDetails) ProtoMessage() {}

func (x *UpgradeEBSRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeEBSRecommendationDetails.ProtoReflect.Descriptor instead.
func (*UpgradeEBSRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{28}
}

func (x *UpgradeEBSRecommendationDetails) GetAttachmentState() string {
	if x != nil {
		return x.AttachmentState
	}
	return ""
}

func (x *UpgradeEBSRecommendationDetails) GetIops() float64 {
	if x != nil {
		return x.Iops
	}
	return 0
}

func (x *UpgradeEBSRecommendationDetails) GetThroughput() float64 {
	if x != nil {
		return x.Throughput
	}
	return 0
}

func (x *UpgradeEBSRecommendationDetails) GetSizeInGb() float64 {
	if x != nil {
		return x.SizeInGb
	}
	return 0
}

func (x *UpgradeEBSRecommendationDetails) GetEstcostCalculation() *CostCalculation {
	if x != nil {
		return x.EstcostCalculation
	}
	return nil
}

func (x *UpgradeEBSRecommendationDetails) GetVolumeUsageGP3() *APS1EBSDetails {
	if x != nil {
		return x.VolumeUsageGP3
	}
	return nil
}

func (x *UpgradeEBSRecommendationDetails) GetVolumeIopsGP3() *APS1EBSDetails {
	if x != nil {
		return x.VolumeIopsGP3
	}
	return nil
}

func (x *UpgradeEBSRecommendationDetails) GetVolumeThroughputGP3() *APS1EBSDetails {
	if x != nil {
		return x.VolumeThroughputGP3
	}
	return nil
}

type CurrentEBSDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachmentState string           `protobuf:"bytes,1,opt,name=attachmentState,proto3" json:"attachmentState,omitempty"`
	Iops            float64          `protobuf:"fixed64,2,opt,name=iops,proto3" json:"iops,omitempty"`
	Throughput      float64          `protobuf:"fixed64,3,opt,name=throughput,proto3" json:"throughput,omitempty"`
	SizeInGb        float64          `protobuf:"fixed64,4,opt,name=sizeInGb,proto3" json:"sizeInGb,omitempty"`
	CostCalculation *CostCalculation `protobuf:"bytes,5,opt,name=costCalculation,proto3" json:"costCalculation,omitempty"`
	VolumeUsage     *APS1EBSDetails  `protobuf:"bytes,6,opt,name=volumeUsage,proto3" json:"volumeUsage,omitempty"`
}

func (x *CurrentEBSDetails) Reset() {
	*x = CurrentEBSDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentEBSDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentEBSDetails) ProtoMessage() {}

func (x *CurrentEBSDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentEBSDetails.ProtoReflect.Descriptor instead.
func (*CurrentEBSDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{29}
}

func (x *CurrentEBSDetails) GetAttachmentState() string {
	if x != nil {
		return x.AttachmentState
	}
	return ""
}

func (x *CurrentEBSDetails) GetIops() float64 {
	if x != nil {
		return x.Iops
	}
	return 0
}

func (x *CurrentEBSDetails) GetThroughput() float64 {
	if x != nil {
		return x.Throughput
	}
	return 0
}

func (x *CurrentEBSDetails) GetSizeInGb() float64 {
	if x != nil {
		return x.SizeInGb
	}
	return 0
}

func (x *CurrentEBSDetails) GetCostCalculation() *CostCalculation {
	if x != nil {
		return x.CostCalculation
	}
	return nil
}

func (x *CurrentEBSDetails) GetVolumeUsage() *APS1EBSDetails {
	if x != nil {
		return x.VolumeUsage
	}
	return nil
}

type APS1EBSDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductCode string  `protobuf:"bytes,1,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Unit        string  `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	UsageAmount float64 `protobuf:"fixed64,3,opt,name=usageAmount,proto3" json:"usageAmount,omitempty"`
}

func (x *APS1EBSDetails) Reset() {
	*x = APS1EBSDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APS1EBSDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APS1EBSDetails) ProtoMessage() {}

func (x *APS1EBSDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APS1EBSDetails.ProtoReflect.Descriptor instead.
func (*APS1EBSDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{30}
}

func (x *APS1EBSDetails) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *APS1EBSDetails) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *APS1EBSDetails) GetUsageAmount() float64 {
	if x != nil {
		return x.UsageAmount
	}
	return 0
}

type MigrateRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MigrateEC2Details       *MigrateEC2Details `protobuf:"bytes,1,opt,name=migrateEC2Details,proto3" json:"migrateEC2Details,omitempty"`
	EstimatedMonthlyCost    float64            `protobuf:"fixed64,2,opt,name=estimatedMonthlyCost,proto3" json:"estimatedMonthlyCost,omitempty"`
	EstimatedMonthlySavings float64            `protobuf:"fixed64,3,opt,name=estimatedMonthlySavings,proto3" json:"estimatedMonthlySavings,omitempty"`
}

func (x *MigrateRecommendationDetails) Reset() {
	*x = MigrateRecommendationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateRecommendationDetails) ProtoMessage() {}

func (x *MigrateRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateRecommendationDetails.ProtoReflect.Descriptor instead.
func (*MigrateRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{31}
}

func (x *MigrateRecommendationDetails) GetMigrateEC2Details() *MigrateEC2Details {
	if x != nil {
		return x.MigrateEC2Details
	}
	return nil
}

func (x *MigrateRecommendationDetails) GetEstimatedMonthlyCost() float64 {
	if x != nil {
		return x.EstimatedMonthlyCost
	}
	return 0
}

func (x *MigrateRecommendationDetails) GetEstimatedMonthlySavings() float64 {
	if x != nil {
		return x.EstimatedMonthlySavings
	}
	return 0
}

type MigrateEC2Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EC2CurrentDetails              *EC2UpgadeDetails `protobuf:"bytes,1,opt,name=eC2CurrentDetails,proto3" json:"eC2CurrentDetails,omitempty"`
	UgradeEC2RecommendationDetails *EC2UpgadeDetails `protobuf:"bytes,2,opt,name=ugradeEC2RecommendationDetails,proto3" json:"ugradeEC2RecommendationDetails,omitempty"`
	CurrentCostCalculation         *CostCalculation  `protobuf:"bytes,3,opt,name=currentCostCalculation,proto3" json:"currentCostCalculation,omitempty"`
	EstCostCalculation             *CostCalculation  `protobuf:"bytes,4,opt,name=estCostCalculation,proto3" json:"estCostCalculation,omitempty"`
}

func (x *MigrateEC2Details) Reset() {
	*x = MigrateEC2Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateEC2Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateEC2Details) ProtoMessage() {}

func (x *MigrateEC2Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_optimizationrecommendation_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateEC2Details.ProtoReflect.Descriptor instead.
func (*MigrateEC2Details) Descriptor() ([]byte, []int) {
	return file_api_cover_optimizationrecommendation_proto_rawDescGZIP(), []int{32}
}

func (x *MigrateEC2Details) GetEC2CurrentDetails() *EC2UpgadeDetails {
	if x != nil {
		return x.EC2CurrentDetails
	}
	return nil
}

func (x *MigrateEC2Details) GetUgradeEC2RecommendationDetails() *EC2UpgadeDetails {
	if x != nil {
		return x.UgradeEC2RecommendationDetails
	}
	return nil
}

func (x *MigrateEC2Details) GetCurrentCostCalculation() *CostCalculation {
	if x != nil {
		return x.CurrentCostCalculation
	}
	return nil
}

func (x *MigrateEC2Details) GetEstCostCalculation() *CostCalculation {
	if x != nil {
		return x.EstCostCalculation
	}
	return nil
}

var File_api_cover_optimizationrecommendation_proto protoreflect.FileDescriptor

var file_api_cover_optimizationrecommendation_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x22,
	0x78, 0x0a, 0x1a, 0x4e, 0x6f, 0x4f, 0x66, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x46, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x22, 0xe5, 0x02, 0x0a, 0x1d, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x73, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x65, 0x73, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x22, 0x84, 0x09, 0x0a, 0x12, 0x41, 0x57, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x73, 0x74, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x65, 0x73, 0x74, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x73, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65,
	0x73, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x73, 0x74, 0x73, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x73, 0x74, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x7c,
	0x0a, 0x1f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x7f, 0x0a, 0x20,
	0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x20, 0x73, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x7f, 0x0a,
	0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x20, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x73,
	0x0a, 0x1c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x73, 0x0a, 0x1c, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1c, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xfb, 0x07, 0x0a, 0x1f, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0a,
	0x65, 0x63, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0a, 0x65, 0x63, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x65,
	0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6c, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x13, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x53, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x09, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x44, 0x53, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x72, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x72,
	0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e,
	0x0a, 0x1a, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1a, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x54,
	0x0a, 0x25, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x70, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x6c,
	0x65, 0x78, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x26, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x26,
	0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x05, 0x0a, 0x26, 0x45, 0x73, 0x74, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x49, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x76, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x76, 0x65, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1d, 0x61, 0x76, 0x65,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1d, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12,
	0x46, 0x0a, 0x1e, 0x61, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x61, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x6f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x4f, 0x6e, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x52, 0x49, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x49, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x44, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f,
	0x75, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x46, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1e, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12,
	0x44, 0x0a, 0x1d, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x46, 0x0a, 0x1e, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x6d,
	0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x22, 0x7e, 0x0a,
	0x0a, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x79, 0x0a,
	0x13, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x09, 0x45, 0x53, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xd4, 0x01, 0x0a, 0x0a, 0x52, 0x44, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x62, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x62, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x62, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x62, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x45, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x95, 0x04,
	0x0a, 0x20, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x68, 0x6f, 0x75, 0x72,
	0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x19,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x50, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x19, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x79, 0x0a, 0x1e, 0x65, 0x73,
	0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x50, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf1, 0x02, 0x0a, 0x1b, 0x53, 0x50, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x65, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x76, 0x65, 0x48, 0x6f,
	0x75, 0x72, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x61, 0x76, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x4f, 0x6e,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x6d,
	0x61, 0x78, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x4f, 0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6d, 0x61, 0x78,
	0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x4f, 0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79,
	0x4f, 0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x4f, 0x6e,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x23, 0x65, 0x73, 0x74, 0x4f, 0x6e,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x48, 0x6f,
	0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x23, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x43, 0x6f, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xac, 0x02, 0x0a, 0x1e, 0x45, 0x73,
	0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x50, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x76, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x76, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x76, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x6f, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x72, 0x6f, 0x69,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x84, 0x03, 0x0a, 0x20, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5e, 0x0a,
	0x15, 0x65, 0x63, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x45, 0x43, 0x32, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x15, 0x65, 0x63, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x91, 0x01,
	0x0a, 0x26, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x26, 0x6c, 0x61, 0x6d, 0x62, 0x64,
	0x61, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0xe6, 0x01, 0x0a, 0x15, 0x45, 0x43, 0x32, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x79, 0x0a,
	0x1e, 0x65, 0x43, 0x32, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x43, 0x32, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1e, 0x65, 0x43, 0x32, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xb3, 0x04, 0x0a, 0x11, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x70,
	0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x65, 0x43, 0x32, 0x43, 0x70, 0x75,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x43, 0x32, 0x43, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x43, 0x32, 0x43, 0x70, 0x75, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x12, 0x65, 0x43,
	0x32, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x43, 0x32, 0x44, 0x69,
	0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x65,
	0x43, 0x32, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5b, 0x0a, 0x14, 0x65, 0x43, 0x32, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x45, 0x43, 0x32, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x65, 0x43, 0x32, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xae,
	0x02, 0x0a, 0x1e, 0x45, 0x43, 0x32, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x65, 0x73, 0x74, 0x43, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x65, 0x73, 0x74, 0x43, 0x70, 0x75,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x12, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x65, 0x73, 0x74,
	0x44, 0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x12, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x73, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22,
	0x3d, 0x0a, 0x11, 0x45, 0x43, 0x32, 0x43, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e,
	0x0a, 0x12, 0x45, 0x43, 0x32, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x40,
	0x0a, 0x14, 0x45, 0x43, 0x32, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xf4, 0x01, 0x0a, 0x26, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x60, 0x0a, 0x1a, 0x6c,
	0x61, 0x6d, 0x62, 0x64, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x1a, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a,
	0x1e, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1e, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf1, 0x02, 0x0a, 0x0d, 0x4c, 0x61, 0x6d, 0x62,
	0x64, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x4d, 0x42, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x73, 0x69, 0x7a,
	0x65, 0x49, 0x6e, 0x4d, 0x42, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x43, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x76, 0x43, 0x70, 0x75, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x11, 0x61, 0x70, 0x6e, 0x31, 0x4c, 0x61, 0x6d, 0x62, 0x64,
	0x61, 0x47, 0x42, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x50, 0x4e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x61,
	0x70, 0x6e, 0x31, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x47, 0x42, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x49, 0x0a, 0x10, 0x61, 0x70, 0x6e, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x50, 0x4e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x10, 0x61, 0x70, 0x6e, 0x31, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0a,
	0x41, 0x50, 0x4e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9f,
	0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73,
	0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x20,
	0x65, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x72,
	0x74, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xc6, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x52, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x43, 0x32, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x43, 0x32, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x42, 0x53, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45,
	0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xfd, 0x03, 0x0a, 0x11, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x51, 0x0a, 0x11, 0x65, 0x43, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45,
	0x43, 0x32, 0x55, 0x70, 0x67, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x11, 0x65, 0x43, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x6b, 0x0a, 0x1e, 0x75, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x43, 0x32, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45,
	0x43, 0x32, 0x55, 0x70, 0x67, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x1e, 0x75, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x43, 0x32, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x5a, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x18, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x18, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x45, 0x43,
	0x32, 0x55, 0x70, 0x67, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x11,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x60, 0x0a, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x42, 0x53, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x42, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0xd8, 0x03, 0x0a, 0x1f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x42, 0x53, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x69, 0x6f,
	0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x12, 0x52,
	0x0a, 0x12, 0x45, 0x73, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x45, 0x73, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x47, 0x50, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x50, 0x53, 0x31, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47, 0x50, 0x33, 0x12, 0x47, 0x0a,
	0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x47, 0x50, 0x33, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x50, 0x53, 0x31, 0x45, 0x42, 0x53,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x6f, 0x70, 0x73, 0x47, 0x50, 0x33, 0x12, 0x53, 0x0a, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x47, 0x50, 0x33, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x50, 0x53, 0x31, 0x45, 0x42, 0x53, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x47, 0x50, 0x33, 0x22, 0xa0, 0x02, 0x0a, 0x11,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x12, 0x4c, 0x0a, 0x0f, 0x63,
	0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0b, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x50, 0x53, 0x31, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x68,
	0x0a, 0x0e, 0x41, 0x50, 0x53, 0x31, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x1c, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x83, 0x03, 0x0a, 0x11,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x51, 0x0a, 0x11, 0x65, 0x43, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x45, 0x43, 0x32, 0x55, 0x70, 0x67, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x11, 0x65, 0x43, 0x32, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x6b, 0x0a, 0x1e, 0x75, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x43,
	0x32, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x45, 0x43, 0x32, 0x55, 0x70, 0x67, 0x61, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x1e, 0x75, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x43, 0x32, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x5a, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x12, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x78, 0x0a, 0x1f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x75, 0x73, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x42, 0x27, 0x41, 0x70, 0x69, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x2c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75,
	0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_cover_optimizationrecommendation_proto_rawDescOnce sync.Once
	file_api_cover_optimizationrecommendation_proto_rawDescData = file_api_cover_optimizationrecommendation_proto_rawDesc
)

func file_api_cover_optimizationrecommendation_proto_rawDescGZIP() []byte {
	file_api_cover_optimizationrecommendation_proto_rawDescOnce.Do(func() {
		file_api_cover_optimizationrecommendation_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_cover_optimizationrecommendation_proto_rawDescData)
	})
	return file_api_cover_optimizationrecommendation_proto_rawDescData
}

var file_api_cover_optimizationrecommendation_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_api_cover_optimizationrecommendation_proto_goTypes = []interface{}{
	(*NoOfExecutedRecommendation)(nil),             // 0: blueapi.api.cover.NoOfExecutedRecommendation
	(*ExecutedRecommendationDetails)(nil),          // 1: blueapi.api.cover.ExecutedRecommendationDetails
	(*AWSRecommendations)(nil),                     // 2: blueapi.api.cover.AWSRecommendations
	(*PurchaseRIRecommendationDetails)(nil),        // 3: blueapi.api.cover.PurchaseRIRecommendationDetails
	(*EstOutcomeFromPurchaseRIRecommendation)(nil), // 4: blueapi.api.cover.EstOutcomeFromPurchaseRIRecommendation
	(*EC2Details)(nil),                             // 5: blueapi.api.cover.EC2Details
	(*ElasticCacheDetails)(nil),                    // 6: blueapi.api.cover.ElasticCacheDetails
	(*ESDetails)(nil),                              // 7: blueapi.api.cover.ESDetails
	(*RDSDetails)(nil),                             // 8: blueapi.api.cover.RDSDetails
	(*RedshiftDetails)(nil),                        // 9: blueapi.api.cover.RedshiftDetails
	(*SavingsPlanRecommendationDetails)(nil),       // 10: blueapi.api.cover.SavingsPlanRecommendationDetails
	(*SPCurrentUtilizationDetails)(nil),            // 11: blueapi.api.cover.SPCurrentUtilizationDetails
	(*EstOutcomeFromSPRecommendation)(nil),         // 12: blueapi.api.cover.EstOutcomeFromSPRecommendation
	(*RightSizingRecommendationDetails)(nil),       // 13: blueapi.api.cover.RightSizingRecommendationDetails
	(*EC2RightSizingDetails)(nil),                  // 14: blueapi.api.cover.EC2rightSizingDetails
	(*CurrentEC2Details)(nil),                      // 15: blueapi.api.cover.CurrentEC2Details
	(*EC2ModifyRecommendationDetails)(nil),         // 16: blueapi.api.cover.EC2ModifyRecommendationDetails
	(*EC2CpuUtilization)(nil),                      // 17: blueapi.api.cover.EC2CpuUtilization
	(*EC2DiskUtilization)(nil),                     // 18: blueapi.api.cover.EC2DiskUtilization
	(*EC2MemoryUtilization)(nil),                   // 19: blueapi.api.cover.EC2MemoryUtilization
	(*LambdaRightSizingRecommendationDetails)(nil), // 20: blueapi.api.cover.LambdaRightSizingRecommendationDetails
	(*LambdaDetails)(nil),                          // 21: blueapi.api.cover.LambdaDetails
	(*APNDetails)(nil),                             // 22: blueapi.api.cover.APNDetails
	(*CostCalculation)(nil),                        // 23: blueapi.api.cover.CostCalculation
	(*UpgradeRecommendationDetails)(nil),           // 24: blueapi.api.cover.UpgradeRecommendationDetails
	(*UpgradeEC2Details)(nil),                      // 25: blueapi.api.cover.UpgradeEC2Details
	(*EC2UpgadeDetails)(nil),                       // 26: blueapi.api.cover.EC2UpgadeDetails
	(*UpgradeEBSDetails)(nil),                      // 27: blueapi.api.cover.UpgradeEBSDetails
	(*UpgradeEBSRecommendationDetails)(nil),        // 28: blueapi.api.cover.UpgradeEBSRecommendationDetails
	(*CurrentEBSDetails)(nil),                      // 29: blueapi.api.cover.CurrentEBSDetails
	(*APS1EBSDetails)(nil),                         // 30: blueapi.api.cover.APS1EBSDetails
	(*MigrateRecommendationDetails)(nil),           // 31: blueapi.api.cover.MigrateRecommendationDetails
	(*MigrateEC2Details)(nil),                      // 32: blueapi.api.cover.MigrateEC2Details
}
var file_api_cover_optimizationrecommendation_proto_depIdxs = []int32{
	3,  // 0: blueapi.api.cover.AWSRecommendations.purchaseRIRecommendationDetails:type_name -> blueapi.api.cover.PurchaseRIRecommendationDetails
	10, // 1: blueapi.api.cover.AWSRecommendations.savingsPlanRecommendationDetails:type_name -> blueapi.api.cover.SavingsPlanRecommendationDetails
	13, // 2: blueapi.api.cover.AWSRecommendations.rightSizingRecommendationDetails:type_name -> blueapi.api.cover.RightSizingRecommendationDetails
	24, // 3: blueapi.api.cover.AWSRecommendations.upgradeRecommendationDetails:type_name -> blueapi.api.cover.UpgradeRecommendationDetails
	31, // 4: blueapi.api.cover.AWSRecommendations.migrateRecommendationDetails:type_name -> blueapi.api.cover.MigrateRecommendationDetails
	5,  // 5: blueapi.api.cover.PurchaseRIRecommendationDetails.ec2Options:type_name -> blueapi.api.cover.EC2Details
	6,  // 6: blueapi.api.cover.PurchaseRIRecommendationDetails.elasticCacheOptions:type_name -> blueapi.api.cover.ElasticCacheDetails
	7,  // 7: blueapi.api.cover.PurchaseRIRecommendationDetails.esOptions:type_name -> blueapi.api.cover.ESDetails
	8,  // 8: blueapi.api.cover.PurchaseRIRecommendationDetails.rdsOptions:type_name -> blueapi.api.cover.RDSDetails
	9,  // 9: blueapi.api.cover.PurchaseRIRecommendationDetails.redshiftOptions:type_name -> blueapi.api.cover.RedshiftDetails
	4,  // 10: blueapi.api.cover.PurchaseRIRecommendationDetails.estOutcomeFromPurchaseRIRecommendation:type_name -> blueapi.api.cover.EstOutcomeFromPurchaseRIRecommendation
	11, // 11: blueapi.api.cover.SavingsPlanRecommendationDetails.currentUtilizationDetails:type_name -> blueapi.api.cover.SPCurrentUtilizationDetails
	12, // 12: blueapi.api.cover.SavingsPlanRecommendationDetails.estOutcomeFromSPRecommendation:type_name -> blueapi.api.cover.EstOutcomeFromSPRecommendation
	14, // 13: blueapi.api.cover.RightSizingRecommendationDetails.ec2RightSizingDetails:type_name -> blueapi.api.cover.EC2rightSizingDetails
	20, // 14: blueapi.api.cover.RightSizingRecommendationDetails.lambdaRightSizingRecommendationDetails:type_name -> blueapi.api.cover.LambdaRightSizingRecommendationDetails
	15, // 15: blueapi.api.cover.EC2rightSizingDetails.currentEC2Details:type_name -> blueapi.api.cover.CurrentEC2Details
	16, // 16: blueapi.api.cover.EC2rightSizingDetails.eC2ModifyRecommendationDetails:type_name -> blueapi.api.cover.EC2ModifyRecommendationDetails
	17, // 17: blueapi.api.cover.CurrentEC2Details.eC2CpuUtilization:type_name -> blueapi.api.cover.EC2CpuUtilization
	18, // 18: blueapi.api.cover.CurrentEC2Details.eC2DiskUtilization:type_name -> blueapi.api.cover.EC2DiskUtilization
	19, // 19: blueapi.api.cover.CurrentEC2Details.eC2MemoryUtilization:type_name -> blueapi.api.cover.EC2MemoryUtilization
	21, // 20: blueapi.api.cover.LambdaRightSizingRecommendationDetails.lambdaCurrentConfiguration:type_name -> blueapi.api.cover.LambdaDetails
	21, // 21: blueapi.api.cover.LambdaRightSizingRecommendationDetails.lambdaRecommendedConfiguration:type_name -> blueapi.api.cover.LambdaDetails
	23, // 22: blueapi.api.cover.LambdaDetails.costCalculation:type_name -> blueapi.api.cover.CostCalculation
	22, // 23: blueapi.api.cover.LambdaDetails.apn1LambdaGBUsage:type_name -> blueapi.api.cover.APNDetails
	22, // 24: blueapi.api.cover.LambdaDetails.apn1RequestUsage:type_name -> blueapi.api.cover.APNDetails
	25, // 25: blueapi.api.cover.UpgradeRecommendationDetails.upgradeEC2Details:type_name -> blueapi.api.cover.UpgradeEC2Details
	27, // 26: blueapi.api.cover.UpgradeRecommendationDetails.upgradeEBSDetails:type_name -> blueapi.api.cover.UpgradeEBSDetails
	26, // 27: blueapi.api.cover.UpgradeEC2Details.eC2CurrentDetails:type_name -> blueapi.api.cover.EC2UpgadeDetails
	26, // 28: blueapi.api.cover.UpgradeEC2Details.ugradeEC2RecommendationDetails:type_name -> blueapi.api.cover.EC2UpgadeDetails
	23, // 29: blueapi.api.cover.UpgradeEC2Details.currentCostCalculation:type_name -> blueapi.api.cover.CostCalculation
	23, // 30: blueapi.api.cover.UpgradeEC2Details.estimatedCostCalculation:type_name -> blueapi.api.cover.CostCalculation
	29, // 31: blueapi.api.cover.UpgradeEBSDetails.currentEBSDetails:type_name -> blueapi.api.cover.CurrentEBSDetails
	28, // 32: blueapi.api.cover.UpgradeEBSDetails.upgradeEBSDetails:type_name -> blueapi.api.cover.UpgradeEBSRecommendationDetails
	23, // 33: blueapi.api.cover.UpgradeEBSRecommendationDetails.EstcostCalculation:type_name -> blueapi.api.cover.CostCalculation
	30, // 34: blueapi.api.cover.UpgradeEBSRecommendationDetails.volumeUsageGP3:type_name -> blueapi.api.cover.APS1EBSDetails
	30, // 35: blueapi.api.cover.UpgradeEBSRecommendationDetails.volumeIopsGP3:type_name -> blueapi.api.cover.APS1EBSDetails
	30, // 36: blueapi.api.cover.UpgradeEBSRecommendationDetails.volumeThroughputGP3:type_name -> blueapi.api.cover.APS1EBSDetails
	23, // 37: blueapi.api.cover.CurrentEBSDetails.costCalculation:type_name -> blueapi.api.cover.CostCalculation
	30, // 38: blueapi.api.cover.CurrentEBSDetails.volumeUsage:type_name -> blueapi.api.cover.APS1EBSDetails
	32, // 39: blueapi.api.cover.MigrateRecommendationDetails.migrateEC2Details:type_name -> blueapi.api.cover.MigrateEC2Details
	26, // 40: blueapi.api.cover.MigrateEC2Details.eC2CurrentDetails:type_name -> blueapi.api.cover.EC2UpgadeDetails
	26, // 41: blueapi.api.cover.MigrateEC2Details.ugradeEC2RecommendationDetails:type_name -> blueapi.api.cover.EC2UpgadeDetails
	23, // 42: blueapi.api.cover.MigrateEC2Details.currentCostCalculation:type_name -> blueapi.api.cover.CostCalculation
	23, // 43: blueapi.api.cover.MigrateEC2Details.estCostCalculation:type_name -> blueapi.api.cover.CostCalculation
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_api_cover_optimizationrecommendation_proto_init() }
func file_api_cover_optimizationrecommendation_proto_init() {
	if File_api_cover_optimizationrecommendation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_cover_optimizationrecommendation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoOfExecutedRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutedRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSRecommendations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseRIRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstOutcomeFromPurchaseRIRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EC2Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticCacheDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RDSDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedshiftDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavingsPlanRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPCurrentUtilizationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstOutcomeFromSPRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RightSizingRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EC2RightSizingDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentEC2Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EC2ModifyRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EC2CpuUtilization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EC2DiskUtilization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EC2MemoryUtilization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LambdaRightSizingRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LambdaDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APNDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostCalculation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeEC2Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EC2UpgadeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeEBSDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeEBSRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentEBSDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APS1EBSDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateRecommendationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cover_optimizationrecommendation_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateEC2Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_cover_optimizationrecommendation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_cover_optimizationrecommendation_proto_goTypes,
		DependencyIndexes: file_api_cover_optimizationrecommendation_proto_depIdxs,
		MessageInfos:      file_api_cover_optimizationrecommendation_proto_msgTypes,
	}.Build()
	File_api_cover_optimizationrecommendation_proto = out.File
	file_api_cover_optimizationrecommendation_proto_rawDesc = nil
	file_api_cover_optimizationrecommendation_proto_goTypes = nil
	file_api_cover_optimizationrecommendation_proto_depIdxs = nil
}
