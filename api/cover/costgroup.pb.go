// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/cover/costgroup.proto

package cover

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CostGroupData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Image          string                 `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Icon           string                 `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	ColorTheme     string                 `protobuf:"bytes,6,opt,name=colorTheme,proto3" json:"colorTheme,omitempty"`
	CreatedAt      string                 `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt      string                 `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Members        []*MemberUserData      `protobuf:"bytes,9,rep,name=members,proto3" json:"members,omitempty"`
	Combinations   *Combinations          `protobuf:"bytes,10,opt,name=combinations,proto3" json:"combinations,omitempty"`
	CreatedBy      *MemberUserData        `protobuf:"bytes,11,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	EventIndicator *EventIndicator        `protobuf:"bytes,12,opt,name=eventIndicator,proto3" json:"eventIndicator,omitempty"`
	AnomalyOptions *AnomalyOptions        `protobuf:"bytes,13,opt,name=anomalyOptions,proto3" json:"anomalyOptions,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CostGroupData) Reset() {
	*x = CostGroupData{}
	mi := &file_api_cover_costgroup_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostGroupData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostGroupData) ProtoMessage() {}

func (x *CostGroupData) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_costgroup_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostGroupData.ProtoReflect.Descriptor instead.
func (*CostGroupData) Descriptor() ([]byte, []int) {
	return file_api_cover_costgroup_proto_rawDescGZIP(), []int{0}
}

func (x *CostGroupData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CostGroupData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CostGroupData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CostGroupData) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CostGroupData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *CostGroupData) GetColorTheme() string {
	if x != nil {
		return x.ColorTheme
	}
	return ""
}

func (x *CostGroupData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CostGroupData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *CostGroupData) GetMembers() []*MemberUserData {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CostGroupData) GetCombinations() *Combinations {
	if x != nil {
		return x.Combinations
	}
	return nil
}

func (x *CostGroupData) GetCreatedBy() *MemberUserData {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *CostGroupData) GetEventIndicator() *EventIndicator {
	if x != nil {
		return x.EventIndicator
	}
	return nil
}

func (x *CostGroupData) GetAnomalyOptions() *AnomalyOptions {
	if x != nil {
		return x.AnomalyOptions
	}
	return nil
}

type Combinations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Valid only for the `aws` vendor. AWS-specific options.
	AwsOptions *CostGroupAwsOptions `protobuf:"bytes,1,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
	// Optional. Valid only for the `azure` vendor. Azure-specific options.
	AzureOptions *CostGroupAzureOptions `protobuf:"bytes,2,opt,name=azureOptions,proto3" json:"azureOptions,omitempty"`
	// Optional. Valid only for the `gcp` vendor. GCP-specific options.
	GcpOptions *CostGroupGcpOptions `protobuf:"bytes,3,opt,name=gcpOptions,proto3" json:"gcpOptions,omitempty"`
	// Optional. Valid only for the `azurecsp` vendor. AzureCSP-specific options.
	AzurecspOptions *CostGroupAzureCspOptions `protobuf:"bytes,4,opt,name=azurecspOptions,proto3" json:"azurecspOptions,omitempty"`
	// Optional. For custom selection when creating cost groups.
	// This field allows custom options for specifying criteria for cost group creation.
	CustomOptions *CostGroupCustomOptions `protobuf:"bytes,5,opt,name=customOptions,proto3" json:"customOptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Combinations) Reset() {
	*x = Combinations{}
	mi := &file_api_cover_costgroup_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Combinations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Combinations) ProtoMessage() {}

func (x *Combinations) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_costgroup_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Combinations.ProtoReflect.Descriptor instead.
func (*Combinations) Descriptor() ([]byte, []int) {
	return file_api_cover_costgroup_proto_rawDescGZIP(), []int{1}
}

func (x *Combinations) GetAwsOptions() *CostGroupAwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

func (x *Combinations) GetAzureOptions() *CostGroupAzureOptions {
	if x != nil {
		return x.AzureOptions
	}
	return nil
}

func (x *Combinations) GetGcpOptions() *CostGroupGcpOptions {
	if x != nil {
		return x.GcpOptions
	}
	return nil
}

func (x *Combinations) GetAzurecspOptions() *CostGroupAzureCspOptions {
	if x != nil {
		return x.AzurecspOptions
	}
	return nil
}

func (x *Combinations) GetCustomOptions() *CostGroupCustomOptions {
	if x != nil {
		return x.CustomOptions
	}
	return nil
}

// AWS-specific options for CreateCostGroupRequest.
type CostGroupAwsOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	// A map of "key:value" column filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
	//
	// For example, if you like to filter `productCode` to return only `AmazonEC2`, set to `{"productCode":"eq:AmazonEC2"}` or `{"productCode":"AmazonEC2"}`. You can also use a regular expression like `{"productCode":"re:AmazonEC2|AmazonRDS"}`, which means return all AmazonEC2 or AmazonRDS lineitems. Or reverse regexp, such as `{"productCode":"!re:^AmazonEC2$"}`, which means return all items except `AmazonEC2`.
	Filters []*CostGroupOptionsFilters `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	// A map of "key:value" tag filters. The key indicates the tag key while the value is the filter tag value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
	//
	// For example, if you want to query lineitems with the tag `project:MY_PROJECT`, set to `{"project":"MY_PROJECT"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
	TagFilters    []*CostGroupOptionsFilters `protobuf:"bytes,2,rep,name=tagFilters,proto3" json:"tagFilters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CostGroupAwsOptions) Reset() {
	*x = CostGroupAwsOptions{}
	mi := &file_api_cover_costgroup_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostGroupAwsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostGroupAwsOptions) ProtoMessage() {}

func (x *CostGroupAwsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_costgroup_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostGroupAwsOptions.ProtoReflect.Descriptor instead.
func (*CostGroupAwsOptions) Descriptor() ([]byte, []int) {
	return file_api_cover_costgroup_proto_rawDescGZIP(), []int{2}
}

func (x *CostGroupAwsOptions) GetFilters() []*CostGroupOptionsFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *CostGroupAwsOptions) GetTagFilters() []*CostGroupOptionsFilters {
	if x != nil {
		return x.TagFilters
	}
	return nil
}

// Azure-specific options for CreateCostGroupRequest.
type CostGroupAzureOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	// A map of "key:value" column filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
	//
	// For example, if you like to filter `productCode` to return only `AmazonEC2`, set to `{"productCode":"eq:AmazonEC2"}` or `{"productCode":"AmazonEC2"}`. You can also use a regular expression like `{"productCode":"re:AmazonEC2|AmazonRDS"}`, which means return all AmazonEC2 or AmazonRDS lineitems. Or reverse regexp, such as `{"productCode":"!re:^AmazonEC2$"}`, which means return all items except `AmazonEC2`.
	Filters []*CostGroupOptionsFilters `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	// A map of "key:value" tag filters. The key indicates the tag key while the value is the filter tag value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
	//
	// For example, if you want to query lineitems with the tag `project:MY_PROJECT`, set to `{"project":"MY_PROJECT"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
	TagFilters    []*CostGroupOptionsFilters `protobuf:"bytes,2,rep,name=tagFilters,proto3" json:"tagFilters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CostGroupAzureOptions) Reset() {
	*x = CostGroupAzureOptions{}
	mi := &file_api_cover_costgroup_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostGroupAzureOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostGroupAzureOptions) ProtoMessage() {}

func (x *CostGroupAzureOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_costgroup_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostGroupAzureOptions.ProtoReflect.Descriptor instead.
func (*CostGroupAzureOptions) Descriptor() ([]byte, []int) {
	return file_api_cover_costgroup_proto_rawDescGZIP(), []int{3}
}

func (x *CostGroupAzureOptions) GetFilters() []*CostGroupOptionsFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *CostGroupAzureOptions) GetTagFilters() []*CostGroupOptionsFilters {
	if x != nil {
		return x.TagFilters
	}
	return nil
}

// AzureCsp-specific options for CreateCostGroupRequest.
type CostGroupAzureCspOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	// A map of "key:value" column filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
	//
	// For example, if you like to filter `productCode` to return only `AmazonEC2`, set to `{"productCode":"eq:AmazonEC2"}` or `{"productCode":"AmazonEC2"}`. You can also use a regular expression like `{"productCode":"re:AmazonEC2|AmazonRDS"}`, which means return all AmazonEC2 or AmazonRDS lineitems. Or reverse regexp, such as `{"productCode":"!re:^AmazonEC2$"}`, which means return all items except `AmazonEC2`.
	Filters []*CostGroupOptionsFilters `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	// A map of "key:value" tag filters. The key indicates the tag key while the value is the filter tag value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
	//
	// For example, if you want to query lineitems with the tag `project:MY_PROJECT`, set to `{"project":"MY_PROJECT"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
	TagFilters    []*CostGroupOptionsFilters `protobuf:"bytes,2,rep,name=tagFilters,proto3" json:"tagFilters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CostGroupAzureCspOptions) Reset() {
	*x = CostGroupAzureCspOptions{}
	mi := &file_api_cover_costgroup_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostGroupAzureCspOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostGroupAzureCspOptions) ProtoMessage() {}

func (x *CostGroupAzureCspOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_costgroup_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostGroupAzureCspOptions.ProtoReflect.Descriptor instead.
func (*CostGroupAzureCspOptions) Descriptor() ([]byte, []int) {
	return file_api_cover_costgroup_proto_rawDescGZIP(), []int{4}
}

func (x *CostGroupAzureCspOptions) GetFilters() []*CostGroupOptionsFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *CostGroupAzureCspOptions) GetTagFilters() []*CostGroupOptionsFilters {
	if x != nil {
		return x.TagFilters
	}
	return nil
}

// GCP-specific options for CreateCostGroupRequest.
type CostGroupGcpOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	// A map of "key:value" column filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
	//
	// For example, if you like to filter `serviceDescriptinon` to return only `Cloud Spanner`, set to `{"serviceDescription":"eq:Cloud Spanner"}` or `{"serviceDescription":"Cloud Spanner"}`. You can also use a regular expression like `{"serviceDescription":"re:Cloud Spanner|BigQuery"}`, which means return all Cloud Spanner or BigQuery lineitems. Or reverse regexp, such as `{"serviceDescription":"!re:^Cloud Spanner$"}`, which means return all items except `Cloud Spanner`.
	Filters []*CostGroupOptionsFilters `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	// Tags on gcp used to conditionally allow or deny policies based on whether a supported resource has a specific tag.
	// Suppose you have a set of virtual machines (VMs) running various applications, and you want to distinguish between them based on their roles. You could assign tags like "app:webserver" and "app:database" to identify which VMs serve as web servers and which ones are database servers.
	// If you want to query lineitems with the tag `app:database`, set to `{"app":"database"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
	TagFilters []*CostGroupOptionsFilters `protobuf:"bytes,2,rep,name=tagFilters,proto3" json:"tagFilters,omitempty"`
	// Labels on gcp help you organize resources and manage your costs at scale, with the granularity you need.
	// For example, on Compute Engine, you can use labels to group VMs in categories such as production, staging, or development so that you can search for resources that belong to each development stage.
	// If you want to query lineitems with the label `vm-prod: prod`, set to `{"vm-prod":"prod"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
	LabelFilters []*CostGroupOptionsFilters `protobuf:"bytes,3,rep,name=labelFilters,proto3" json:"labelFilters,omitempty"`
	// Project Labels refers to labels that have been assigned to GCP projects.
	// For example, projectId "mobingi-main" assigned as "env:prod"
	// If you want to query lineitems with the label `env: prod`, set to `{"env":"prod"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
	ProjectLabelFilters []*CostGroupOptionsFilters `protobuf:"bytes,4,rep,name=projectLabelFilters,proto3" json:"projectLabelFilters,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CostGroupGcpOptions) Reset() {
	*x = CostGroupGcpOptions{}
	mi := &file_api_cover_costgroup_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostGroupGcpOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostGroupGcpOptions) ProtoMessage() {}

func (x *CostGroupGcpOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_costgroup_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostGroupGcpOptions.ProtoReflect.Descriptor instead.
func (*CostGroupGcpOptions) Descriptor() ([]byte, []int) {
	return file_api_cover_costgroup_proto_rawDescGZIP(), []int{5}
}

func (x *CostGroupGcpOptions) GetFilters() []*CostGroupOptionsFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *CostGroupGcpOptions) GetTagFilters() []*CostGroupOptionsFilters {
	if x != nil {
		return x.TagFilters
	}
	return nil
}

func (x *CostGroupGcpOptions) GetLabelFilters() []*CostGroupOptionsFilters {
	if x != nil {
		return x.LabelFilters
	}
	return nil
}

func (x *CostGroupGcpOptions) GetProjectLabelFilters() []*CostGroupOptionsFilters {
	if x != nil {
		return x.ProjectLabelFilters
	}
	return nil
}

// Custom-specific options for CreateCostGroupRequest.
type CostGroupCustomOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	Filters []*CostGroupOptionsFilters `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	// A map of "key:value" tag filters. The key indicates the tag key while the value is the filter tag value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
	//
	// For example, if you want to query lineitems with the tag `project:MY_PROJECT`, set to `{"project":"MY_PROJECT"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
	TagFilters []*CostGroupOptionsFilters `protobuf:"bytes,2,rep,name=tagFilters,proto3" json:"tagFilters,omitempty"`
	// Labels on gcp help you organize resources and manage your costs at scale, with the granularity you need.
	// For example, on Compute Engine, you can use labels to group VMs in categories such as production, staging, or development so that you can search for resources that belong to each development stage.
	// If you want to query lineitems with the label `vm-prod: prod`, set to `{"vm-prod":"prod"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
	LabelFilters []*CostGroupOptionsFilters `protobuf:"bytes,3,rep,name=labelFilters,proto3" json:"labelFilters,omitempty"`
	// Project Labels refers to labels that have been assigned to GCP projects.
	// For example, projectId "mobingi-main" assigned as "env:prod"
	// If you want to query lineitems with the label `env: prod`, set to `{"env":"prod"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
	ProjectLabelFilters []*CostGroupOptionsFilters `protobuf:"bytes,4,rep,name=projectLabelFilters,proto3" json:"projectLabelFilters,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CostGroupCustomOptions) Reset() {
	*x = CostGroupCustomOptions{}
	mi := &file_api_cover_costgroup_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostGroupCustomOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostGroupCustomOptions) ProtoMessage() {}

func (x *CostGroupCustomOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_costgroup_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostGroupCustomOptions.ProtoReflect.Descriptor instead.
func (*CostGroupCustomOptions) Descriptor() ([]byte, []int) {
	return file_api_cover_costgroup_proto_rawDescGZIP(), []int{6}
}

func (x *CostGroupCustomOptions) GetFilters() []*CostGroupOptionsFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *CostGroupCustomOptions) GetTagFilters() []*CostGroupOptionsFilters {
	if x != nil {
		return x.TagFilters
	}
	return nil
}

func (x *CostGroupCustomOptions) GetLabelFilters() []*CostGroupOptionsFilters {
	if x != nil {
		return x.LabelFilters
	}
	return nil
}

func (x *CostGroupCustomOptions) GetProjectLabelFilters() []*CostGroupOptionsFilters {
	if x != nil {
		return x.ProjectLabelFilters
	}
	return nil
}

type CostGroupOptionsFilters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AndFilters    map[string]string      `protobuf:"bytes,1,rep,name=andFilters,proto3" json:"andFilters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CostGroupOptionsFilters) Reset() {
	*x = CostGroupOptionsFilters{}
	mi := &file_api_cover_costgroup_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostGroupOptionsFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostGroupOptionsFilters) ProtoMessage() {}

func (x *CostGroupOptionsFilters) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_costgroup_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostGroupOptionsFilters.ProtoReflect.Descriptor instead.
func (*CostGroupOptionsFilters) Descriptor() ([]byte, []int) {
	return file_api_cover_costgroup_proto_rawDescGZIP(), []int{7}
}

func (x *CostGroupOptionsFilters) GetAndFilters() map[string]string {
	if x != nil {
		return x.AndFilters
	}
	return nil
}

type Account struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"` // account, subscription, project
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_api_cover_costgroup_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_costgroup_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_api_cover_costgroup_proto_rawDescGZIP(), []int{8}
}

func (x *Account) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Account) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Account) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type EventIndicator struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Anomaly is supported for now
	Anomaly bool `protobuf:"varint,1,opt,name=anomaly,proto3" json:"anomaly,omitempty"`
	// Temporary indicator if cost group was created via new visual builder
	VisualBuilder bool `protobuf:"varint,2,opt,name=visualBuilder,proto3" json:"visualBuilder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventIndicator) Reset() {
	*x = EventIndicator{}
	mi := &file_api_cover_costgroup_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventIndicator) ProtoMessage() {}

func (x *EventIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_costgroup_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventIndicator.ProtoReflect.Descriptor instead.
func (*EventIndicator) Descriptor() ([]byte, []int) {
	return file_api_cover_costgroup_proto_rawDescGZIP(), []int{9}
}

func (x *EventIndicator) GetAnomaly() bool {
	if x != nil {
		return x.Anomaly
	}
	return false
}

func (x *EventIndicator) GetVisualBuilder() bool {
	if x != nil {
		return x.VisualBuilder
	}
	return false
}

type AnomalyOptions struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Threshold        float32                `protobuf:"fixed32,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	IsPercentage     bool                   `protobuf:"varint,2,opt,name=isPercentage,proto3" json:"isPercentage,omitempty"`
	PastDataInMonths int64                  `protobuf:"varint,3,opt,name=pastDataInMonths,proto3" json:"pastDataInMonths,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AnomalyOptions) Reset() {
	*x = AnomalyOptions{}
	mi := &file_api_cover_costgroup_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnomalyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnomalyOptions) ProtoMessage() {}

func (x *AnomalyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_costgroup_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnomalyOptions.ProtoReflect.Descriptor instead.
func (*AnomalyOptions) Descriptor() ([]byte, []int) {
	return file_api_cover_costgroup_proto_rawDescGZIP(), []int{10}
}

func (x *AnomalyOptions) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *AnomalyOptions) GetIsPercentage() bool {
	if x != nil {
		return x.IsPercentage
	}
	return false
}

func (x *AnomalyOptions) GetPastDataInMonths() int64 {
	if x != nil {
		return x.PastDataInMonths
	}
	return 0
}

var File_api_cover_costgroup_proto protoreflect.FileDescriptor

const file_api_cover_costgroup_proto_rawDesc = "" +
	"\n" +
	"\x19api/cover/costgroup.proto\x12\x11blueapi.api.cover\x1a\x14api/cover/user.proto\"\xb4\x04\n" +
	"\rCostGroupData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x14\n" +
	"\x05image\x18\x04 \x01(\tR\x05image\x12\x12\n" +
	"\x04icon\x18\x05 \x01(\tR\x04icon\x12\x1e\n" +
	"\n" +
	"colorTheme\x18\x06 \x01(\tR\n" +
	"colorTheme\x12\x1c\n" +
	"\tcreatedAt\x18\a \x01(\tR\tcreatedAt\x12\x1c\n" +
	"\tupdatedAt\x18\b \x01(\tR\tupdatedAt\x12;\n" +
	"\amembers\x18\t \x03(\v2!.blueapi.api.cover.MemberUserDataR\amembers\x12C\n" +
	"\fcombinations\x18\n" +
	" \x01(\v2\x1f.blueapi.api.cover.CombinationsR\fcombinations\x12?\n" +
	"\tcreatedBy\x18\v \x01(\v2!.blueapi.api.cover.MemberUserDataR\tcreatedBy\x12I\n" +
	"\x0eeventIndicator\x18\f \x01(\v2!.blueapi.api.cover.EventIndicatorR\x0eeventIndicator\x12I\n" +
	"\x0eanomalyOptions\x18\r \x01(\v2!.blueapi.api.cover.AnomalyOptionsR\x0eanomalyOptions\"\x94\x03\n" +
	"\fCombinations\x12F\n" +
	"\n" +
	"awsOptions\x18\x01 \x01(\v2&.blueapi.api.cover.CostGroupAwsOptionsR\n" +
	"awsOptions\x12L\n" +
	"\fazureOptions\x18\x02 \x01(\v2(.blueapi.api.cover.CostGroupAzureOptionsR\fazureOptions\x12F\n" +
	"\n" +
	"gcpOptions\x18\x03 \x01(\v2&.blueapi.api.cover.CostGroupGcpOptionsR\n" +
	"gcpOptions\x12U\n" +
	"\x0fazurecspOptions\x18\x04 \x01(\v2+.blueapi.api.cover.CostGroupAzureCspOptionsR\x0fazurecspOptions\x12O\n" +
	"\rcustomOptions\x18\x05 \x01(\v2).blueapi.api.cover.CostGroupCustomOptionsR\rcustomOptions\"\xa7\x01\n" +
	"\x13CostGroupAwsOptions\x12D\n" +
	"\afilters\x18\x01 \x03(\v2*.blueapi.api.cover.CostGroupOptionsFiltersR\afilters\x12J\n" +
	"\n" +
	"tagFilters\x18\x02 \x03(\v2*.blueapi.api.cover.CostGroupOptionsFiltersR\n" +
	"tagFilters\"\xa9\x01\n" +
	"\x15CostGroupAzureOptions\x12D\n" +
	"\afilters\x18\x01 \x03(\v2*.blueapi.api.cover.CostGroupOptionsFiltersR\afilters\x12J\n" +
	"\n" +
	"tagFilters\x18\x02 \x03(\v2*.blueapi.api.cover.CostGroupOptionsFiltersR\n" +
	"tagFilters\"\xac\x01\n" +
	"\x18CostGroupAzureCspOptions\x12D\n" +
	"\afilters\x18\x01 \x03(\v2*.blueapi.api.cover.CostGroupOptionsFiltersR\afilters\x12J\n" +
	"\n" +
	"tagFilters\x18\x02 \x03(\v2*.blueapi.api.cover.CostGroupOptionsFiltersR\n" +
	"tagFilters\"\xd5\x02\n" +
	"\x13CostGroupGcpOptions\x12D\n" +
	"\afilters\x18\x01 \x03(\v2*.blueapi.api.cover.CostGroupOptionsFiltersR\afilters\x12J\n" +
	"\n" +
	"tagFilters\x18\x02 \x03(\v2*.blueapi.api.cover.CostGroupOptionsFiltersR\n" +
	"tagFilters\x12N\n" +
	"\flabelFilters\x18\x03 \x03(\v2*.blueapi.api.cover.CostGroupOptionsFiltersR\flabelFilters\x12\\\n" +
	"\x13projectLabelFilters\x18\x04 \x03(\v2*.blueapi.api.cover.CostGroupOptionsFiltersR\x13projectLabelFilters\"\xd8\x02\n" +
	"\x16CostGroupCustomOptions\x12D\n" +
	"\afilters\x18\x01 \x03(\v2*.blueapi.api.cover.CostGroupOptionsFiltersR\afilters\x12J\n" +
	"\n" +
	"tagFilters\x18\x02 \x03(\v2*.blueapi.api.cover.CostGroupOptionsFiltersR\n" +
	"tagFilters\x12N\n" +
	"\flabelFilters\x18\x03 \x03(\v2*.blueapi.api.cover.CostGroupOptionsFiltersR\flabelFilters\x12\\\n" +
	"\x13projectLabelFilters\x18\x04 \x03(\v2*.blueapi.api.cover.CostGroupOptionsFiltersR\x13projectLabelFilters\"\xb4\x01\n" +
	"\x17CostGroupOptionsFilters\x12Z\n" +
	"\n" +
	"andFilters\x18\x01 \x03(\v2:.blueapi.api.cover.CostGroupOptionsFilters.AndFiltersEntryR\n" +
	"andFilters\x1a=\n" +
	"\x0fAndFiltersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"O\n" +
	"\aAccount\x12\x1c\n" +
	"\taccountId\x18\x01 \x01(\tR\taccountId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\"P\n" +
	"\x0eEventIndicator\x12\x18\n" +
	"\aanomaly\x18\x01 \x01(\bR\aanomaly\x12$\n" +
	"\rvisualBuilder\x18\x02 \x01(\bR\rvisualBuilder\"~\n" +
	"\x0eAnomalyOptions\x12\x1c\n" +
	"\tthreshold\x18\x01 \x01(\x02R\tthreshold\x12\"\n" +
	"\fisPercentage\x18\x02 \x01(\bR\fisPercentage\x12*\n" +
	"\x10pastDataInMonths\x18\x03 \x01(\x03R\x10pastDataInMonthsBg\n" +
	"\x1fcloud.alphaus.blueapi.api.coverB\x16ApiCoverCostGroupProtoZ,github.com/alphauslabs/blue-sdk-go/api/coverb\x06proto3"

var (
	file_api_cover_costgroup_proto_rawDescOnce sync.Once
	file_api_cover_costgroup_proto_rawDescData []byte
)

func file_api_cover_costgroup_proto_rawDescGZIP() []byte {
	file_api_cover_costgroup_proto_rawDescOnce.Do(func() {
		file_api_cover_costgroup_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_cover_costgroup_proto_rawDesc), len(file_api_cover_costgroup_proto_rawDesc)))
	})
	return file_api_cover_costgroup_proto_rawDescData
}

var file_api_cover_costgroup_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_cover_costgroup_proto_goTypes = []any{
	(*CostGroupData)(nil),            // 0: blueapi.api.cover.CostGroupData
	(*Combinations)(nil),             // 1: blueapi.api.cover.Combinations
	(*CostGroupAwsOptions)(nil),      // 2: blueapi.api.cover.CostGroupAwsOptions
	(*CostGroupAzureOptions)(nil),    // 3: blueapi.api.cover.CostGroupAzureOptions
	(*CostGroupAzureCspOptions)(nil), // 4: blueapi.api.cover.CostGroupAzureCspOptions
	(*CostGroupGcpOptions)(nil),      // 5: blueapi.api.cover.CostGroupGcpOptions
	(*CostGroupCustomOptions)(nil),   // 6: blueapi.api.cover.CostGroupCustomOptions
	(*CostGroupOptionsFilters)(nil),  // 7: blueapi.api.cover.CostGroupOptionsFilters
	(*Account)(nil),                  // 8: blueapi.api.cover.Account
	(*EventIndicator)(nil),           // 9: blueapi.api.cover.EventIndicator
	(*AnomalyOptions)(nil),           // 10: blueapi.api.cover.AnomalyOptions
	nil,                              // 11: blueapi.api.cover.CostGroupOptionsFilters.AndFiltersEntry
	(*MemberUserData)(nil),           // 12: blueapi.api.cover.MemberUserData
}
var file_api_cover_costgroup_proto_depIdxs = []int32{
	12, // 0: blueapi.api.cover.CostGroupData.members:type_name -> blueapi.api.cover.MemberUserData
	1,  // 1: blueapi.api.cover.CostGroupData.combinations:type_name -> blueapi.api.cover.Combinations
	12, // 2: blueapi.api.cover.CostGroupData.createdBy:type_name -> blueapi.api.cover.MemberUserData
	9,  // 3: blueapi.api.cover.CostGroupData.eventIndicator:type_name -> blueapi.api.cover.EventIndicator
	10, // 4: blueapi.api.cover.CostGroupData.anomalyOptions:type_name -> blueapi.api.cover.AnomalyOptions
	2,  // 5: blueapi.api.cover.Combinations.awsOptions:type_name -> blueapi.api.cover.CostGroupAwsOptions
	3,  // 6: blueapi.api.cover.Combinations.azureOptions:type_name -> blueapi.api.cover.CostGroupAzureOptions
	5,  // 7: blueapi.api.cover.Combinations.gcpOptions:type_name -> blueapi.api.cover.CostGroupGcpOptions
	4,  // 8: blueapi.api.cover.Combinations.azurecspOptions:type_name -> blueapi.api.cover.CostGroupAzureCspOptions
	6,  // 9: blueapi.api.cover.Combinations.customOptions:type_name -> blueapi.api.cover.CostGroupCustomOptions
	7,  // 10: blueapi.api.cover.CostGroupAwsOptions.filters:type_name -> blueapi.api.cover.CostGroupOptionsFilters
	7,  // 11: blueapi.api.cover.CostGroupAwsOptions.tagFilters:type_name -> blueapi.api.cover.CostGroupOptionsFilters
	7,  // 12: blueapi.api.cover.CostGroupAzureOptions.filters:type_name -> blueapi.api.cover.CostGroupOptionsFilters
	7,  // 13: blueapi.api.cover.CostGroupAzureOptions.tagFilters:type_name -> blueapi.api.cover.CostGroupOptionsFilters
	7,  // 14: blueapi.api.cover.CostGroupAzureCspOptions.filters:type_name -> blueapi.api.cover.CostGroupOptionsFilters
	7,  // 15: blueapi.api.cover.CostGroupAzureCspOptions.tagFilters:type_name -> blueapi.api.cover.CostGroupOptionsFilters
	7,  // 16: blueapi.api.cover.CostGroupGcpOptions.filters:type_name -> blueapi.api.cover.CostGroupOptionsFilters
	7,  // 17: blueapi.api.cover.CostGroupGcpOptions.tagFilters:type_name -> blueapi.api.cover.CostGroupOptionsFilters
	7,  // 18: blueapi.api.cover.CostGroupGcpOptions.labelFilters:type_name -> blueapi.api.cover.CostGroupOptionsFilters
	7,  // 19: blueapi.api.cover.CostGroupGcpOptions.projectLabelFilters:type_name -> blueapi.api.cover.CostGroupOptionsFilters
	7,  // 20: blueapi.api.cover.CostGroupCustomOptions.filters:type_name -> blueapi.api.cover.CostGroupOptionsFilters
	7,  // 21: blueapi.api.cover.CostGroupCustomOptions.tagFilters:type_name -> blueapi.api.cover.CostGroupOptionsFilters
	7,  // 22: blueapi.api.cover.CostGroupCustomOptions.labelFilters:type_name -> blueapi.api.cover.CostGroupOptionsFilters
	7,  // 23: blueapi.api.cover.CostGroupCustomOptions.projectLabelFilters:type_name -> blueapi.api.cover.CostGroupOptionsFilters
	11, // 24: blueapi.api.cover.CostGroupOptionsFilters.andFilters:type_name -> blueapi.api.cover.CostGroupOptionsFilters.AndFiltersEntry
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_api_cover_costgroup_proto_init() }
func file_api_cover_costgroup_proto_init() {
	if File_api_cover_costgroup_proto != nil {
		return
	}
	file_api_cover_user_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_cover_costgroup_proto_rawDesc), len(file_api_cover_costgroup_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_cover_costgroup_proto_goTypes,
		DependencyIndexes: file_api_cover_costgroup_proto_depIdxs,
		MessageInfos:      file_api_cover_costgroup_proto_msgTypes,
	}.Build()
	File_api_cover_costgroup_proto = out.File
	file_api_cover_costgroup_proto_goTypes = nil
	file_api_cover_costgroup_proto_depIdxs = nil
}
