// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: api/cover/unitcost.proto

package cover

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UnitCostData struct {
	state           protoimpl.MessageState        `protogen:"open.v1"`
	Id              string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UnitName        string                        `protobuf:"bytes,2,opt,name=unitName,proto3" json:"unitName,omitempty"`
	Description     string                        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	UnitItems       []*UnitItem                   `protobuf:"bytes,4,rep,name=unitItems,proto3" json:"unitItems,omitempty"`
	Vendors         []string                      `protobuf:"bytes,5,rep,name=vendors,proto3" json:"vendors,omitempty"`
	SharedResources []*SharedResourcesCombination `protobuf:"bytes,6,rep,name=sharedResources,proto3" json:"sharedResources,omitempty"`
	CreatedBy       string                        `protobuf:"bytes,7,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreateTime      string                        `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	LastUpdatedAt   string                        `protobuf:"bytes,9,opt,name=lastUpdatedAt,proto3" json:"lastUpdatedAt,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UnitCostData) Reset() {
	*x = UnitCostData{}
	mi := &file_api_cover_unitcost_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnitCostData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitCostData) ProtoMessage() {}

func (x *UnitCostData) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_unitcost_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitCostData.ProtoReflect.Descriptor instead.
func (*UnitCostData) Descriptor() ([]byte, []int) {
	return file_api_cover_unitcost_proto_rawDescGZIP(), []int{0}
}

func (x *UnitCostData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UnitCostData) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *UnitCostData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UnitCostData) GetUnitItems() []*UnitItem {
	if x != nil {
		return x.UnitItems
	}
	return nil
}

func (x *UnitCostData) GetVendors() []string {
	if x != nil {
		return x.Vendors
	}
	return nil
}

func (x *UnitCostData) GetSharedResources() []*SharedResourcesCombination {
	if x != nil {
		return x.SharedResources
	}
	return nil
}

func (x *UnitCostData) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UnitCostData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UnitCostData) GetLastUpdatedAt() string {
	if x != nil {
		return x.LastUpdatedAt
	}
	return ""
}

type UnitItem struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	ItemName                       string                 `protobuf:"bytes,1,opt,name=itemName,proto3" json:"itemName,omitempty"`
	Distribution                   float64                `protobuf:"fixed64,2,opt,name=distribution,proto3" json:"distribution,omitempty"`
	DedicatedResourcesCombinations *ResourcesCombinations `protobuf:"bytes,3,opt,name=dedicatedResourcesCombinations,proto3" json:"dedicatedResourcesCombinations,omitempty"`
	Vendors                        []string               `protobuf:"bytes,4,rep,name=vendors,proto3" json:"vendors,omitempty"`
	CreateTime                     string                 `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	LastUpdatedAt                  string                 `protobuf:"bytes,6,opt,name=lastUpdatedAt,proto3" json:"lastUpdatedAt,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *UnitItem) Reset() {
	*x = UnitItem{}
	mi := &file_api_cover_unitcost_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnitItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitItem) ProtoMessage() {}

func (x *UnitItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_unitcost_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitItem.ProtoReflect.Descriptor instead.
func (*UnitItem) Descriptor() ([]byte, []int) {
	return file_api_cover_unitcost_proto_rawDescGZIP(), []int{1}
}

func (x *UnitItem) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *UnitItem) GetDistribution() float64 {
	if x != nil {
		return x.Distribution
	}
	return 0
}

func (x *UnitItem) GetDedicatedResourcesCombinations() *ResourcesCombinations {
	if x != nil {
		return x.DedicatedResourcesCombinations
	}
	return nil
}

func (x *UnitItem) GetVendors() []string {
	if x != nil {
		return x.Vendors
	}
	return nil
}

func (x *UnitItem) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UnitItem) GetLastUpdatedAt() string {
	if x != nil {
		return x.LastUpdatedAt
	}
	return ""
}

type SharedResourcesCombination struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Id                          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CombinationName             string                 `protobuf:"bytes,2,opt,name=combinationName,proto3" json:"combinationName,omitempty"`
	SharedResourcesCombinations *ResourcesCombinations `protobuf:"bytes,3,opt,name=sharedResourcesCombinations,proto3" json:"sharedResourcesCombinations,omitempty"`
	// List the unit items and their corresponding percentages.
	Distribution  map[string]float64 `protobuf:"bytes,4,rep,name=distribution,proto3" json:"distribution,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Allocated     float64            `protobuf:"fixed64,5,opt,name=allocated,proto3" json:"allocated,omitempty"`
	Unallocated   float64            `protobuf:"fixed64,6,opt,name=unallocated,proto3" json:"unallocated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SharedResourcesCombination) Reset() {
	*x = SharedResourcesCombination{}
	mi := &file_api_cover_unitcost_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedResourcesCombination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedResourcesCombination) ProtoMessage() {}

func (x *SharedResourcesCombination) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_unitcost_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedResourcesCombination.ProtoReflect.Descriptor instead.
func (*SharedResourcesCombination) Descriptor() ([]byte, []int) {
	return file_api_cover_unitcost_proto_rawDescGZIP(), []int{2}
}

func (x *SharedResourcesCombination) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SharedResourcesCombination) GetCombinationName() string {
	if x != nil {
		return x.CombinationName
	}
	return ""
}

func (x *SharedResourcesCombination) GetSharedResourcesCombinations() *ResourcesCombinations {
	if x != nil {
		return x.SharedResourcesCombinations
	}
	return nil
}

func (x *SharedResourcesCombination) GetDistribution() map[string]float64 {
	if x != nil {
		return x.Distribution
	}
	return nil
}

func (x *SharedResourcesCombination) GetAllocated() float64 {
	if x != nil {
		return x.Allocated
	}
	return 0
}

func (x *SharedResourcesCombination) GetUnallocated() float64 {
	if x != nil {
		return x.Unallocated
	}
	return 0
}

type ResourcesCombinations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Valid only for the `aws` vendor. AWS-specific options.
	AwsOptions *CostGroupAwsOptions `protobuf:"bytes,1,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
	// Optional. Valid only for the `azure` vendor. Azure-specific options.
	AzureOptions *CostGroupAzureOptions `protobuf:"bytes,2,opt,name=azureOptions,proto3" json:"azureOptions,omitempty"`
	// Optional. Valid only for the `gcp` vendor. GCP-specific options.
	GcpOptions *CostGroupGcpOptions `protobuf:"bytes,3,opt,name=gcpOptions,proto3" json:"gcpOptions,omitempty"`
	// Optional. Valid only for the `azurecsp` vendor. AzureCSP-specific options.
	AzurecspOptions *CostGroupAzureCspOptions `protobuf:"bytes,4,opt,name=azurecspOptions,proto3" json:"azurecspOptions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ResourcesCombinations) Reset() {
	*x = ResourcesCombinations{}
	mi := &file_api_cover_unitcost_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcesCombinations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcesCombinations) ProtoMessage() {}

func (x *ResourcesCombinations) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_unitcost_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcesCombinations.ProtoReflect.Descriptor instead.
func (*ResourcesCombinations) Descriptor() ([]byte, []int) {
	return file_api_cover_unitcost_proto_rawDescGZIP(), []int{3}
}

func (x *ResourcesCombinations) GetAwsOptions() *CostGroupAwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

func (x *ResourcesCombinations) GetAzureOptions() *CostGroupAzureOptions {
	if x != nil {
		return x.AzureOptions
	}
	return nil
}

func (x *ResourcesCombinations) GetGcpOptions() *CostGroupGcpOptions {
	if x != nil {
		return x.GcpOptions
	}
	return nil
}

func (x *ResourcesCombinations) GetAzurecspOptions() *CostGroupAzureCspOptions {
	if x != nil {
		return x.AzurecspOptions
	}
	return nil
}

type SuggestedUnit struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Vendor             string                 `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
	PotentialUnitName  string                 `protobuf:"bytes,3,opt,name=potentialUnitName,proto3" json:"potentialUnitName,omitempty"`
	PotentialUnitItems []*PotentialUnitItem   `protobuf:"bytes,4,rep,name=potentialUnitItems,proto3" json:"potentialUnitItems,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SuggestedUnit) Reset() {
	*x = SuggestedUnit{}
	mi := &file_api_cover_unitcost_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuggestedUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestedUnit) ProtoMessage() {}

func (x *SuggestedUnit) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_unitcost_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestedUnit.ProtoReflect.Descriptor instead.
func (*SuggestedUnit) Descriptor() ([]byte, []int) {
	return file_api_cover_unitcost_proto_rawDescGZIP(), []int{4}
}

func (x *SuggestedUnit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SuggestedUnit) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *SuggestedUnit) GetPotentialUnitName() string {
	if x != nil {
		return x.PotentialUnitName
	}
	return ""
}

func (x *SuggestedUnit) GetPotentialUnitItems() []*PotentialUnitItem {
	if x != nil {
		return x.PotentialUnitItems
	}
	return nil
}

type PotentialUnitItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemName      string                 `protobuf:"bytes,2,opt,name=itemName,proto3" json:"itemName,omitempty"`
	Vendor        string                 `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Tag           map[string]string      `protobuf:"bytes,4,rep,name=tag,proto3" json:"tag,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PotentialUnitItem) Reset() {
	*x = PotentialUnitItem{}
	mi := &file_api_cover_unitcost_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PotentialUnitItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotentialUnitItem) ProtoMessage() {}

func (x *PotentialUnitItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_unitcost_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotentialUnitItem.ProtoReflect.Descriptor instead.
func (*PotentialUnitItem) Descriptor() ([]byte, []int) {
	return file_api_cover_unitcost_proto_rawDescGZIP(), []int{5}
}

func (x *PotentialUnitItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PotentialUnitItem) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *PotentialUnitItem) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *PotentialUnitItem) GetTag() map[string]string {
	if x != nil {
		return x.Tag
	}
	return nil
}

type UnitMetric struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId             string                 `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	MetricName        string                 `protobuf:"bytes,3,opt,name=metricName,proto3" json:"metricName,omitempty"`
	Description       string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	AggregationMethod string                 `protobuf:"bytes,5,opt,name=aggregationMethod,proto3" json:"aggregationMethod,omitempty"`
	DataSource        string                 `protobuf:"bytes,6,opt,name=dataSource,proto3" json:"dataSource,omitempty"`
	Status            string                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	CostgroupId       []string               `protobuf:"bytes,8,rep,name=costgroupId,proto3" json:"costgroupId,omitempty"`
	SourceInfo        *SourceInfo            `protobuf:"bytes,9,opt,name=sourceInfo,proto3" json:"sourceInfo,omitempty"`
	CreatedBy         string                 `protobuf:"bytes,10,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreateTime        string                 `protobuf:"bytes,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	LastUpdatedAt     string                 `protobuf:"bytes,12,opt,name=lastUpdatedAt,proto3" json:"lastUpdatedAt,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UnitMetric) Reset() {
	*x = UnitMetric{}
	mi := &file_api_cover_unitcost_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnitMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitMetric) ProtoMessage() {}

func (x *UnitMetric) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_unitcost_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitMetric.ProtoReflect.Descriptor instead.
func (*UnitMetric) Descriptor() ([]byte, []int) {
	return file_api_cover_unitcost_proto_rawDescGZIP(), []int{6}
}

func (x *UnitMetric) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UnitMetric) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UnitMetric) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *UnitMetric) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UnitMetric) GetAggregationMethod() string {
	if x != nil {
		return x.AggregationMethod
	}
	return ""
}

func (x *UnitMetric) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *UnitMetric) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UnitMetric) GetCostgroupId() []string {
	if x != nil {
		return x.CostgroupId
	}
	return nil
}

func (x *UnitMetric) GetSourceInfo() *SourceInfo {
	if x != nil {
		return x.SourceInfo
	}
	return nil
}

func (x *UnitMetric) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *UnitMetric) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UnitMetric) GetLastUpdatedAt() string {
	if x != nil {
		return x.LastUpdatedAt
	}
	return ""
}

type SourceInfo struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	DataSource string                 `protobuf:"bytes,1,opt,name=dataSource,proto3" json:"dataSource,omitempty"`
	// Types that are valid to be assigned to Source:
	//
	//	*SourceInfo_Csv
	//	*SourceInfo_GoogleSheet
	//	*SourceInfo_CloudWatch
	//	*SourceInfo_Telemetry
	Source        isSourceInfo_Source `protobuf_oneof:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceInfo) Reset() {
	*x = SourceInfo{}
	mi := &file_api_cover_unitcost_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceInfo) ProtoMessage() {}

func (x *SourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_unitcost_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceInfo.ProtoReflect.Descriptor instead.
func (*SourceInfo) Descriptor() ([]byte, []int) {
	return file_api_cover_unitcost_proto_rawDescGZIP(), []int{7}
}

func (x *SourceInfo) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *SourceInfo) GetSource() isSourceInfo_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SourceInfo) GetCsv() *CsvInfo {
	if x != nil {
		if x, ok := x.Source.(*SourceInfo_Csv); ok {
			return x.Csv
		}
	}
	return nil
}

func (x *SourceInfo) GetGoogleSheet() *GoogleSheetInfo {
	if x != nil {
		if x, ok := x.Source.(*SourceInfo_GoogleSheet); ok {
			return x.GoogleSheet
		}
	}
	return nil
}

func (x *SourceInfo) GetCloudWatch() *CloudWatchInfo {
	if x != nil {
		if x, ok := x.Source.(*SourceInfo_CloudWatch); ok {
			return x.CloudWatch
		}
	}
	return nil
}

func (x *SourceInfo) GetTelemetry() *TelemetryInfo {
	if x != nil {
		if x, ok := x.Source.(*SourceInfo_Telemetry); ok {
			return x.Telemetry
		}
	}
	return nil
}

type isSourceInfo_Source interface {
	isSourceInfo_Source()
}

type SourceInfo_Csv struct {
	Csv *CsvInfo `protobuf:"bytes,2,opt,name=csv,proto3,oneof"`
}

type SourceInfo_GoogleSheet struct {
	GoogleSheet *GoogleSheetInfo `protobuf:"bytes,3,opt,name=googleSheet,proto3,oneof"`
}

type SourceInfo_CloudWatch struct {
	CloudWatch *CloudWatchInfo `protobuf:"bytes,4,opt,name=cloudWatch,proto3,oneof"`
}

type SourceInfo_Telemetry struct {
	Telemetry *TelemetryInfo `protobuf:"bytes,5,opt,name=telemetry,proto3,oneof"`
}

func (*SourceInfo_Csv) isSourceInfo_Source() {}

func (*SourceInfo_GoogleSheet) isSourceInfo_Source() {}

func (*SourceInfo_CloudWatch) isSourceInfo_Source() {}

func (*SourceInfo_Telemetry) isSourceInfo_Source() {}

type CsvInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The S3 key of the CSV file.
	// For example, "path/to/file.csv"
	S3Key string `protobuf:"bytes,1,opt,name=s3key,proto3" json:"s3key,omitempty"`
	// The URL of the CSV file.
	// For example, "https://s3.amazonaws.com/bucket/path/to/file.csv"
	S3Url           string           `protobuf:"bytes,2,opt,name=s3url,proto3" json:"s3url,omitempty"`
	RequiredColumns *RequiredColumns `protobuf:"bytes,3,opt,name=requiredColumns,proto3" json:"requiredColumns,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CsvInfo) Reset() {
	*x = CsvInfo{}
	mi := &file_api_cover_unitcost_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CsvInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvInfo) ProtoMessage() {}

func (x *CsvInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_unitcost_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvInfo.ProtoReflect.Descriptor instead.
func (*CsvInfo) Descriptor() ([]byte, []int) {
	return file_api_cover_unitcost_proto_rawDescGZIP(), []int{8}
}

func (x *CsvInfo) GetS3Key() string {
	if x != nil {
		return x.S3Key
	}
	return ""
}

func (x *CsvInfo) GetS3Url() string {
	if x != nil {
		return x.S3Url
	}
	return ""
}

func (x *CsvInfo) GetRequiredColumns() *RequiredColumns {
	if x != nil {
		return x.RequiredColumns
	}
	return nil
}

type GoogleSheetInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the Google Sheet.
	// For example, "1BxiMVs0XRA5nFMd29P8v4g"
	SheetId string `protobuf:"bytes,1,opt,name=sheetId,proto3" json:"sheetId,omitempty"`
	// The URL of the Google Sheet.
	// For example, "https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMd29P8v4g/edit"
	SheetUrl string `protobuf:"bytes,2,opt,name=sheetUrl,proto3" json:"sheetUrl,omitempty"`
	// The name of the sheet within the Google Sheet
	// For example, "Sheet1"
	SheetName string `protobuf:"bytes,3,opt,name=sheetName,proto3" json:"sheetName,omitempty"`
	// The range of cells to read from the sheet.
	// For example, "A1:D10" to read cells A1 to D10
	SheetRange string `protobuf:"bytes,4,opt,name=sheetRange,proto3" json:"sheetRange,omitempty"`
	// The required columns in the Google Sheet.
	RequiredColumns *RequiredColumns `protobuf:"bytes,5,opt,name=requiredColumns,proto3" json:"requiredColumns,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GoogleSheetInfo) Reset() {
	*x = GoogleSheetInfo{}
	mi := &file_api_cover_unitcost_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoogleSheetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleSheetInfo) ProtoMessage() {}

func (x *GoogleSheetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_unitcost_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleSheetInfo.ProtoReflect.Descriptor instead.
func (*GoogleSheetInfo) Descriptor() ([]byte, []int) {
	return file_api_cover_unitcost_proto_rawDescGZIP(), []int{9}
}

func (x *GoogleSheetInfo) GetSheetId() string {
	if x != nil {
		return x.SheetId
	}
	return ""
}

func (x *GoogleSheetInfo) GetSheetUrl() string {
	if x != nil {
		return x.SheetUrl
	}
	return ""
}

func (x *GoogleSheetInfo) GetSheetName() string {
	if x != nil {
		return x.SheetName
	}
	return ""
}

func (x *GoogleSheetInfo) GetSheetRange() string {
	if x != nil {
		return x.SheetRange
	}
	return ""
}

func (x *GoogleSheetInfo) GetRequiredColumns() *RequiredColumns {
	if x != nil {
		return x.RequiredColumns
	}
	return nil
}

type CloudWatchInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The AWS region where the CloudWatch metric is located.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// The account ID of the AWS account where the CloudWatch metric is located
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// The namespace of the CloudWatch metric.
	// For example, "AWS/EC2" for EC2 metrics.
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The name of the CloudWatch metric.
	// For example, "CPUUtilization" for EC2 CPU utilization
	MetricName string `protobuf:"bytes,4,opt,name=metricName,proto3" json:"metricName,omitempty"`
	// The dimensions of the CloudWatch metric.
	// For example, "InstanceId" for EC2 instance metrics.
	// The dimensions are represented as key-value pairs.
	// For example, {"InstanceId": "i-1234567890abcdef0"} for a specific EC2 instance.
	Dimensions map[string]string `protobuf:"bytes,5,rep,name=dimensions,proto3" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The aggregation method to use for the CloudWatch metric
	AggregationMethod string `protobuf:"bytes,6,opt,name=aggregationMethod,proto3" json:"aggregationMethod,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CloudWatchInfo) Reset() {
	*x = CloudWatchInfo{}
	mi := &file_api_cover_unitcost_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudWatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudWatchInfo) ProtoMessage() {}

func (x *CloudWatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_unitcost_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudWatchInfo.ProtoReflect.Descriptor instead.
func (*CloudWatchInfo) Descriptor() ([]byte, []int) {
	return file_api_cover_unitcost_proto_rawDescGZIP(), []int{10}
}

func (x *CloudWatchInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudWatchInfo) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CloudWatchInfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CloudWatchInfo) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *CloudWatchInfo) GetDimensions() map[string]string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *CloudWatchInfo) GetAggregationMethod() string {
	if x != nil {
		return x.AggregationMethod
	}
	return ""
}

type TelemetryInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryInfo) Reset() {
	*x = TelemetryInfo{}
	mi := &file_api_cover_unitcost_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryInfo) ProtoMessage() {}

func (x *TelemetryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_unitcost_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryInfo.ProtoReflect.Descriptor instead.
func (*TelemetryInfo) Descriptor() ([]byte, []int) {
	return file_api_cover_unitcost_proto_rawDescGZIP(), []int{11}
}

type RequiredColumns struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DateColumn    string                 `protobuf:"bytes,1,opt,name=dateColumn,proto3" json:"dateColumn,omitempty"`
	AmountColumn  string                 `protobuf:"bytes,2,opt,name=amountColumn,proto3" json:"amountColumn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequiredColumns) Reset() {
	*x = RequiredColumns{}
	mi := &file_api_cover_unitcost_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequiredColumns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredColumns) ProtoMessage() {}

func (x *RequiredColumns) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_unitcost_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredColumns.ProtoReflect.Descriptor instead.
func (*RequiredColumns) Descriptor() ([]byte, []int) {
	return file_api_cover_unitcost_proto_rawDescGZIP(), []int{12}
}

func (x *RequiredColumns) GetDateColumn() string {
	if x != nil {
		return x.DateColumn
	}
	return ""
}

func (x *RequiredColumns) GetAmountColumn() string {
	if x != nil {
		return x.AmountColumn
	}
	return ""
}

var File_api_cover_unitcost_proto protoreflect.FileDescriptor

var file_api_cover_unitcost_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x75, 0x6e, 0x69, 0x74,
	0x63, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x1a, 0x19, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x02, 0x0a, 0x0c, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x0f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x08, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x1e, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1e, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa8, 0x03, 0x0a, 0x1a, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x6a, 0x0a, 0x1b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x1b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x1a, 0x3f, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xcc, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a,
	0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x67, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0a, 0x67, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x63, 0x73, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x73, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x63, 0x73, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x12, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0xd0, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x61,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x74, 0x61, 0x67, 0x1a, 0x36, 0x0a, 0x08, 0x54,
	0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x9f, 0x03, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb5, 0x02, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x73, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x73, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x03, 0x63, 0x73, 0x76, 0x12, 0x46, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x68,
	0x65, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x0a,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x83, 0x01,
	0x0a, 0x07, 0x43, 0x73, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x33, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x33, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x33, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x33, 0x75, 0x72, 0x6c, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x68,
	0x65, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x65, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x65, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x65, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x65, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x68, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x68, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x68, 0x65, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x68, 0x65, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x0e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x51, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x1a, 0x3d, 0x0a, 0x0f, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x0f, 0x0a, 0x0d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x55, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x61, 0x0a, 0x1f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x10, 0x41, 0x70, 0x69,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x2c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75,
	0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_api_cover_unitcost_proto_rawDescOnce sync.Once
	file_api_cover_unitcost_proto_rawDescData []byte
)

func file_api_cover_unitcost_proto_rawDescGZIP() []byte {
	file_api_cover_unitcost_proto_rawDescOnce.Do(func() {
		file_api_cover_unitcost_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_cover_unitcost_proto_rawDesc), len(file_api_cover_unitcost_proto_rawDesc)))
	})
	return file_api_cover_unitcost_proto_rawDescData
}

var file_api_cover_unitcost_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_api_cover_unitcost_proto_goTypes = []any{
	(*UnitCostData)(nil),               // 0: blueapi.api.cover.UnitCostData
	(*UnitItem)(nil),                   // 1: blueapi.api.cover.UnitItem
	(*SharedResourcesCombination)(nil), // 2: blueapi.api.cover.SharedResourcesCombination
	(*ResourcesCombinations)(nil),      // 3: blueapi.api.cover.ResourcesCombinations
	(*SuggestedUnit)(nil),              // 4: blueapi.api.cover.SuggestedUnit
	(*PotentialUnitItem)(nil),          // 5: blueapi.api.cover.PotentialUnitItem
	(*UnitMetric)(nil),                 // 6: blueapi.api.cover.UnitMetric
	(*SourceInfo)(nil),                 // 7: blueapi.api.cover.SourceInfo
	(*CsvInfo)(nil),                    // 8: blueapi.api.cover.CsvInfo
	(*GoogleSheetInfo)(nil),            // 9: blueapi.api.cover.GoogleSheetInfo
	(*CloudWatchInfo)(nil),             // 10: blueapi.api.cover.CloudWatchInfo
	(*TelemetryInfo)(nil),              // 11: blueapi.api.cover.TelemetryInfo
	(*RequiredColumns)(nil),            // 12: blueapi.api.cover.RequiredColumns
	nil,                                // 13: blueapi.api.cover.SharedResourcesCombination.DistributionEntry
	nil,                                // 14: blueapi.api.cover.PotentialUnitItem.TagEntry
	nil,                                // 15: blueapi.api.cover.CloudWatchInfo.DimensionsEntry
	(*CostGroupAwsOptions)(nil),        // 16: blueapi.api.cover.CostGroupAwsOptions
	(*CostGroupAzureOptions)(nil),      // 17: blueapi.api.cover.CostGroupAzureOptions
	(*CostGroupGcpOptions)(nil),        // 18: blueapi.api.cover.CostGroupGcpOptions
	(*CostGroupAzureCspOptions)(nil),   // 19: blueapi.api.cover.CostGroupAzureCspOptions
}
var file_api_cover_unitcost_proto_depIdxs = []int32{
	1,  // 0: blueapi.api.cover.UnitCostData.unitItems:type_name -> blueapi.api.cover.UnitItem
	2,  // 1: blueapi.api.cover.UnitCostData.sharedResources:type_name -> blueapi.api.cover.SharedResourcesCombination
	3,  // 2: blueapi.api.cover.UnitItem.dedicatedResourcesCombinations:type_name -> blueapi.api.cover.ResourcesCombinations
	3,  // 3: blueapi.api.cover.SharedResourcesCombination.sharedResourcesCombinations:type_name -> blueapi.api.cover.ResourcesCombinations
	13, // 4: blueapi.api.cover.SharedResourcesCombination.distribution:type_name -> blueapi.api.cover.SharedResourcesCombination.DistributionEntry
	16, // 5: blueapi.api.cover.ResourcesCombinations.awsOptions:type_name -> blueapi.api.cover.CostGroupAwsOptions
	17, // 6: blueapi.api.cover.ResourcesCombinations.azureOptions:type_name -> blueapi.api.cover.CostGroupAzureOptions
	18, // 7: blueapi.api.cover.ResourcesCombinations.gcpOptions:type_name -> blueapi.api.cover.CostGroupGcpOptions
	19, // 8: blueapi.api.cover.ResourcesCombinations.azurecspOptions:type_name -> blueapi.api.cover.CostGroupAzureCspOptions
	5,  // 9: blueapi.api.cover.SuggestedUnit.potentialUnitItems:type_name -> blueapi.api.cover.PotentialUnitItem
	14, // 10: blueapi.api.cover.PotentialUnitItem.tag:type_name -> blueapi.api.cover.PotentialUnitItem.TagEntry
	7,  // 11: blueapi.api.cover.UnitMetric.sourceInfo:type_name -> blueapi.api.cover.SourceInfo
	8,  // 12: blueapi.api.cover.SourceInfo.csv:type_name -> blueapi.api.cover.CsvInfo
	9,  // 13: blueapi.api.cover.SourceInfo.googleSheet:type_name -> blueapi.api.cover.GoogleSheetInfo
	10, // 14: blueapi.api.cover.SourceInfo.cloudWatch:type_name -> blueapi.api.cover.CloudWatchInfo
	11, // 15: blueapi.api.cover.SourceInfo.telemetry:type_name -> blueapi.api.cover.TelemetryInfo
	12, // 16: blueapi.api.cover.CsvInfo.requiredColumns:type_name -> blueapi.api.cover.RequiredColumns
	12, // 17: blueapi.api.cover.GoogleSheetInfo.requiredColumns:type_name -> blueapi.api.cover.RequiredColumns
	15, // 18: blueapi.api.cover.CloudWatchInfo.dimensions:type_name -> blueapi.api.cover.CloudWatchInfo.DimensionsEntry
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_api_cover_unitcost_proto_init() }
func file_api_cover_unitcost_proto_init() {
	if File_api_cover_unitcost_proto != nil {
		return
	}
	file_api_cover_costgroup_proto_init()
	file_api_cover_unitcost_proto_msgTypes[7].OneofWrappers = []any{
		(*SourceInfo_Csv)(nil),
		(*SourceInfo_GoogleSheet)(nil),
		(*SourceInfo_CloudWatch)(nil),
		(*SourceInfo_Telemetry)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_cover_unitcost_proto_rawDesc), len(file_api_cover_unitcost_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_cover_unitcost_proto_goTypes,
		DependencyIndexes: file_api_cover_unitcost_proto_depIdxs,
		MessageInfos:      file_api_cover_unitcost_proto_msgTypes,
	}.Build()
	File_api_cover_unitcost_proto = out.File
	file_api_cover_unitcost_proto_goTypes = nil
	file_api_cover_unitcost_proto_depIdxs = nil
}
