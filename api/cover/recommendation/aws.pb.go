// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: api/cover/recommendation/aws.proto

package recommendation

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics               []*MetricData_Metrics `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	MaxMetricInPercentage float64               `protobuf:"fixed64,2,opt,name=maxMetricInPercentage,proto3" json:"maxMetricInPercentage,omitempty"`
	MetricCapacity        string                `protobuf:"bytes,3,opt,name=metricCapacity,proto3" json:"metricCapacity,omitempty"`
}

func (x *MetricData) Reset() {
	*x = MetricData{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricData) ProtoMessage() {}

func (x *MetricData) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricData.ProtoReflect.Descriptor instead.
func (*MetricData) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{0}
}

func (x *MetricData) GetMetrics() []*MetricData_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *MetricData) GetMaxMetricInPercentage() float64 {
	if x != nil {
		return x.MaxMetricInPercentage
	}
	return 0
}

func (x *MetricData) GetMetricCapacity() string {
	if x != nil {
		return x.MetricCapacity
	}
	return ""
}

type CostExplorerRecommendations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ec2Rightsize  *CostExplorerRecommendations_EC2Rightsize  `protobuf:"bytes,2,opt,name=ec2Rightsize,proto3" json:"ec2Rightsize,omitempty"`
	DiscountPlans *CostExplorerRecommendations_DiscountPlans `protobuf:"bytes,1,opt,name=discountPlans,proto3" json:"discountPlans,omitempty"`
	TerminateEc2  *CostExplorerRecommendations_TerminateEC2  `protobuf:"bytes,3,opt,name=terminateEc2,proto3" json:"terminateEc2,omitempty"`
}

func (x *CostExplorerRecommendations) Reset() {
	*x = CostExplorerRecommendations{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostExplorerRecommendations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostExplorerRecommendations) ProtoMessage() {}

func (x *CostExplorerRecommendations) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostExplorerRecommendations.ProtoReflect.Descriptor instead.
func (*CostExplorerRecommendations) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{1}
}

func (x *CostExplorerRecommendations) GetEc2Rightsize() *CostExplorerRecommendations_EC2Rightsize {
	if x != nil {
		return x.Ec2Rightsize
	}
	return nil
}

func (x *CostExplorerRecommendations) GetDiscountPlans() *CostExplorerRecommendations_DiscountPlans {
	if x != nil {
		return x.DiscountPlans
	}
	return nil
}

func (x *CostExplorerRecommendations) GetTerminateEc2() *CostExplorerRecommendations_TerminateEC2 {
	if x != nil {
		return x.TerminateEc2
	}
	return nil
}

type CostOptimizationHubRecommendations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentDetails        *CostOptimizationHubRecommendations_Details `protobuf:"bytes,1,opt,name=currentDetails,proto3" json:"currentDetails,omitempty"`
	RecommendationDetails *CostOptimizationHubRecommendations_Details `protobuf:"bytes,2,opt,name=recommendationDetails,proto3" json:"recommendationDetails,omitempty"`
}

func (x *CostOptimizationHubRecommendations) Reset() {
	*x = CostOptimizationHubRecommendations{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostOptimizationHubRecommendations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostOptimizationHubRecommendations) ProtoMessage() {}

func (x *CostOptimizationHubRecommendations) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostOptimizationHubRecommendations.ProtoReflect.Descriptor instead.
func (*CostOptimizationHubRecommendations) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{2}
}

func (x *CostOptimizationHubRecommendations) GetCurrentDetails() *CostOptimizationHubRecommendations_Details {
	if x != nil {
		return x.CurrentDetails
	}
	return nil
}

func (x *CostOptimizationHubRecommendations) GetRecommendationDetails() *CostOptimizationHubRecommendations_Details {
	if x != nil {
		return x.RecommendationDetails
	}
	return nil
}

type AWSResourceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AWSResourceDetails) Reset() {
	*x = AWSResourceDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails) ProtoMessage() {}

func (x *AWSResourceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3}
}

type TrustedAdvisorRecommendations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeverityStatus                        string                                                               `protobuf:"bytes,1,opt,name=severityStatus,proto3" json:"severityStatus,omitempty"`
	RecommendationArn                     string                                                               `protobuf:"bytes,2,opt,name=recommendationArn,proto3" json:"recommendationArn,omitempty"`
	ExclusionStatus                       string                                                               `protobuf:"bytes,3,opt,name=exclusionStatus,proto3" json:"exclusionStatus,omitempty"`
	LowUtilizationEc2Instances            *TrustedAdvisorRecommendations_LowUtilizationEC2Instances            `protobuf:"bytes,4,opt,name=lowUtilizationEc2Instances,proto3" json:"lowUtilizationEc2Instances,omitempty"`
	RdsIdleDbInstances                    *TrustedAdvisorRecommendations_RDSIdleDBInstances                    `protobuf:"bytes,5,opt,name=rdsIdleDbInstances,proto3" json:"rdsIdleDbInstances,omitempty"`
	S3IncompleteMPU                       *TrustedAdvisorRecommendations_S3IncompleteMPU                       `protobuf:"bytes,6,opt,name=s3IncompleteMPU,proto3" json:"s3IncompleteMPU,omitempty"`
	LambdaHighErrorRates                  *TrustedAdvisorRecommendations_LambdaHighErrorRates                  `protobuf:"bytes,7,opt,name=lambdaHighErrorRates,proto3" json:"lambdaHighErrorRates,omitempty"`
	UnderutilizedEBSVolume                *TrustedAdvisorRecommendations_UnderutilizedEBSVolume                `protobuf:"bytes,8,opt,name=underutilizedEBSVolume,proto3" json:"underutilizedEBSVolume,omitempty"`
	UnassociatedEIP                       *TrustedAdvisorRecommendations_UnassociatedEIP                       `protobuf:"bytes,9,opt,name=unassociatedEIP,proto3" json:"unassociatedEIP,omitempty"`
	IdleLoadBalancer                      *TrustedAdvisorRecommendations_IdleLoadBalancer                      `protobuf:"bytes,10,opt,name=idleLoadBalancer,proto3" json:"idleLoadBalancer,omitempty"`
	Ec2InstancesStopped                   *TrustedAdvisorRecommendations_AmazonEC2InstanceStopped              `protobuf:"bytes,11,opt,name=ec2InstancesStopped,proto3" json:"ec2InstancesStopped,omitempty"`
	Ec2RILeaseExpiration                  *TrustedAdvisorRecommendations_EC2RILeaseExpiration                  `protobuf:"bytes,12,opt,name=ec2RILeaseExpiration,proto3" json:"ec2RILeaseExpiration,omitempty"`
	ComprehendUnderutilizedEndpoints      *TrustedAdvisorRecommendations_ComprehendUnderutilizedEndpoints      `protobuf:"bytes,13,opt,name=comprehendUnderutilizedEndpoints,proto3" json:"comprehendUnderutilizedEndpoints,omitempty"`
	UnderutilizedRedshiftCluster          *TrustedAdvisorRecommendations_UnderutilizedRedshiftCluster          `protobuf:"bytes,14,opt,name=underutilizedRedshiftCluster,proto3" json:"underutilizedRedshiftCluster,omitempty"`
	LambdaWithExcessiveTimeouts           *TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts           `protobuf:"bytes,15,opt,name=lambdaWithExcessiveTimeouts,proto3" json:"lambdaWithExcessiveTimeouts,omitempty"`
	AwsWellArchitectedHighRiskIssues      *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues      `protobuf:"bytes,16,opt,name=awsWellArchitectedHighRiskIssues,proto3" json:"awsWellArchitectedHighRiskIssues,omitempty"`
	CommonDetails                         *TrustedAdvisorRecommendations_CommonDetails                         `protobuf:"bytes,17,opt,name=commonDetails,proto3" json:"commonDetails,omitempty"`
	InactiveNatGateways                   *TrustedAdvisorRecommendations_InactiveNATGateways                   `protobuf:"bytes,18,opt,name=inactiveNatGateways,proto3" json:"inactiveNatGateways,omitempty"`
	NetworkFirewallEndpointAZIndependence *TrustedAdvisorRecommendations_NetworkFirewallEndpointAZIndependence `protobuf:"bytes,19,opt,name=networkFirewallEndpointAZIndependence,proto3" json:"networkFirewallEndpointAZIndependence,omitempty"`
	InactiveNetworkFirewall               *TrustedAdvisorRecommendations_InactiveAWSNetworkFirewall            `protobuf:"bytes,20,opt,name=inactiveNetworkFirewall,proto3" json:"inactiveNetworkFirewall,omitempty"`
	Ec2OverprovisionedMSSqlServer         *TrustedAdvisorRecommendations_EC2OverProvisionedForMSSqlServer      `protobuf:"bytes,21,opt,name=ec2OverprovisionedMSSqlServer,proto3" json:"ec2OverprovisionedMSSqlServer,omitempty"`
	Ec2ConsolidationMSSqlServer           *TrustedAdvisorRecommendations_EC2ConsolidationForMSSqlServer        `protobuf:"bytes,22,opt,name=ec2ConsolidationMSSqlServer,proto3" json:"ec2ConsolidationMSSqlServer,omitempty"`
	Route53LatencyResourceRecordSets      *TrustedAdvisorRecommendations_Route53LatencyResourceRecordsSets     `protobuf:"bytes,23,opt,name=route53LatencyResourceRecordSets,proto3" json:"route53LatencyResourceRecordSets,omitempty"`
}

func (x *TrustedAdvisorRecommendations) Reset() {
	*x = TrustedAdvisorRecommendations{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4}
}

func (x *TrustedAdvisorRecommendations) GetSeverityStatus() string {
	if x != nil {
		return x.SeverityStatus
	}
	return ""
}

func (x *TrustedAdvisorRecommendations) GetRecommendationArn() string {
	if x != nil {
		return x.RecommendationArn
	}
	return ""
}

func (x *TrustedAdvisorRecommendations) GetExclusionStatus() string {
	if x != nil {
		return x.ExclusionStatus
	}
	return ""
}

func (x *TrustedAdvisorRecommendations) GetLowUtilizationEc2Instances() *TrustedAdvisorRecommendations_LowUtilizationEC2Instances {
	if x != nil {
		return x.LowUtilizationEc2Instances
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetRdsIdleDbInstances() *TrustedAdvisorRecommendations_RDSIdleDBInstances {
	if x != nil {
		return x.RdsIdleDbInstances
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetS3IncompleteMPU() *TrustedAdvisorRecommendations_S3IncompleteMPU {
	if x != nil {
		return x.S3IncompleteMPU
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetLambdaHighErrorRates() *TrustedAdvisorRecommendations_LambdaHighErrorRates {
	if x != nil {
		return x.LambdaHighErrorRates
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetUnderutilizedEBSVolume() *TrustedAdvisorRecommendations_UnderutilizedEBSVolume {
	if x != nil {
		return x.UnderutilizedEBSVolume
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetUnassociatedEIP() *TrustedAdvisorRecommendations_UnassociatedEIP {
	if x != nil {
		return x.UnassociatedEIP
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetIdleLoadBalancer() *TrustedAdvisorRecommendations_IdleLoadBalancer {
	if x != nil {
		return x.IdleLoadBalancer
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetEc2InstancesStopped() *TrustedAdvisorRecommendations_AmazonEC2InstanceStopped {
	if x != nil {
		return x.Ec2InstancesStopped
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetEc2RILeaseExpiration() *TrustedAdvisorRecommendations_EC2RILeaseExpiration {
	if x != nil {
		return x.Ec2RILeaseExpiration
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetComprehendUnderutilizedEndpoints() *TrustedAdvisorRecommendations_ComprehendUnderutilizedEndpoints {
	if x != nil {
		return x.ComprehendUnderutilizedEndpoints
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetUnderutilizedRedshiftCluster() *TrustedAdvisorRecommendations_UnderutilizedRedshiftCluster {
	if x != nil {
		return x.UnderutilizedRedshiftCluster
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetLambdaWithExcessiveTimeouts() *TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts {
	if x != nil {
		return x.LambdaWithExcessiveTimeouts
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetAwsWellArchitectedHighRiskIssues() *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues {
	if x != nil {
		return x.AwsWellArchitectedHighRiskIssues
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetCommonDetails() *TrustedAdvisorRecommendations_CommonDetails {
	if x != nil {
		return x.CommonDetails
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetInactiveNatGateways() *TrustedAdvisorRecommendations_InactiveNATGateways {
	if x != nil {
		return x.InactiveNatGateways
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetNetworkFirewallEndpointAZIndependence() *TrustedAdvisorRecommendations_NetworkFirewallEndpointAZIndependence {
	if x != nil {
		return x.NetworkFirewallEndpointAZIndependence
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetInactiveNetworkFirewall() *TrustedAdvisorRecommendations_InactiveAWSNetworkFirewall {
	if x != nil {
		return x.InactiveNetworkFirewall
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetEc2OverprovisionedMSSqlServer() *TrustedAdvisorRecommendations_EC2OverProvisionedForMSSqlServer {
	if x != nil {
		return x.Ec2OverprovisionedMSSqlServer
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetEc2ConsolidationMSSqlServer() *TrustedAdvisorRecommendations_EC2ConsolidationForMSSqlServer {
	if x != nil {
		return x.Ec2ConsolidationMSSqlServer
	}
	return nil
}

func (x *TrustedAdvisorRecommendations) GetRoute53LatencyResourceRecordSets() *TrustedAdvisorRecommendations_Route53LatencyResourceRecordsSets {
	if x != nil {
		return x.Route53LatencyResourceRecordSets
	}
	return nil
}

type AWSRecommendations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostExplorerRecommendations        *CostExplorerRecommendations        `protobuf:"bytes,1,opt,name=costExplorerRecommendations,proto3" json:"costExplorerRecommendations,omitempty"`
	CostOptimizationHubRecommendations *CostOptimizationHubRecommendations `protobuf:"bytes,2,opt,name=costOptimizationHubRecommendations,proto3" json:"costOptimizationHubRecommendations,omitempty"`
	TrustedAdvisorRecommendations      *TrustedAdvisorRecommendations      `protobuf:"bytes,3,opt,name=trustedAdvisorRecommendations,proto3" json:"trustedAdvisorRecommendations,omitempty"`
	ResourceArn                        string                              `protobuf:"bytes,4,opt,name=resourceArn,proto3" json:"resourceArn,omitempty"`
}

func (x *AWSRecommendations) Reset() {
	*x = AWSRecommendations{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSRecommendations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSRecommendations) ProtoMessage() {}

func (x *AWSRecommendations) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSRecommendations.ProtoReflect.Descriptor instead.
func (*AWSRecommendations) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{5}
}

func (x *AWSRecommendations) GetCostExplorerRecommendations() *CostExplorerRecommendations {
	if x != nil {
		return x.CostExplorerRecommendations
	}
	return nil
}

func (x *AWSRecommendations) GetCostOptimizationHubRecommendations() *CostOptimizationHubRecommendations {
	if x != nil {
		return x.CostOptimizationHubRecommendations
	}
	return nil
}

func (x *AWSRecommendations) GetTrustedAdvisorRecommendations() *TrustedAdvisorRecommendations {
	if x != nil {
		return x.TrustedAdvisorRecommendations
	}
	return nil
}

func (x *AWSRecommendations) GetResourceArn() string {
	if x != nil {
		return x.ResourceArn
	}
	return ""
}

type MetricData_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MetricData_Metrics) Reset() {
	*x = MetricData_Metrics{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricData_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricData_Metrics) ProtoMessage() {}

func (x *MetricData_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricData_Metrics.ProtoReflect.Descriptor instead.
func (*MetricData_Metrics) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MetricData_Metrics) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *MetricData_Metrics) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type CostExplorerRecommendations_DiscountPlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentOption string                                              `protobuf:"bytes,1,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	Term          string                                              `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
	UpfrontCost   float64                                             `protobuf:"fixed64,3,opt,name=upfrontCost,proto3" json:"upfrontCost,omitempty"`
	RiOption      *CostExplorerRecommendations_DiscountPlans_RIOption `protobuf:"bytes,4,opt,name=riOption,proto3" json:"riOption,omitempty"`
	SpOption      *CostExplorerRecommendations_DiscountPlans_SPOption `protobuf:"bytes,5,opt,name=spOption,proto3" json:"spOption,omitempty"`
}

func (x *CostExplorerRecommendations_DiscountPlans) Reset() {
	*x = CostExplorerRecommendations_DiscountPlans{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostExplorerRecommendations_DiscountPlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostExplorerRecommendations_DiscountPlans) ProtoMessage() {}

func (x *CostExplorerRecommendations_DiscountPlans) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostExplorerRecommendations_DiscountPlans.ProtoReflect.Descriptor instead.
func (*CostExplorerRecommendations_DiscountPlans) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CostExplorerRecommendations_DiscountPlans) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *CostExplorerRecommendations_DiscountPlans) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *CostExplorerRecommendations_DiscountPlans) GetUpfrontCost() float64 {
	if x != nil {
		return x.UpfrontCost
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans) GetRiOption() *CostExplorerRecommendations_DiscountPlans_RIOption {
	if x != nil {
		return x.RiOption
	}
	return nil
}

func (x *CostExplorerRecommendations_DiscountPlans) GetSpOption() *CostExplorerRecommendations_DiscountPlans_SPOption {
	if x != nil {
		return x.SpOption
	}
	return nil
}

type CostExplorerRecommendations_EC2Rightsize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentDetails        *CostExplorerRecommendations_EC2Rightsize_Details `protobuf:"bytes,1,opt,name=currentDetails,proto3" json:"currentDetails,omitempty"`
	RecommendationDetails *CostExplorerRecommendations_EC2Rightsize_Details `protobuf:"bytes,2,opt,name=recommendationDetails,proto3" json:"recommendationDetails,omitempty"`
}

func (x *CostExplorerRecommendations_EC2Rightsize) Reset() {
	*x = CostExplorerRecommendations_EC2Rightsize{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostExplorerRecommendations_EC2Rightsize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostExplorerRecommendations_EC2Rightsize) ProtoMessage() {}

func (x *CostExplorerRecommendations_EC2Rightsize) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostExplorerRecommendations_EC2Rightsize.ProtoReflect.Descriptor instead.
func (*CostExplorerRecommendations_EC2Rightsize) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{1, 1}
}

func (x *CostExplorerRecommendations_EC2Rightsize) GetCurrentDetails() *CostExplorerRecommendations_EC2Rightsize_Details {
	if x != nil {
		return x.CurrentDetails
	}
	return nil
}

func (x *CostExplorerRecommendations_EC2Rightsize) GetRecommendationDetails() *CostExplorerRecommendations_EC2Rightsize_Details {
	if x != nil {
		return x.RecommendationDetails
	}
	return nil
}

type CostExplorerRecommendations_TerminateEC2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ec2Details  *AWSResourceDetails_EC2Details `protobuf:"bytes,1,opt,name=ec2Details,proto3" json:"ec2Details,omitempty"`
	MonthlyCost float64                        `protobuf:"fixed64,2,opt,name=monthlyCost,proto3" json:"monthlyCost,omitempty"`
}

func (x *CostExplorerRecommendations_TerminateEC2) Reset() {
	*x = CostExplorerRecommendations_TerminateEC2{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostExplorerRecommendations_TerminateEC2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostExplorerRecommendations_TerminateEC2) ProtoMessage() {}

func (x *CostExplorerRecommendations_TerminateEC2) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostExplorerRecommendations_TerminateEC2.ProtoReflect.Descriptor instead.
func (*CostExplorerRecommendations_TerminateEC2) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{1, 2}
}

func (x *CostExplorerRecommendations_TerminateEC2) GetEc2Details() *AWSResourceDetails_EC2Details {
	if x != nil {
		return x.Ec2Details
	}
	return nil
}

func (x *CostExplorerRecommendations_TerminateEC2) GetMonthlyCost() float64 {
	if x != nil {
		return x.MonthlyCost
	}
	return 0
}

type CostExplorerRecommendations_DiscountPlans_RIOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ec2Details                            *AWSResourceDetails_EC2Details                                               `protobuf:"bytes,1,opt,name=ec2Details,proto3" json:"ec2Details,omitempty"`
	RdsDetails                            *AWSResourceDetails_RDSDetails                                               `protobuf:"bytes,9,opt,name=rdsDetails,proto3" json:"rdsDetails,omitempty"`
	ElasticacheDetails                    *AWSResourceDetails_ElastiCacheDetails                                       `protobuf:"bytes,10,opt,name=elasticacheDetails,proto3" json:"elasticacheDetails,omitempty"`
	RedshiftDetails                       *AWSResourceDetails_RedshiftDetails                                          `protobuf:"bytes,11,opt,name=redshiftDetails,proto3" json:"redshiftDetails,omitempty"`
	OpensearchDetails                     *AWSResourceDetails_OpensearchDetails                                        `protobuf:"bytes,12,opt,name=opensearchDetails,proto3" json:"opensearchDetails,omitempty"`
	MemoryDBDetails                       *AWSResourceDetails_MemoryDBDetails                                          `protobuf:"bytes,13,opt,name=memoryDBDetails,proto3" json:"memoryDBDetails,omitempty"`
	RecommendedNormalizedUnits            float64                                                                      `protobuf:"fixed64,2,opt,name=recommendedNormalizedUnits,proto3" json:"recommendedNormalizedUnits,omitempty"`
	RecommendedNumberOfInstanceToPurchase float64                                                                      `protobuf:"fixed64,3,opt,name=recommendedNumberOfInstanceToPurchase,proto3" json:"recommendedNumberOfInstanceToPurchase,omitempty"`
	EstOutcomeFromPurchaseRI              *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI `protobuf:"bytes,4,opt,name=estOutcomeFromPurchaseRI,proto3" json:"estOutcomeFromPurchaseRI,omitempty"`
	Region                                string                                                                       `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	SizeFlexEligible                      bool                                                                         `protobuf:"varint,6,opt,name=sizeFlexEligible,proto3" json:"sizeFlexEligible,omitempty"`
	Tenancy                               string                                                                       `protobuf:"bytes,7,opt,name=tenancy,proto3" json:"tenancy,omitempty"`
	CurrentGeneration                     bool                                                                         `protobuf:"varint,8,opt,name=currentGeneration,proto3" json:"currentGeneration,omitempty"`
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) Reset() {
	*x = CostExplorerRecommendations_DiscountPlans_RIOption{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostExplorerRecommendations_DiscountPlans_RIOption) ProtoMessage() {}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostExplorerRecommendations_DiscountPlans_RIOption.ProtoReflect.Descriptor instead.
func (*CostExplorerRecommendations_DiscountPlans_RIOption) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) GetEc2Details() *AWSResourceDetails_EC2Details {
	if x != nil {
		return x.Ec2Details
	}
	return nil
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) GetRdsDetails() *AWSResourceDetails_RDSDetails {
	if x != nil {
		return x.RdsDetails
	}
	return nil
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) GetElasticacheDetails() *AWSResourceDetails_ElastiCacheDetails {
	if x != nil {
		return x.ElasticacheDetails
	}
	return nil
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) GetRedshiftDetails() *AWSResourceDetails_RedshiftDetails {
	if x != nil {
		return x.RedshiftDetails
	}
	return nil
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) GetOpensearchDetails() *AWSResourceDetails_OpensearchDetails {
	if x != nil {
		return x.OpensearchDetails
	}
	return nil
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) GetMemoryDBDetails() *AWSResourceDetails_MemoryDBDetails {
	if x != nil {
		return x.MemoryDBDetails
	}
	return nil
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) GetRecommendedNormalizedUnits() float64 {
	if x != nil {
		return x.RecommendedNormalizedUnits
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) GetRecommendedNumberOfInstanceToPurchase() float64 {
	if x != nil {
		return x.RecommendedNumberOfInstanceToPurchase
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) GetEstOutcomeFromPurchaseRI() *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI {
	if x != nil {
		return x.EstOutcomeFromPurchaseRI
	}
	return nil
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) GetSizeFlexEligible() bool {
	if x != nil {
		return x.SizeFlexEligible
	}
	return false
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) GetTenancy() string {
	if x != nil {
		return x.Tenancy
	}
	return ""
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption) GetCurrentGeneration() bool {
	if x != nil {
		return x.CurrentGeneration
	}
	return false
}

type CostExplorerRecommendations_DiscountPlans_SPOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                       string                                                                        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	CurrencyCode               string                                                                        `protobuf:"bytes,2,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	HourlyCommitmentToPurchase float64                                                                       `protobuf:"fixed64,3,opt,name=hourlyCommitmentToPurchase,proto3" json:"hourlyCommitmentToPurchase,omitempty"`
	OfferingId                 string                                                                        `protobuf:"bytes,4,opt,name=offeringId,proto3" json:"offeringId,omitempty"`
	CurrentUtilizationDetails  *CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails `protobuf:"bytes,5,opt,name=currentUtilizationDetails,proto3" json:"currentUtilizationDetails,omitempty"`
	EstOutcomeFromPurchaseSP   *CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP  `protobuf:"bytes,6,opt,name=estOutcomeFromPurchaseSP,proto3" json:"estOutcomeFromPurchaseSP,omitempty"`
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption) Reset() {
	*x = CostExplorerRecommendations_DiscountPlans_SPOption{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostExplorerRecommendations_DiscountPlans_SPOption) ProtoMessage() {}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostExplorerRecommendations_DiscountPlans_SPOption.ProtoReflect.Descriptor instead.
func (*CostExplorerRecommendations_DiscountPlans_SPOption) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption) GetHourlyCommitmentToPurchase() float64 {
	if x != nil {
		return x.HourlyCommitmentToPurchase
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption) GetOfferingId() string {
	if x != nil {
		return x.OfferingId
	}
	return ""
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption) GetCurrentUtilizationDetails() *CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails {
	if x != nil {
		return x.CurrentUtilizationDetails
	}
	return nil
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption) GetEstOutcomeFromPurchaseSP() *CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP {
	if x != nil {
		return x.EstOutcomeFromPurchaseSP
	}
	return nil
}

type CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AveUtilization                 float64 `protobuf:"fixed64,1,opt,name=aveUtilization,proto3" json:"aveUtilization,omitempty"`
	AveNormalizesUnitsUsedPerHour  float64 `protobuf:"fixed64,2,opt,name=aveNormalizesUnitsUsedPerHour,proto3" json:"aveNormalizesUnitsUsedPerHour,omitempty"`
	AveNumberOfInstanceUsedPerHour float64 `protobuf:"fixed64,3,opt,name=aveNumberOfInstanceUsedPerHour,proto3" json:"aveNumberOfInstanceUsedPerHour,omitempty"`
	BreakEvenInMonths              float64 `protobuf:"fixed64,4,opt,name=breakEvenInMonths,proto3" json:"breakEvenInMonths,omitempty"`
	MonthlyOnDemandCost            float64 `protobuf:"fixed64,5,opt,name=monthlyOnDemandCost,proto3" json:"monthlyOnDemandCost,omitempty"`
	MonthlyRICost                  float64 `protobuf:"fixed64,6,opt,name=monthlyRICost,proto3" json:"monthlyRICost,omitempty"`
	MonthlySavings                 float64 `protobuf:"fixed64,7,opt,name=monthlySavings,proto3" json:"monthlySavings,omitempty"`
	MonthlySavingsPercentage       float64 `protobuf:"fixed64,8,opt,name=monthlySavingsPercentage,proto3" json:"monthlySavingsPercentage,omitempty"`
	MaxNormalizedUnitsUsedPerHour  float64 `protobuf:"fixed64,9,opt,name=maxNormalizedUnitsUsedPerHour,proto3" json:"maxNormalizedUnitsUsedPerHour,omitempty"`
	MinNormalizedUnitsUsedPerHour  float64 `protobuf:"fixed64,10,opt,name=minNormalizedUnitsUsedPerHour,proto3" json:"minNormalizedUnitsUsedPerHour,omitempty"`
	MinNumberOfInstanceUsedPerHour float64 `protobuf:"fixed64,11,opt,name=minNumberOfInstanceUsedPerHour,proto3" json:"minNumberOfInstanceUsedPerHour,omitempty"`
	MaxNumberOfInstanceUsedPerHour float64 `protobuf:"fixed64,12,opt,name=maxNumberOfInstanceUsedPerHour,proto3" json:"maxNumberOfInstanceUsedPerHour,omitempty"`
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) Reset() {
	*x = CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) ProtoMessage() {}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI.ProtoReflect.Descriptor instead.
func (*CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{1, 0, 0, 0}
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) GetAveUtilization() float64 {
	if x != nil {
		return x.AveUtilization
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) GetAveNormalizesUnitsUsedPerHour() float64 {
	if x != nil {
		return x.AveNormalizesUnitsUsedPerHour
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) GetAveNumberOfInstanceUsedPerHour() float64 {
	if x != nil {
		return x.AveNumberOfInstanceUsedPerHour
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) GetBreakEvenInMonths() float64 {
	if x != nil {
		return x.BreakEvenInMonths
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) GetMonthlyOnDemandCost() float64 {
	if x != nil {
		return x.MonthlyOnDemandCost
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) GetMonthlyRICost() float64 {
	if x != nil {
		return x.MonthlyRICost
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) GetMonthlySavings() float64 {
	if x != nil {
		return x.MonthlySavings
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) GetMonthlySavingsPercentage() float64 {
	if x != nil {
		return x.MonthlySavingsPercentage
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) GetMaxNormalizedUnitsUsedPerHour() float64 {
	if x != nil {
		return x.MaxNormalizedUnitsUsedPerHour
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) GetMinNormalizedUnitsUsedPerHour() float64 {
	if x != nil {
		return x.MinNormalizedUnitsUsedPerHour
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) GetMinNumberOfInstanceUsedPerHour() float64 {
	if x != nil {
		return x.MinNumberOfInstanceUsedPerHour
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI) GetMaxNumberOfInstanceUsedPerHour() float64 {
	if x != nil {
		return x.MaxNumberOfInstanceUsedPerHour
	}
	return 0
}

type CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AveCoverage                         float64 `protobuf:"fixed64,1,opt,name=aveCoverage,proto3" json:"aveCoverage,omitempty"`
	AveHourOnDemandSpend                float64 `protobuf:"fixed64,2,opt,name=aveHourOnDemandSpend,proto3" json:"aveHourOnDemandSpend,omitempty"`
	MaxHourlyOnDemandSpend              float64 `protobuf:"fixed64,3,opt,name=maxHourlyOnDemandSpend,proto3" json:"maxHourlyOnDemandSpend,omitempty"`
	MinHourlyOnDemandSpend              float64 `protobuf:"fixed64,4,opt,name=minHourlyOnDemandSpend,proto3" json:"minHourlyOnDemandSpend,omitempty"`
	ExistingHourlyCommitment            float64 `protobuf:"fixed64,5,opt,name=existingHourlyCommitment,proto3" json:"existingHourlyCommitment,omitempty"`
	EstOnDemandCostWithHourlyCommitment float64 `protobuf:"fixed64,6,opt,name=estOnDemandCostWithHourlyCommitment,proto3" json:"estOnDemandCostWithHourlyCommitment,omitempty"`
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails) Reset() {
	*x = CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails) ProtoMessage() {}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails.ProtoReflect.Descriptor instead.
func (*CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{1, 0, 1, 0}
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails) GetAveCoverage() float64 {
	if x != nil {
		return x.AveCoverage
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails) GetAveHourOnDemandSpend() float64 {
	if x != nil {
		return x.AveHourOnDemandSpend
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails) GetMaxHourlyOnDemandSpend() float64 {
	if x != nil {
		return x.MaxHourlyOnDemandSpend
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails) GetMinHourlyOnDemandSpend() float64 {
	if x != nil {
		return x.MinHourlyOnDemandSpend
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails) GetExistingHourlyCommitment() float64 {
	if x != nil {
		return x.ExistingHourlyCommitment
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails) GetEstOnDemandCostWithHourlyCommitment() float64 {
	if x != nil {
		return x.EstOnDemandCostWithHourlyCommitment
	}
	return 0
}

type CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AveCoverage          float64 `protobuf:"fixed64,1,opt,name=aveCoverage,proto3" json:"aveCoverage,omitempty"`
	AveUtilization       float64 `protobuf:"fixed64,2,opt,name=aveUtilization,proto3" json:"aveUtilization,omitempty"`
	MonthlySavingsAmount float64 `protobuf:"fixed64,3,opt,name=monthlySavingsAmount,proto3" json:"monthlySavingsAmount,omitempty"`
	OnDemandCost         float64 `protobuf:"fixed64,4,opt,name=onDemandCost,proto3" json:"onDemandCost,omitempty"`
	Roi                  float64 `protobuf:"fixed64,5,opt,name=roi,proto3" json:"roi,omitempty"`
	SavingsPlanCost      float64 `protobuf:"fixed64,6,opt,name=savingsPlanCost,proto3" json:"savingsPlanCost,omitempty"`
	SavingsPercentage    float64 `protobuf:"fixed64,7,opt,name=savingsPercentage,proto3" json:"savingsPercentage,omitempty"`
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP) Reset() {
	*x = CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP) ProtoMessage() {}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP.ProtoReflect.Descriptor instead.
func (*CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{1, 0, 1, 1}
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP) GetAveCoverage() float64 {
	if x != nil {
		return x.AveCoverage
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP) GetAveUtilization() float64 {
	if x != nil {
		return x.AveUtilization
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP) GetMonthlySavingsAmount() float64 {
	if x != nil {
		return x.MonthlySavingsAmount
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP) GetOnDemandCost() float64 {
	if x != nil {
		return x.OnDemandCost
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP) GetRoi() float64 {
	if x != nil {
		return x.Roi
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP) GetSavingsPlanCost() float64 {
	if x != nil {
		return x.SavingsPlanCost
	}
	return 0
}

func (x *CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP) GetSavingsPercentage() float64 {
	if x != nil {
		return x.SavingsPercentage
	}
	return 0
}

type CostExplorerRecommendations_EC2Rightsize_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonthlyCost              float64                        `protobuf:"fixed64,1,opt,name=monthlyCost,proto3" json:"monthlyCost,omitempty"`
	MonthlySavingsAmount     float64                        `protobuf:"fixed64,2,opt,name=monthlySavingsAmount,proto3" json:"monthlySavingsAmount,omitempty"`
	MonthlySavingsPercentage float64                        `protobuf:"fixed64,3,opt,name=monthlySavingsPercentage,proto3" json:"monthlySavingsPercentage,omitempty"`
	Ec2Details               *AWSResourceDetails_EC2Details `protobuf:"bytes,4,opt,name=ec2Details,proto3" json:"ec2Details,omitempty"`
}

func (x *CostExplorerRecommendations_EC2Rightsize_Details) Reset() {
	*x = CostExplorerRecommendations_EC2Rightsize_Details{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostExplorerRecommendations_EC2Rightsize_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostExplorerRecommendations_EC2Rightsize_Details) ProtoMessage() {}

func (x *CostExplorerRecommendations_EC2Rightsize_Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostExplorerRecommendations_EC2Rightsize_Details.ProtoReflect.Descriptor instead.
func (*CostExplorerRecommendations_EC2Rightsize_Details) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *CostExplorerRecommendations_EC2Rightsize_Details) GetMonthlyCost() float64 {
	if x != nil {
		return x.MonthlyCost
	}
	return 0
}

func (x *CostExplorerRecommendations_EC2Rightsize_Details) GetMonthlySavingsAmount() float64 {
	if x != nil {
		return x.MonthlySavingsAmount
	}
	return 0
}

func (x *CostExplorerRecommendations_EC2Rightsize_Details) GetMonthlySavingsPercentage() float64 {
	if x != nil {
		return x.MonthlySavingsPercentage
	}
	return 0
}

func (x *CostExplorerRecommendations_EC2Rightsize_Details) GetEc2Details() *AWSResourceDetails_EC2Details {
	if x != nil {
		return x.Ec2Details
	}
	return nil
}

type CostOptimizationHubRecommendations_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostCalculation            *CostOptimizationHubRecommendations_Details_CostCalculation `protobuf:"bytes,1,opt,name=costCalculation,proto3" json:"costCalculation,omitempty"`
	Ec2Details                 *AWSResourceDetails_EC2Details                              `protobuf:"bytes,2,opt,name=ec2Details,proto3" json:"ec2Details,omitempty"`
	RdsDetails                 *AWSResourceDetails_RDSDetails                              `protobuf:"bytes,3,opt,name=rdsDetails,proto3" json:"rdsDetails,omitempty"`
	EbsDetails                 *AWSResourceDetails_EBSDetails                              `protobuf:"bytes,4,opt,name=ebsDetails,proto3" json:"ebsDetails,omitempty"`
	Ec2AutoScalingGroupDetails *AWSResourceDetails_EC2AutoScalingGroupDetails              `protobuf:"bytes,5,opt,name=ec2AutoScalingGroupDetails,proto3" json:"ec2AutoScalingGroupDetails,omitempty"`
	EcsDetails                 *AWSResourceDetails_ECSDetails                              `protobuf:"bytes,6,opt,name=ecsDetails,proto3" json:"ecsDetails,omitempty"`
	LambdaDetails              *AWSResourceDetails_LambdaDetails                           `protobuf:"bytes,7,opt,name=lambdaDetails,proto3" json:"lambdaDetails,omitempty"`
}

func (x *CostOptimizationHubRecommendations_Details) Reset() {
	*x = CostOptimizationHubRecommendations_Details{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostOptimizationHubRecommendations_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostOptimizationHubRecommendations_Details) ProtoMessage() {}

func (x *CostOptimizationHubRecommendations_Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostOptimizationHubRecommendations_Details.ProtoReflect.Descriptor instead.
func (*CostOptimizationHubRecommendations_Details) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CostOptimizationHubRecommendations_Details) GetCostCalculation() *CostOptimizationHubRecommendations_Details_CostCalculation {
	if x != nil {
		return x.CostCalculation
	}
	return nil
}

func (x *CostOptimizationHubRecommendations_Details) GetEc2Details() *AWSResourceDetails_EC2Details {
	if x != nil {
		return x.Ec2Details
	}
	return nil
}

func (x *CostOptimizationHubRecommendations_Details) GetRdsDetails() *AWSResourceDetails_RDSDetails {
	if x != nil {
		return x.RdsDetails
	}
	return nil
}

func (x *CostOptimizationHubRecommendations_Details) GetEbsDetails() *AWSResourceDetails_EBSDetails {
	if x != nil {
		return x.EbsDetails
	}
	return nil
}

func (x *CostOptimizationHubRecommendations_Details) GetEc2AutoScalingGroupDetails() *AWSResourceDetails_EC2AutoScalingGroupDetails {
	if x != nil {
		return x.Ec2AutoScalingGroupDetails
	}
	return nil
}

func (x *CostOptimizationHubRecommendations_Details) GetEcsDetails() *AWSResourceDetails_ECSDetails {
	if x != nil {
		return x.EcsDetails
	}
	return nil
}

func (x *CostOptimizationHubRecommendations_Details) GetLambdaDetails() *AWSResourceDetails_LambdaDetails {
	if x != nil {
		return x.LambdaDetails
	}
	return nil
}

type CostOptimizationHubRecommendations_Details_CostCalculation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EstimatedCostAfterDiscount             float64                                                                        `protobuf:"fixed64,1,opt,name=estimatedCostAfterDiscount,proto3" json:"estimatedCostAfterDiscount,omitempty"`
	EstimatedCostBeforeDiscount            float64                                                                        `protobuf:"fixed64,2,opt,name=estimatedCostBeforeDiscount,proto3" json:"estimatedCostBeforeDiscount,omitempty"`
	EstimatedNetUnusedAmortizedCommitments float64                                                                        `protobuf:"fixed64,3,opt,name=estimatedNetUnusedAmortizedCommitments,proto3" json:"estimatedNetUnusedAmortizedCommitments,omitempty"`
	EstimatedDiscounts                     *CostOptimizationHubRecommendations_Details_CostCalculation_EstimatedDiscounts `protobuf:"bytes,4,opt,name=estimatedDiscounts,proto3" json:"estimatedDiscounts,omitempty"`
	UsageTypes                             []*CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes       `protobuf:"bytes,5,rep,name=usageTypes,proto3" json:"usageTypes,omitempty"`
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation) Reset() {
	*x = CostOptimizationHubRecommendations_Details_CostCalculation{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostOptimizationHubRecommendations_Details_CostCalculation) ProtoMessage() {}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostOptimizationHubRecommendations_Details_CostCalculation.ProtoReflect.Descriptor instead.
func (*CostOptimizationHubRecommendations_Details_CostCalculation) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation) GetEstimatedCostAfterDiscount() float64 {
	if x != nil {
		return x.EstimatedCostAfterDiscount
	}
	return 0
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation) GetEstimatedCostBeforeDiscount() float64 {
	if x != nil {
		return x.EstimatedCostBeforeDiscount
	}
	return 0
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation) GetEstimatedNetUnusedAmortizedCommitments() float64 {
	if x != nil {
		return x.EstimatedNetUnusedAmortizedCommitments
	}
	return 0
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation) GetEstimatedDiscounts() *CostOptimizationHubRecommendations_Details_CostCalculation_EstimatedDiscounts {
	if x != nil {
		return x.EstimatedDiscounts
	}
	return nil
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation) GetUsageTypes() []*CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes {
	if x != nil {
		return x.UsageTypes
	}
	return nil
}

type CostOptimizationHubRecommendations_Details_CostCalculation_EstimatedDiscounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservedInstancesDiscount float64 `protobuf:"fixed64,1,opt,name=reservedInstancesDiscount,proto3" json:"reservedInstancesDiscount,omitempty"`
	SavingsPlansDiscount      float64 `protobuf:"fixed64,2,opt,name=savingsPlansDiscount,proto3" json:"savingsPlansDiscount,omitempty"`
	OtherDiscount             float64 `protobuf:"fixed64,3,opt,name=otherDiscount,proto3" json:"otherDiscount,omitempty"`
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation_EstimatedDiscounts) Reset() {
	*x = CostOptimizationHubRecommendations_Details_CostCalculation_EstimatedDiscounts{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation_EstimatedDiscounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostOptimizationHubRecommendations_Details_CostCalculation_EstimatedDiscounts) ProtoMessage() {
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation_EstimatedDiscounts) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostOptimizationHubRecommendations_Details_CostCalculation_EstimatedDiscounts.ProtoReflect.Descriptor instead.
func (*CostOptimizationHubRecommendations_Details_CostCalculation_EstimatedDiscounts) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{2, 0, 0, 0}
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation_EstimatedDiscounts) GetReservedInstancesDiscount() float64 {
	if x != nil {
		return x.ReservedInstancesDiscount
	}
	return 0
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation_EstimatedDiscounts) GetSavingsPlansDiscount() float64 {
	if x != nil {
		return x.SavingsPlansDiscount
	}
	return 0
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation_EstimatedDiscounts) GetOtherDiscount() float64 {
	if x != nil {
		return x.OtherDiscount
	}
	return 0
}

type CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation   string  `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	ProductCode string  `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Unit        string  `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	UsageAmount float64 `protobuf:"fixed64,4,opt,name=usageAmount,proto3" json:"usageAmount,omitempty"`
	UsageType   string  `protobuf:"bytes,5,opt,name=usageType,proto3" json:"usageType,omitempty"`
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes) Reset() {
	*x = CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes) ProtoMessage() {}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes.ProtoReflect.Descriptor instead.
func (*CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{2, 0, 0, 1}
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes) GetUsageAmount() float64 {
	if x != nil {
		return x.UsageAmount
	}
	return 0
}

func (x *CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes) GetUsageType() string {
	if x != nil {
		return x.UsageType
	}
	return ""
}

type AWSResourceDetails_Route53Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostedZoneName        string `protobuf:"bytes,1,opt,name=hostedZoneName,proto3" json:"hostedZoneName,omitempty"`
	HostedZoneId          string `protobuf:"bytes,2,opt,name=hostedZoneId,proto3" json:"hostedZoneId,omitempty"`
	ResourceRecordSetName string `protobuf:"bytes,3,opt,name=resourceRecordSetName,proto3" json:"resourceRecordSetName,omitempty"`
	ResourceRecordSetType string `protobuf:"bytes,4,opt,name=resourceRecordSetType,proto3" json:"resourceRecordSetType,omitempty"`
}

func (x *AWSResourceDetails_Route53Details) Reset() {
	*x = AWSResourceDetails_Route53Details{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_Route53Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_Route53Details) ProtoMessage() {}

func (x *AWSResourceDetails_Route53Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_Route53Details.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_Route53Details) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 0}
}

func (x *AWSResourceDetails_Route53Details) GetHostedZoneName() string {
	if x != nil {
		return x.HostedZoneName
	}
	return ""
}

func (x *AWSResourceDetails_Route53Details) GetHostedZoneId() string {
	if x != nil {
		return x.HostedZoneId
	}
	return ""
}

func (x *AWSResourceDetails_Route53Details) GetResourceRecordSetName() string {
	if x != nil {
		return x.ResourceRecordSetName
	}
	return ""
}

func (x *AWSResourceDetails_Route53Details) GetResourceRecordSetType() string {
	if x != nil {
		return x.ResourceRecordSetType
	}
	return ""
}

type AWSResourceDetails_NetworkFirewallDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint *AWSResourceDetails_NetworkFirewallDetails_Endpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Arn      string                                              `protobuf:"bytes,2,opt,name=arn,proto3" json:"arn,omitempty"`
	VpcId    string                                              `protobuf:"bytes,3,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
	Subnets  []string                                            `protobuf:"bytes,4,rep,name=subnets,proto3" json:"subnets,omitempty"`
}

func (x *AWSResourceDetails_NetworkFirewallDetails) Reset() {
	*x = AWSResourceDetails_NetworkFirewallDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_NetworkFirewallDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_NetworkFirewallDetails) ProtoMessage() {}

func (x *AWSResourceDetails_NetworkFirewallDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_NetworkFirewallDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_NetworkFirewallDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 1}
}

func (x *AWSResourceDetails_NetworkFirewallDetails) GetEndpoint() *AWSResourceDetails_NetworkFirewallDetails_Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *AWSResourceDetails_NetworkFirewallDetails) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AWSResourceDetails_NetworkFirewallDetails) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *AWSResourceDetails_NetworkFirewallDetails) GetSubnets() []string {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type AWSResourceDetails_ComprehendDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint *AWSResourceDetails_ComprehendDetails_Endpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *AWSResourceDetails_ComprehendDetails) Reset() {
	*x = AWSResourceDetails_ComprehendDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_ComprehendDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_ComprehendDetails) ProtoMessage() {}

func (x *AWSResourceDetails_ComprehendDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_ComprehendDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_ComprehendDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 2}
}

func (x *AWSResourceDetails_ComprehendDetails) GetEndpoint() *AWSResourceDetails_ComprehendDetails_Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

type AWSResourceDetails_ReservedInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpirationDate string                                         `protobuf:"bytes,1,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	InstanceCount  float64                                        `protobuf:"fixed64,2,opt,name=instanceCount,proto3" json:"instanceCount,omitempty"`
	InstanceType   string                                         `protobuf:"bytes,3,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Platform       string                                         `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
	Id             string                                         `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Metrics        *AWSResourceDetails_ReservedInstance_RIMetrics `protobuf:"bytes,6,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *AWSResourceDetails_ReservedInstance) Reset() {
	*x = AWSResourceDetails_ReservedInstance{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_ReservedInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_ReservedInstance) ProtoMessage() {}

func (x *AWSResourceDetails_ReservedInstance) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_ReservedInstance.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_ReservedInstance) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 3}
}

func (x *AWSResourceDetails_ReservedInstance) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *AWSResourceDetails_ReservedInstance) GetInstanceCount() float64 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

func (x *AWSResourceDetails_ReservedInstance) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *AWSResourceDetails_ReservedInstance) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *AWSResourceDetails_ReservedInstance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AWSResourceDetails_ReservedInstance) GetMetrics() *AWSResourceDetails_ReservedInstance_RIMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type AWSResourceDetails_ELBDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalancer *AWSResourceDetails_ELBDetails_LoadBalancer `protobuf:"bytes,1,opt,name=loadBalancer,proto3" json:"loadBalancer,omitempty"`
}

func (x *AWSResourceDetails_ELBDetails) Reset() {
	*x = AWSResourceDetails_ELBDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_ELBDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_ELBDetails) ProtoMessage() {}

func (x *AWSResourceDetails_ELBDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_ELBDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_ELBDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 4}
}

func (x *AWSResourceDetails_ELBDetails) GetLoadBalancer() *AWSResourceDetails_ELBDetails_LoadBalancer {
	if x != nil {
		return x.LoadBalancer
	}
	return nil
}

type AWSResourceDetails_S3Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket *AWSResourceDetails_S3Details_BucketDetails `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (x *AWSResourceDetails_S3Details) Reset() {
	*x = AWSResourceDetails_S3Details{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_S3Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_S3Details) ProtoMessage() {}

func (x *AWSResourceDetails_S3Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_S3Details.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_S3Details) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 5}
}

func (x *AWSResourceDetails_S3Details) GetBucket() *AWSResourceDetails_S3Details_BucketDetails {
	if x != nil {
		return x.Bucket
	}
	return nil
}

type AWSResourceDetails_MemoryDBDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *AWSResourceDetails_MemoryDBDetails_NodeDetails `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *AWSResourceDetails_MemoryDBDetails) Reset() {
	*x = AWSResourceDetails_MemoryDBDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_MemoryDBDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_MemoryDBDetails) ProtoMessage() {}

func (x *AWSResourceDetails_MemoryDBDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_MemoryDBDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_MemoryDBDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 6}
}

func (x *AWSResourceDetails_MemoryDBDetails) GetNode() *AWSResourceDetails_MemoryDBDetails_NodeDetails {
	if x != nil {
		return x.Node
	}
	return nil
}

type AWSResourceDetails_OpensearchDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *AWSResourceDetails_OpensearchDetails_InstanceDetails `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *AWSResourceDetails_OpensearchDetails) Reset() {
	*x = AWSResourceDetails_OpensearchDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_OpensearchDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_OpensearchDetails) ProtoMessage() {}

func (x *AWSResourceDetails_OpensearchDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_OpensearchDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_OpensearchDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 7}
}

func (x *AWSResourceDetails_OpensearchDetails) GetInstance() *AWSResourceDetails_OpensearchDetails_InstanceDetails {
	if x != nil {
		return x.Instance
	}
	return nil
}

type AWSResourceDetails_RedshiftDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *AWSResourceDetails_RedshiftDetails_ClusterDetails `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Node    *AWSResourceDetails_RedshiftDetails_NodeDetails    `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *AWSResourceDetails_RedshiftDetails) Reset() {
	*x = AWSResourceDetails_RedshiftDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_RedshiftDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_RedshiftDetails) ProtoMessage() {}

func (x *AWSResourceDetails_RedshiftDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_RedshiftDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_RedshiftDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 8}
}

func (x *AWSResourceDetails_RedshiftDetails) GetCluster() *AWSResourceDetails_RedshiftDetails_ClusterDetails {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *AWSResourceDetails_RedshiftDetails) GetNode() *AWSResourceDetails_RedshiftDetails_NodeDetails {
	if x != nil {
		return x.Node
	}
	return nil
}

type AWSResourceDetails_ElastiCacheDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *AWSResourceDetails_ElastiCacheDetails_NodeDetails `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *AWSResourceDetails_ElastiCacheDetails) Reset() {
	*x = AWSResourceDetails_ElastiCacheDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_ElastiCacheDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_ElastiCacheDetails) ProtoMessage() {}

func (x *AWSResourceDetails_ElastiCacheDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_ElastiCacheDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_ElastiCacheDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 9}
}

func (x *AWSResourceDetails_ElastiCacheDetails) GetNode() *AWSResourceDetails_ElastiCacheDetails_NodeDetails {
	if x != nil {
		return x.Node
	}
	return nil
}

type AWSResourceDetails_EC2Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance       *AWSResourceDetails_EC2Details_InstanceDetails `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	RiSpecsDetails *AWSResourceDetails_EC2Details_RISpecsDetails  `protobuf:"bytes,2,opt,name=riSpecsDetails,proto3" json:"riSpecsDetails,omitempty"`
}

func (x *AWSResourceDetails_EC2Details) Reset() {
	*x = AWSResourceDetails_EC2Details{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_EC2Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_EC2Details) ProtoMessage() {}

func (x *AWSResourceDetails_EC2Details) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_EC2Details.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_EC2Details) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 10}
}

func (x *AWSResourceDetails_EC2Details) GetInstance() *AWSResourceDetails_EC2Details_InstanceDetails {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *AWSResourceDetails_EC2Details) GetRiSpecsDetails() *AWSResourceDetails_EC2Details_RISpecsDetails {
	if x != nil {
		return x.RiSpecsDetails
	}
	return nil
}

type AWSResourceDetails_RDSDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbInstance *AWSResourceDetails_RDSDetails_DBInstanceDetails `protobuf:"bytes,1,opt,name=dbInstance,proto3" json:"dbInstance,omitempty"`
}

func (x *AWSResourceDetails_RDSDetails) Reset() {
	*x = AWSResourceDetails_RDSDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_RDSDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_RDSDetails) ProtoMessage() {}

func (x *AWSResourceDetails_RDSDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_RDSDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_RDSDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 11}
}

func (x *AWSResourceDetails_RDSDetails) GetDbInstance() *AWSResourceDetails_RDSDetails_DBInstanceDetails {
	if x != nil {
		return x.DbInstance
	}
	return nil
}

type AWSResourceDetails_EBSDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeDetails *AWSResourceDetails_EBSDetails_VolumeDetails `protobuf:"bytes,1,opt,name=volumeDetails,proto3" json:"volumeDetails,omitempty"`
}

func (x *AWSResourceDetails_EBSDetails) Reset() {
	*x = AWSResourceDetails_EBSDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_EBSDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_EBSDetails) ProtoMessage() {}

func (x *AWSResourceDetails_EBSDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_EBSDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_EBSDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 12}
}

func (x *AWSResourceDetails_EBSDetails) GetVolumeDetails() *AWSResourceDetails_EBSDetails_VolumeDetails {
	if x != nil {
		return x.VolumeDetails
	}
	return nil
}

type AWSResourceDetails_EC2AutoScalingGroupDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceConfigurationDetails *AWSResourceDetails_EC2AutoScalingGroupDetails_InstanceConfigurationDetails `protobuf:"bytes,1,opt,name=instanceConfigurationDetails,proto3" json:"instanceConfigurationDetails,omitempty"`
}

func (x *AWSResourceDetails_EC2AutoScalingGroupDetails) Reset() {
	*x = AWSResourceDetails_EC2AutoScalingGroupDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_EC2AutoScalingGroupDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_EC2AutoScalingGroupDetails) ProtoMessage() {}

func (x *AWSResourceDetails_EC2AutoScalingGroupDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_EC2AutoScalingGroupDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_EC2AutoScalingGroupDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 13}
}

func (x *AWSResourceDetails_EC2AutoScalingGroupDetails) GetInstanceConfigurationDetails() *AWSResourceDetails_EC2AutoScalingGroupDetails_InstanceConfigurationDetails {
	if x != nil {
		return x.InstanceConfigurationDetails
	}
	return nil
}

type AWSResourceDetails_ECSDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service *AWSResourceDetails_ECSDetails_ServiceDetails `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *AWSResourceDetails_ECSDetails) Reset() {
	*x = AWSResourceDetails_ECSDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_ECSDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_ECSDetails) ProtoMessage() {}

func (x *AWSResourceDetails_ECSDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_ECSDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_ECSDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 14}
}

func (x *AWSResourceDetails_ECSDetails) GetService() *AWSResourceDetails_ECSDetails_ServiceDetails {
	if x != nil {
		return x.Service
	}
	return nil
}

type AWSResourceDetails_LambdaDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function *AWSResourceDetails_LambdaDetails_FunctionDetails `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *AWSResourceDetails_LambdaDetails) Reset() {
	*x = AWSResourceDetails_LambdaDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_LambdaDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_LambdaDetails) ProtoMessage() {}

func (x *AWSResourceDetails_LambdaDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_LambdaDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_LambdaDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 15}
}

func (x *AWSResourceDetails_LambdaDetails) GetFunction() *AWSResourceDetails_LambdaDetails_FunctionDetails {
	if x != nil {
		return x.Function
	}
	return nil
}

type AWSResourceDetails_NetworkFirewallDetails_Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Subnet string `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Az     string `protobuf:"bytes,3,opt,name=az,proto3" json:"az,omitempty"`
}

func (x *AWSResourceDetails_NetworkFirewallDetails_Endpoint) Reset() {
	*x = AWSResourceDetails_NetworkFirewallDetails_Endpoint{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_NetworkFirewallDetails_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_NetworkFirewallDetails_Endpoint) ProtoMessage() {}

func (x *AWSResourceDetails_NetworkFirewallDetails_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_NetworkFirewallDetails_Endpoint.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_NetworkFirewallDetails_Endpoint) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 1, 0}
}

func (x *AWSResourceDetails_NetworkFirewallDetails_Endpoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AWSResourceDetails_NetworkFirewallDetails_Endpoint) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *AWSResourceDetails_NetworkFirewallDetails_Endpoint) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

type AWSResourceDetails_ComprehendDetails_Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arn                      string  `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	ProvisionedInferenceUnit float64 `protobuf:"fixed64,2,opt,name=provisionedInferenceUnit,proto3" json:"provisionedInferenceUnit,omitempty"`
	AutoScalingStatus        string  `protobuf:"bytes,3,opt,name=autoScalingStatus,proto3" json:"autoScalingStatus,omitempty"`
	Status                   string  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AWSResourceDetails_ComprehendDetails_Endpoint) Reset() {
	*x = AWSResourceDetails_ComprehendDetails_Endpoint{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_ComprehendDetails_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_ComprehendDetails_Endpoint) ProtoMessage() {}

func (x *AWSResourceDetails_ComprehendDetails_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_ComprehendDetails_Endpoint.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_ComprehendDetails_Endpoint) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 2, 0}
}

func (x *AWSResourceDetails_ComprehendDetails_Endpoint) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AWSResourceDetails_ComprehendDetails_Endpoint) GetProvisionedInferenceUnit() float64 {
	if x != nil {
		return x.ProvisionedInferenceUnit
	}
	return 0
}

func (x *AWSResourceDetails_ComprehendDetails_Endpoint) GetAutoScalingStatus() string {
	if x != nil {
		return x.AutoScalingStatus
	}
	return ""
}

func (x *AWSResourceDetails_ComprehendDetails_Endpoint) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AWSResourceDetails_ReservedInstance_RIMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Utilization []*MetricData_Metrics `protobuf:"bytes,1,rep,name=utilization,proto3" json:"utilization,omitempty"`
}

func (x *AWSResourceDetails_ReservedInstance_RIMetrics) Reset() {
	*x = AWSResourceDetails_ReservedInstance_RIMetrics{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_ReservedInstance_RIMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_ReservedInstance_RIMetrics) ProtoMessage() {}

func (x *AWSResourceDetails_ReservedInstance_RIMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_ReservedInstance_RIMetrics.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_ReservedInstance_RIMetrics) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 3, 0}
}

func (x *AWSResourceDetails_ReservedInstance_RIMetrics) GetUtilization() []*MetricData_Metrics {
	if x != nil {
		return x.Utilization
	}
	return nil
}

type AWSResourceDetails_ELBDetails_LoadBalancer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AWSResourceDetails_ELBDetails_LoadBalancer) Reset() {
	*x = AWSResourceDetails_ELBDetails_LoadBalancer{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_ELBDetails_LoadBalancer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_ELBDetails_LoadBalancer) ProtoMessage() {}

func (x *AWSResourceDetails_ELBDetails_LoadBalancer) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_ELBDetails_LoadBalancer.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_ELBDetails_LoadBalancer) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 4, 0}
}

func (x *AWSResourceDetails_ELBDetails_LoadBalancer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AWSResourceDetails_S3Details_BucketDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arn  string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AWSResourceDetails_S3Details_BucketDetails) Reset() {
	*x = AWSResourceDetails_S3Details_BucketDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_S3Details_BucketDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_S3Details_BucketDetails) ProtoMessage() {}

func (x *AWSResourceDetails_S3Details_BucketDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_S3Details_BucketDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_S3Details_BucketDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 5, 0}
}

func (x *AWSResourceDetails_S3Details_BucketDetails) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AWSResourceDetails_S3Details_BucketDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AWSResourceDetails_MemoryDBDetails_NodeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Family string `protobuf:"bytes,2,opt,name=family,proto3" json:"family,omitempty"`
}

func (x *AWSResourceDetails_MemoryDBDetails_NodeDetails) Reset() {
	*x = AWSResourceDetails_MemoryDBDetails_NodeDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_MemoryDBDetails_NodeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_MemoryDBDetails_NodeDetails) ProtoMessage() {}

func (x *AWSResourceDetails_MemoryDBDetails_NodeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_MemoryDBDetails_NodeDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_MemoryDBDetails_NodeDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 6, 0}
}

func (x *AWSResourceDetails_MemoryDBDetails_NodeDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AWSResourceDetails_MemoryDBDetails_NodeDetails) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

type AWSResourceDetails_OpensearchDetails_InstanceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceClass string `protobuf:"bytes,1,opt,name=instanceClass,proto3" json:"instanceClass,omitempty"`
	InstanceSize  string `protobuf:"bytes,2,opt,name=instanceSize,proto3" json:"instanceSize,omitempty"`
}

func (x *AWSResourceDetails_OpensearchDetails_InstanceDetails) Reset() {
	*x = AWSResourceDetails_OpensearchDetails_InstanceDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_OpensearchDetails_InstanceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_OpensearchDetails_InstanceDetails) ProtoMessage() {}

func (x *AWSResourceDetails_OpensearchDetails_InstanceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_OpensearchDetails_InstanceDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_OpensearchDetails_InstanceDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 7, 0}
}

func (x *AWSResourceDetails_OpensearchDetails_InstanceDetails) GetInstanceClass() string {
	if x != nil {
		return x.InstanceClass
	}
	return ""
}

func (x *AWSResourceDetails_OpensearchDetails_InstanceDetails) GetInstanceSize() string {
	if x != nil {
		return x.InstanceSize
	}
	return ""
}

type AWSResourceDetails_RedshiftDetails_ClusterDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ClusterId string `protobuf:"bytes,2,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Status    string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AWSResourceDetails_RedshiftDetails_ClusterDetails) Reset() {
	*x = AWSResourceDetails_RedshiftDetails_ClusterDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_RedshiftDetails_ClusterDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_RedshiftDetails_ClusterDetails) ProtoMessage() {}

func (x *AWSResourceDetails_RedshiftDetails_ClusterDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_RedshiftDetails_ClusterDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_RedshiftDetails_ClusterDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 8, 0}
}

func (x *AWSResourceDetails_RedshiftDetails_ClusterDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AWSResourceDetails_RedshiftDetails_ClusterDetails) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AWSResourceDetails_RedshiftDetails_ClusterDetails) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AWSResourceDetails_RedshiftDetails_NodeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Family string `protobuf:"bytes,2,opt,name=family,proto3" json:"family,omitempty"`
}

func (x *AWSResourceDetails_RedshiftDetails_NodeDetails) Reset() {
	*x = AWSResourceDetails_RedshiftDetails_NodeDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_RedshiftDetails_NodeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_RedshiftDetails_NodeDetails) ProtoMessage() {}

func (x *AWSResourceDetails_RedshiftDetails_NodeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_RedshiftDetails_NodeDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_RedshiftDetails_NodeDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 8, 1}
}

func (x *AWSResourceDetails_RedshiftDetails_NodeDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AWSResourceDetails_RedshiftDetails_NodeDetails) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

type AWSResourceDetails_ElastiCacheDetails_NodeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Family string `protobuf:"bytes,2,opt,name=family,proto3" json:"family,omitempty"`
}

func (x *AWSResourceDetails_ElastiCacheDetails_NodeDetails) Reset() {
	*x = AWSResourceDetails_ElastiCacheDetails_NodeDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_ElastiCacheDetails_NodeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_ElastiCacheDetails_NodeDetails) ProtoMessage() {}

func (x *AWSResourceDetails_ElastiCacheDetails_NodeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_ElastiCacheDetails_NodeDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_ElastiCacheDetails_NodeDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 9, 0}
}

func (x *AWSResourceDetails_ElastiCacheDetails_NodeDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AWSResourceDetails_ElastiCacheDetails_NodeDetails) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

type AWSResourceDetails_EC2Details_InstanceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string                                                           `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Architecture string                                                           `protobuf:"bytes,11,opt,name=architecture,proto3" json:"architecture,omitempty"`
	Tenancy      string                                                           `protobuf:"bytes,2,opt,name=tenancy,proto3" json:"tenancy,omitempty"`
	Platform     string                                                           `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Family       string                                                           `protobuf:"bytes,4,opt,name=family,proto3" json:"family,omitempty"`
	Metrics      *AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics        `protobuf:"bytes,5,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Name         string                                                           `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Eip          *AWSResourceDetails_EC2Details_InstanceDetails_EIPDetails        `protobuf:"bytes,7,opt,name=eip,proto3" json:"eip,omitempty"`
	Status       string                                                           `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	VCpu         string                                                           `protobuf:"bytes,9,opt,name=vCpu,proto3" json:"vCpu,omitempty"`
	NatGateway   *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails `protobuf:"bytes,10,opt,name=natGateway,proto3" json:"natGateway,omitempty"`
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails) Reset() {
	*x = AWSResourceDetails_EC2Details_InstanceDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_EC2Details_InstanceDetails) ProtoMessage() {}

func (x *AWSResourceDetails_EC2Details_InstanceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_EC2Details_InstanceDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_EC2Details_InstanceDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 10, 0}
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails) GetTenancy() string {
	if x != nil {
		return x.Tenancy
	}
	return ""
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails) GetMetrics() *AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails) GetEip() *AWSResourceDetails_EC2Details_InstanceDetails_EIPDetails {
	if x != nil {
		return x.Eip
	}
	return nil
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails) GetVCpu() string {
	if x != nil {
		return x.VCpu
	}
	return ""
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails) GetNatGateway() *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails {
	if x != nil {
		return x.NatGateway
	}
	return nil
}

type AWSResourceDetails_EC2Details_RISpecsDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferingClass string `protobuf:"bytes,1,opt,name=offeringClass,proto3" json:"offeringClass,omitempty"`
}

func (x *AWSResourceDetails_EC2Details_RISpecsDetails) Reset() {
	*x = AWSResourceDetails_EC2Details_RISpecsDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_EC2Details_RISpecsDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_EC2Details_RISpecsDetails) ProtoMessage() {}

func (x *AWSResourceDetails_EC2Details_RISpecsDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_EC2Details_RISpecsDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_EC2Details_RISpecsDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 10, 1}
}

func (x *AWSResourceDetails_EC2Details_RISpecsDetails) GetOfferingClass() string {
	if x != nil {
		return x.OfferingClass
	}
	return ""
}

type AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                                                                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubnetId string                                                                             `protobuf:"bytes,2,opt,name=subnetId,proto3" json:"subnetId,omitempty"`
	VpcId    string                                                                             `protobuf:"bytes,3,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
	Metrics  *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics `protobuf:"bytes,4,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails) Reset() {
	*x = AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails) ProtoMessage() {}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 10, 0, 0}
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails) GetMetrics() *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuUtilizationMetrics     *MetricData `protobuf:"bytes,1,opt,name=cpuUtilizationMetrics,proto3" json:"cpuUtilizationMetrics,omitempty"`
	DiskUtilizationMetrics    *MetricData `protobuf:"bytes,2,opt,name=diskUtilizationMetrics,proto3" json:"diskUtilizationMetrics,omitempty"`
	NetworkUtilizationMetrics *MetricData `protobuf:"bytes,3,opt,name=networkUtilizationMetrics,proto3" json:"networkUtilizationMetrics,omitempty"`
	MemoryUtilizationMetrics  *MetricData `protobuf:"bytes,4,opt,name=memoryUtilizationMetrics,proto3" json:"memoryUtilizationMetrics,omitempty"`
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics) Reset() {
	*x = AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics) ProtoMessage() {}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 10, 0, 1}
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics) GetCpuUtilizationMetrics() *MetricData {
	if x != nil {
		return x.CpuUtilizationMetrics
	}
	return nil
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics) GetDiskUtilizationMetrics() *MetricData {
	if x != nil {
		return x.DiskUtilizationMetrics
	}
	return nil
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics) GetNetworkUtilizationMetrics() *MetricData {
	if x != nil {
		return x.NetworkUtilizationMetrics
	}
	return nil
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics) GetMemoryUtilizationMetrics() *MetricData {
	if x != nil {
		return x.MemoryUtilizationMetrics
	}
	return nil
}

type AWSResourceDetails_EC2Details_InstanceDetails_EIPDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string `protobuf:"bytes,1,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_EIPDetails) Reset() {
	*x = AWSResourceDetails_EC2Details_InstanceDetails_EIPDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_EIPDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_EC2Details_InstanceDetails_EIPDetails) ProtoMessage() {}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_EIPDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_EC2Details_InstanceDetails_EIPDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_EC2Details_InstanceDetails_EIPDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 10, 0, 2}
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_EIPDetails) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesInFromDest *MetricData `protobuf:"bytes,1,opt,name=bytesInFromDest,proto3" json:"bytesInFromDest,omitempty"`
	BytesInFromSrc  *MetricData `protobuf:"bytes,2,opt,name=bytesInFromSrc,proto3" json:"bytesInFromSrc,omitempty"`
	BytesOutToDest  *MetricData `protobuf:"bytes,3,opt,name=bytesOutToDest,proto3" json:"bytesOutToDest,omitempty"`
	BytesOutToSrc   *MetricData `protobuf:"bytes,4,opt,name=bytesOutToSrc,proto3" json:"bytesOutToSrc,omitempty"`
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics) Reset() {
	*x = AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics) ProtoMessage() {
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 10, 0, 0, 0}
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics) GetBytesInFromDest() *MetricData {
	if x != nil {
		return x.BytesInFromDest
	}
	return nil
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics) GetBytesInFromSrc() *MetricData {
	if x != nil {
		return x.BytesInFromSrc
	}
	return nil
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics) GetBytesOutToDest() *MetricData {
	if x != nil {
		return x.BytesOutToDest
	}
	return nil
}

func (x *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics) GetBytesOutToSrc() *MetricData {
	if x != nil {
		return x.BytesOutToSrc
	}
	return nil
}

type AWSResourceDetails_RDSDetails_DBInstanceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storage           *AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage    `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
	Name              string                                                      `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	InstanceClass     string                                                      `protobuf:"bytes,2,opt,name=instanceClass,proto3" json:"instanceClass,omitempty"`
	DbEdition         string                                                      `protobuf:"bytes,3,opt,name=dbEdition,proto3" json:"dbEdition,omitempty"`
	DbEngine          string                                                      `protobuf:"bytes,4,opt,name=dbEngine,proto3" json:"dbEngine,omitempty"`
	DeploymentOptions string                                                      `protobuf:"bytes,5,opt,name=deploymentOptions,proto3" json:"deploymentOptions,omitempty"`
	Family            string                                                      `protobuf:"bytes,6,opt,name=family,proto3" json:"family,omitempty"`
	MultiAZ           string                                                      `protobuf:"bytes,10,opt,name=multiAZ,proto3" json:"multiAZ,omitempty"`
	LicenseModel      string                                                      `protobuf:"bytes,7,opt,name=licenseModel,proto3" json:"licenseModel,omitempty"`
	Metrics           *AWSResourceDetails_RDSDetails_DBInstanceDetails_RDSMetrics `protobuf:"bytes,8,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails) Reset() {
	*x = AWSResourceDetails_RDSDetails_DBInstanceDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_RDSDetails_DBInstanceDetails) ProtoMessage() {}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_RDSDetails_DBInstanceDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_RDSDetails_DBInstanceDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 11, 0}
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails) GetStorage() *AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails) GetInstanceClass() string {
	if x != nil {
		return x.InstanceClass
	}
	return ""
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails) GetDbEdition() string {
	if x != nil {
		return x.DbEdition
	}
	return ""
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails) GetDbEngine() string {
	if x != nil {
		return x.DbEngine
	}
	return ""
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails) GetDeploymentOptions() string {
	if x != nil {
		return x.DeploymentOptions
	}
	return ""
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails) GetMultiAZ() string {
	if x != nil {
		return x.MultiAZ
	}
	return ""
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails) GetLicenseModel() string {
	if x != nil {
		return x.LicenseModel
	}
	return ""
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails) GetMetrics() *AWSResourceDetails_RDSDetails_DBInstanceDetails_RDSMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocatedStorageInGb float64 `protobuf:"fixed64,1,opt,name=allocatedStorageInGb,proto3" json:"allocatedStorageInGb,omitempty"`
	Iops                 float64 `protobuf:"fixed64,2,opt,name=iops,proto3" json:"iops,omitempty"`
	StorageThroughput    float64 `protobuf:"fixed64,3,opt,name=storageThroughput,proto3" json:"storageThroughput,omitempty"`
	Type                 string  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage) Reset() {
	*x = AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage) ProtoMessage() {}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 11, 0, 0}
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage) GetAllocatedStorageInGb() float64 {
	if x != nil {
		return x.AllocatedStorageInGb
	}
	return 0
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage) GetIops() float64 {
	if x != nil {
		return x.Iops
	}
	return 0
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage) GetStorageThroughput() float64 {
	if x != nil {
		return x.StorageThroughput
	}
	return 0
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type AWSResourceDetails_RDSDetails_DBInstanceDetails_RDSMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuUtilizationMetrics *MetricData `protobuf:"bytes,1,opt,name=cpuUtilizationMetrics,proto3" json:"cpuUtilizationMetrics,omitempty"`
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails_RDSMetrics) Reset() {
	*x = AWSResourceDetails_RDSDetails_DBInstanceDetails_RDSMetrics{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails_RDSMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_RDSDetails_DBInstanceDetails_RDSMetrics) ProtoMessage() {}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails_RDSMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_RDSDetails_DBInstanceDetails_RDSMetrics.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_RDSDetails_DBInstanceDetails_RDSMetrics) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 11, 0, 1}
}

func (x *AWSResourceDetails_RDSDetails_DBInstanceDetails_RDSMetrics) GetCpuUtilizationMetrics() *MetricData {
	if x != nil {
		return x.CpuUtilizationMetrics
	}
	return nil
}

type AWSResourceDetails_EBSDetails_VolumeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachmentState string  `protobuf:"bytes,1,opt,name=attachmentState,proto3" json:"attachmentState,omitempty"`
	Iops            float64 `protobuf:"fixed64,2,opt,name=iops,proto3" json:"iops,omitempty"`
	Throughput      float64 `protobuf:"fixed64,3,opt,name=throughput,proto3" json:"throughput,omitempty"`
	SizeInGb        float64 `protobuf:"fixed64,4,opt,name=sizeInGb,proto3" json:"sizeInGb,omitempty"`
	Type            string  `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Id              string  `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AWSResourceDetails_EBSDetails_VolumeDetails) Reset() {
	*x = AWSResourceDetails_EBSDetails_VolumeDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_EBSDetails_VolumeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_EBSDetails_VolumeDetails) ProtoMessage() {}

func (x *AWSResourceDetails_EBSDetails_VolumeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_EBSDetails_VolumeDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_EBSDetails_VolumeDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 12, 0}
}

func (x *AWSResourceDetails_EBSDetails_VolumeDetails) GetAttachmentState() string {
	if x != nil {
		return x.AttachmentState
	}
	return ""
}

func (x *AWSResourceDetails_EBSDetails_VolumeDetails) GetIops() float64 {
	if x != nil {
		return x.Iops
	}
	return 0
}

func (x *AWSResourceDetails_EBSDetails_VolumeDetails) GetThroughput() float64 {
	if x != nil {
		return x.Throughput
	}
	return 0
}

func (x *AWSResourceDetails_EBSDetails_VolumeDetails) GetSizeInGb() float64 {
	if x != nil {
		return x.SizeInGb
	}
	return 0
}

func (x *AWSResourceDetails_EBSDetails_VolumeDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AWSResourceDetails_EBSDetails_VolumeDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AWSResourceDetails_EC2AutoScalingGroupDetails_InstanceConfigurationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AWSResourceDetails_EC2AutoScalingGroupDetails_InstanceConfigurationDetails) Reset() {
	*x = AWSResourceDetails_EC2AutoScalingGroupDetails_InstanceConfigurationDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_EC2AutoScalingGroupDetails_InstanceConfigurationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_EC2AutoScalingGroupDetails_InstanceConfigurationDetails) ProtoMessage() {}

func (x *AWSResourceDetails_EC2AutoScalingGroupDetails_InstanceConfigurationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_EC2AutoScalingGroupDetails_InstanceConfigurationDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_EC2AutoScalingGroupDetails_InstanceConfigurationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 13, 0}
}

func (x *AWSResourceDetails_EC2AutoScalingGroupDetails_InstanceConfigurationDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type AWSResourceDetails_ECSDetails_ServiceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Architecture   string  `protobuf:"bytes,1,opt,name=architecture,proto3" json:"architecture,omitempty"`
	MemorySizeInMB int64   `protobuf:"varint,2,opt,name=memorySizeInMB,proto3" json:"memorySizeInMB,omitempty"`
	Platform       string  `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	VCpu           float64 `protobuf:"fixed64,4,opt,name=vCpu,proto3" json:"vCpu,omitempty"`
}

func (x *AWSResourceDetails_ECSDetails_ServiceDetails) Reset() {
	*x = AWSResourceDetails_ECSDetails_ServiceDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_ECSDetails_ServiceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_ECSDetails_ServiceDetails) ProtoMessage() {}

func (x *AWSResourceDetails_ECSDetails_ServiceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_ECSDetails_ServiceDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_ECSDetails_ServiceDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 14, 0}
}

func (x *AWSResourceDetails_ECSDetails_ServiceDetails) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *AWSResourceDetails_ECSDetails_ServiceDetails) GetMemorySizeInMB() int64 {
	if x != nil {
		return x.MemorySizeInMB
	}
	return 0
}

func (x *AWSResourceDetails_ECSDetails_ServiceDetails) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *AWSResourceDetails_ECSDetails_ServiceDetails) GetVCpu() float64 {
	if x != nil {
		return x.VCpu
	}
	return 0
}

type AWSResourceDetails_LambdaDetails_FunctionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Architecture   string `protobuf:"bytes,1,opt,name=architecture,proto3" json:"architecture,omitempty"`
	MemorySizeInMB int64  `protobuf:"varint,2,opt,name=memorySizeInMB,proto3" json:"memorySizeInMB,omitempty"`
	Arn            string `protobuf:"bytes,3,opt,name=arn,proto3" json:"arn,omitempty"`
	Status         string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AWSResourceDetails_LambdaDetails_FunctionDetails) Reset() {
	*x = AWSResourceDetails_LambdaDetails_FunctionDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSResourceDetails_LambdaDetails_FunctionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSResourceDetails_LambdaDetails_FunctionDetails) ProtoMessage() {}

func (x *AWSResourceDetails_LambdaDetails_FunctionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSResourceDetails_LambdaDetails_FunctionDetails.ProtoReflect.Descriptor instead.
func (*AWSResourceDetails_LambdaDetails_FunctionDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{3, 15, 0}
}

func (x *AWSResourceDetails_LambdaDetails_FunctionDetails) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *AWSResourceDetails_LambdaDetails_FunctionDetails) GetMemorySizeInMB() int64 {
	if x != nil {
		return x.MemorySizeInMB
	}
	return 0
}

func (x *AWSResourceDetails_LambdaDetails_FunctionDetails) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AWSResourceDetails_LambdaDetails_FunctionDetails) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TrustedAdvisorRecommendations_Route53LatencyResourceRecordsSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route53Details *AWSResourceDetails_Route53Details `protobuf:"bytes,1,opt,name=route53Details,proto3" json:"route53Details,omitempty"`
}

func (x *TrustedAdvisorRecommendations_Route53LatencyResourceRecordsSets) Reset() {
	*x = TrustedAdvisorRecommendations_Route53LatencyResourceRecordsSets{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_Route53LatencyResourceRecordsSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_Route53LatencyResourceRecordsSets) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_Route53LatencyResourceRecordsSets) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_Route53LatencyResourceRecordsSets.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_Route53LatencyResourceRecordsSets) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TrustedAdvisorRecommendations_Route53LatencyResourceRecordsSets) GetRoute53Details() *AWSResourceDetails_Route53Details {
	if x != nil {
		return x.Route53Details
	}
	return nil
}

type TrustedAdvisorRecommendations_InactiveAWSNetworkFirewall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirewallDetails     *AWSResourceDetails_NetworkFirewallDetails `protobuf:"bytes,1,opt,name=firewallDetails,proto3" json:"firewallDetails,omitempty"`
	TotalBytesProcessed float64                                    `protobuf:"fixed64,2,opt,name=totalBytesProcessed,proto3" json:"totalBytesProcessed,omitempty"`
}

func (x *TrustedAdvisorRecommendations_InactiveAWSNetworkFirewall) Reset() {
	*x = TrustedAdvisorRecommendations_InactiveAWSNetworkFirewall{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_InactiveAWSNetworkFirewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_InactiveAWSNetworkFirewall) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_InactiveAWSNetworkFirewall) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_InactiveAWSNetworkFirewall.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_InactiveAWSNetworkFirewall) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 1}
}

func (x *TrustedAdvisorRecommendations_InactiveAWSNetworkFirewall) GetFirewallDetails() *AWSResourceDetails_NetworkFirewallDetails {
	if x != nil {
		return x.FirewallDetails
	}
	return nil
}

func (x *TrustedAdvisorRecommendations_InactiveAWSNetworkFirewall) GetTotalBytesProcessed() float64 {
	if x != nil {
		return x.TotalBytesProcessed
	}
	return 0
}

type TrustedAdvisorRecommendations_NetworkFirewallEndpointAZIndependence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint           *AWSResourceDetails_NetworkFirewallDetails_Endpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	CrossAZSubnetsList string                                              `protobuf:"bytes,2,opt,name=crossAZSubnetsList,proto3" json:"crossAZSubnetsList,omitempty"`
}

func (x *TrustedAdvisorRecommendations_NetworkFirewallEndpointAZIndependence) Reset() {
	*x = TrustedAdvisorRecommendations_NetworkFirewallEndpointAZIndependence{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_NetworkFirewallEndpointAZIndependence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_NetworkFirewallEndpointAZIndependence) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_NetworkFirewallEndpointAZIndependence) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_NetworkFirewallEndpointAZIndependence.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_NetworkFirewallEndpointAZIndependence) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 2}
}

func (x *TrustedAdvisorRecommendations_NetworkFirewallEndpointAZIndependence) GetEndpoint() *AWSResourceDetails_NetworkFirewallDetails_Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *TrustedAdvisorRecommendations_NetworkFirewallEndpointAZIndependence) GetCrossAZSubnetsList() string {
	if x != nil {
		return x.CrossAZSubnetsList
	}
	return ""
}

type TrustedAdvisorRecommendations_InactiveNATGateways struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatGatewayDetails  *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails `protobuf:"bytes,1,opt,name=natGatewayDetails,proto3" json:"natGatewayDetails,omitempty"`
	TotalBytesFromDest float64                                                          `protobuf:"fixed64,2,opt,name=totalBytesFromDest,proto3" json:"totalBytesFromDest,omitempty"`
	TotalBytesFromSrc  float64                                                          `protobuf:"fixed64,3,opt,name=totalBytesFromSrc,proto3" json:"totalBytesFromSrc,omitempty"`
	TotalBytes         float64                                                          `protobuf:"fixed64,4,opt,name=totalBytes,proto3" json:"totalBytes,omitempty"`
}

func (x *TrustedAdvisorRecommendations_InactiveNATGateways) Reset() {
	*x = TrustedAdvisorRecommendations_InactiveNATGateways{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_InactiveNATGateways) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_InactiveNATGateways) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_InactiveNATGateways) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_InactiveNATGateways.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_InactiveNATGateways) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 3}
}

func (x *TrustedAdvisorRecommendations_InactiveNATGateways) GetNatGatewayDetails() *AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails {
	if x != nil {
		return x.NatGatewayDetails
	}
	return nil
}

func (x *TrustedAdvisorRecommendations_InactiveNATGateways) GetTotalBytesFromDest() float64 {
	if x != nil {
		return x.TotalBytesFromDest
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_InactiveNATGateways) GetTotalBytesFromSrc() float64 {
	if x != nil {
		return x.TotalBytesFromSrc
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_InactiveNATGateways) GetTotalBytes() float64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

type TrustedAdvisorRecommendations_EC2OverProvisionedForMSSqlServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ec2Details              *AWSResourceDetails_EC2Details_InstanceDetails `protobuf:"bytes,1,opt,name=ec2Details,proto3" json:"ec2Details,omitempty"`
	MaxVCpu                 string                                         `protobuf:"bytes,2,opt,name=maxVCpu,proto3" json:"maxVCpu,omitempty"`
	RecommendedInstanceType string                                         `protobuf:"bytes,3,opt,name=recommendedInstanceType,proto3" json:"recommendedInstanceType,omitempty"`
}

func (x *TrustedAdvisorRecommendations_EC2OverProvisionedForMSSqlServer) Reset() {
	*x = TrustedAdvisorRecommendations_EC2OverProvisionedForMSSqlServer{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_EC2OverProvisionedForMSSqlServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_EC2OverProvisionedForMSSqlServer) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_EC2OverProvisionedForMSSqlServer) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_EC2OverProvisionedForMSSqlServer.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_EC2OverProvisionedForMSSqlServer) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 4}
}

func (x *TrustedAdvisorRecommendations_EC2OverProvisionedForMSSqlServer) GetEc2Details() *AWSResourceDetails_EC2Details_InstanceDetails {
	if x != nil {
		return x.Ec2Details
	}
	return nil
}

func (x *TrustedAdvisorRecommendations_EC2OverProvisionedForMSSqlServer) GetMaxVCpu() string {
	if x != nil {
		return x.MaxVCpu
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_EC2OverProvisionedForMSSqlServer) GetRecommendedInstanceType() string {
	if x != nil {
		return x.RecommendedInstanceType
	}
	return ""
}

type TrustedAdvisorRecommendations_EC2ConsolidationForMSSqlServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ec2Details       *AWSResourceDetails_EC2Details_InstanceDetails `protobuf:"bytes,1,opt,name=ec2Details,proto3" json:"ec2Details,omitempty"`
	MinVCpu          string                                         `protobuf:"bytes,2,opt,name=minVCpu,proto3" json:"minVCpu,omitempty"`
	SqlServerEdition string                                         `protobuf:"bytes,3,opt,name=sqlServerEdition,proto3" json:"sqlServerEdition,omitempty"`
}

func (x *TrustedAdvisorRecommendations_EC2ConsolidationForMSSqlServer) Reset() {
	*x = TrustedAdvisorRecommendations_EC2ConsolidationForMSSqlServer{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_EC2ConsolidationForMSSqlServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_EC2ConsolidationForMSSqlServer) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_EC2ConsolidationForMSSqlServer) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_EC2ConsolidationForMSSqlServer.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_EC2ConsolidationForMSSqlServer) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 5}
}

func (x *TrustedAdvisorRecommendations_EC2ConsolidationForMSSqlServer) GetEc2Details() *AWSResourceDetails_EC2Details_InstanceDetails {
	if x != nil {
		return x.Ec2Details
	}
	return nil
}

func (x *TrustedAdvisorRecommendations_EC2ConsolidationForMSSqlServer) GetMinVCpu() string {
	if x != nil {
		return x.MinVCpu
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_EC2ConsolidationForMSSqlServer) GetSqlServerEdition() string {
	if x != nil {
		return x.SqlServerEdition
	}
	return ""
}

type TrustedAdvisorRecommendations_CommonDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwsConfigRule   string `protobuf:"bytes,1,opt,name=awsConfigRule,proto3" json:"awsConfigRule,omitempty"`
	InputParameters string `protobuf:"bytes,2,opt,name=inputParameters,proto3" json:"inputParameters,omitempty"`
	Resource        string `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *TrustedAdvisorRecommendations_CommonDetails) Reset() {
	*x = TrustedAdvisorRecommendations_CommonDetails{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_CommonDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_CommonDetails) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_CommonDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_CommonDetails.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_CommonDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 6}
}

func (x *TrustedAdvisorRecommendations_CommonDetails) GetAwsConfigRule() string {
	if x != nil {
		return x.AwsConfigRule
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_CommonDetails) GetInputParameters() string {
	if x != nil {
		return x.InputParameters
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_CommonDetails) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

type TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkloadArn               string `protobuf:"bytes,1,opt,name=workloadArn,proto3" json:"workloadArn,omitempty"`
	WorkloadName              string `protobuf:"bytes,2,opt,name=workloadName,proto3" json:"workloadName,omitempty"`
	ReviewerName              string `protobuf:"bytes,3,opt,name=reviewerName,proto3" json:"reviewerName,omitempty"`
	WorkloadType              string `protobuf:"bytes,4,opt,name=workloadType,proto3" json:"workloadType,omitempty"`
	WorkloadStartedDate       string `protobuf:"bytes,5,opt,name=workloadStartedDate,proto3" json:"workloadStartedDate,omitempty"`
	WorkloadLastModifiedDate  string `protobuf:"bytes,6,opt,name=workloadLastModifiedDate,proto3" json:"workloadLastModifiedDate,omitempty"`
	NumberOfIDHRI             string `protobuf:"bytes,7,opt,name=numberOfIDHRI,proto3" json:"numberOfIDHRI,omitempty"`
	NumberOfHRIResolved       string `protobuf:"bytes,8,opt,name=numberOfHRIResolved,proto3" json:"numberOfHRIResolved,omitempty"`
	NumberOfQuestionsAnswered string `protobuf:"bytes,9,opt,name=numberOfQuestionsAnswered,proto3" json:"numberOfQuestionsAnswered,omitempty"`
	TotalNumberOfQuestions    string `protobuf:"bytes,10,opt,name=totalNumberOfQuestions,proto3" json:"totalNumberOfQuestions,omitempty"`
}

func (x *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) Reset() {
	*x = TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 7}
}

func (x *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) GetWorkloadArn() string {
	if x != nil {
		return x.WorkloadArn
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) GetWorkloadName() string {
	if x != nil {
		return x.WorkloadName
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) GetReviewerName() string {
	if x != nil {
		return x.ReviewerName
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) GetWorkloadType() string {
	if x != nil {
		return x.WorkloadType
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) GetWorkloadStartedDate() string {
	if x != nil {
		return x.WorkloadStartedDate
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) GetWorkloadLastModifiedDate() string {
	if x != nil {
		return x.WorkloadLastModifiedDate
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) GetNumberOfIDHRI() string {
	if x != nil {
		return x.NumberOfIDHRI
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) GetNumberOfHRIResolved() string {
	if x != nil {
		return x.NumberOfHRIResolved
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) GetNumberOfQuestionsAnswered() string {
	if x != nil {
		return x.NumberOfQuestionsAnswered
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues) GetTotalNumberOfQuestions() string {
	if x != nil {
		return x.TotalNumberOfQuestions
	}
	return ""
}

type TrustedAdvisorRecommendations_LowUtilizationEC2Instances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ec2Instance              *AWSResourceDetails_EC2Details `protobuf:"bytes,1,opt,name=ec2Instance,proto3" json:"ec2Instance,omitempty"`
	AveCpuUtilizationBy14Day float64                        `protobuf:"fixed64,2,opt,name=aveCpuUtilizationBy14Day,proto3" json:"aveCpuUtilizationBy14Day,omitempty"`
	AveNetworkIOBy14Day      float64                        `protobuf:"fixed64,3,opt,name=aveNetworkIOBy14Day,proto3" json:"aveNetworkIOBy14Day,omitempty"`
}

func (x *TrustedAdvisorRecommendations_LowUtilizationEC2Instances) Reset() {
	*x = TrustedAdvisorRecommendations_LowUtilizationEC2Instances{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_LowUtilizationEC2Instances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_LowUtilizationEC2Instances) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_LowUtilizationEC2Instances) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_LowUtilizationEC2Instances.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_LowUtilizationEC2Instances) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 8}
}

func (x *TrustedAdvisorRecommendations_LowUtilizationEC2Instances) GetEc2Instance() *AWSResourceDetails_EC2Details {
	if x != nil {
		return x.Ec2Instance
	}
	return nil
}

func (x *TrustedAdvisorRecommendations_LowUtilizationEC2Instances) GetAveCpuUtilizationBy14Day() float64 {
	if x != nil {
		return x.AveCpuUtilizationBy14Day
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_LowUtilizationEC2Instances) GetAveNetworkIOBy14Day() float64 {
	if x != nil {
		return x.AveNetworkIOBy14Day
	}
	return 0
}

type TrustedAdvisorRecommendations_RDSIdleDBInstances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RdsDetails         *AWSResourceDetails_RDSDetails `protobuf:"bytes,1,opt,name=rdsDetails,proto3" json:"rdsDetails,omitempty"`
	DaysLastConnection string                         `protobuf:"bytes,2,opt,name=daysLastConnection,proto3" json:"daysLastConnection,omitempty"`
}

func (x *TrustedAdvisorRecommendations_RDSIdleDBInstances) Reset() {
	*x = TrustedAdvisorRecommendations_RDSIdleDBInstances{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_RDSIdleDBInstances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_RDSIdleDBInstances) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_RDSIdleDBInstances) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_RDSIdleDBInstances.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_RDSIdleDBInstances) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 9}
}

func (x *TrustedAdvisorRecommendations_RDSIdleDBInstances) GetRdsDetails() *AWSResourceDetails_RDSDetails {
	if x != nil {
		return x.RdsDetails
	}
	return nil
}

func (x *TrustedAdvisorRecommendations_RDSIdleDBInstances) GetDaysLastConnection() string {
	if x != nil {
		return x.DaysLastConnection
	}
	return ""
}

type TrustedAdvisorRecommendations_S3IncompleteMPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3Details                    *AWSResourceDetails_S3Details `protobuf:"bytes,1,opt,name=s3Details,proto3" json:"s3Details,omitempty"`
	LifecycleRuleForDeletingIMPU string                        `protobuf:"bytes,2,opt,name=lifecycleRuleForDeletingIMPU,proto3" json:"lifecycleRuleForDeletingIMPU,omitempty"`
	DaysAfterInitiation          string                        `protobuf:"bytes,3,opt,name=daysAfterInitiation,proto3" json:"daysAfterInitiation,omitempty"`
}

func (x *TrustedAdvisorRecommendations_S3IncompleteMPU) Reset() {
	*x = TrustedAdvisorRecommendations_S3IncompleteMPU{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_S3IncompleteMPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_S3IncompleteMPU) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_S3IncompleteMPU) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_S3IncompleteMPU.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_S3IncompleteMPU) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 10}
}

func (x *TrustedAdvisorRecommendations_S3IncompleteMPU) GetS3Details() *AWSResourceDetails_S3Details {
	if x != nil {
		return x.S3Details
	}
	return nil
}

func (x *TrustedAdvisorRecommendations_S3IncompleteMPU) GetLifecycleRuleForDeletingIMPU() string {
	if x != nil {
		return x.LifecycleRuleForDeletingIMPU
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_S3IncompleteMPU) GetDaysAfterInitiation() string {
	if x != nil {
		return x.DaysAfterInitiation
	}
	return ""
}

type TrustedAdvisorRecommendations_LambdaHighErrorRates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgDailyErrorRates   float64                           `protobuf:"fixed64,1,opt,name=avgDailyErrorRates,proto3" json:"avgDailyErrorRates,omitempty"`
	AvgDailyInvokes      float64                           `protobuf:"fixed64,2,opt,name=avgDailyInvokes,proto3" json:"avgDailyInvokes,omitempty"`
	CurrentDayErrorRates float64                           `protobuf:"fixed64,3,opt,name=currentDayErrorRates,proto3" json:"currentDayErrorRates,omitempty"`
	CurrentDayInvokes    float64                           `protobuf:"fixed64,4,opt,name=currentDayInvokes,proto3" json:"currentDayInvokes,omitempty"`
	DateForMaxErrorRates string                            `protobuf:"bytes,5,opt,name=dateForMaxErrorRates,proto3" json:"dateForMaxErrorRates,omitempty"`
	LostDailyComputeCost float64                           `protobuf:"fixed64,6,opt,name=lostDailyComputeCost,proto3" json:"lostDailyComputeCost,omitempty"`
	MaxDailyErrorRates   float64                           `protobuf:"fixed64,7,opt,name=maxDailyErrorRates,proto3" json:"maxDailyErrorRates,omitempty"`
	LambdaDetails        *AWSResourceDetails_LambdaDetails `protobuf:"bytes,8,opt,name=lambdaDetails,proto3" json:"lambdaDetails,omitempty"`
}

func (x *TrustedAdvisorRecommendations_LambdaHighErrorRates) Reset() {
	*x = TrustedAdvisorRecommendations_LambdaHighErrorRates{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_LambdaHighErrorRates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_LambdaHighErrorRates) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_LambdaHighErrorRates) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_LambdaHighErrorRates.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_LambdaHighErrorRates) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 11}
}

func (x *TrustedAdvisorRecommendations_LambdaHighErrorRates) GetAvgDailyErrorRates() float64 {
	if x != nil {
		return x.AvgDailyErrorRates
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_LambdaHighErrorRates) GetAvgDailyInvokes() float64 {
	if x != nil {
		return x.AvgDailyInvokes
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_LambdaHighErrorRates) GetCurrentDayErrorRates() float64 {
	if x != nil {
		return x.CurrentDayErrorRates
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_LambdaHighErrorRates) GetCurrentDayInvokes() float64 {
	if x != nil {
		return x.CurrentDayInvokes
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_LambdaHighErrorRates) GetDateForMaxErrorRates() string {
	if x != nil {
		return x.DateForMaxErrorRates
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_LambdaHighErrorRates) GetLostDailyComputeCost() float64 {
	if x != nil {
		return x.LostDailyComputeCost
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_LambdaHighErrorRates) GetMaxDailyErrorRates() float64 {
	if x != nil {
		return x.MaxDailyErrorRates
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_LambdaHighErrorRates) GetLambdaDetails() *AWSResourceDetails_LambdaDetails {
	if x != nil {
		return x.LambdaDetails
	}
	return nil
}

type TrustedAdvisorRecommendations_UnderutilizedEBSVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EbsDetails         *AWSResourceDetails_EBSDetails `protobuf:"bytes,1,opt,name=ebsDetails,proto3" json:"ebsDetails,omitempty"`
	MonthlyStorageCost float64                        `protobuf:"fixed64,2,opt,name=monthlyStorageCost,proto3" json:"monthlyStorageCost,omitempty"`
}

func (x *TrustedAdvisorRecommendations_UnderutilizedEBSVolume) Reset() {
	*x = TrustedAdvisorRecommendations_UnderutilizedEBSVolume{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_UnderutilizedEBSVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_UnderutilizedEBSVolume) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_UnderutilizedEBSVolume) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_UnderutilizedEBSVolume.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_UnderutilizedEBSVolume) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 12}
}

func (x *TrustedAdvisorRecommendations_UnderutilizedEBSVolume) GetEbsDetails() *AWSResourceDetails_EBSDetails {
	if x != nil {
		return x.EbsDetails
	}
	return nil
}

func (x *TrustedAdvisorRecommendations_UnderutilizedEBSVolume) GetMonthlyStorageCost() float64 {
	if x != nil {
		return x.MonthlyStorageCost
	}
	return 0
}

type TrustedAdvisorRecommendations_UnassociatedEIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EipDetails *AWSResourceDetails_EC2Details_InstanceDetails_EIPDetails `protobuf:"bytes,1,opt,name=eipDetails,proto3" json:"eipDetails,omitempty"`
}

func (x *TrustedAdvisorRecommendations_UnassociatedEIP) Reset() {
	*x = TrustedAdvisorRecommendations_UnassociatedEIP{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_UnassociatedEIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_UnassociatedEIP) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_UnassociatedEIP) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_UnassociatedEIP.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_UnassociatedEIP) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 13}
}

func (x *TrustedAdvisorRecommendations_UnassociatedEIP) GetEipDetails() *AWSResourceDetails_EC2Details_InstanceDetails_EIPDetails {
	if x != nil {
		return x.EipDetails
	}
	return nil
}

type TrustedAdvisorRecommendations_IdleLoadBalancer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElbDetails *AWSResourceDetails_ELBDetails `protobuf:"bytes,1,opt,name=elbDetails,proto3" json:"elbDetails,omitempty"`
	Reason     string                         `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *TrustedAdvisorRecommendations_IdleLoadBalancer) Reset() {
	*x = TrustedAdvisorRecommendations_IdleLoadBalancer{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_IdleLoadBalancer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_IdleLoadBalancer) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_IdleLoadBalancer) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_IdleLoadBalancer.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_IdleLoadBalancer) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 14}
}

func (x *TrustedAdvisorRecommendations_IdleLoadBalancer) GetElbDetails() *AWSResourceDetails_ELBDetails {
	if x != nil {
		return x.ElbDetails
	}
	return nil
}

func (x *TrustedAdvisorRecommendations_IdleLoadBalancer) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type TrustedAdvisorRecommendations_AmazonEC2InstanceStopped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ec2Details      *AWSResourceDetails_EC2Details `protobuf:"bytes,1,opt,name=ec2Details,proto3" json:"ec2Details,omitempty"`
	AwsConfigRule   string                         `protobuf:"bytes,2,opt,name=awsConfigRule,proto3" json:"awsConfigRule,omitempty"`
	InputParameters string                         `protobuf:"bytes,3,opt,name=inputParameters,proto3" json:"inputParameters,omitempty"`
	Resource        string                         `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *TrustedAdvisorRecommendations_AmazonEC2InstanceStopped) Reset() {
	*x = TrustedAdvisorRecommendations_AmazonEC2InstanceStopped{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_AmazonEC2InstanceStopped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_AmazonEC2InstanceStopped) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_AmazonEC2InstanceStopped) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_AmazonEC2InstanceStopped.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_AmazonEC2InstanceStopped) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 15}
}

func (x *TrustedAdvisorRecommendations_AmazonEC2InstanceStopped) GetEc2Details() *AWSResourceDetails_EC2Details {
	if x != nil {
		return x.Ec2Details
	}
	return nil
}

func (x *TrustedAdvisorRecommendations_AmazonEC2InstanceStopped) GetAwsConfigRule() string {
	if x != nil {
		return x.AwsConfigRule
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_AmazonEC2InstanceStopped) GetInputParameters() string {
	if x != nil {
		return x.InputParameters
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_AmazonEC2InstanceStopped) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

type TrustedAdvisorRecommendations_EC2RILeaseExpiration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentMonthlyCost float64                              `protobuf:"fixed64,1,opt,name=currentMonthlyCost,proto3" json:"currentMonthlyCost,omitempty"`
	EstMonthlySavings  float64                              `protobuf:"fixed64,2,opt,name=estMonthlySavings,proto3" json:"estMonthlySavings,omitempty"`
	Reason             string                               `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	RiDetails          *AWSResourceDetails_ReservedInstance `protobuf:"bytes,4,opt,name=riDetails,proto3" json:"riDetails,omitempty"`
}

func (x *TrustedAdvisorRecommendations_EC2RILeaseExpiration) Reset() {
	*x = TrustedAdvisorRecommendations_EC2RILeaseExpiration{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_EC2RILeaseExpiration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_EC2RILeaseExpiration) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_EC2RILeaseExpiration) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_EC2RILeaseExpiration.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_EC2RILeaseExpiration) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 16}
}

func (x *TrustedAdvisorRecommendations_EC2RILeaseExpiration) GetCurrentMonthlyCost() float64 {
	if x != nil {
		return x.CurrentMonthlyCost
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_EC2RILeaseExpiration) GetEstMonthlySavings() float64 {
	if x != nil {
		return x.EstMonthlySavings
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_EC2RILeaseExpiration) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_EC2RILeaseExpiration) GetRiDetails() *AWSResourceDetails_ReservedInstance {
	if x != nil {
		return x.RiDetails
	}
	return nil
}

type TrustedAdvisorRecommendations_ComprehendUnderutilizedEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint *AWSResourceDetails_ComprehendDetails_Endpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Reason   string                                         `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *TrustedAdvisorRecommendations_ComprehendUnderutilizedEndpoints) Reset() {
	*x = TrustedAdvisorRecommendations_ComprehendUnderutilizedEndpoints{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_ComprehendUnderutilizedEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_ComprehendUnderutilizedEndpoints) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_ComprehendUnderutilizedEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_ComprehendUnderutilizedEndpoints.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_ComprehendUnderutilizedEndpoints) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 17}
}

func (x *TrustedAdvisorRecommendations_ComprehendUnderutilizedEndpoints) GetEndpoint() *AWSResourceDetails_ComprehendDetails_Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *TrustedAdvisorRecommendations_ComprehendUnderutilizedEndpoints) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type TrustedAdvisorRecommendations_UnderutilizedRedshiftCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster                 *AWSResourceDetails_RedshiftDetails_ClusterDetails `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Reason                  string                                             `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	EstimatedMonthlySavings float64                                            `protobuf:"fixed64,3,opt,name=estimatedMonthlySavings,proto3" json:"estimatedMonthlySavings,omitempty"`
}

func (x *TrustedAdvisorRecommendations_UnderutilizedRedshiftCluster) Reset() {
	*x = TrustedAdvisorRecommendations_UnderutilizedRedshiftCluster{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_UnderutilizedRedshiftCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_UnderutilizedRedshiftCluster) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_UnderutilizedRedshiftCluster) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_UnderutilizedRedshiftCluster.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_UnderutilizedRedshiftCluster) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 18}
}

func (x *TrustedAdvisorRecommendations_UnderutilizedRedshiftCluster) GetCluster() *AWSResourceDetails_RedshiftDetails_ClusterDetails {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *TrustedAdvisorRecommendations_UnderutilizedRedshiftCluster) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_UnderutilizedRedshiftCluster) GetEstimatedMonthlySavings() float64 {
	if x != nil {
		return x.EstimatedMonthlySavings
	}
	return 0
}

type TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxDailyTimeoutRate     float64                                           `protobuf:"fixed64,1,opt,name=maxDailyTimeoutRate,proto3" json:"maxDailyTimeoutRate,omitempty"`
	DateOfDailyTimeoutRate  string                                            `protobuf:"bytes,2,opt,name=dateOfDailyTimeoutRate,proto3" json:"dateOfDailyTimeoutRate,omitempty"`
	AveDailyTimeoutRate     float64                                           `protobuf:"fixed64,3,opt,name=aveDailyTimeoutRate,proto3" json:"aveDailyTimeoutRate,omitempty"`
	FunctionTimeoutSettings float64                                           `protobuf:"fixed64,4,opt,name=functionTimeoutSettings,proto3" json:"functionTimeoutSettings,omitempty"`
	LostDailyComputeCost    float64                                           `protobuf:"fixed64,5,opt,name=lostDailyComputeCost,proto3" json:"lostDailyComputeCost,omitempty"`
	AveDailyInvokes         float64                                           `protobuf:"fixed64,6,opt,name=aveDailyInvokes,proto3" json:"aveDailyInvokes,omitempty"`
	CurrentDayInvokes       float64                                           `protobuf:"fixed64,7,opt,name=currentDayInvokes,proto3" json:"currentDayInvokes,omitempty"`
	CurrentDayTimeoutRate   float64                                           `protobuf:"fixed64,8,opt,name=currentDayTimeoutRate,proto3" json:"currentDayTimeoutRate,omitempty"`
	Function                *AWSResourceDetails_LambdaDetails_FunctionDetails `protobuf:"bytes,9,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts) Reset() {
	*x = TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts{}
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts) ProtoMessage() {}

func (x *TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_recommendation_aws_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts.ProtoReflect.Descriptor instead.
func (*TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts) Descriptor() ([]byte, []int) {
	return file_api_cover_recommendation_aws_proto_rawDescGZIP(), []int{4, 19}
}

func (x *TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts) GetMaxDailyTimeoutRate() float64 {
	if x != nil {
		return x.MaxDailyTimeoutRate
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts) GetDateOfDailyTimeoutRate() string {
	if x != nil {
		return x.DateOfDailyTimeoutRate
	}
	return ""
}

func (x *TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts) GetAveDailyTimeoutRate() float64 {
	if x != nil {
		return x.AveDailyTimeoutRate
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts) GetFunctionTimeoutSettings() float64 {
	if x != nil {
		return x.FunctionTimeoutSettings
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts) GetLostDailyComputeCost() float64 {
	if x != nil {
		return x.LostDailyComputeCost
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts) GetAveDailyInvokes() float64 {
	if x != nil {
		return x.AveDailyInvokes
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts) GetCurrentDayInvokes() float64 {
	if x != nil {
		return x.CurrentDayInvokes
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts) GetCurrentDayTimeoutRate() float64 {
	if x != nil {
		return x.CurrentDayTimeoutRate
	}
	return 0
}

func (x *TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts) GetFunction() *AWSResourceDetails_LambdaDetails_FunctionDetails {
	if x != nil {
		return x.Function
	}
	return nil
}

var File_api_cover_recommendation_aws_proto protoreflect.FileDescriptor

var file_api_cover_recommendation_aws_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x77, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x0a, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x34, 0x0a,
	0x15, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6d, 0x61,
	0x78, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x1a, 0x33, 0x0a, 0x07, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x95, 0x23, 0x0a, 0x1b, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x72, 0x0a, 0x0c, 0x65, 0x63, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x43, 0x6f,
	0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x0c, 0x65, 0x63, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x75, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x0d, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x72, 0x0a, 0x0c, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x43,
	0x32, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x63, 0x32, 0x1a,
	0xdb, 0x1a, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x74, 0x0a,
	0x08, 0x72, 0x69, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x58, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x2e, 0x52, 0x49, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x69, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x08, 0x73, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x73,
	0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x53, 0x50, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x73, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xde, 0x0e, 0x0a, 0x08, 0x52, 0x49,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x0a, 0x65, 0x63, 0x32, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0a, 0x65, 0x63, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x63, 0x0a, 0x0a, 0x72,
	0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x44, 0x53, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x72, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x7b, 0x0a, 0x12, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x12, 0x65, 0x6c, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x72, 0x0a,
	0x0f, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57,
	0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0f, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x78, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x72, 0x0a, 0x0f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x42, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x42, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x42, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1a, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x54, 0x0a, 0x25, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x25,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x18, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x49, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x43, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x52, 0x49, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49, 0x52, 0x18, 0x65, 0x73, 0x74,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x49, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x65,
	0x78, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xd6, 0x05, 0x0a, 0x18, 0x45, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x49, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x76, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x76, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1d, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x61,
	0x76, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x46, 0x0a, 0x1e,
	0x61, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x61, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x4f, 0x6e, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52,
	0x49, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x52, 0x49, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x44,
	0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x6d, 0x69, 0x6e,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x46, 0x0a, 0x1e, 0x6d, 0x69,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1e, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f,
	0x75, 0x72, 0x12, 0x46, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x48, 0x6f, 0x75, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x6d, 0x61, 0x78, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55,
	0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x1a, 0xa0, 0x09, 0x0a, 0x08, 0x53,
	0x50, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3e, 0x0a, 0x1a, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1a, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0xb0, 0x01, 0x0a, 0x19, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x53, 0x50, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x19, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x18, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x73,
	0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x53, 0x50, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x52, 0x18, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x53, 0x50, 0x1a, 0xef, 0x02, 0x0a, 0x19, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x76, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x4f, 0x6e, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x61, 0x76, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x48, 0x6f, 0x75,
	0x72, 0x6c, 0x79, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x48, 0x6f, 0x75, 0x72, 0x6c,
	0x79, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x36,
	0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x4f, 0x6e, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16,
	0x6d, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x50, 0x0a, 0x23, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x43, 0x6f, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x23, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xa6, 0x02, 0x0a, 0x18, 0x45, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53,
	0x50, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x76, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x76, 0x65,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x72, 0x6f, 0x69, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a, 0xa0, 0x04,
	0x0a, 0x0c, 0x45, 0x43, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x7e,
	0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x43, 0x6f,
	0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x8c,
	0x01, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x45, 0x43, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x80, 0x02,
	0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3a, 0x0a, 0x18, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x18, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x65,
	0x63, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x65, 0x63, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x1a, 0x95, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x43,
	0x32, 0x12, 0x63, 0x0a, 0x0a, 0x65, 0x63, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x65, 0x63, 0x32, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x22, 0xcc, 0x0f, 0x0a, 0x22, 0x43, 0x6f, 0x73,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x75, 0x62,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x78, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x43,
	0x6f, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x75, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x15, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x75, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x15, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x1a, 0xa2, 0x0d, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x8a,
	0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x43, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x75, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x73, 0x74,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x0a, 0x65,
	0x63, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x65, 0x63, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x63, 0x0a, 0x0a, 0x72, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52,
	0x44, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x72, 0x64, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x63, 0x0a, 0x0a, 0x65, 0x62, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a,
	0x65, 0x62, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x65,
	0x63, 0x32, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x53, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x1a, 0x65, 0x63, 0x32, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x63, 0x0a, 0x0a, 0x65, 0x63, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45,
	0x43, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x65, 0x63, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x6c, 0x0a, 0x0d, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x1a, 0xf1, 0x06, 0x0a, 0x0f, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x26, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x26, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x72, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0xa3, 0x01, 0x0a, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x73,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x75, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x75, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43,
	0x6f, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0xac, 0x01, 0x0a, 0x12, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x19,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x19, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xa0, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb6, 0x33, 0x0a, 0x12, 0x41, 0x57, 0x53, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xc8,
	0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x35, 0x33, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x94, 0x02, 0x0a, 0x16, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x74, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57,
	0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x70, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x1a, 0x42, 0x0a, 0x08,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x61, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x7a,
	0x1a, 0xa5, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x6f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x9e, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x88, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6d, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x49, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x67, 0x0a, 0x09, 0x52, 0x49,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x75, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xa6, 0x01, 0x0a, 0x0a, 0x45, 0x4c, 0x42, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x74, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x45, 0x4c, 0x42, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x1a, 0x22, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xac, 0x01, 0x0a,
	0x09, 0x53, 0x33, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x68, 0x0a, 0x06, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x33, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x1a, 0x35, 0x0a, 0x0d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xb6, 0x01, 0x0a, 0x0f,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x42, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x68, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x42,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x1a, 0xe8, 0x01, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x76, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x1a, 0x5b, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x1a,
	0x85, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x71, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52,
	0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52,
	0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x1a, 0x5a, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x1a, 0xbc, 0x01, 0x0a, 0x12, 0x45, 0x6c, 0x61, 0x73,
	0x74, 0x69, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x6b,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x1a, 0xd4, 0x0f, 0x0a, 0x0a, 0x45, 0x43, 0x32, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x6f, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41,
	0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x0e, 0x72, 0x69, 0x53, 0x70, 0x65, 0x63,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x52, 0x49, 0x53, 0x70, 0x65, 0x63, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x0e, 0x72, 0x69, 0x53, 0x70, 0x65, 0x63, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x1a, 0xa0, 0x0d, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x78, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x70, 0x0a, 0x03, 0x65, 0x69,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41,
	0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x49, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x03, 0x65, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x43, 0x70, 0x75, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x76, 0x43, 0x70, 0x75, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x6e, 0x61, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x1a, 0xe7, 0x04, 0x0a, 0x11, 0x4e, 0x61, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x91, 0x01, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x77, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x4e, 0x61, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x4e, 0x61, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0xfb, 0x02, 0x0a,
	0x11, 0x4e, 0x61, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x46, 0x72, 0x6f,
	0x6d, 0x44, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x12, 0x58,
	0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x72, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x49,
	0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x72, 0x63, 0x12, 0x58, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x4f, 0x75, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x54, 0x6f, 0x44, 0x65,
	0x73, 0x74, 0x12, 0x56, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x54, 0x6f,
	0x53, 0x72, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x4f, 0x75, 0x74, 0x54, 0x6f, 0x53, 0x72, 0x63, 0x1a, 0xbc, 0x03, 0x0a, 0x0a, 0x45,
	0x43, 0x32, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x66, 0x0a, 0x15, 0x63, 0x70, 0x75,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x63, 0x70, 0x75, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x68, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x16, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x6e, 0x0a, 0x19, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x19, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x6c, 0x0a, 0x18, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x61, 0x77, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x18, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x2a, 0x0a, 0x0a, 0x45, 0x49, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x36, 0x0a, 0x0e, 0x52, 0x49, 0x53, 0x70, 0x65, 0x63, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0x92, 0x07,
	0x0a, 0x0a, 0x52, 0x44, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x75, 0x0a, 0x0a,
	0x64, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x55, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x44, 0x53, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x64, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x1a, 0x8c, 0x06, 0x0a, 0x11, 0x44, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x77, 0x0a, 0x07, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x44, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x44, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x62, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x62, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x62,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x62,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x5a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x41, 0x5a, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x7a, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x44, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x44, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x52, 0x44, 0x53, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x74, 0x0a, 0x0a,
	0x52, 0x44, 0x53, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x66, 0x0a, 0x15, 0x63, 0x70,
	0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x63, 0x70, 0x75,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x1a, 0xb5, 0x02, 0x0a, 0x0a, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x77, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xad, 0x01, 0x0a, 0x0d, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69,
	0x7a, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x69,
	0x7a, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x87, 0x02, 0x0a, 0x1a, 0x45,
	0x43, 0x32, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0xb4, 0x01, 0x0a, 0x1c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x70, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x1c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x1a, 0x32, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0x89, 0x02, 0x0a, 0x0a, 0x45, 0x43, 0x53, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x6c, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45,
	0x43, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x8c, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x4d, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x4d, 0x42,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x76, 0x43, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x76, 0x43, 0x70, 0x75,
	0x1a, 0x8d, 0x02, 0x0a, 0x0d, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x72, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4c,
	0x61, 0x6d, 0x62, 0x64, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x87, 0x01, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x4d, 0x42,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x49, 0x6e, 0x4d, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xa3, 0x40, 0x0a, 0x1d, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x1a, 0x6c, 0x6f, 0x77, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x63, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x77,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x43, 0x32, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x1a, 0x6c, 0x6f, 0x77, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x63, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x72, 0x64, 0x73, 0x49, 0x64, 0x6c, 0x65, 0x44,
	0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x56, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x44, 0x53, 0x49, 0x64, 0x6c, 0x65, 0x44, 0x42, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x12, 0x72, 0x64, 0x73, 0x49, 0x64, 0x6c,
	0x65, 0x44, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x0f,
	0x73, 0x33, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x50, 0x55, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x33, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x50, 0x55, 0x52, 0x0f, 0x73, 0x33, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x50, 0x55, 0x12, 0x8c, 0x01, 0x0a, 0x14,
	0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x48, 0x69, 0x67, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x48, 0x69, 0x67, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x14, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x48, 0x69, 0x67, 0x68,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x16, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x42, 0x53, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x42,
	0x53, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x16, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x42, 0x53, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x7d, 0x0a, 0x0f, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x49, 0x50, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x6e,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x49, 0x50, 0x52, 0x0f, 0x75,
	0x6e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x49, 0x50, 0x12, 0x80,
	0x01, 0x0a, 0x10, 0x69, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49,
	0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52,
	0x10, 0x69, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x12, 0x8e, 0x01, 0x0a, 0x13, 0x65, 0x63, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x45, 0x43, 0x32, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x52, 0x13, 0x65,
	0x63, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x8c, 0x01, 0x0a, 0x14, 0x65, 0x63, 0x32, 0x52, 0x49, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x58, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x52, 0x49, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x65, 0x63, 0x32,
	0x52, 0x49, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xb0, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x64,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x64, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x1c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65,
	0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x1c, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x64, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0xa1, 0x01, 0x0a, 0x1b,
	0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x57, 0x69, 0x74, 0x68, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x57, 0x69, 0x74,
	0x68, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x73, 0x52, 0x1b, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x57, 0x69, 0x74, 0x68, 0x45, 0x78,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12,
	0xb0, 0x01, 0x0a, 0x20, 0x61, 0x77, 0x73, 0x57, 0x65, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x41, 0x57, 0x53, 0x57, 0x65, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x52, 0x20, 0x61, 0x77, 0x73, 0x57, 0x65, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x12, 0x77, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x13,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x41, 0x54, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x73, 0x52, 0x13, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0xbf, 0x01, 0x0a, 0x25, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x41, 0x5a, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x5a, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x25, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x5a, 0x49, 0x6e, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x17, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x57, 0x53, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x17, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x12, 0xaa, 0x01, 0x0a, 0x1d, 0x65, 0x63, 0x32, 0x4f, 0x76, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x4d, 0x53, 0x53, 0x71, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x45, 0x43, 0x32, 0x4f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4d, 0x53, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x1d, 0x65, 0x63, 0x32, 0x4f, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x4d, 0x53, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0xa4, 0x01, 0x0a, 0x1b, 0x65, 0x63, 0x32, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x53, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x43, 0x32,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x4d, 0x53, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x1b, 0x65, 0x63, 0x32,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x53, 0x53,
	0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xb1, 0x01, 0x0a, 0x20, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x35, 0x33, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x35, 0x33,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x53, 0x65, 0x74, 0x73, 0x52, 0x20, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x35, 0x33, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x1a, 0x94, 0x01, 0x0a,
	0x21, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x35, 0x33, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x53, 0x65,
	0x74, 0x73, 0x12, 0x6f, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x35, 0x33, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x35, 0x33, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x35, 0x33, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x1a, 0xc9, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x57, 0x53, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x12, 0x79, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0f, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x1a,
	0xcd, 0x01, 0x0a, 0x25, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x5a, 0x49, 0x6e, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x41, 0x5a, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x41, 0x5a, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0xa9, 0x02, 0x0a, 0x13, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x41, 0x54, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x11, 0x6e, 0x61, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x43,
	0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x6e, 0x61, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x44,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x72, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0xeb, 0x01, 0x0a, 0x20,
	0x45, 0x43, 0x32, 0x4f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x4d, 0x53, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x73, 0x0a, 0x0a, 0x65, 0x63, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45,
	0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x65, 0x63, 0x32, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x56, 0x43, 0x70, 0x75,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x56, 0x43, 0x70, 0x75, 0x12,
	0x38, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xdb, 0x01, 0x0a, 0x1e, 0x45, 0x43,
	0x32, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x4d, 0x53, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x0a,
	0x65, 0x63, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x53, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x65, 0x63, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x56, 0x43, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x56, 0x43, 0x70, 0x75, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x7b, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x77, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x77, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x1a, 0xec, 0x03, 0x0a, 0x20, 0x41, 0x57, 0x53, 0x57, 0x65, 0x6c, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x52,
	0x69, 0x73, 0x6b, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x49, 0x44, 0x48, 0x52, 0x49, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x44, 0x48, 0x52, 0x49, 0x12, 0x30, 0x0a, 0x13, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x48, 0x52, 0x49, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x48, 0x52, 0x49, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0xf1, 0x01, 0x0a, 0x1a, 0x4c, 0x6f, 0x77, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x43, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x65, 0x0a, 0x0b, 0x65, 0x63, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41,
	0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x45, 0x43, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x65, 0x63,
	0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x76, 0x65,
	0x43, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x31, 0x34, 0x44, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x61, 0x76, 0x65,
	0x43, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x31, 0x34, 0x44, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x4f, 0x42, 0x79, 0x31, 0x34, 0x44, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x61, 0x76, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x4f,
	0x42, 0x79, 0x31, 0x34, 0x44, 0x61, 0x79, 0x1a, 0xa9, 0x01, 0x0a, 0x12, 0x52, 0x44, 0x53, 0x49,
	0x64, 0x6c, 0x65, 0x44, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x63,
	0x0a, 0x0a, 0x72, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x44, 0x53,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x72, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x61, 0x79, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x61, 0x79, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xe9, 0x01, 0x0a, 0x0f, 0x53, 0x33, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x50, 0x55, 0x12, 0x60, 0x0a, 0x09, 0x73, 0x33, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x33, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x09,
	0x73, 0x33, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x6c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x4d, 0x50, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x4d, 0x50, 0x55, 0x12, 0x30, 0x0a,
	0x13, 0x64, 0x61, 0x79, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x61, 0x79, 0x73,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xd8, 0x03, 0x0a, 0x14, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x48, 0x69, 0x67, 0x68, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x76, 0x67, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x76, 0x67, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x76, 0x67, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x76,
	0x6f, 0x6b, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d,
	0x61, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x6f, 0x73, 0x74,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6c, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x6d, 0x61, 0x78, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x0d,
	0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4c, 0x61,
	0x6d, 0x62, 0x64, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x6c, 0x61, 0x6d,
	0x62, 0x64, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xad, 0x01, 0x0a, 0x16, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x42, 0x53, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x65, 0x62, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x45, 0x42, 0x53, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a,
	0x65, 0x62, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x1a, 0x91, 0x01, 0x0a, 0x0f, 0x55,
	0x6e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x49, 0x50, 0x12, 0x7e,
	0x0a, 0x0a, 0x65, 0x69, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x43, 0x32,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x49, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x0a, 0x65, 0x69, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x8f,
	0x01, 0x0a, 0x10, 0x49, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x0a, 0x65, 0x6c, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41,
	0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x45, 0x4c, 0x42, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x65, 0x6c,
	0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x1a, 0xeb, 0x01, 0x0a, 0x18, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x45, 0x43, 0x32, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x63, 0x0a,
	0x0a, 0x65, 0x63, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x43, 0x32, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x65, 0x63, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x77, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x77, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xf5,
	0x01, 0x0a, 0x14, 0x45, 0x43, 0x32, 0x52, 0x49, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x73, 0x74, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x67, 0x0a,
	0x09, 0x72, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x69, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xab, 0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x68, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65,
	0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xe3, 0x01, 0x0a, 0x1c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57,
	0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xa9, 0x04, 0x0a, 0x1b, 0x4c,
	0x61, 0x6d, 0x62, 0x64, 0x61, 0x57, 0x69, 0x74, 0x68, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61,
	0x78, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x76, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x61, 0x76, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x32, 0x0a, 0x14, 0x6c, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14,
	0x6c, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x76, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61,
	0x76, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x72, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4c,
	0x61, 0x6d, 0x62, 0x64, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe3, 0x03, 0x0a, 0x12, 0x41, 0x57, 0x53, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x83, 0x01,
	0x0a, 0x1b, 0x63, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1b, 0x63, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x75, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x75, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x22, 0x63, 0x6f, 0x73, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x75, 0x62, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x89,
	0x01, 0x0a, 0x1d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1d, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x6e, 0x42, 0x8d, 0x01, 0x0a,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x1e, 0x41, 0x70, 0x69, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x77, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a,
	0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x2d, 0x73, 0x64, 0x6b,
	0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_cover_recommendation_aws_proto_rawDescOnce sync.Once
	file_api_cover_recommendation_aws_proto_rawDescData = file_api_cover_recommendation_aws_proto_rawDesc
)

func file_api_cover_recommendation_aws_proto_rawDescGZIP() []byte {
	file_api_cover_recommendation_aws_proto_rawDescOnce.Do(func() {
		file_api_cover_recommendation_aws_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_cover_recommendation_aws_proto_rawDescData)
	})
	return file_api_cover_recommendation_aws_proto_rawDescData
}

var file_api_cover_recommendation_aws_proto_msgTypes = make([]protoimpl.MessageInfo, 79)
var file_api_cover_recommendation_aws_proto_goTypes = []any{
	(*MetricData)(nil),                                                                        // 0: blueapi.api.cover.recommendation.aws.MetricData
	(*CostExplorerRecommendations)(nil),                                                       // 1: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations
	(*CostOptimizationHubRecommendations)(nil),                                                // 2: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations
	(*AWSResourceDetails)(nil),                                                                // 3: blueapi.api.cover.recommendation.aws.AWSResourceDetails
	(*TrustedAdvisorRecommendations)(nil),                                                     // 4: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations
	(*AWSRecommendations)(nil),                                                                // 5: blueapi.api.cover.recommendation.aws.AWSRecommendations
	(*MetricData_Metrics)(nil),                                                                // 6: blueapi.api.cover.recommendation.aws.MetricData.Metrics
	(*CostExplorerRecommendations_DiscountPlans)(nil),                                         // 7: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans
	(*CostExplorerRecommendations_EC2Rightsize)(nil),                                          // 8: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.EC2Rightsize
	(*CostExplorerRecommendations_TerminateEC2)(nil),                                          // 9: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.TerminateEC2
	(*CostExplorerRecommendations_DiscountPlans_RIOption)(nil),                                // 10: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.RIOption
	(*CostExplorerRecommendations_DiscountPlans_SPOption)(nil),                                // 11: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.SPOption
	(*CostExplorerRecommendations_DiscountPlans_RIOption_EstOutcomeFromPurchaseRI)(nil),       // 12: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.RIOption.EstOutcomeFromPurchaseRI
	(*CostExplorerRecommendations_DiscountPlans_SPOption_CurrentUtilizationDetails)(nil),      // 13: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.SPOption.CurrentUtilizationDetails
	(*CostExplorerRecommendations_DiscountPlans_SPOption_EstOutcomeFromPurchaseSP)(nil),       // 14: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.SPOption.EstOutcomeFromPurchaseSP
	(*CostExplorerRecommendations_EC2Rightsize_Details)(nil),                                  // 15: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.EC2Rightsize.Details
	(*CostOptimizationHubRecommendations_Details)(nil),                                        // 16: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details
	(*CostOptimizationHubRecommendations_Details_CostCalculation)(nil),                        // 17: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.CostCalculation
	(*CostOptimizationHubRecommendations_Details_CostCalculation_EstimatedDiscounts)(nil),     // 18: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.CostCalculation.EstimatedDiscounts
	(*CostOptimizationHubRecommendations_Details_CostCalculation_UsageTypes)(nil),             // 19: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.CostCalculation.UsageTypes
	(*AWSResourceDetails_Route53Details)(nil),                                                 // 20: blueapi.api.cover.recommendation.aws.AWSResourceDetails.Route53Details
	(*AWSResourceDetails_NetworkFirewallDetails)(nil),                                         // 21: blueapi.api.cover.recommendation.aws.AWSResourceDetails.NetworkFirewallDetails
	(*AWSResourceDetails_ComprehendDetails)(nil),                                              // 22: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ComprehendDetails
	(*AWSResourceDetails_ReservedInstance)(nil),                                               // 23: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ReservedInstance
	(*AWSResourceDetails_ELBDetails)(nil),                                                     // 24: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ELBDetails
	(*AWSResourceDetails_S3Details)(nil),                                                      // 25: blueapi.api.cover.recommendation.aws.AWSResourceDetails.S3Details
	(*AWSResourceDetails_MemoryDBDetails)(nil),                                                // 26: blueapi.api.cover.recommendation.aws.AWSResourceDetails.MemoryDBDetails
	(*AWSResourceDetails_OpensearchDetails)(nil),                                              // 27: blueapi.api.cover.recommendation.aws.AWSResourceDetails.OpensearchDetails
	(*AWSResourceDetails_RedshiftDetails)(nil),                                                // 28: blueapi.api.cover.recommendation.aws.AWSResourceDetails.RedshiftDetails
	(*AWSResourceDetails_ElastiCacheDetails)(nil),                                             // 29: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ElastiCacheDetails
	(*AWSResourceDetails_EC2Details)(nil),                                                     // 30: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details
	(*AWSResourceDetails_RDSDetails)(nil),                                                     // 31: blueapi.api.cover.recommendation.aws.AWSResourceDetails.RDSDetails
	(*AWSResourceDetails_EBSDetails)(nil),                                                     // 32: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EBSDetails
	(*AWSResourceDetails_EC2AutoScalingGroupDetails)(nil),                                     // 33: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2AutoScalingGroupDetails
	(*AWSResourceDetails_ECSDetails)(nil),                                                     // 34: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ECSDetails
	(*AWSResourceDetails_LambdaDetails)(nil),                                                  // 35: blueapi.api.cover.recommendation.aws.AWSResourceDetails.LambdaDetails
	(*AWSResourceDetails_NetworkFirewallDetails_Endpoint)(nil),                                // 36: blueapi.api.cover.recommendation.aws.AWSResourceDetails.NetworkFirewallDetails.Endpoint
	(*AWSResourceDetails_ComprehendDetails_Endpoint)(nil),                                     // 37: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ComprehendDetails.Endpoint
	(*AWSResourceDetails_ReservedInstance_RIMetrics)(nil),                                     // 38: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ReservedInstance.RIMetrics
	(*AWSResourceDetails_ELBDetails_LoadBalancer)(nil),                                        // 39: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ELBDetails.LoadBalancer
	(*AWSResourceDetails_S3Details_BucketDetails)(nil),                                        // 40: blueapi.api.cover.recommendation.aws.AWSResourceDetails.S3Details.BucketDetails
	(*AWSResourceDetails_MemoryDBDetails_NodeDetails)(nil),                                    // 41: blueapi.api.cover.recommendation.aws.AWSResourceDetails.MemoryDBDetails.NodeDetails
	(*AWSResourceDetails_OpensearchDetails_InstanceDetails)(nil),                              // 42: blueapi.api.cover.recommendation.aws.AWSResourceDetails.OpensearchDetails.InstanceDetails
	(*AWSResourceDetails_RedshiftDetails_ClusterDetails)(nil),                                 // 43: blueapi.api.cover.recommendation.aws.AWSResourceDetails.RedshiftDetails.ClusterDetails
	(*AWSResourceDetails_RedshiftDetails_NodeDetails)(nil),                                    // 44: blueapi.api.cover.recommendation.aws.AWSResourceDetails.RedshiftDetails.NodeDetails
	(*AWSResourceDetails_ElastiCacheDetails_NodeDetails)(nil),                                 // 45: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ElastiCacheDetails.NodeDetails
	(*AWSResourceDetails_EC2Details_InstanceDetails)(nil),                                     // 46: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails
	(*AWSResourceDetails_EC2Details_RISpecsDetails)(nil),                                      // 47: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.RISpecsDetails
	(*AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails)(nil),                   // 48: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.NatGatewayDetails
	(*AWSResourceDetails_EC2Details_InstanceDetails_EC2Metrics)(nil),                          // 49: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.EC2Metrics
	(*AWSResourceDetails_EC2Details_InstanceDetails_EIPDetails)(nil),                          // 50: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.EIPDetails
	(*AWSResourceDetails_EC2Details_InstanceDetails_NatGatewayDetails_NatGatewayMetrics)(nil), // 51: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.NatGatewayDetails.NatGatewayMetrics
	(*AWSResourceDetails_RDSDetails_DBInstanceDetails)(nil),                                   // 52: blueapi.api.cover.recommendation.aws.AWSResourceDetails.RDSDetails.DBInstanceDetails
	(*AWSResourceDetails_RDSDetails_DBInstanceDetails_Storage)(nil),                           // 53: blueapi.api.cover.recommendation.aws.AWSResourceDetails.RDSDetails.DBInstanceDetails.Storage
	(*AWSResourceDetails_RDSDetails_DBInstanceDetails_RDSMetrics)(nil),                        // 54: blueapi.api.cover.recommendation.aws.AWSResourceDetails.RDSDetails.DBInstanceDetails.RDSMetrics
	(*AWSResourceDetails_EBSDetails_VolumeDetails)(nil),                                       // 55: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EBSDetails.VolumeDetails
	(*AWSResourceDetails_EC2AutoScalingGroupDetails_InstanceConfigurationDetails)(nil),        // 56: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2AutoScalingGroupDetails.InstanceConfigurationDetails
	(*AWSResourceDetails_ECSDetails_ServiceDetails)(nil),                                      // 57: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ECSDetails.ServiceDetails
	(*AWSResourceDetails_LambdaDetails_FunctionDetails)(nil),                                  // 58: blueapi.api.cover.recommendation.aws.AWSResourceDetails.LambdaDetails.FunctionDetails
	(*TrustedAdvisorRecommendations_Route53LatencyResourceRecordsSets)(nil),                   // 59: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.Route53LatencyResourceRecordsSets
	(*TrustedAdvisorRecommendations_InactiveAWSNetworkFirewall)(nil),                          // 60: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.InactiveAWSNetworkFirewall
	(*TrustedAdvisorRecommendations_NetworkFirewallEndpointAZIndependence)(nil),               // 61: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.NetworkFirewallEndpointAZIndependence
	(*TrustedAdvisorRecommendations_InactiveNATGateways)(nil),                                 // 62: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.InactiveNATGateways
	(*TrustedAdvisorRecommendations_EC2OverProvisionedForMSSqlServer)(nil),                    // 63: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.EC2OverProvisionedForMSSqlServer
	(*TrustedAdvisorRecommendations_EC2ConsolidationForMSSqlServer)(nil),                      // 64: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.EC2ConsolidationForMSSqlServer
	(*TrustedAdvisorRecommendations_CommonDetails)(nil),                                       // 65: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.CommonDetails
	(*TrustedAdvisorRecommendations_AWSWellArchitectedHighRiskIssues)(nil),                    // 66: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.AWSWellArchitectedHighRiskIssues
	(*TrustedAdvisorRecommendations_LowUtilizationEC2Instances)(nil),                          // 67: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.LowUtilizationEC2Instances
	(*TrustedAdvisorRecommendations_RDSIdleDBInstances)(nil),                                  // 68: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.RDSIdleDBInstances
	(*TrustedAdvisorRecommendations_S3IncompleteMPU)(nil),                                     // 69: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.S3IncompleteMPU
	(*TrustedAdvisorRecommendations_LambdaHighErrorRates)(nil),                                // 70: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.LambdaHighErrorRates
	(*TrustedAdvisorRecommendations_UnderutilizedEBSVolume)(nil),                              // 71: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.UnderutilizedEBSVolume
	(*TrustedAdvisorRecommendations_UnassociatedEIP)(nil),                                     // 72: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.UnassociatedEIP
	(*TrustedAdvisorRecommendations_IdleLoadBalancer)(nil),                                    // 73: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.IdleLoadBalancer
	(*TrustedAdvisorRecommendations_AmazonEC2InstanceStopped)(nil),                            // 74: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.AmazonEC2InstanceStopped
	(*TrustedAdvisorRecommendations_EC2RILeaseExpiration)(nil),                                // 75: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.EC2RILeaseExpiration
	(*TrustedAdvisorRecommendations_ComprehendUnderutilizedEndpoints)(nil),                    // 76: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.ComprehendUnderutilizedEndpoints
	(*TrustedAdvisorRecommendations_UnderutilizedRedshiftCluster)(nil),                        // 77: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.UnderutilizedRedshiftCluster
	(*TrustedAdvisorRecommendations_LambdaWithExcessiveTimeouts)(nil),                         // 78: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.LambdaWithExcessiveTimeouts
}
var file_api_cover_recommendation_aws_proto_depIdxs = []int32{
	6,   // 0: blueapi.api.cover.recommendation.aws.MetricData.metrics:type_name -> blueapi.api.cover.recommendation.aws.MetricData.Metrics
	8,   // 1: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.ec2Rightsize:type_name -> blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.EC2Rightsize
	7,   // 2: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.discountPlans:type_name -> blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans
	9,   // 3: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.terminateEc2:type_name -> blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.TerminateEC2
	16,  // 4: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.currentDetails:type_name -> blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details
	16,  // 5: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.recommendationDetails:type_name -> blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details
	67,  // 6: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.lowUtilizationEc2Instances:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.LowUtilizationEC2Instances
	68,  // 7: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.rdsIdleDbInstances:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.RDSIdleDBInstances
	69,  // 8: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.s3IncompleteMPU:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.S3IncompleteMPU
	70,  // 9: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.lambdaHighErrorRates:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.LambdaHighErrorRates
	71,  // 10: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.underutilizedEBSVolume:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.UnderutilizedEBSVolume
	72,  // 11: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.unassociatedEIP:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.UnassociatedEIP
	73,  // 12: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.idleLoadBalancer:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.IdleLoadBalancer
	74,  // 13: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.ec2InstancesStopped:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.AmazonEC2InstanceStopped
	75,  // 14: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.ec2RILeaseExpiration:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.EC2RILeaseExpiration
	76,  // 15: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.comprehendUnderutilizedEndpoints:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.ComprehendUnderutilizedEndpoints
	77,  // 16: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.underutilizedRedshiftCluster:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.UnderutilizedRedshiftCluster
	78,  // 17: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.lambdaWithExcessiveTimeouts:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.LambdaWithExcessiveTimeouts
	66,  // 18: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.awsWellArchitectedHighRiskIssues:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.AWSWellArchitectedHighRiskIssues
	65,  // 19: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.commonDetails:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.CommonDetails
	62,  // 20: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.inactiveNatGateways:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.InactiveNATGateways
	61,  // 21: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.networkFirewallEndpointAZIndependence:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.NetworkFirewallEndpointAZIndependence
	60,  // 22: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.inactiveNetworkFirewall:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.InactiveAWSNetworkFirewall
	63,  // 23: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.ec2OverprovisionedMSSqlServer:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.EC2OverProvisionedForMSSqlServer
	64,  // 24: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.ec2ConsolidationMSSqlServer:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.EC2ConsolidationForMSSqlServer
	59,  // 25: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.route53LatencyResourceRecordSets:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.Route53LatencyResourceRecordsSets
	1,   // 26: blueapi.api.cover.recommendation.aws.AWSRecommendations.costExplorerRecommendations:type_name -> blueapi.api.cover.recommendation.aws.CostExplorerRecommendations
	2,   // 27: blueapi.api.cover.recommendation.aws.AWSRecommendations.costOptimizationHubRecommendations:type_name -> blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations
	4,   // 28: blueapi.api.cover.recommendation.aws.AWSRecommendations.trustedAdvisorRecommendations:type_name -> blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations
	10,  // 29: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.riOption:type_name -> blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.RIOption
	11,  // 30: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.spOption:type_name -> blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.SPOption
	15,  // 31: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.EC2Rightsize.currentDetails:type_name -> blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.EC2Rightsize.Details
	15,  // 32: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.EC2Rightsize.recommendationDetails:type_name -> blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.EC2Rightsize.Details
	30,  // 33: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.TerminateEC2.ec2Details:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details
	30,  // 34: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.RIOption.ec2Details:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details
	31,  // 35: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.RIOption.rdsDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.RDSDetails
	29,  // 36: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.RIOption.elasticacheDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.ElastiCacheDetails
	28,  // 37: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.RIOption.redshiftDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.RedshiftDetails
	27,  // 38: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.RIOption.opensearchDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.OpensearchDetails
	26,  // 39: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.RIOption.memoryDBDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.MemoryDBDetails
	12,  // 40: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.RIOption.estOutcomeFromPurchaseRI:type_name -> blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.RIOption.EstOutcomeFromPurchaseRI
	13,  // 41: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.SPOption.currentUtilizationDetails:type_name -> blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.SPOption.CurrentUtilizationDetails
	14,  // 42: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.SPOption.estOutcomeFromPurchaseSP:type_name -> blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.DiscountPlans.SPOption.EstOutcomeFromPurchaseSP
	30,  // 43: blueapi.api.cover.recommendation.aws.CostExplorerRecommendations.EC2Rightsize.Details.ec2Details:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details
	17,  // 44: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.costCalculation:type_name -> blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.CostCalculation
	30,  // 45: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.ec2Details:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details
	31,  // 46: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.rdsDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.RDSDetails
	32,  // 47: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.ebsDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EBSDetails
	33,  // 48: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.ec2AutoScalingGroupDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2AutoScalingGroupDetails
	34,  // 49: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.ecsDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.ECSDetails
	35,  // 50: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.lambdaDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.LambdaDetails
	18,  // 51: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.CostCalculation.estimatedDiscounts:type_name -> blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.CostCalculation.EstimatedDiscounts
	19,  // 52: blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.CostCalculation.usageTypes:type_name -> blueapi.api.cover.recommendation.aws.CostOptimizationHubRecommendations.Details.CostCalculation.UsageTypes
	36,  // 53: blueapi.api.cover.recommendation.aws.AWSResourceDetails.NetworkFirewallDetails.endpoint:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.NetworkFirewallDetails.Endpoint
	37,  // 54: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ComprehendDetails.endpoint:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.ComprehendDetails.Endpoint
	38,  // 55: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ReservedInstance.metrics:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.ReservedInstance.RIMetrics
	39,  // 56: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ELBDetails.loadBalancer:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.ELBDetails.LoadBalancer
	40,  // 57: blueapi.api.cover.recommendation.aws.AWSResourceDetails.S3Details.bucket:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.S3Details.BucketDetails
	41,  // 58: blueapi.api.cover.recommendation.aws.AWSResourceDetails.MemoryDBDetails.node:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.MemoryDBDetails.NodeDetails
	42,  // 59: blueapi.api.cover.recommendation.aws.AWSResourceDetails.OpensearchDetails.instance:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.OpensearchDetails.InstanceDetails
	43,  // 60: blueapi.api.cover.recommendation.aws.AWSResourceDetails.RedshiftDetails.cluster:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.RedshiftDetails.ClusterDetails
	44,  // 61: blueapi.api.cover.recommendation.aws.AWSResourceDetails.RedshiftDetails.node:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.RedshiftDetails.NodeDetails
	45,  // 62: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ElastiCacheDetails.node:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.ElastiCacheDetails.NodeDetails
	46,  // 63: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.instance:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails
	47,  // 64: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.riSpecsDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.RISpecsDetails
	52,  // 65: blueapi.api.cover.recommendation.aws.AWSResourceDetails.RDSDetails.dbInstance:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.RDSDetails.DBInstanceDetails
	55,  // 66: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EBSDetails.volumeDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EBSDetails.VolumeDetails
	56,  // 67: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2AutoScalingGroupDetails.instanceConfigurationDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2AutoScalingGroupDetails.InstanceConfigurationDetails
	57,  // 68: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ECSDetails.service:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.ECSDetails.ServiceDetails
	58,  // 69: blueapi.api.cover.recommendation.aws.AWSResourceDetails.LambdaDetails.function:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.LambdaDetails.FunctionDetails
	6,   // 70: blueapi.api.cover.recommendation.aws.AWSResourceDetails.ReservedInstance.RIMetrics.utilization:type_name -> blueapi.api.cover.recommendation.aws.MetricData.Metrics
	49,  // 71: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.metrics:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.EC2Metrics
	50,  // 72: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.eip:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.EIPDetails
	48,  // 73: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.natGateway:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.NatGatewayDetails
	51,  // 74: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.NatGatewayDetails.metrics:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.NatGatewayDetails.NatGatewayMetrics
	0,   // 75: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.EC2Metrics.cpuUtilizationMetrics:type_name -> blueapi.api.cover.recommendation.aws.MetricData
	0,   // 76: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.EC2Metrics.diskUtilizationMetrics:type_name -> blueapi.api.cover.recommendation.aws.MetricData
	0,   // 77: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.EC2Metrics.networkUtilizationMetrics:type_name -> blueapi.api.cover.recommendation.aws.MetricData
	0,   // 78: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.EC2Metrics.memoryUtilizationMetrics:type_name -> blueapi.api.cover.recommendation.aws.MetricData
	0,   // 79: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.NatGatewayDetails.NatGatewayMetrics.bytesInFromDest:type_name -> blueapi.api.cover.recommendation.aws.MetricData
	0,   // 80: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.NatGatewayDetails.NatGatewayMetrics.bytesInFromSrc:type_name -> blueapi.api.cover.recommendation.aws.MetricData
	0,   // 81: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.NatGatewayDetails.NatGatewayMetrics.bytesOutToDest:type_name -> blueapi.api.cover.recommendation.aws.MetricData
	0,   // 82: blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.NatGatewayDetails.NatGatewayMetrics.bytesOutToSrc:type_name -> blueapi.api.cover.recommendation.aws.MetricData
	53,  // 83: blueapi.api.cover.recommendation.aws.AWSResourceDetails.RDSDetails.DBInstanceDetails.storage:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.RDSDetails.DBInstanceDetails.Storage
	54,  // 84: blueapi.api.cover.recommendation.aws.AWSResourceDetails.RDSDetails.DBInstanceDetails.metrics:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.RDSDetails.DBInstanceDetails.RDSMetrics
	0,   // 85: blueapi.api.cover.recommendation.aws.AWSResourceDetails.RDSDetails.DBInstanceDetails.RDSMetrics.cpuUtilizationMetrics:type_name -> blueapi.api.cover.recommendation.aws.MetricData
	20,  // 86: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.Route53LatencyResourceRecordsSets.route53Details:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.Route53Details
	21,  // 87: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.InactiveAWSNetworkFirewall.firewallDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.NetworkFirewallDetails
	36,  // 88: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.NetworkFirewallEndpointAZIndependence.endpoint:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.NetworkFirewallDetails.Endpoint
	48,  // 89: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.InactiveNATGateways.natGatewayDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.NatGatewayDetails
	46,  // 90: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.EC2OverProvisionedForMSSqlServer.ec2Details:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails
	46,  // 91: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.EC2ConsolidationForMSSqlServer.ec2Details:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails
	30,  // 92: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.LowUtilizationEC2Instances.ec2Instance:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details
	31,  // 93: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.RDSIdleDBInstances.rdsDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.RDSDetails
	25,  // 94: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.S3IncompleteMPU.s3Details:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.S3Details
	35,  // 95: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.LambdaHighErrorRates.lambdaDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.LambdaDetails
	32,  // 96: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.UnderutilizedEBSVolume.ebsDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EBSDetails
	50,  // 97: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.UnassociatedEIP.eipDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details.InstanceDetails.EIPDetails
	24,  // 98: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.IdleLoadBalancer.elbDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.ELBDetails
	30,  // 99: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.AmazonEC2InstanceStopped.ec2Details:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.EC2Details
	23,  // 100: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.EC2RILeaseExpiration.riDetails:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.ReservedInstance
	37,  // 101: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.ComprehendUnderutilizedEndpoints.endpoint:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.ComprehendDetails.Endpoint
	43,  // 102: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.UnderutilizedRedshiftCluster.cluster:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.RedshiftDetails.ClusterDetails
	58,  // 103: blueapi.api.cover.recommendation.aws.TrustedAdvisorRecommendations.LambdaWithExcessiveTimeouts.function:type_name -> blueapi.api.cover.recommendation.aws.AWSResourceDetails.LambdaDetails.FunctionDetails
	104, // [104:104] is the sub-list for method output_type
	104, // [104:104] is the sub-list for method input_type
	104, // [104:104] is the sub-list for extension type_name
	104, // [104:104] is the sub-list for extension extendee
	0,   // [0:104] is the sub-list for field type_name
}

func init() { file_api_cover_recommendation_aws_proto_init() }
func file_api_cover_recommendation_aws_proto_init() {
	if File_api_cover_recommendation_aws_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_cover_recommendation_aws_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   79,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_cover_recommendation_aws_proto_goTypes,
		DependencyIndexes: file_api_cover_recommendation_aws_proto_depIdxs,
		MessageInfos:      file_api_cover_recommendation_aws_proto_msgTypes,
	}.Build()
	File_api_cover_recommendation_aws_proto = out.File
	file_api_cover_recommendation_aws_proto_rawDesc = nil
	file_api_cover_recommendation_aws_proto_goTypes = nil
	file_api_cover_recommendation_aws_proto_depIdxs = nil
}
