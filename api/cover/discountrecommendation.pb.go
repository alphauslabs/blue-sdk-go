// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: api/cover/discountrecommendation.proto

package cover

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AwsInputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Supported values are the following: ('STANDARD', 'CONVERTIBLE') -> for RI only
	OfferingClass string `protobuf:"bytes,1,opt,name=offeringClass,proto3" json:"offeringClass,omitempty"`
	// Supported values are the following: ('ALL_UPFRONT', 'PARTIAL_UPFRONT', 'NO_UPFRONT')
	PaymentOption string `protobuf:"bytes,2,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	// Supported values are the following:('ONE_YEAR', 'THREE_YEARS')
	TermInYears string `protobuf:"bytes,3,opt,name=termInYears,proto3" json:"termInYears,omitempty"`
	// Supported values are the following:('SEVEN_DAYS', 'THIRTY_DAYS', 'SIXTY_DAYS')
	BasedOnThePast string `protobuf:"bytes,4,opt,name=basedOnThePast,proto3" json:"basedOnThePast,omitempty"`
}

func (x *AwsInputs) Reset() {
	*x = AwsInputs{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsInputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsInputs) ProtoMessage() {}

func (x *AwsInputs) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsInputs.ProtoReflect.Descriptor instead.
func (*AwsInputs) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{0}
}

func (x *AwsInputs) GetOfferingClass() string {
	if x != nil {
		return x.OfferingClass
	}
	return ""
}

func (x *AwsInputs) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *AwsInputs) GetTermInYears() string {
	if x != nil {
		return x.TermInYears
	}
	return ""
}

func (x *AwsInputs) GetBasedOnThePast() string {
	if x != nil {
		return x.BasedOnThePast
	}
	return ""
}

type GcpInputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GcpInputs) Reset() {
	*x = GcpInputs{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpInputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpInputs) ProtoMessage() {}

func (x *GcpInputs) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpInputs.ProtoReflect.Descriptor instead.
func (*GcpInputs) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{1}
}

type AzureInputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AzureInputs) Reset() {
	*x = AzureInputs{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AzureInputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureInputs) ProtoMessage() {}

func (x *AzureInputs) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureInputs.ProtoReflect.Descriptor instead.
func (*AzureInputs) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{2}
}

type EC2Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType string `protobuf:"bytes,1,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Tenancy      string `protobuf:"bytes,2,opt,name=tenancy,proto3" json:"tenancy,omitempty"`
	Family       string `protobuf:"bytes,3,opt,name=family,proto3" json:"family,omitempty"`
	Platform     string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *EC2Options) Reset() {
	*x = EC2Options{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EC2Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EC2Options) ProtoMessage() {}

func (x *EC2Options) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EC2Options.ProtoReflect.Descriptor instead.
func (*EC2Options) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{3}
}

func (x *EC2Options) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *EC2Options) GetTenancy() string {
	if x != nil {
		return x.Tenancy
	}
	return ""
}

func (x *EC2Options) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *EC2Options) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type ElasticCacheOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family             string `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	NodeType           string `protobuf:"bytes,2,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
	ProductDescription string `protobuf:"bytes,3,opt,name=productDescription,proto3" json:"productDescription,omitempty"`
}

func (x *ElasticCacheOptions) Reset() {
	*x = ElasticCacheOptions{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElasticCacheOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticCacheOptions) ProtoMessage() {}

func (x *ElasticCacheOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticCacheOptions.ProtoReflect.Descriptor instead.
func (*ElasticCacheOptions) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{4}
}

func (x *ElasticCacheOptions) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *ElasticCacheOptions) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *ElasticCacheOptions) GetProductDescription() string {
	if x != nil {
		return x.ProductDescription
	}
	return ""
}

type ESOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceClass string `protobuf:"bytes,1,opt,name=instanceClass,proto3" json:"instanceClass,omitempty"`
	InstanceSize  string `protobuf:"bytes,2,opt,name=instanceSize,proto3" json:"instanceSize,omitempty"`
}

func (x *ESOptions) Reset() {
	*x = ESOptions{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESOptions) ProtoMessage() {}

func (x *ESOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESOptions.ProtoReflect.Descriptor instead.
func (*ESOptions) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{5}
}

func (x *ESOptions) GetInstanceClass() string {
	if x != nil {
		return x.InstanceClass
	}
	return ""
}

func (x *ESOptions) GetInstanceSize() string {
	if x != nil {
		return x.InstanceSize
	}
	return ""
}

type RDSOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbEdition         string `protobuf:"bytes,1,opt,name=dbEdition,proto3" json:"dbEdition,omitempty"`
	DbEngine          string `protobuf:"bytes,2,opt,name=dbEngine,proto3" json:"dbEngine,omitempty"`
	DeploymentOptions string `protobuf:"bytes,3,opt,name=deploymentOptions,proto3" json:"deploymentOptions,omitempty"`
	Family            string `protobuf:"bytes,4,opt,name=family,proto3" json:"family,omitempty"`
	InstanceType      string `protobuf:"bytes,5,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	LicenseModel      string `protobuf:"bytes,6,opt,name=licenseModel,proto3" json:"licenseModel,omitempty"`
}

func (x *RDSOptions) Reset() {
	*x = RDSOptions{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RDSOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDSOptions) ProtoMessage() {}

func (x *RDSOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDSOptions.ProtoReflect.Descriptor instead.
func (*RDSOptions) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{6}
}

func (x *RDSOptions) GetDbEdition() string {
	if x != nil {
		return x.DbEdition
	}
	return ""
}

func (x *RDSOptions) GetDbEngine() string {
	if x != nil {
		return x.DbEngine
	}
	return ""
}

func (x *RDSOptions) GetDeploymentOptions() string {
	if x != nil {
		return x.DeploymentOptions
	}
	return ""
}

func (x *RDSOptions) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *RDSOptions) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *RDSOptions) GetLicenseModel() string {
	if x != nil {
		return x.LicenseModel
	}
	return ""
}

type RedshiftOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family   string `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	NodeType string `protobuf:"bytes,2,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
}

func (x *RedshiftOptions) Reset() {
	*x = RedshiftOptions{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedshiftOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedshiftOptions) ProtoMessage() {}

func (x *RedshiftOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedshiftOptions.ProtoReflect.Descriptor instead.
func (*RedshiftOptions) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{7}
}

func (x *RedshiftOptions) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *RedshiftOptions) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

type RiRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                             string               `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	RecommendedNumberOfInstanceToPurchase string               `protobuf:"bytes,2,opt,name=recommendedNumberOfInstanceToPurchase,proto3" json:"recommendedNumberOfInstanceToPurchase,omitempty"`
	CurrencyCode                          string               `protobuf:"bytes,3,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	Ec2Options                            *EC2Options          `protobuf:"bytes,4,opt,name=ec2Options,proto3" json:"ec2Options,omitempty"`
	ElasticCacheOptions                   *ElasticCacheOptions `protobuf:"bytes,5,opt,name=elasticCacheOptions,proto3" json:"elasticCacheOptions,omitempty"`
	EsOptions                             *ESOptions           `protobuf:"bytes,6,opt,name=esOptions,proto3" json:"esOptions,omitempty"`
	RdsOptions                            *RDSOptions          `protobuf:"bytes,7,opt,name=rdsOptions,proto3" json:"rdsOptions,omitempty"`
	RedshiftOptions                       *RedshiftOptions     `protobuf:"bytes,8,opt,name=redshiftOptions,proto3" json:"redshiftOptions,omitempty"`
	Region                                string               `protobuf:"bytes,9,opt,name=region,proto3" json:"region,omitempty"`
	SizeFlexEligible                      bool                 `protobuf:"varint,10,opt,name=sizeFlexEligible,proto3" json:"sizeFlexEligible,omitempty"`
	CurrentGeneration                     bool                 `protobuf:"varint,11,opt,name=currentGeneration,proto3" json:"currentGeneration,omitempty"`
	UpfrontCost                           float64              `protobuf:"fixed64,12,opt,name=upfrontCost,proto3" json:"upfrontCost,omitempty"`
	EstimatedMonthlySavings               float64              `protobuf:"fixed64,13,opt,name=estimatedMonthlySavings,proto3" json:"estimatedMonthlySavings,omitempty"`
}

func (x *RiRecommendationDetails) Reset() {
	*x = RiRecommendationDetails{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiRecommendationDetails) ProtoMessage() {}

func (x *RiRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiRecommendationDetails.ProtoReflect.Descriptor instead.
func (*RiRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{8}
}

func (x *RiRecommendationDetails) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RiRecommendationDetails) GetRecommendedNumberOfInstanceToPurchase() string {
	if x != nil {
		return x.RecommendedNumberOfInstanceToPurchase
	}
	return ""
}

func (x *RiRecommendationDetails) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *RiRecommendationDetails) GetEc2Options() *EC2Options {
	if x != nil {
		return x.Ec2Options
	}
	return nil
}

func (x *RiRecommendationDetails) GetElasticCacheOptions() *ElasticCacheOptions {
	if x != nil {
		return x.ElasticCacheOptions
	}
	return nil
}

func (x *RiRecommendationDetails) GetEsOptions() *ESOptions {
	if x != nil {
		return x.EsOptions
	}
	return nil
}

func (x *RiRecommendationDetails) GetRdsOptions() *RDSOptions {
	if x != nil {
		return x.RdsOptions
	}
	return nil
}

func (x *RiRecommendationDetails) GetRedshiftOptions() *RedshiftOptions {
	if x != nil {
		return x.RedshiftOptions
	}
	return nil
}

func (x *RiRecommendationDetails) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RiRecommendationDetails) GetSizeFlexEligible() bool {
	if x != nil {
		return x.SizeFlexEligible
	}
	return false
}

func (x *RiRecommendationDetails) GetCurrentGeneration() bool {
	if x != nil {
		return x.CurrentGeneration
	}
	return false
}

func (x *RiRecommendationDetails) GetUpfrontCost() float64 {
	if x != nil {
		return x.UpfrontCost
	}
	return 0
}

func (x *RiRecommendationDetails) GetEstimatedMonthlySavings() float64 {
	if x != nil {
		return x.EstimatedMonthlySavings
	}
	return 0
}

type RiSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPurchaseRecommendations    int64   `protobuf:"varint,1,opt,name=totalPurchaseRecommendations,proto3" json:"totalPurchaseRecommendations,omitempty"`
	EstimatedMonthlySavings         float64 `protobuf:"fixed64,2,opt,name=estimatedMonthlySavings,proto3" json:"estimatedMonthlySavings,omitempty"`
	EstimatedSavingsVSOnDemandRates float64 `protobuf:"fixed64,3,opt,name=estimatedSavingsVSOnDemandRates,proto3" json:"estimatedSavingsVSOnDemandRates,omitempty"`
}

func (x *RiSummary) Reset() {
	*x = RiSummary{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiSummary) ProtoMessage() {}

func (x *RiSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiSummary.ProtoReflect.Descriptor instead.
func (*RiSummary) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{9}
}

func (x *RiSummary) GetTotalPurchaseRecommendations() int64 {
	if x != nil {
		return x.TotalPurchaseRecommendations
	}
	return 0
}

func (x *RiSummary) GetEstimatedMonthlySavings() float64 {
	if x != nil {
		return x.EstimatedMonthlySavings
	}
	return 0
}

func (x *RiSummary) GetEstimatedSavingsVSOnDemandRates() float64 {
	if x != nil {
		return x.EstimatedSavingsVSOnDemandRates
	}
	return 0
}

type RiRecommendationResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RiSummary               *RiSummary                 `protobuf:"bytes,1,opt,name=riSummary,proto3" json:"riSummary,omitempty"`
	RiRecommendationDetails []*RiRecommendationDetails `protobuf:"bytes,2,rep,name=riRecommendationDetails,proto3" json:"riRecommendationDetails,omitempty"`
}

func (x *RiRecommendationResults) Reset() {
	*x = RiRecommendationResults{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiRecommendationResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiRecommendationResults) ProtoMessage() {}

func (x *RiRecommendationResults) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiRecommendationResults.ProtoReflect.Descriptor instead.
func (*RiRecommendationResults) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{10}
}

func (x *RiRecommendationResults) GetRiSummary() *RiSummary {
	if x != nil {
		return x.RiSummary
	}
	return nil
}

func (x *RiRecommendationResults) GetRiRecommendationDetails() []*RiRecommendationDetails {
	if x != nil {
		return x.RiRecommendationDetails
	}
	return nil
}

type SpRecommendationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId                     string  `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	CurrencyCode                  string  `protobuf:"bytes,2,opt,name=currencyCode,proto3" json:"currencyCode,omitempty"`
	HourlyCommitmentToPurchase    float64 `protobuf:"fixed64,3,opt,name=hourlyCommitmentToPurchase,proto3" json:"hourlyCommitmentToPurchase,omitempty"`
	EstimatedMonthlySavingsAmount float64 `protobuf:"fixed64,4,opt,name=estimatedMonthlySavingsAmount,proto3" json:"estimatedMonthlySavingsAmount,omitempty"`
	EstimatedSavingsPercentage    float64 `protobuf:"fixed64,5,opt,name=estimatedSavingsPercentage,proto3" json:"estimatedSavingsPercentage,omitempty"`
	EstimatedAverageCoverage      float64 `protobuf:"fixed64,6,opt,name=estimatedAverageCoverage,proto3" json:"estimatedAverageCoverage,omitempty"`
	EstimatedAverageUtilization   float64 `protobuf:"fixed64,7,opt,name=estimatedAverageUtilization,proto3" json:"estimatedAverageUtilization,omitempty"`
}

func (x *SpRecommendationDetails) Reset() {
	*x = SpRecommendationDetails{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpRecommendationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpRecommendationDetails) ProtoMessage() {}

func (x *SpRecommendationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpRecommendationDetails.ProtoReflect.Descriptor instead.
func (*SpRecommendationDetails) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{11}
}

func (x *SpRecommendationDetails) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SpRecommendationDetails) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *SpRecommendationDetails) GetHourlyCommitmentToPurchase() float64 {
	if x != nil {
		return x.HourlyCommitmentToPurchase
	}
	return 0
}

func (x *SpRecommendationDetails) GetEstimatedMonthlySavingsAmount() float64 {
	if x != nil {
		return x.EstimatedMonthlySavingsAmount
	}
	return 0
}

func (x *SpRecommendationDetails) GetEstimatedSavingsPercentage() float64 {
	if x != nil {
		return x.EstimatedSavingsPercentage
	}
	return 0
}

func (x *SpRecommendationDetails) GetEstimatedAverageCoverage() float64 {
	if x != nil {
		return x.EstimatedAverageCoverage
	}
	return 0
}

func (x *SpRecommendationDetails) GetEstimatedAverageUtilization() float64 {
	if x != nil {
		return x.EstimatedAverageUtilization
	}
	return 0
}

type SpSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentOnDemandSpend     float64 `protobuf:"fixed64,1,opt,name=currentOnDemandSpend,proto3" json:"currentOnDemandSpend,omitempty"`
	EstimatedMonthlySpend    float64 `protobuf:"fixed64,2,opt,name=estimatedMonthlySpend,proto3" json:"estimatedMonthlySpend,omitempty"`
	EstimatedMonthlySavings  float64 `protobuf:"fixed64,3,opt,name=estimatedMonthlySavings,proto3" json:"estimatedMonthlySavings,omitempty"`
	TotalRecommendationCount int64   `protobuf:"varint,4,opt,name=totalRecommendationCount,proto3" json:"totalRecommendationCount,omitempty"`
}

func (x *SpSummary) Reset() {
	*x = SpSummary{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpSummary) ProtoMessage() {}

func (x *SpSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpSummary.ProtoReflect.Descriptor instead.
func (*SpSummary) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{12}
}

func (x *SpSummary) GetCurrentOnDemandSpend() float64 {
	if x != nil {
		return x.CurrentOnDemandSpend
	}
	return 0
}

func (x *SpSummary) GetEstimatedMonthlySpend() float64 {
	if x != nil {
		return x.EstimatedMonthlySpend
	}
	return 0
}

func (x *SpSummary) GetEstimatedMonthlySavings() float64 {
	if x != nil {
		return x.EstimatedMonthlySavings
	}
	return 0
}

func (x *SpSummary) GetTotalRecommendationCount() int64 {
	if x != nil {
		return x.TotalRecommendationCount
	}
	return 0
}

type SpRecommendationResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpSummary               *SpSummary                 `protobuf:"bytes,1,opt,name=spSummary,proto3" json:"spSummary,omitempty"`
	SpRecommendationDetails []*SpRecommendationDetails `protobuf:"bytes,2,rep,name=spRecommendationDetails,proto3" json:"spRecommendationDetails,omitempty"`
}

func (x *SpRecommendationResults) Reset() {
	*x = SpRecommendationResults{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpRecommendationResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpRecommendationResults) ProtoMessage() {}

func (x *SpRecommendationResults) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpRecommendationResults.ProtoReflect.Descriptor instead.
func (*SpRecommendationResults) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{13}
}

func (x *SpRecommendationResults) GetSpSummary() *SpSummary {
	if x != nil {
		return x.SpSummary
	}
	return nil
}

func (x *SpRecommendationResults) GetSpRecommendationDetails() []*SpRecommendationDetails {
	if x != nil {
		return x.SpRecommendationDetails
	}
	return nil
}

type AwsDiscountRecommendations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RiRecommendations []*RiRecommendationResults `protobuf:"bytes,1,rep,name=riRecommendations,proto3" json:"riRecommendations,omitempty"`
	SpRecommendations []*SpRecommendationResults `protobuf:"bytes,2,rep,name=spRecommendations,proto3" json:"spRecommendations,omitempty"`
}

func (x *AwsDiscountRecommendations) Reset() {
	*x = AwsDiscountRecommendations{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsDiscountRecommendations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDiscountRecommendations) ProtoMessage() {}

func (x *AwsDiscountRecommendations) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDiscountRecommendations.ProtoReflect.Descriptor instead.
func (*AwsDiscountRecommendations) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{14}
}

func (x *AwsDiscountRecommendations) GetRiRecommendations() []*RiRecommendationResults {
	if x != nil {
		return x.RiRecommendations
	}
	return nil
}

func (x *AwsDiscountRecommendations) GetSpRecommendations() []*SpRecommendationResults {
	if x != nil {
		return x.SpRecommendations
	}
	return nil
}

type GcpDiscountRecommendations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GcpDiscountRecommendations) Reset() {
	*x = GcpDiscountRecommendations{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpDiscountRecommendations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpDiscountRecommendations) ProtoMessage() {}

func (x *GcpDiscountRecommendations) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpDiscountRecommendations.ProtoReflect.Descriptor instead.
func (*GcpDiscountRecommendations) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{15}
}

type AzureDiscountRecommendations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AzureDiscountRecommendations) Reset() {
	*x = AzureDiscountRecommendations{}
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AzureDiscountRecommendations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureDiscountRecommendations) ProtoMessage() {}

func (x *AzureDiscountRecommendations) ProtoReflect() protoreflect.Message {
	mi := &file_api_cover_discountrecommendation_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureDiscountRecommendations.ProtoReflect.Descriptor instead.
func (*AzureDiscountRecommendations) Descriptor() ([]byte, []int) {
	return file_api_cover_discountrecommendation_proto_rawDescGZIP(), []int{16}
}

var File_api_cover_discountrecommendation_proto protoreflect.FileDescriptor

var file_api_cover_discountrecommendation_proto_rawDesc = []byte{
	0x0a, 0x26, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x09,
	0x41, 0x77, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x59,
	0x65, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x6d,
	0x49, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x4f, 0x6e, 0x54, 0x68, 0x65, 0x50, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x54, 0x68, 0x65, 0x50, 0x61, 0x73, 0x74, 0x22,
	0x0b, 0x0a, 0x09, 0x47, 0x63, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x0d, 0x0a, 0x0b,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x7e, 0x0a, 0x0a, 0x45,
	0x43, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x79, 0x0a, 0x13, 0x45,
	0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x09, 0x45, 0x53, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xd4, 0x01,
	0x0a, 0x0a, 0x52, 0x44, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x62, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x62, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x62,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x62,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x22, 0x45, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe1, 0x05, 0x0a, 0x17,
	0x52, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x25, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x6f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x65, 0x63, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x43, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0a, 0x65, 0x63, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58,
	0x0a, 0x13, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x13, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x45, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x65, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x44, 0x53,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x72, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0f, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x69, 0x7a,
	0x65, 0x46, 0x6c, 0x65, 0x78, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0xd3, 0x01, 0x0a, 0x09, 0x52, 0x69, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x42, 0x0a,
	0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x56,
	0x53, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x53, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x17, 0x52, 0x69, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x69, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x69, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x09, 0x72, 0x69, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x64, 0x0a,
	0x17, 0x72, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x17, 0x72, 0x69, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0x9f, 0x03, 0x0a, 0x17, 0x53, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x1d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xeb, 0x01, 0x0a, 0x09, 0x53, 0x70, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x6e,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x38, 0x0a,
	0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x17, 0x53, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x3a, 0x0a, 0x09, 0x73, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x09, 0x73, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x17, 0x73,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x17, 0x73, 0x70, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0xd0, 0x01, 0x0a, 0x1a, 0x41, 0x77, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x58, 0x0a, 0x11, 0x72, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x11, 0x72, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x73, 0x70,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x11, 0x73, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x63, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x74, 0x0a, 0x1f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x75, 0x73, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x23, 0x41, 0x70, 0x69, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61,
	0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_cover_discountrecommendation_proto_rawDescOnce sync.Once
	file_api_cover_discountrecommendation_proto_rawDescData = file_api_cover_discountrecommendation_proto_rawDesc
)

func file_api_cover_discountrecommendation_proto_rawDescGZIP() []byte {
	file_api_cover_discountrecommendation_proto_rawDescOnce.Do(func() {
		file_api_cover_discountrecommendation_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_cover_discountrecommendation_proto_rawDescData)
	})
	return file_api_cover_discountrecommendation_proto_rawDescData
}

var file_api_cover_discountrecommendation_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_api_cover_discountrecommendation_proto_goTypes = []any{
	(*AwsInputs)(nil),                    // 0: blueapi.api.cover.AwsInputs
	(*GcpInputs)(nil),                    // 1: blueapi.api.cover.GcpInputs
	(*AzureInputs)(nil),                  // 2: blueapi.api.cover.AzureInputs
	(*EC2Options)(nil),                   // 3: blueapi.api.cover.EC2Options
	(*ElasticCacheOptions)(nil),          // 4: blueapi.api.cover.ElasticCacheOptions
	(*ESOptions)(nil),                    // 5: blueapi.api.cover.ESOptions
	(*RDSOptions)(nil),                   // 6: blueapi.api.cover.RDSOptions
	(*RedshiftOptions)(nil),              // 7: blueapi.api.cover.RedshiftOptions
	(*RiRecommendationDetails)(nil),      // 8: blueapi.api.cover.RiRecommendationDetails
	(*RiSummary)(nil),                    // 9: blueapi.api.cover.RiSummary
	(*RiRecommendationResults)(nil),      // 10: blueapi.api.cover.RiRecommendationResults
	(*SpRecommendationDetails)(nil),      // 11: blueapi.api.cover.SpRecommendationDetails
	(*SpSummary)(nil),                    // 12: blueapi.api.cover.SpSummary
	(*SpRecommendationResults)(nil),      // 13: blueapi.api.cover.SpRecommendationResults
	(*AwsDiscountRecommendations)(nil),   // 14: blueapi.api.cover.AwsDiscountRecommendations
	(*GcpDiscountRecommendations)(nil),   // 15: blueapi.api.cover.GcpDiscountRecommendations
	(*AzureDiscountRecommendations)(nil), // 16: blueapi.api.cover.AzureDiscountRecommendations
}
var file_api_cover_discountrecommendation_proto_depIdxs = []int32{
	3,  // 0: blueapi.api.cover.RiRecommendationDetails.ec2Options:type_name -> blueapi.api.cover.EC2Options
	4,  // 1: blueapi.api.cover.RiRecommendationDetails.elasticCacheOptions:type_name -> blueapi.api.cover.ElasticCacheOptions
	5,  // 2: blueapi.api.cover.RiRecommendationDetails.esOptions:type_name -> blueapi.api.cover.ESOptions
	6,  // 3: blueapi.api.cover.RiRecommendationDetails.rdsOptions:type_name -> blueapi.api.cover.RDSOptions
	7,  // 4: blueapi.api.cover.RiRecommendationDetails.redshiftOptions:type_name -> blueapi.api.cover.RedshiftOptions
	9,  // 5: blueapi.api.cover.RiRecommendationResults.riSummary:type_name -> blueapi.api.cover.RiSummary
	8,  // 6: blueapi.api.cover.RiRecommendationResults.riRecommendationDetails:type_name -> blueapi.api.cover.RiRecommendationDetails
	12, // 7: blueapi.api.cover.SpRecommendationResults.spSummary:type_name -> blueapi.api.cover.SpSummary
	11, // 8: blueapi.api.cover.SpRecommendationResults.spRecommendationDetails:type_name -> blueapi.api.cover.SpRecommendationDetails
	10, // 9: blueapi.api.cover.AwsDiscountRecommendations.riRecommendations:type_name -> blueapi.api.cover.RiRecommendationResults
	13, // 10: blueapi.api.cover.AwsDiscountRecommendations.spRecommendations:type_name -> blueapi.api.cover.SpRecommendationResults
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_api_cover_discountrecommendation_proto_init() }
func file_api_cover_discountrecommendation_proto_init() {
	if File_api_cover_discountrecommendation_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_cover_discountrecommendation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_cover_discountrecommendation_proto_goTypes,
		DependencyIndexes: file_api_cover_discountrecommendation_proto_depIdxs,
		MessageInfos:      file_api_cover_discountrecommendation_proto_msgTypes,
	}.Build()
	File_api_cover_discountrecommendation_proto = out.File
	file_api_cover_discountrecommendation_proto_rawDesc = nil
	file_api_cover_discountrecommendation_proto_goTypes = nil
	file_api_cover_discountrecommendation_proto_depIdxs = nil
}
