// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/adjustment.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AdjustmentConfig resource definition.
type AdjustmentConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User configuration
	Config []*ConfigFilters `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty"`
	// Vendor
	Vendor string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Management account configuration
	Accounts      []*ManagementAccount `protobuf:"bytes,3,rep,name=accounts,proto3" json:"accounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdjustmentConfig) Reset() {
	*x = AdjustmentConfig{}
	mi := &file_api_adjustment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdjustmentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustmentConfig) ProtoMessage() {}

func (x *AdjustmentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_adjustment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustmentConfig.ProtoReflect.Descriptor instead.
func (*AdjustmentConfig) Descriptor() ([]byte, []int) {
	return file_api_adjustment_proto_rawDescGZIP(), []int{0}
}

func (x *AdjustmentConfig) GetConfig() []*ConfigFilters {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AdjustmentConfig) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *AdjustmentConfig) GetAccounts() []*ManagementAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// ManagementAccount resource definition.
type ManagementAccount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Vendor-managed organization account Id
	ManagementAccountId string `protobuf:"bytes,1,opt,name=managementAccountId,proto3" json:"managementAccountId,omitempty"`
	// A list of filtering options. See [ConfigFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	Config        []*ConfigFilters `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManagementAccount) Reset() {
	*x = ManagementAccount{}
	mi := &file_api_adjustment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagementAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagementAccount) ProtoMessage() {}

func (x *ManagementAccount) ProtoReflect() protoreflect.Message {
	mi := &file_api_adjustment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagementAccount.ProtoReflect.Descriptor instead.
func (*ManagementAccount) Descriptor() ([]byte, []int) {
	return file_api_adjustment_proto_rawDescGZIP(), []int{1}
}

func (x *ManagementAccount) GetManagementAccountId() string {
	if x != nil {
		return x.ManagementAccountId
	}
	return ""
}

func (x *ManagementAccount) GetConfig() []*ConfigFilters {
	if x != nil {
		return x.Config
	}
	return nil
}

// ConfigFilters resource definition.
// A map of "key:value" config filters. The key indicates the adjustment key while the value is the filter adjustment value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
//
// For example, if you want to query lineitems with the adjustment `productCode:AmazonEC2`, set to `{"productCode":"AmazonEC2"}`. You can also use regular expressions for adjustment values, such as `{"description":"re:[A-Za-z0-9]*"}`.
// List of available adjustment keys: productCode, type, description
// For example value on productCode: AmazonEC2, AmazonRDS, AWSLambda, etc.
// For example value on type: Fee, Refund, SppDiscount, etc.
type ConfigFilters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AndFilters    map[string]string      `protobuf:"bytes,1,rep,name=andFilters,proto3" json:"andFilters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigFilters) Reset() {
	*x = ConfigFilters{}
	mi := &file_api_adjustment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFilters) ProtoMessage() {}

func (x *ConfigFilters) ProtoReflect() protoreflect.Message {
	mi := &file_api_adjustment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFilters.ProtoReflect.Descriptor instead.
func (*ConfigFilters) Descriptor() ([]byte, []int) {
	return file_api_adjustment_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigFilters) GetAndFilters() map[string]string {
	if x != nil {
		return x.AndFilters
	}
	return nil
}

var File_api_adjustment_proto protoreflect.FileDescriptor

const file_api_adjustment_proto_rawDesc = "" +
	"\n" +
	"\x14api/adjustment.proto\x12\vblueapi.api\"\x9a\x01\n" +
	"\x10AdjustmentConfig\x122\n" +
	"\x06config\x18\x01 \x03(\v2\x1a.blueapi.api.ConfigFiltersR\x06config\x12\x16\n" +
	"\x06vendor\x18\x02 \x01(\tR\x06vendor\x12:\n" +
	"\baccounts\x18\x03 \x03(\v2\x1e.blueapi.api.ManagementAccountR\baccounts\"y\n" +
	"\x11ManagementAccount\x120\n" +
	"\x13managementAccountId\x18\x01 \x01(\tR\x13managementAccountId\x122\n" +
	"\x06config\x18\x02 \x03(\v2\x1a.blueapi.api.ConfigFiltersR\x06config\"\x9a\x01\n" +
	"\rConfigFilters\x12J\n" +
	"\n" +
	"andFilters\x18\x01 \x03(\v2*.blueapi.api.ConfigFilters.AndFiltersEntryR\n" +
	"andFilters\x1a=\n" +
	"\x0fAndFiltersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01BW\n" +
	"\x19cloud.alphaus.blueapi.apiB\x12ApiAdjustmentProtoZ&github.com/alphauslabs/blue-sdk-go/apib\x06proto3"

var (
	file_api_adjustment_proto_rawDescOnce sync.Once
	file_api_adjustment_proto_rawDescData []byte
)

func file_api_adjustment_proto_rawDescGZIP() []byte {
	file_api_adjustment_proto_rawDescOnce.Do(func() {
		file_api_adjustment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_adjustment_proto_rawDesc), len(file_api_adjustment_proto_rawDesc)))
	})
	return file_api_adjustment_proto_rawDescData
}

var file_api_adjustment_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_api_adjustment_proto_goTypes = []any{
	(*AdjustmentConfig)(nil),  // 0: blueapi.api.AdjustmentConfig
	(*ManagementAccount)(nil), // 1: blueapi.api.ManagementAccount
	(*ConfigFilters)(nil),     // 2: blueapi.api.ConfigFilters
	nil,                       // 3: blueapi.api.ConfigFilters.AndFiltersEntry
}
var file_api_adjustment_proto_depIdxs = []int32{
	2, // 0: blueapi.api.AdjustmentConfig.config:type_name -> blueapi.api.ConfigFilters
	1, // 1: blueapi.api.AdjustmentConfig.accounts:type_name -> blueapi.api.ManagementAccount
	2, // 2: blueapi.api.ManagementAccount.config:type_name -> blueapi.api.ConfigFilters
	3, // 3: blueapi.api.ConfigFilters.andFilters:type_name -> blueapi.api.ConfigFilters.AndFiltersEntry
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_api_adjustment_proto_init() }
func file_api_adjustment_proto_init() {
	if File_api_adjustment_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_adjustment_proto_rawDesc), len(file_api_adjustment_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_adjustment_proto_goTypes,
		DependencyIndexes: file_api_adjustment_proto_depIdxs,
		MessageInfos:      file_api_adjustment_proto_msgTypes,
	}.Build()
	File_api_adjustment_proto = out.File
	file_api_adjustment_proto_goTypes = nil
	file_api_adjustment_proto_depIdxs = nil
}
