// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: billing/v1/billing.proto

package billing

import (
	api "github.com/alphauslabs/blue-sdk-go/api"
	ripple "github.com/alphauslabs/blue-sdk-go/api/ripple"
	wave "github.com/alphauslabs/blue-sdk-go/api/wave"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BillingGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The billing group's internal id.
	BillingInternalId string `protobuf:"bytes,1,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	// The billing group id.
	BillingGroupId string `protobuf:"bytes,2,opt,name=billingGroupId,proto3" json:"billingGroupId,omitempty"`
	// The billing group name.
	BillingGroupName string `protobuf:"bytes,3,opt,name=billingGroupName,proto3" json:"billingGroupName,omitempty"`
	// The companyâ€™s name.
	CompanyName string `protobuf:"bytes,7,opt,name=companyName,proto3" json:"companyName,omitempty"`
	// The billing group info
	BillingGroupInfo *ripple.BillingGroupInfo `protobuf:"bytes,10,opt,name=billingGroupInfo,proto3" json:"billingGroupInfo,omitempty"`
	// The account options.
	AccountOptions *AccountOptions `protobuf:"bytes,8,opt,name=accountOptions,proto3" json:"accountOptions,omitempty"`
	// List of all accounts
	Accounts []*api.Account `protobuf:"bytes,4,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// List of all tags
	Tags []*api.CostTag `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	// The invoice settings for this billing group.
	InvoiceSettings *BillingGroupInvoiceSettings `protobuf:"bytes,5,opt,name=invoiceSettings,proto3" json:"invoiceSettings,omitempty"`
	// AWS-specific options
	AwsOptions *AwsOptions `protobuf:"bytes,9,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *BillingGroup) Reset() {
	*x = BillingGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillingGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingGroup) ProtoMessage() {}

func (x *BillingGroup) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingGroup.ProtoReflect.Descriptor instead.
func (*BillingGroup) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{0}
}

func (x *BillingGroup) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *BillingGroup) GetBillingGroupId() string {
	if x != nil {
		return x.BillingGroupId
	}
	return ""
}

func (x *BillingGroup) GetBillingGroupName() string {
	if x != nil {
		return x.BillingGroupName
	}
	return ""
}

func (x *BillingGroup) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *BillingGroup) GetBillingGroupInfo() *ripple.BillingGroupInfo {
	if x != nil {
		return x.BillingGroupInfo
	}
	return nil
}

func (x *BillingGroup) GetAccountOptions() *AccountOptions {
	if x != nil {
		return x.AccountOptions
	}
	return nil
}

func (x *BillingGroup) GetAccounts() []*api.Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *BillingGroup) GetTags() []*api.CostTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *BillingGroup) GetInvoiceSettings() *BillingGroupInvoiceSettings {
	if x != nil {
		return x.InvoiceSettings
	}
	return nil
}

func (x *BillingGroup) GetAwsOptions() *AwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

// Invoice settings for a billing group.
type BillingGroupInvoiceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AWS invoice settings
	Aws *BillingGroupVendoredInvoiceSetting `protobuf:"bytes,1,opt,name=aws,proto3" json:"aws,omitempty"`
	// Azure invoice settings
	Azure *BillingGroupVendoredInvoiceSetting `protobuf:"bytes,2,opt,name=azure,proto3" json:"azure,omitempty"`
	// GCP invoice settings
	Gcp *BillingGroupVendoredInvoiceSetting `protobuf:"bytes,3,opt,name=gcp,proto3" json:"gcp,omitempty"`
}

func (x *BillingGroupInvoiceSettings) Reset() {
	*x = BillingGroupInvoiceSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillingGroupInvoiceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingGroupInvoiceSettings) ProtoMessage() {}

func (x *BillingGroupInvoiceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingGroupInvoiceSettings.ProtoReflect.Descriptor instead.
func (*BillingGroupInvoiceSettings) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{1}
}

func (x *BillingGroupInvoiceSettings) GetAws() *BillingGroupVendoredInvoiceSetting {
	if x != nil {
		return x.Aws
	}
	return nil
}

func (x *BillingGroupInvoiceSettings) GetAzure() *BillingGroupVendoredInvoiceSetting {
	if x != nil {
		return x.Azure
	}
	return nil
}

func (x *BillingGroupInvoiceSettings) GetGcp() *BillingGroupVendoredInvoiceSetting {
	if x != nil {
		return x.Gcp
	}
	return nil
}

// Invoice settings that are vendor-specific for each billing group.
type BillingGroupVendoredInvoiceSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalcType                   string  `protobuf:"bytes,1,opt,name=calcType,proto3" json:"calcType,omitempty"`
	DiscountRate               float64 `protobuf:"fixed64,2,opt,name=discountRate,proto3" json:"discountRate,omitempty"`
	SubstitutionFee            string  `protobuf:"bytes,3,opt,name=substitutionFee,proto3" json:"substitutionFee,omitempty"`
	SubstitutionFix            float64 `protobuf:"fixed64,4,opt,name=substitutionFix,proto3" json:"substitutionFix,omitempty"`
	SubstitutionRate           float64 `protobuf:"fixed64,5,opt,name=substitutionRate,proto3" json:"substitutionRate,omitempty"`
	SupportFee                 string  `protobuf:"bytes,6,opt,name=supportFee,proto3" json:"supportFee,omitempty"`
	SupportRate                float64 `protobuf:"fixed64,7,opt,name=supportRate,proto3" json:"supportRate,omitempty"`
	SupportFix                 float64 `protobuf:"fixed64,8,opt,name=supportFix,proto3" json:"supportFix,omitempty"`
	TaxRate                    float64 `protobuf:"fixed64,9,opt,name=taxRate,proto3" json:"taxRate,omitempty"`
	Currency                   string  `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	DiscountTargetUsage        string  `protobuf:"bytes,11,opt,name=discountTargetUsage,proto3" json:"discountTargetUsage,omitempty"`
	SubstitutionFeeTargetUsage string  `protobuf:"bytes,12,opt,name=substitutionFeeTargetUsage,proto3" json:"substitutionFeeTargetUsage,omitempty"`
	DiscountCalcLogic          string  `protobuf:"bytes,13,opt,name=discountCalcLogic,proto3" json:"discountCalcLogic,omitempty"`
	SubstitutionFeeCalcTarget  string  `protobuf:"bytes,14,opt,name=substitutionFeeCalcTarget,proto3" json:"substitutionFeeCalcTarget,omitempty"`
	SubstitutionFeeCalcType    string  `protobuf:"bytes,15,opt,name=substitutionFeeCalcType,proto3" json:"substitutionFeeCalcType,omitempty"`
	SupportAmountTarget        string  `protobuf:"bytes,16,opt,name=supportAmountTarget,proto3" json:"supportAmountTarget,omitempty"`
	SupportFeeCalcTarget       string  `protobuf:"bytes,17,opt,name=supportFeeCalcTarget,proto3" json:"supportFeeCalcTarget,omitempty"`
}

func (x *BillingGroupVendoredInvoiceSetting) Reset() {
	*x = BillingGroupVendoredInvoiceSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillingGroupVendoredInvoiceSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingGroupVendoredInvoiceSetting) ProtoMessage() {}

func (x *BillingGroupVendoredInvoiceSetting) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingGroupVendoredInvoiceSetting.ProtoReflect.Descriptor instead.
func (*BillingGroupVendoredInvoiceSetting) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{2}
}

func (x *BillingGroupVendoredInvoiceSetting) GetCalcType() string {
	if x != nil {
		return x.CalcType
	}
	return ""
}

func (x *BillingGroupVendoredInvoiceSetting) GetDiscountRate() float64 {
	if x != nil {
		return x.DiscountRate
	}
	return 0
}

func (x *BillingGroupVendoredInvoiceSetting) GetSubstitutionFee() string {
	if x != nil {
		return x.SubstitutionFee
	}
	return ""
}

func (x *BillingGroupVendoredInvoiceSetting) GetSubstitutionFix() float64 {
	if x != nil {
		return x.SubstitutionFix
	}
	return 0
}

func (x *BillingGroupVendoredInvoiceSetting) GetSubstitutionRate() float64 {
	if x != nil {
		return x.SubstitutionRate
	}
	return 0
}

func (x *BillingGroupVendoredInvoiceSetting) GetSupportFee() string {
	if x != nil {
		return x.SupportFee
	}
	return ""
}

func (x *BillingGroupVendoredInvoiceSetting) GetSupportRate() float64 {
	if x != nil {
		return x.SupportRate
	}
	return 0
}

func (x *BillingGroupVendoredInvoiceSetting) GetSupportFix() float64 {
	if x != nil {
		return x.SupportFix
	}
	return 0
}

func (x *BillingGroupVendoredInvoiceSetting) GetTaxRate() float64 {
	if x != nil {
		return x.TaxRate
	}
	return 0
}

func (x *BillingGroupVendoredInvoiceSetting) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BillingGroupVendoredInvoiceSetting) GetDiscountTargetUsage() string {
	if x != nil {
		return x.DiscountTargetUsage
	}
	return ""
}

func (x *BillingGroupVendoredInvoiceSetting) GetSubstitutionFeeTargetUsage() string {
	if x != nil {
		return x.SubstitutionFeeTargetUsage
	}
	return ""
}

func (x *BillingGroupVendoredInvoiceSetting) GetDiscountCalcLogic() string {
	if x != nil {
		return x.DiscountCalcLogic
	}
	return ""
}

func (x *BillingGroupVendoredInvoiceSetting) GetSubstitutionFeeCalcTarget() string {
	if x != nil {
		return x.SubstitutionFeeCalcTarget
	}
	return ""
}

func (x *BillingGroupVendoredInvoiceSetting) GetSubstitutionFeeCalcType() string {
	if x != nil {
		return x.SubstitutionFeeCalcType
	}
	return ""
}

func (x *BillingGroupVendoredInvoiceSetting) GetSupportAmountTarget() string {
	if x != nil {
		return x.SupportAmountTarget
	}
	return ""
}

func (x *BillingGroupVendoredInvoiceSetting) GetSupportFeeCalcTarget() string {
	if x != nil {
		return x.SupportFeeCalcTarget
	}
	return ""
}

// Request message for the Billing.ListBillingGroups rpc.
type ListBillingGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Get only the value that set fieldMask.
	//
	// see more info: https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/field_mask.proto
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *ListBillingGroupsRequest) Reset() {
	*x = ListBillingGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBillingGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBillingGroupsRequest) ProtoMessage() {}

func (x *ListBillingGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBillingGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListBillingGroupsRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{3}
}

func (x *ListBillingGroupsRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Request message for the Billing.CreateBillingGroup rpc.
type CreateBillingGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The billing group's id.
	BillingGroupId string `protobuf:"bytes,1,opt,name=billingGroupId,proto3" json:"billingGroupId,omitempty"`
	// Required. The billing group's name.
	BillingGroupName string `protobuf:"bytes,2,opt,name=billingGroupName,proto3" json:"billingGroupName,omitempty"`
	// Required. Companyâ€™s name
	CompanyName string `protobuf:"bytes,3,opt,name=companyName,proto3" json:"companyName,omitempty"`
	// Optional. The title of the billing
	BillingTitle string `protobuf:"bytes,4,opt,name=billingTitle,proto3" json:"billingTitle,omitempty"`
	// Optional. Companyâ€™s phone number
	PhoneNumber string `protobuf:"bytes,5,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	// Optional. Companyâ€™s postal code
	PostalCode string `protobuf:"bytes,6,opt,name=postalCode,proto3" json:"postalCode,omitempty"`
	// Optional. Companyâ€™s address
	Address string `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// Optional. Addressee
	Personal string `protobuf:"bytes,8,opt,name=personal,proto3" json:"personal,omitempty"`
	// Optional. Any remarks about the billing group
	Remarks string `protobuf:"bytes,9,opt,name=remarks,proto3" json:"remarks,omitempty"`
	// Optional. Project code
	ProjectId string `protobuf:"bytes,10,opt,name=projectId,proto3" json:"projectId,omitempty"`
	// Optional. Invoice language
	Language string `protobuf:"bytes,11,opt,name=language,proto3" json:"language,omitempty"`
	// Optional. Calculation type, true unblended or unblended
	DisplayCost string `protobuf:"bytes,12,opt,name=displayCost,proto3" json:"displayCost,omitempty"`
	// Optional. Exchange rate type, payer or billing group
	ExchangeRateType string `protobuf:"bytes,13,opt,name=exchangeRateType,proto3" json:"exchangeRateType,omitempty"`
	// Optional. Account options.
	AccountOptions *AccountOptions `protobuf:"bytes,15,opt,name=accountOptions,proto3" json:"accountOptions,omitempty"`
	// Invoice settings
	Invoices *CreateBillingGroupRequestInvoice `protobuf:"bytes,14,opt,name=invoices,proto3" json:"invoices,omitempty"`
	// Optional. AWS-specific options
	AwsOptions *AwsOptions `protobuf:"bytes,16,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *CreateBillingGroupRequest) Reset() {
	*x = CreateBillingGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBillingGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBillingGroupRequest) ProtoMessage() {}

func (x *CreateBillingGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBillingGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateBillingGroupRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{4}
}

func (x *CreateBillingGroupRequest) GetBillingGroupId() string {
	if x != nil {
		return x.BillingGroupId
	}
	return ""
}

func (x *CreateBillingGroupRequest) GetBillingGroupName() string {
	if x != nil {
		return x.BillingGroupName
	}
	return ""
}

func (x *CreateBillingGroupRequest) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CreateBillingGroupRequest) GetBillingTitle() string {
	if x != nil {
		return x.BillingTitle
	}
	return ""
}

func (x *CreateBillingGroupRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *CreateBillingGroupRequest) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *CreateBillingGroupRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateBillingGroupRequest) GetPersonal() string {
	if x != nil {
		return x.Personal
	}
	return ""
}

func (x *CreateBillingGroupRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *CreateBillingGroupRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateBillingGroupRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *CreateBillingGroupRequest) GetDisplayCost() string {
	if x != nil {
		return x.DisplayCost
	}
	return ""
}

func (x *CreateBillingGroupRequest) GetExchangeRateType() string {
	if x != nil {
		return x.ExchangeRateType
	}
	return ""
}

func (x *CreateBillingGroupRequest) GetAccountOptions() *AccountOptions {
	if x != nil {
		return x.AccountOptions
	}
	return nil
}

func (x *CreateBillingGroupRequest) GetInvoices() *CreateBillingGroupRequestInvoice {
	if x != nil {
		return x.Invoices
	}
	return nil
}

func (x *CreateBillingGroupRequest) GetAwsOptions() *AwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

type AwsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseProFormaCur bool `protobuf:"varint,1,opt,name=useProFormaCur,proto3" json:"useProFormaCur,omitempty"`
	// Must not be empty if useProFormaCur is true.
	PayerId string `protobuf:"bytes,2,opt,name=payerId,proto3" json:"payerId,omitempty"`
}

func (x *AwsOptions) Reset() {
	*x = AwsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsOptions) ProtoMessage() {}

func (x *AwsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsOptions.ProtoReflect.Descriptor instead.
func (*AwsOptions) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{5}
}

func (x *AwsOptions) GetUseProFormaCur() bool {
	if x != nil {
		return x.UseProFormaCur
	}
	return false
}

func (x *AwsOptions) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

// Account options definition.
type AccountOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AWS register accounts
	Aws *RegisterAccounts `protobuf:"bytes,1,opt,name=aws,proto3" json:"aws,omitempty"`
	// GCP register accounts
	Gcp *RegisterAccounts `protobuf:"bytes,2,opt,name=gcp,proto3" json:"gcp,omitempty"`
	// Azure register accounts
	Azure *RegisterAccounts `protobuf:"bytes,3,opt,name=azure,proto3" json:"azure,omitempty"`
}

func (x *AccountOptions) Reset() {
	*x = AccountOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountOptions) ProtoMessage() {}

func (x *AccountOptions) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountOptions.ProtoReflect.Descriptor instead.
func (*AccountOptions) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{6}
}

func (x *AccountOptions) GetAws() *RegisterAccounts {
	if x != nil {
		return x.Aws
	}
	return nil
}

func (x *AccountOptions) GetGcp() *RegisterAccounts {
	if x != nil {
		return x.Gcp
	}
	return nil
}

func (x *AccountOptions) GetAzure() *RegisterAccounts {
	if x != nil {
		return x.Azure
	}
	return nil
}

// Register Accounts definition
type RegisterAccounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	// If enabled, any additional accounts will be automatically enrolled into the billing group.
	// If disabled, register the account manually.
	//
	// For GCP, Register projectId under the specific Sub billing account.
	// For AWS, Register accountId under the specific payer account into the billing group
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Optional. AccountId to be used for registration into the billing group.
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
}

func (x *RegisterAccounts) Reset() {
	*x = RegisterAccounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAccounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAccounts) ProtoMessage() {}

func (x *RegisterAccounts) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAccounts.ProtoReflect.Descriptor instead.
func (*RegisterAccounts) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterAccounts) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RegisterAccounts) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Vendor invoice setttings
type CreateBillingGroupRequestInvoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AWS invoice settings
	Aws *CreateBillingGroupRequestInvoiceVendor `protobuf:"bytes,1,opt,name=aws,proto3" json:"aws,omitempty"`
	// Azure invoice settings
	Azure *CreateBillingGroupRequestInvoiceVendor `protobuf:"bytes,2,opt,name=azure,proto3" json:"azure,omitempty"`
	// GCP invoice settings
	Gcp *CreateBillingGroupRequestInvoiceVendor `protobuf:"bytes,3,opt,name=gcp,proto3" json:"gcp,omitempty"`
}

func (x *CreateBillingGroupRequestInvoice) Reset() {
	*x = CreateBillingGroupRequestInvoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBillingGroupRequestInvoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBillingGroupRequestInvoice) ProtoMessage() {}

func (x *CreateBillingGroupRequestInvoice) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBillingGroupRequestInvoice.ProtoReflect.Descriptor instead.
func (*CreateBillingGroupRequestInvoice) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{8}
}

func (x *CreateBillingGroupRequestInvoice) GetAws() *CreateBillingGroupRequestInvoiceVendor {
	if x != nil {
		return x.Aws
	}
	return nil
}

func (x *CreateBillingGroupRequestInvoice) GetAzure() *CreateBillingGroupRequestInvoiceVendor {
	if x != nil {
		return x.Azure
	}
	return nil
}

func (x *CreateBillingGroupRequestInvoice) GetGcp() *CreateBillingGroupRequestInvoiceVendor {
	if x != nil {
		return x.Gcp
	}
	return nil
}

// Specific settings per vendor
type CreateBillingGroupRequestInvoiceVendor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalcType                   string  `protobuf:"bytes,1,opt,name=calcType,proto3" json:"calcType,omitempty"`
	DiscountRate               float64 `protobuf:"fixed64,2,opt,name=discountRate,proto3" json:"discountRate,omitempty"`
	SubstitutionFee            string  `protobuf:"bytes,3,opt,name=substitutionFee,proto3" json:"substitutionFee,omitempty"`
	SubstitutionFix            float64 `protobuf:"fixed64,4,opt,name=substitutionFix,proto3" json:"substitutionFix,omitempty"`
	SubstitutionRate           float64 `protobuf:"fixed64,5,opt,name=substitutionRate,proto3" json:"substitutionRate,omitempty"`
	SupportFee                 string  `protobuf:"bytes,6,opt,name=supportFee,proto3" json:"supportFee,omitempty"`
	SupportRate                float64 `protobuf:"fixed64,7,opt,name=supportRate,proto3" json:"supportRate,omitempty"`
	SupportFix                 float64 `protobuf:"fixed64,8,opt,name=supportFix,proto3" json:"supportFix,omitempty"`
	TaxRate                    float64 `protobuf:"fixed64,9,opt,name=taxRate,proto3" json:"taxRate,omitempty"`
	Currency                   string  `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	DiscountTargetUsage        string  `protobuf:"bytes,11,opt,name=discountTargetUsage,proto3" json:"discountTargetUsage,omitempty"`
	SubstitutionFeeTargetUsage string  `protobuf:"bytes,12,opt,name=substitutionFeeTargetUsage,proto3" json:"substitutionFeeTargetUsage,omitempty"`
	DiscountCalcLogic          string  `protobuf:"bytes,13,opt,name=discountCalcLogic,proto3" json:"discountCalcLogic,omitempty"`
	SubstitutionFeeCalcTarget  string  `protobuf:"bytes,14,opt,name=substitutionFeeCalcTarget,proto3" json:"substitutionFeeCalcTarget,omitempty"`
	SubstitutionFeeCalcType    string  `protobuf:"bytes,15,opt,name=substitutionFeeCalcType,proto3" json:"substitutionFeeCalcType,omitempty"`
	SupportAmountTarget        string  `protobuf:"bytes,16,opt,name=supportAmountTarget,proto3" json:"supportAmountTarget,omitempty"`
	SupportFeeCalcTarget       string  `protobuf:"bytes,17,opt,name=supportFeeCalcTarget,proto3" json:"supportFeeCalcTarget,omitempty"`
}

func (x *CreateBillingGroupRequestInvoiceVendor) Reset() {
	*x = CreateBillingGroupRequestInvoiceVendor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBillingGroupRequestInvoiceVendor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBillingGroupRequestInvoiceVendor) ProtoMessage() {}

func (x *CreateBillingGroupRequestInvoiceVendor) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBillingGroupRequestInvoiceVendor.ProtoReflect.Descriptor instead.
func (*CreateBillingGroupRequestInvoiceVendor) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{9}
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetCalcType() string {
	if x != nil {
		return x.CalcType
	}
	return ""
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetDiscountRate() float64 {
	if x != nil {
		return x.DiscountRate
	}
	return 0
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetSubstitutionFee() string {
	if x != nil {
		return x.SubstitutionFee
	}
	return ""
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetSubstitutionFix() float64 {
	if x != nil {
		return x.SubstitutionFix
	}
	return 0
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetSubstitutionRate() float64 {
	if x != nil {
		return x.SubstitutionRate
	}
	return 0
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetSupportFee() string {
	if x != nil {
		return x.SupportFee
	}
	return ""
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetSupportRate() float64 {
	if x != nil {
		return x.SupportRate
	}
	return 0
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetSupportFix() float64 {
	if x != nil {
		return x.SupportFix
	}
	return 0
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetTaxRate() float64 {
	if x != nil {
		return x.TaxRate
	}
	return 0
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetDiscountTargetUsage() string {
	if x != nil {
		return x.DiscountTargetUsage
	}
	return ""
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetSubstitutionFeeTargetUsage() string {
	if x != nil {
		return x.SubstitutionFeeTargetUsage
	}
	return ""
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetDiscountCalcLogic() string {
	if x != nil {
		return x.DiscountCalcLogic
	}
	return ""
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetSubstitutionFeeCalcTarget() string {
	if x != nil {
		return x.SubstitutionFeeCalcTarget
	}
	return ""
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetSubstitutionFeeCalcType() string {
	if x != nil {
		return x.SubstitutionFeeCalcType
	}
	return ""
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetSupportAmountTarget() string {
	if x != nil {
		return x.SupportAmountTarget
	}
	return ""
}

func (x *CreateBillingGroupRequestInvoiceVendor) GetSupportFeeCalcTarget() string {
	if x != nil {
		return x.SupportFeeCalcTarget
	}
	return ""
}

// Request message for the Billing.GetBillingGroup rpc.
type GetBillingGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingInternalId string `protobuf:"bytes,1,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	// Optional. Get only the value that set fieldMask.
	//
	// see more info: https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/field_mask.proto
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *GetBillingGroupRequest) Reset() {
	*x = GetBillingGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBillingGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBillingGroupRequest) ProtoMessage() {}

func (x *GetBillingGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBillingGroupRequest.ProtoReflect.Descriptor instead.
func (*GetBillingGroupRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{10}
}

func (x *GetBillingGroupRequest) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *GetBillingGroupRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Response message for the Billing.GetBillingGroup rpc.
type GetBillingGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingGroup *BillingGroup `protobuf:"bytes,1,opt,name=billingGroup,proto3" json:"billingGroup,omitempty"`
}

func (x *GetBillingGroupResponse) Reset() {
	*x = GetBillingGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBillingGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBillingGroupResponse) ProtoMessage() {}

func (x *GetBillingGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBillingGroupResponse.ProtoReflect.Descriptor instead.
func (*GetBillingGroupResponse) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{11}
}

func (x *GetBillingGroupResponse) GetBillingGroup() *BillingGroup {
	if x != nil {
		return x.BillingGroup
	}
	return nil
}

// Defines the fields associated with a Wave access group.
type AccessGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the access group.
	AccessGroupId string `protobuf:"bytes,1,opt,name=accessGroupId,proto3" json:"accessGroupId,omitempty"`
	// The name of the access group.
	AccessGroupName string `protobuf:"bytes,2,opt,name=accessGroupName,proto3" json:"accessGroupName,omitempty"`
	// A description of the access group.
	AccessGroupDescription string `protobuf:"bytes,3,opt,name=accessGroupDescription,proto3" json:"accessGroupDescription,omitempty"`
	// A list of billing groups contained in the access group.
	BillingGroups []*BillingGroup `protobuf:"bytes,4,rep,name=billingGroups,proto3" json:"billingGroups,omitempty"`
}

func (x *AccessGroup) Reset() {
	*x = AccessGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessGroup) ProtoMessage() {}

func (x *AccessGroup) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessGroup.ProtoReflect.Descriptor instead.
func (*AccessGroup) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{12}
}

func (x *AccessGroup) GetAccessGroupId() string {
	if x != nil {
		return x.AccessGroupId
	}
	return ""
}

func (x *AccessGroup) GetAccessGroupName() string {
	if x != nil {
		return x.AccessGroupName
	}
	return ""
}

func (x *AccessGroup) GetAccessGroupDescription() string {
	if x != nil {
		return x.AccessGroupDescription
	}
	return ""
}

func (x *AccessGroup) GetBillingGroups() []*BillingGroup {
	if x != nil {
		return x.BillingGroups
	}
	return nil
}

// Request message for the Billing.GetAccessGroup rpc.
type GetAccessGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessGroupId string `protobuf:"bytes,1,opt,name=accessGroupId,proto3" json:"accessGroupId,omitempty"`
	// Optional. Get only the value that set fieldMask.
	//
	// see more info: https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/field_mask.proto
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *GetAccessGroupRequest) Reset() {
	*x = GetAccessGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessGroupRequest) ProtoMessage() {}

func (x *GetAccessGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessGroupRequest.ProtoReflect.Descriptor instead.
func (*GetAccessGroupRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{13}
}

func (x *GetAccessGroupRequest) GetAccessGroupId() string {
	if x != nil {
		return x.AccessGroupId
	}
	return ""
}

func (x *GetAccessGroupRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Response message for the Billing.GetAccessGroup rpc.
type GetAccessGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessGroup *AccessGroup `protobuf:"bytes,1,opt,name=accessGroup,proto3" json:"accessGroup,omitempty"`
}

func (x *GetAccessGroupResponse) Reset() {
	*x = GetAccessGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessGroupResponse) ProtoMessage() {}

func (x *GetAccessGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessGroupResponse.ProtoReflect.Descriptor instead.
func (*GetAccessGroupResponse) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{14}
}

func (x *GetAccessGroupResponse) GetAccessGroup() *AccessGroup {
	if x != nil {
		return x.AccessGroup
	}
	return nil
}

// Streaming response message for the Billing.ListAwsDailyRunHistory rpc.
type AwsDailyRunHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingInternalId string                        `protobuf:"bytes,1,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	BillingGroupId    string                        `protobuf:"bytes,2,opt,name=billingGroupId,proto3" json:"billingGroupId,omitempty"`
	Month             string                        `protobuf:"bytes,3,opt,name=month,proto3" json:"month,omitempty"`
	Accounts          []*AwsDailyRunHistory_Account `protobuf:"bytes,4,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *AwsDailyRunHistory) Reset() {
	*x = AwsDailyRunHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDailyRunHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDailyRunHistory) ProtoMessage() {}

func (x *AwsDailyRunHistory) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDailyRunHistory.ProtoReflect.Descriptor instead.
func (*AwsDailyRunHistory) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{15}
}

func (x *AwsDailyRunHistory) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *AwsDailyRunHistory) GetBillingGroupId() string {
	if x != nil {
		return x.BillingGroupId
	}
	return ""
}

func (x *AwsDailyRunHistory) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *AwsDailyRunHistory) GetAccounts() []*AwsDailyRunHistory_Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request message for the Billing.ListAwsCalculationHistory rpc.
type ListAwsDailyRunHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. If empty, defaults to current UTC month. Format: yyyymm.
	Month string `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	// Optional. If not empty, query for this group. At the moment, only `billingInternalId`s are supported.
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *ListAwsDailyRunHistoryRequest) Reset() {
	*x = ListAwsDailyRunHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAwsDailyRunHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAwsDailyRunHistoryRequest) ProtoMessage() {}

func (x *ListAwsDailyRunHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAwsDailyRunHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListAwsDailyRunHistoryRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{16}
}

func (x *ListAwsDailyRunHistoryRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *ListAwsDailyRunHistoryRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// Request message for the Billing.ListUsageCostsDrift rpc.
type ListUsageCostsDriftRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. If empty, returns all billing groups.
	BillingInternalId string `protobuf:"bytes,2,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	// Optional. If empty, defaults to current UTC month. Format: yyyymm.
	Month string `protobuf:"bytes,3,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *ListUsageCostsDriftRequest) Reset() {
	*x = ListUsageCostsDriftRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsageCostsDriftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsageCostsDriftRequest) ProtoMessage() {}

func (x *ListUsageCostsDriftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsageCostsDriftRequest.ProtoReflect.Descriptor instead.
func (*ListUsageCostsDriftRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{17}
}

func (x *ListUsageCostsDriftRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListUsageCostsDriftRequest) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *ListUsageCostsDriftRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

// Streaming response message for the Billing.ListUsageCostsDrift rpc.
type UsageCostsDrift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingInternalId string `protobuf:"bytes,1,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	BillingGroupId    string `protobuf:"bytes,2,opt,name=billingGroupId,proto3" json:"billingGroupId,omitempty"`
	Account           string `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	// The total costs saved in your invoice.
	Snapshot float64 `protobuf:"fixed64,4,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	// The current total costs.
	Current float64 `protobuf:"fixed64,5,opt,name=current,proto3" json:"current,omitempty"`
	Diff    float64 `protobuf:"fixed64,6,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (x *UsageCostsDrift) Reset() {
	*x = UsageCostsDrift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageCostsDrift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageCostsDrift) ProtoMessage() {}

func (x *UsageCostsDrift) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageCostsDrift.ProtoReflect.Descriptor instead.
func (*UsageCostsDrift) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{18}
}

func (x *UsageCostsDrift) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *UsageCostsDrift) GetBillingGroupId() string {
	if x != nil {
		return x.BillingGroupId
	}
	return ""
}

func (x *UsageCostsDrift) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UsageCostsDrift) GetSnapshot() float64 {
	if x != nil {
		return x.Snapshot
	}
	return 0
}

func (x *UsageCostsDrift) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *UsageCostsDrift) GetDiff() float64 {
	if x != nil {
		return x.Diff
	}
	return 0
}

// Request message for the Cost.GetInvoiceRequest rpc.
type GetInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Month to get invoice. Format: `yyyymm`.
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Required.
	//
	// For Ripple, only billing internal ids are supported at the moment. You can set it to a single group
	//
	// Implied as the parent billing group for Wave(Pro) users.
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *GetInvoiceRequest) Reset() {
	*x = GetInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceRequest) ProtoMessage() {}

func (x *GetInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceRequest.ProtoReflect.Descriptor instead.
func (*GetInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{19}
}

func (x *GetInvoiceRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetInvoiceRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// Request message for the ExportCostFiltersFile rpc.
type ExportInvoiceFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Month to get invoice. Format: `yyyymm`.
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Optional.
	//
	// For Ripple, only billing internal ids are supported at the moment. You can set it to a single group or a comma-separated list of groups. ex) `group1,group2`. if want to set all group, set `*`.
	//
	// Implied as the parent billing group for Wave(Pro) users.
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *ExportInvoiceFileRequest) Reset() {
	*x = ExportInvoiceFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportInvoiceFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportInvoiceFileRequest) ProtoMessage() {}

func (x *ExportInvoiceFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportInvoiceFileRequest.ProtoReflect.Descriptor instead.
func (*ExportInvoiceFileRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{20}
}

func (x *ExportInvoiceFileRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ExportInvoiceFileRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// Response message for the ExportInvoiceFile rpc.
type ExportInvoiceFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. URL of exported file.
	//
	// csv columns set `group vendor resourceId resourceName type serviceName currency cost`
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ExportInvoiceFileResponse) Reset() {
	*x = ExportInvoiceFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportInvoiceFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportInvoiceFileResponse) ProtoMessage() {}

func (x *ExportInvoiceFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportInvoiceFileResponse.ProtoReflect.Descriptor instead.
func (*ExportInvoiceFileResponse) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{21}
}

func (x *ExportInvoiceFileResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Request message for the ListInvoiceServiceDiscounts rpc.
type ListInvoiceServiceDiscountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListInvoiceServiceDiscountsRequest) Reset() {
	*x = ListInvoiceServiceDiscountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInvoiceServiceDiscountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInvoiceServiceDiscountsRequest) ProtoMessage() {}

func (x *ListInvoiceServiceDiscountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInvoiceServiceDiscountsRequest.ProtoReflect.Descriptor instead.
func (*ListInvoiceServiceDiscountsRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{22}
}

// Streaming response message for the InvoiceServiceDiscounts rpc.
type InvoiceServiceDiscounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service discount id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Service discount name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Service discount description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// create timestamp.
	Created string `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	// update timestamp.
	Updated string `protobuf:"bytes,5,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *InvoiceServiceDiscounts) Reset() {
	*x = InvoiceServiceDiscounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceServiceDiscounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceServiceDiscounts) ProtoMessage() {}

func (x *InvoiceServiceDiscounts) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceServiceDiscounts.ProtoReflect.Descriptor instead.
func (*InvoiceServiceDiscounts) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{23}
}

func (x *InvoiceServiceDiscounts) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InvoiceServiceDiscounts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InvoiceServiceDiscounts) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InvoiceServiceDiscounts) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *InvoiceServiceDiscounts) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

// Request message for the ListAccountInvoiceServiceDiscounts rpc.
type ListAccountInvoiceServiceDiscountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	//
	// For Ripple, only billing internal ids are supported at the moment. You can set it to a single group
	//
	// Implied as the parent billing group for Wave(Pro) users.
	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *ListAccountInvoiceServiceDiscountsRequest) Reset() {
	*x = ListAccountInvoiceServiceDiscountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountInvoiceServiceDiscountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountInvoiceServiceDiscountsRequest) ProtoMessage() {}

func (x *ListAccountInvoiceServiceDiscountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountInvoiceServiceDiscountsRequest.ProtoReflect.Descriptor instead.
func (*ListAccountInvoiceServiceDiscountsRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{24}
}

func (x *ListAccountInvoiceServiceDiscountsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// Streaming response message for the AccountInvoiceServiceDiscounts rpc.
type AccountInvoiceServiceDiscounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service discount id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Account id.
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *AccountInvoiceServiceDiscounts) Reset() {
	*x = AccountInvoiceServiceDiscounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInvoiceServiceDiscounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInvoiceServiceDiscounts) ProtoMessage() {}

func (x *AccountInvoiceServiceDiscounts) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInvoiceServiceDiscounts.ProtoReflect.Descriptor instead.
func (*AccountInvoiceServiceDiscounts) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{25}
}

func (x *AccountInvoiceServiceDiscounts) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountInvoiceServiceDiscounts) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type AccountServiceDiscounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service discount id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Account id.
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
}

func (x *AccountServiceDiscounts) Reset() {
	*x = AccountServiceDiscounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountServiceDiscounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountServiceDiscounts) ProtoMessage() {}

func (x *AccountServiceDiscounts) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountServiceDiscounts.ProtoReflect.Descriptor instead.
func (*AccountServiceDiscounts) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{26}
}

func (x *AccountServiceDiscounts) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountServiceDiscounts) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Request message for the CreateAccountInvoiceServiceDiscounts rpc.
type CreateAccountInvoiceServiceDiscountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	//
	// For Ripple, only billing internal ids are supported at the moment. You can set it to a single group
	//
	// Implied as the parent billing group for Wave(Pro) users.
	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Required.
	Accounts []*AccountServiceDiscounts `protobuf:"bytes,4,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *CreateAccountInvoiceServiceDiscountsRequest) Reset() {
	*x = CreateAccountInvoiceServiceDiscountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountInvoiceServiceDiscountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountInvoiceServiceDiscountsRequest) ProtoMessage() {}

func (x *CreateAccountInvoiceServiceDiscountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountInvoiceServiceDiscountsRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountInvoiceServiceDiscountsRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{27}
}

func (x *CreateAccountInvoiceServiceDiscountsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CreateAccountInvoiceServiceDiscountsRequest) GetAccounts() []*AccountServiceDiscounts {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Response message for the CreateAccountInvoiceServiceDiscounts rpc.
type CreateAccountInvoiceServiceDiscountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*AccountServiceDiscounts `protobuf:"bytes,4,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *CreateAccountInvoiceServiceDiscountsResponse) Reset() {
	*x = CreateAccountInvoiceServiceDiscountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountInvoiceServiceDiscountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountInvoiceServiceDiscountsResponse) ProtoMessage() {}

func (x *CreateAccountInvoiceServiceDiscountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountInvoiceServiceDiscountsResponse.ProtoReflect.Descriptor instead.
func (*CreateAccountInvoiceServiceDiscountsResponse) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{28}
}

func (x *CreateAccountInvoiceServiceDiscountsResponse) GetAccounts() []*AccountServiceDiscounts {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request message for the UpdateAccountInvoiceServiceDiscounts rpc.
type UpdateAccountInvoiceServiceDiscountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	//
	// For Ripple, only billing internal ids are supported at the moment. You can set it to a single group
	//
	// Implied as the parent billing group for Wave(Pro) users.
	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Required.
	Accounts []*AccountServiceDiscounts `protobuf:"bytes,4,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *UpdateAccountInvoiceServiceDiscountsRequest) Reset() {
	*x = UpdateAccountInvoiceServiceDiscountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountInvoiceServiceDiscountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountInvoiceServiceDiscountsRequest) ProtoMessage() {}

func (x *UpdateAccountInvoiceServiceDiscountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountInvoiceServiceDiscountsRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccountInvoiceServiceDiscountsRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateAccountInvoiceServiceDiscountsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UpdateAccountInvoiceServiceDiscountsRequest) GetAccounts() []*AccountServiceDiscounts {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Response message for the UpdateAccountInvoiceServiceDiscounts rpc.
type UpdateAccountInvoiceServiceDiscountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*AccountServiceDiscounts `protobuf:"bytes,4,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *UpdateAccountInvoiceServiceDiscountsResponse) Reset() {
	*x = UpdateAccountInvoiceServiceDiscountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountInvoiceServiceDiscountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountInvoiceServiceDiscountsResponse) ProtoMessage() {}

func (x *UpdateAccountInvoiceServiceDiscountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountInvoiceServiceDiscountsResponse.ProtoReflect.Descriptor instead.
func (*UpdateAccountInvoiceServiceDiscountsResponse) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateAccountInvoiceServiceDiscountsResponse) GetAccounts() []*AccountServiceDiscounts {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request message for the DeleteAccountInvoiceServiceDiscounts rpc.
type DeleteAccountInvoiceServiceDiscountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	//
	// For Ripple, only billing internal ids are supported at the moment. You can set it to a single group
	//
	// Implied as the parent billing group for Wave(Pro) users.
	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *DeleteAccountInvoiceServiceDiscountsRequest) Reset() {
	*x = DeleteAccountInvoiceServiceDiscountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountInvoiceServiceDiscountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountInvoiceServiceDiscountsRequest) ProtoMessage() {}

func (x *DeleteAccountInvoiceServiceDiscountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountInvoiceServiceDiscountsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountInvoiceServiceDiscountsRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteAccountInvoiceServiceDiscountsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type RemoveAccountInvoiceServiceDiscountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	//
	// For Ripple, only billing internal ids are supported at the moment. You can set it to a single group
	//
	// Implied as the parent billing group for Wave(Pro) users.
	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Required.
	Accounts []*AccountServiceDiscounts `protobuf:"bytes,4,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *RemoveAccountInvoiceServiceDiscountsRequest) Reset() {
	*x = RemoveAccountInvoiceServiceDiscountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAccountInvoiceServiceDiscountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAccountInvoiceServiceDiscountsRequest) ProtoMessage() {}

func (x *RemoveAccountInvoiceServiceDiscountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAccountInvoiceServiceDiscountsRequest.ProtoReflect.Descriptor instead.
func (*RemoveAccountInvoiceServiceDiscountsRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{32}
}

func (x *RemoveAccountInvoiceServiceDiscountsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *RemoveAccountInvoiceServiceDiscountsRequest) GetAccounts() []*AccountServiceDiscounts {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request message for the CreateInvoice rpc.
type CreateInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Month to get invoice. Format: `yyyymm`.
	Date string `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. You can set all billing groups.
	//
	// If this parameter is not set, The list set to `groups` is used.
	AllGroups bool `protobuf:"varint,2,opt,name=allGroups,proto3" json:"allGroups,omitempty"`
	// Optional. You can set it to a list of billing internal group id
	Groups []string `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *CreateInvoiceRequest) Reset() {
	*x = CreateInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvoiceRequest) ProtoMessage() {}

func (x *CreateInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvoiceRequest.ProtoReflect.Descriptor instead.
func (*CreateInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{33}
}

func (x *CreateInvoiceRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *CreateInvoiceRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateInvoiceRequest) GetAllGroups() bool {
	if x != nil {
		return x.AllGroups
	}
	return false
}

func (x *CreateInvoiceRequest) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

// Request message for the GetInvoiceStatus rpc.
type GetInvoiceStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. invoice generate request id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInvoiceStatusRequest) Reset() {
	*x = GetInvoiceStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInvoiceStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvoiceStatusRequest) ProtoMessage() {}

func (x *GetInvoiceStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvoiceStatusRequest.ProtoReflect.Descriptor instead.
func (*GetInvoiceStatusRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{34}
}

func (x *GetInvoiceStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the ListInvoiceStatus rpc.
type ListInvoiceStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Month to get invoice status. Format: `yyyymm`.
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ListInvoiceStatusRequest) Reset() {
	*x = ListInvoiceStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInvoiceStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInvoiceStatusRequest) ProtoMessage() {}

func (x *ListInvoiceStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInvoiceStatusRequest.ProtoReflect.Descriptor instead.
func (*ListInvoiceStatusRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{35}
}

func (x *ListInvoiceStatusRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// Request message for the UpdateInvoicePreviews rpc.
type UpdateInvoicePreviewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Month to get invoice. Format: `yyyymm`.
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Optional. You can set all billing groups.
	//
	// If this parameter is not set, The list set to `groups` is used.
	AllGroups bool `protobuf:"varint,2,opt,name=allGroups,proto3" json:"allGroups,omitempty"`
	// Optional. You can set it to a list of billing internal group id
	Groups []string `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	// Required. You can set display or hiding.
	//
	// If true, Hiding Invoice. If false, Display Invoice.
	Enabled bool `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *UpdateInvoicePreviewsRequest) Reset() {
	*x = UpdateInvoicePreviewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInvoicePreviewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvoicePreviewsRequest) ProtoMessage() {}

func (x *UpdateInvoicePreviewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvoicePreviewsRequest.ProtoReflect.Descriptor instead.
func (*UpdateInvoicePreviewsRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateInvoicePreviewsRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *UpdateInvoicePreviewsRequest) GetAllGroups() bool {
	if x != nil {
		return x.AllGroups
	}
	return false
}

func (x *UpdateInvoicePreviewsRequest) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *UpdateInvoicePreviewsRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Request message for the CreateReseller rpc.
type CreateResellerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. You can set billing internal id or access group id.
	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Required.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Required.
	//
	// We recommend a password length of 8~32 characters. If you send 0 characters, a password will be generated automatically.
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Required. If valid, you will be notified via email address.
	Notification bool `protobuf:"varint,4,opt,name=notification,proto3" json:"notification,omitempty"`
	// Optional. Feature Config. If not set config value, use default config
	WaveConfig []*ripple.ResellerConfig `protobuf:"bytes,5,rep,name=waveConfig,proto3" json:"waveConfig,omitempty"`
	// Optional. Feature Config. If not set config value, use default config
	AquaConfig []*ripple.ResellerConfig `protobuf:"bytes,6,rep,name=aquaConfig,proto3" json:"aquaConfig,omitempty"`
}

func (x *CreateResellerRequest) Reset() {
	*x = CreateResellerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResellerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResellerRequest) ProtoMessage() {}

func (x *CreateResellerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResellerRequest.ProtoReflect.Descriptor instead.
func (*CreateResellerRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{37}
}

func (x *CreateResellerRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CreateResellerRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateResellerRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateResellerRequest) GetNotification() bool {
	if x != nil {
		return x.Notification
	}
	return false
}

func (x *CreateResellerRequest) GetWaveConfig() []*ripple.ResellerConfig {
	if x != nil {
		return x.WaveConfig
	}
	return nil
}

func (x *CreateResellerRequest) GetAquaConfig() []*ripple.ResellerConfig {
	if x != nil {
		return x.AquaConfig
	}
	return nil
}

// Request message for the ListResellers rpc.
type ListResellersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Get only the value that set fieldMask.
	//
	// see more info: https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/field_mask.proto
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *ListResellersRequest) Reset() {
	*x = ListResellersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResellersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResellersRequest) ProtoMessage() {}

func (x *ListResellersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResellersRequest.ProtoReflect.Descriptor instead.
func (*ListResellersRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{38}
}

func (x *ListResellersRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Request message for the GetReseller rpc.
type GetResellerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. reseller id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. Get only the value that set fieldMask.
	//
	// see more info: https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/field_mask.proto
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *GetResellerRequest) Reset() {
	*x = GetResellerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResellerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResellerRequest) ProtoMessage() {}

func (x *GetResellerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResellerRequest.ProtoReflect.Descriptor instead.
func (*GetResellerRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{39}
}

func (x *GetResellerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetResellerRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Request message for the UpdateReseller rpc.
type UpdateResellerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. reseller id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Optional.
	//
	// We recommend a password length of 8~32 characters. If you send 0 characters, a password will be generated automatically.
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Optional. wave feature config
	//
	// Set only the config to be changed.
	// For example, If you want to change only dashboardGraph, set `{"waveConfig": [{"key": "dashboardGraph","value": true}]}` as a parameter
	WaveConfig []*ripple.ResellerConfig `protobuf:"bytes,4,rep,name=waveConfig,proto3" json:"waveConfig,omitempty"`
	// Optional. aqua feature config
	//
	// Set only the config to be changed.
	// For example, If you want to change only aqRiManagement, set `{"waveConfig": [{"key": "aqRiManagement","value": true}]}` as a parameter
	AquaConfig []*ripple.ResellerConfig `protobuf:"bytes,5,rep,name=aquaConfig,proto3" json:"aquaConfig,omitempty"`
	// Optional.
	//
	// If valid when email or password is updated, you will be notified via email address.
	// If only waveConfig or aquaConfig is changed, it is ignored.
	Notification bool `protobuf:"varint,6,opt,name=notification,proto3" json:"notification,omitempty"`
}

func (x *UpdateResellerRequest) Reset() {
	*x = UpdateResellerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResellerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResellerRequest) ProtoMessage() {}

func (x *UpdateResellerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResellerRequest.ProtoReflect.Descriptor instead.
func (*UpdateResellerRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateResellerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateResellerRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateResellerRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateResellerRequest) GetWaveConfig() []*ripple.ResellerConfig {
	if x != nil {
		return x.WaveConfig
	}
	return nil
}

func (x *UpdateResellerRequest) GetAquaConfig() []*ripple.ResellerConfig {
	if x != nil {
		return x.AquaConfig
	}
	return nil
}

func (x *UpdateResellerRequest) GetNotification() bool {
	if x != nil {
		return x.Notification
	}
	return false
}

// Request message for the DeleteReseller rpc.
type DeleteResellerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. reseller id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteResellerRequest) Reset() {
	*x = DeleteResellerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResellerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResellerRequest) ProtoMessage() {}

func (x *DeleteResellerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResellerRequest.ProtoReflect.Descriptor instead.
func (*DeleteResellerRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteResellerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the GetBillingSetting rpc.
type GetBillingSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Get only the value that set fieldMask.
	//
	// see more info: https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/field_mask.proto
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *GetBillingSettingRequest) Reset() {
	*x = GetBillingSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBillingSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBillingSettingRequest) ProtoMessage() {}

func (x *GetBillingSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBillingSettingRequest.ProtoReflect.Descriptor instead.
func (*GetBillingSettingRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{42}
}

func (x *GetBillingSettingRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Response message for the GetBillingSetting rpc.
type GetBillingSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of available yearmonth.
	YearMonth []*ripple.YearMonth `protobuf:"bytes,1,rep,name=yearMonth,proto3" json:"yearMonth,omitempty"`
	// Rounding method.
	RoundingMethod *ripple.Rounding `protobuf:"bytes,2,opt,name=roundingMethod,proto3" json:"roundingMethod,omitempty"`
	// Rounding method for Export CSV.
	ExportRoundingMethod *ripple.Rounding `protobuf:"bytes,3,opt,name=exportRoundingMethod,proto3" json:"exportRoundingMethod,omitempty"`
	// Invoice layout.
	InvoiceLayout *ripple.InvoiceLayout `protobuf:"bytes,4,opt,name=invoiceLayout,proto3" json:"invoiceLayout,omitempty"`
	// Invoice due date.
	InvoiceDueDate *ripple.DueDate `protobuf:"bytes,5,opt,name=invoiceDueDate,proto3" json:"invoiceDueDate,omitempty"`
	// List of available currency.
	SupportCurrency []string `protobuf:"bytes,6,rep,name=supportCurrency,proto3" json:"supportCurrency,omitempty"`
}

func (x *GetBillingSettingResponse) Reset() {
	*x = GetBillingSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBillingSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBillingSettingResponse) ProtoMessage() {}

func (x *GetBillingSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBillingSettingResponse.ProtoReflect.Descriptor instead.
func (*GetBillingSettingResponse) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{43}
}

func (x *GetBillingSettingResponse) GetYearMonth() []*ripple.YearMonth {
	if x != nil {
		return x.YearMonth
	}
	return nil
}

func (x *GetBillingSettingResponse) GetRoundingMethod() *ripple.Rounding {
	if x != nil {
		return x.RoundingMethod
	}
	return nil
}

func (x *GetBillingSettingResponse) GetExportRoundingMethod() *ripple.Rounding {
	if x != nil {
		return x.ExportRoundingMethod
	}
	return nil
}

func (x *GetBillingSettingResponse) GetInvoiceLayout() *ripple.InvoiceLayout {
	if x != nil {
		return x.InvoiceLayout
	}
	return nil
}

func (x *GetBillingSettingResponse) GetInvoiceDueDate() *ripple.DueDate {
	if x != nil {
		return x.InvoiceDueDate
	}
	return nil
}

func (x *GetBillingSettingResponse) GetSupportCurrency() []string {
	if x != nil {
		return x.SupportCurrency
	}
	return nil
}

// Request message for the ListExchangeRates rpc.
type ListExchangeRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. vendor.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. month. Format: `yyyymm`.
	Month string `protobuf:"bytes,2,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *ListExchangeRatesRequest) Reset() {
	*x = ListExchangeRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExchangeRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExchangeRatesRequest) ProtoMessage() {}

func (x *ListExchangeRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExchangeRatesRequest.ProtoReflect.Descriptor instead.
func (*ListExchangeRatesRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{44}
}

func (x *ListExchangeRatesRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListExchangeRatesRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

// Response message for the ListExchangeRates rpc.
type ListExchangeRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Month.
	Month string `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	// The common exchange rate.
	Common *ripple.CommonExchangeRate `protobuf:"bytes,2,opt,name=common,proto3" json:"common,omitempty"`
	// The billing group exchange rate.
	BillingGroup []*ripple.BillingGroupExchangeRate `protobuf:"bytes,3,rep,name=billingGroup,proto3" json:"billingGroup,omitempty"`
	// The payer exchange rate.
	Payer *ripple.VendorPayerExchangeRate `protobuf:"bytes,4,opt,name=payer,proto3" json:"payer,omitempty"`
}

func (x *ListExchangeRatesResponse) Reset() {
	*x = ListExchangeRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExchangeRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExchangeRatesResponse) ProtoMessage() {}

func (x *ListExchangeRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExchangeRatesResponse.ProtoReflect.Descriptor instead.
func (*ListExchangeRatesResponse) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{45}
}

func (x *ListExchangeRatesResponse) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *ListExchangeRatesResponse) GetCommon() *ripple.CommonExchangeRate {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ListExchangeRatesResponse) GetBillingGroup() []*ripple.BillingGroupExchangeRate {
	if x != nil {
		return x.BillingGroup
	}
	return nil
}

func (x *ListExchangeRatesResponse) GetPayer() *ripple.VendorPayerExchangeRate {
	if x != nil {
		return x.Payer
	}
	return nil
}

// Request message for the ListAccessGroups rpc.
type ListAccessGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Get only the value that set fieldMask.
	//
	// see more info: https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/field_mask.proto
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *ListAccessGroupsRequest) Reset() {
	*x = ListAccessGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccessGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccessGroupsRequest) ProtoMessage() {}

func (x *ListAccessGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccessGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListAccessGroupsRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{46}
}

func (x *ListAccessGroupsRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Request message for the CreateAccessGroup rpc.
type CreateAccessGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. access group name.
	//
	// We recommend the name length of 1~60 characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. access group description.
	//
	// We recommend the description length of 0~150 characters.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Required. Billing group to be included in the access group.
	//
	// You can only include billing groups with the same calculation type and currency type.
	// Specify the billingInternalIds. For example: [`billingInternalId1`,`billingInternalId2`,`billingInternalId3`]
	BillingGroups []string `protobuf:"bytes,3,rep,name=billingGroups,proto3" json:"billingGroups,omitempty"`
}

func (x *CreateAccessGroupRequest) Reset() {
	*x = CreateAccessGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccessGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccessGroupRequest) ProtoMessage() {}

func (x *CreateAccessGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccessGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateAccessGroupRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{47}
}

func (x *CreateAccessGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAccessGroupRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateAccessGroupRequest) GetBillingGroups() []string {
	if x != nil {
		return x.BillingGroups
	}
	return nil
}

// Request message for the UpdateAccessGroup rpc.
type UpdateAccessGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. access group id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. access group name. Set only the name to be changed.
	//
	// We recommend the name length of 1~60 characters.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. access group description. Set only the description to be changed.
	//
	// We recommend the description length of 0~150 characters.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. Billing group to be included in the access group.
	//
	// You can only include billing groups with the same calculation type and currency type.
	// Set only the billingGroups to be changed.
	// Specify the billingInternalIds. For example: [`billingInternalId1`,`billingInternalId2`,`billingInternalId3`]
	BillingGroups []string `protobuf:"bytes,4,rep,name=billingGroups,proto3" json:"billingGroups,omitempty"`
}

func (x *UpdateAccessGroupRequest) Reset() {
	*x = UpdateAccessGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccessGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccessGroupRequest) ProtoMessage() {}

func (x *UpdateAccessGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccessGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccessGroupRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateAccessGroupRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAccessGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAccessGroupRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateAccessGroupRequest) GetBillingGroups() []string {
	if x != nil {
		return x.BillingGroups
	}
	return nil
}

// Request message for the DeleteAccessGroup rpc.
type DeleteAccessGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. access group id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAccessGroupRequest) Reset() {
	*x = DeleteAccessGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccessGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccessGroupRequest) ProtoMessage() {}

func (x *DeleteAccessGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccessGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccessGroupRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteAccessGroupRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the ListInvoice rpc.
type ListInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. billing internal id.
	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *ListInvoiceRequest) Reset() {
	*x = ListInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInvoiceRequest) ProtoMessage() {}

func (x *ListInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInvoiceRequest.ProtoReflect.Descriptor instead.
func (*ListInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{50}
}

func (x *ListInvoiceRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// Response message for the ListInvoice rpc.
type ListInvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The billing internal id.
	BillingInternalId string `protobuf:"bytes,1,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	// The billing group id.
	BillingGroupId string `protobuf:"bytes,2,opt,name=BillingGroupId,proto3" json:"BillingGroupId,omitempty"`
	// The billing group name.
	BillingGroupName string `protobuf:"bytes,3,opt,name=BillingGroupName,proto3" json:"BillingGroupName,omitempty"`
	// The date.
	Date string `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ListInvoiceResponse) Reset() {
	*x = ListInvoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInvoiceResponse) ProtoMessage() {}

func (x *ListInvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInvoiceResponse.ProtoReflect.Descriptor instead.
func (*ListInvoiceResponse) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{51}
}

func (x *ListInvoiceResponse) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *ListInvoiceResponse) GetBillingGroupId() string {
	if x != nil {
		return x.BillingGroupId
	}
	return ""
}

func (x *ListInvoiceResponse) GetBillingGroupName() string {
	if x != nil {
		return x.BillingGroupName
	}
	return ""
}

func (x *ListInvoiceResponse) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// request message for ListAbcBillingGroups
type ListAbcBillingGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Payer Id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListAbcBillingGroupsRequest) Reset() {
	*x = ListAbcBillingGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAbcBillingGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAbcBillingGroupsRequest) ProtoMessage() {}

func (x *ListAbcBillingGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAbcBillingGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListAbcBillingGroupsRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{52}
}

func (x *ListAbcBillingGroupsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// request message for ListAbcBillingGroupAccounts
type ListAbcBillingGroupAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Payer Id.
	PayerId string `protobuf:"bytes,1,opt,name=payerId,proto3" json:"payerId,omitempty"`
	// Required. BillingGroup Id.
	BillingGroupArn string `protobuf:"bytes,2,opt,name=billingGroupArn,proto3" json:"billingGroupArn,omitempty"`
}

func (x *ListAbcBillingGroupAccountsRequest) Reset() {
	*x = ListAbcBillingGroupAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAbcBillingGroupAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAbcBillingGroupAccountsRequest) ProtoMessage() {}

func (x *ListAbcBillingGroupAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAbcBillingGroupAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListAbcBillingGroupAccountsRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{53}
}

func (x *ListAbcBillingGroupAccountsRequest) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

func (x *ListAbcBillingGroupAccountsRequest) GetBillingGroupArn() string {
	if x != nil {
		return x.BillingGroupArn
	}
	return ""
}

type AbcBillingGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arn              string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreationTime     string `protobuf:"bytes,3,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
	Description      string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	PrimaryAccountId string `protobuf:"bytes,5,opt,name=primaryAccountId,proto3" json:"primaryAccountId,omitempty"`
	Size             string `protobuf:"bytes,6,opt,name=size,proto3" json:"size,omitempty"`
	Status           string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AbcBillingGroup) Reset() {
	*x = AbcBillingGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbcBillingGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbcBillingGroup) ProtoMessage() {}

func (x *AbcBillingGroup) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbcBillingGroup.ProtoReflect.Descriptor instead.
func (*AbcBillingGroup) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{54}
}

func (x *AbcBillingGroup) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AbcBillingGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AbcBillingGroup) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *AbcBillingGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AbcBillingGroup) GetPrimaryAccountId() string {
	if x != nil {
		return x.PrimaryAccountId
	}
	return ""
}

func (x *AbcBillingGroup) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *AbcBillingGroup) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AbcAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	AccountName string `protobuf:"bytes,2,opt,name=accountName,proto3" json:"accountName,omitempty"`
}

func (x *AbcAccount) Reset() {
	*x = AbcAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbcAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbcAccount) ProtoMessage() {}

func (x *AbcAccount) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbcAccount.ProtoReflect.Descriptor instead.
func (*AbcAccount) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{55}
}

func (x *AbcAccount) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AbcAccount) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

// Request message for the Billing.ReadInvoiceAdjustments rpc.
type ReadInvoiceAdjustmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws`,`azure`,`gcp` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required.
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// Optional. The UTC month to query. If empty, defaults to current month. Format is `yyyymm`. For example, June 2021 will be `202106`.
	Month string `protobuf:"bytes,3,opt,name=month,proto3" json:"month,omitempty"`
	// Optional. If empty, defaults to all fee type. At the moment, only `Fee`,`Refund`,`Credit`,`SppDiscount`,`EdpDiscount` is supported.
	FeeType string `protobuf:"bytes,4,opt,name=feeType,proto3" json:"feeType,omitempty"`
}

func (x *ReadInvoiceAdjustmentsRequest) Reset() {
	*x = ReadInvoiceAdjustmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadInvoiceAdjustmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadInvoiceAdjustmentsRequest) ProtoMessage() {}

func (x *ReadInvoiceAdjustmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadInvoiceAdjustmentsRequest.ProtoReflect.Descriptor instead.
func (*ReadInvoiceAdjustmentsRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{56}
}

func (x *ReadInvoiceAdjustmentsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ReadInvoiceAdjustmentsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReadInvoiceAdjustmentsRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *ReadInvoiceAdjustmentsRequest) GetFeeType() string {
	if x != nil {
		return x.FeeType
	}
	return ""
}

// Request message for the Billing.ListAccountResources rpc.
type ListAccountResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws`,`azure`,`gcp` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. The UTC month to query. If empty, defaults to current month. Format is `yyyymm`.
	Month string `protobuf:"bytes,2,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *ListAccountResourcesRequest) Reset() {
	*x = ListAccountResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountResourcesRequest) ProtoMessage() {}

func (x *ListAccountResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountResourcesRequest.ProtoReflect.Descriptor instead.
func (*ListAccountResourcesRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{57}
}

func (x *ListAccountResourcesRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListAccountResourcesRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

type ResourceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayerId    string `protobuf:"bytes,1,opt,name=payerId,proto3" json:"payerId,omitempty"`
	CustomerId string `protobuf:"bytes,2,opt,name=customerId,proto3" json:"customerId,omitempty"`
	Registered bool   `protobuf:"varint,3,opt,name=registered,proto3" json:"registered,omitempty"`
}

func (x *ResourceAccount) Reset() {
	*x = ResourceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAccount) ProtoMessage() {}

func (x *ResourceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAccount.ProtoReflect.Descriptor instead.
func (*ResourceAccount) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{58}
}

func (x *ResourceAccount) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

func (x *ResourceAccount) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ResourceAccount) GetRegistered() bool {
	if x != nil {
		return x.Registered
	}
	return false
}

// Request message for the Billing.GetAdjustmentConfig rpc.
type GetAdjustmentConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *GetAdjustmentConfigRequest) Reset() {
	*x = GetAdjustmentConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdjustmentConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdjustmentConfigRequest) ProtoMessage() {}

func (x *GetAdjustmentConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdjustmentConfigRequest.ProtoReflect.Descriptor instead.
func (*GetAdjustmentConfigRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{59}
}

func (x *GetAdjustmentConfigRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

// Request message for the Billing.CreateAdjustmentConfig rpc.
type CreateAdjustmentConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required.
	// A list of filtering options. See [api.ConfigFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	Config []*api.ConfigFilters `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty"`
	// Optional.
	Accounts []*api.ManagementAccount `protobuf:"bytes,3,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *CreateAdjustmentConfigRequest) Reset() {
	*x = CreateAdjustmentConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdjustmentConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdjustmentConfigRequest) ProtoMessage() {}

func (x *CreateAdjustmentConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdjustmentConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateAdjustmentConfigRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{60}
}

func (x *CreateAdjustmentConfigRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateAdjustmentConfigRequest) GetConfig() []*api.ConfigFilters {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateAdjustmentConfigRequest) GetAccounts() []*api.ManagementAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request message for the Billing.UpdateAdjustmentConfig rpc.
type UpdateAdjustmentConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional.
	Config []*api.ConfigFilters `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty"`
	// Optional.
	Accounts []*api.ManagementAccount `protobuf:"bytes,3,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *UpdateAdjustmentConfigRequest) Reset() {
	*x = UpdateAdjustmentConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAdjustmentConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdjustmentConfigRequest) ProtoMessage() {}

func (x *UpdateAdjustmentConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdjustmentConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdjustmentConfigRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateAdjustmentConfigRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *UpdateAdjustmentConfigRequest) GetConfig() []*api.ConfigFilters {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateAdjustmentConfigRequest) GetAccounts() []*api.ManagementAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request message for the Billing.DeleteAdjustmentConfig rpc.
type DeleteAdjustmentConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *DeleteAdjustmentConfigRequest) Reset() {
	*x = DeleteAdjustmentConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdjustmentConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdjustmentConfigRequest) ProtoMessage() {}

func (x *DeleteAdjustmentConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdjustmentConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdjustmentConfigRequest) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{62}
}

func (x *DeleteAdjustmentConfigRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

type AwsDailyRunHistory_Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string                                `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	History   []*AwsDailyRunHistory_Account_History `protobuf:"bytes,2,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *AwsDailyRunHistory_Account) Reset() {
	*x = AwsDailyRunHistory_Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDailyRunHistory_Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDailyRunHistory_Account) ProtoMessage() {}

func (x *AwsDailyRunHistory_Account) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDailyRunHistory_Account.ProtoReflect.Descriptor instead.
func (*AwsDailyRunHistory_Account) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{15, 0}
}

func (x *AwsDailyRunHistory_Account) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AwsDailyRunHistory_Account) GetHistory() []*AwsDailyRunHistory_Account_History {
	if x != nil {
		return x.History
	}
	return nil
}

type AwsDailyRunHistory_Account_History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Calculation timestamp in UTC, RFC3339.
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Calculation trigger. Either `invoice` or `cur`.
	Trigger string `protobuf:"bytes,2,opt,name=trigger,proto3" json:"trigger,omitempty"`
}

func (x *AwsDailyRunHistory_Account_History) Reset() {
	*x = AwsDailyRunHistory_Account_History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_v1_billing_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDailyRunHistory_Account_History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDailyRunHistory_Account_History) ProtoMessage() {}

func (x *AwsDailyRunHistory_Account_History) ProtoReflect() protoreflect.Message {
	mi := &file_billing_v1_billing_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDailyRunHistory_Account_History.ProtoReflect.Descriptor instead.
func (*AwsDailyRunHistory_Account_History) Descriptor() ([]byte, []int) {
	return file_billing_v1_billing_proto_rawDescGZIP(), []int{15, 0, 0}
}

func (x *AwsDailyRunHistory_Account_History) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *AwsDailyRunHistory_Account_History) GetTrigger() string {
	if x != nil {
		return x.Trigger
	}
	return ""
}

var File_billing_v1_billing_proto protoreflect.FileDescriptor

var file_billing_v1_billing_proto_rawDesc = []byte{
	0x0a, 0x18, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x11,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x74, 0x61,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x69, 0x70,
	0x70, 0x6c, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x69, 0x70, 0x70, 0x6c,
	0x65, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65,
	0x2f, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2f, 0x79, 0x65, 0x61, 0x72,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x69, 0x70, 0x70,
	0x6c, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x69, 0x70, 0x70,
	0x6c, 0x65, 0x2f, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x61, 0x76, 0x65, 0x2f,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x04,
	0x0a, 0x0c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c,
	0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x30, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x73, 0x74, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x59, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x1b, 0x42, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x65, 0x64, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x61, 0x77,
	0x73, 0x12, 0x4c, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x12,
	0x48, 0x0a, 0x03, 0x67, 0x63, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x67, 0x63, 0x70, 0x22, 0xfa, 0x05, 0x0a, 0x22, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x61, 0x6c, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x63,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65,
	0x43, 0x61, 0x6c, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x63,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x55, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xad, 0x05,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4e, 0x0a,
	0x0a, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x75,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x43, 0x75, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x43, 0x75, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbc, 0x01,
	0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x36, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x03, 0x61, 0x77, 0x73, 0x12, 0x36, 0x0a, 0x03, 0x67, 0x63, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x03, 0x67, 0x63, 0x70,
	0x12, 0x3a, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x22, 0x4a, 0x0a, 0x10,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x90, 0x02, 0x0a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a,
	0x03, 0x61, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x03, 0x61, 0x77, 0x73, 0x12, 0x50, 0x0a, 0x05, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a,
	0x03, 0x67, 0x63, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x03, 0x67, 0x63, 0x70, 0x22, 0xfe, 0x05, 0x0a, 0x26,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x78, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30,
	0x0a, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x63,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x12, 0x3c,
	0x0a, 0x19, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x17,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x43,
	0x61, 0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x43, 0x61,
	0x6c, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x65, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x81, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x5f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0xdd, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0d, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x78, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x5b, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x8b, 0x03, 0x0a, 0x12, 0x41, 0x77, 0x73,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x75, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x2c, 0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x75, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0xbc, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x50, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x52, 0x75, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x1a, 0x41, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x77,
	0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x75, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x44, 0x72, 0x69, 0x66, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73,
	0x44, 0x72, 0x69, 0x66, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x69, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x22,
	0x41, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x48, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x19,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x24, 0x0a, 0x22, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x45, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x4a,
	0x0a, 0x1e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x17, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x47, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0x90, 0x01, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x22, 0x77, 0x0a, 0x2c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x2b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x2b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x47,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x78, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x82, 0x01, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x8f, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x77,
	0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x42, 0x0a, 0x0a, 0x61, 0x71, 0x75, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x61, 0x71, 0x75, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x51, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x85, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x77, 0x61, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x71, 0x75, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x61, 0x71, 0x75, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0xa8, 0x03, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x09, 0x79, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x59, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x09, 0x79, 0x65, 0x61, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x0e, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x50, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x47, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x48, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x22, 0x86, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0c, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70,
	0x70, 0x6c, 0x65, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x65, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x22, 0x54, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0x76, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0xab, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x2d,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x62, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x68, 0x0a,
	0x22, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x62, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x6e, 0x22, 0xd5, 0x01, 0x0a, 0x0f, 0x41, 0x62, 0x63, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x4c, 0x0a, 0x0a, 0x41, 0x62, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01,
	0x0a, 0x1d, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x22, 0x6b, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x22,
	0x34, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0xa7, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12,
	0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0xa7, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x37, 0x0a, 0x1d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x32, 0xb1, 0x2d, 0x0a, 0x07, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x80,
	0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x30,
	0x01, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x7b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x77, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x75, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x31, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x77, 0x73, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x52, 0x75, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x52, 0x75, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x77,
	0x73, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x72, 0x75, 0x6e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0x9a, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x44, 0x72, 0x69, 0x66, 0x74,
	0x12, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x73, 0x44, 0x72, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73,
	0x44, 0x72, 0x69, 0x66, 0x74, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a,
	0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x64, 0x72, 0x69, 0x66, 0x74, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0x7c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x65, 0x7d, 0x3a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x7d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x65, 0x7d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01,
	0x12, 0x6d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x25,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x65, 0x7d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x7d, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x26,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0x88,
	0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x1a, 0x1a, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x65,
	0x7d, 0x3a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x65, 0x7d, 0x3a, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0xaa, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x36, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a,
	0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12,
	0xd1, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x72, 0x65, 0x61,
	0x64, 0x30, 0x01, 0x12, 0xdc, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0xdc, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x1a, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0xb9, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x1a, 0x2d,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0xaf, 0x01,
	0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x2a, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x73, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x73, 0x12, 0x70, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69,
	0x70, 0x70, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x15, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x73, 0x30, 0x01, 0x12, 0x6f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x78, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x1a, 0x12, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x6f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x2f, 0x7b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x7d, 0x12, 0x7c, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2b, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x30, 0x01, 0x12, 0x7f, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70, 0x6c,
	0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x1a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x78, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9f, 0x01, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x62, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x62, 0x63, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x63, 0x42, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x64, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x30, 0x01, 0x12, 0xb6, 0x01, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x62, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x62, 0x63, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x63, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x2f,
	0x7b, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x30, 0x01, 0x12, 0x9c, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x31, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x77, 0x61, 0x76, 0x65, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x72, 0x65, 0x61,
	0x64, 0x30, 0x01, 0x12, 0x97, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x30, 0x01, 0x12, 0x8b, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x12, 0x94, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x7d, 0x12, 0x94, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x1a, 0x1d, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x12, 0x8a, 0x01, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x1a, 0x9d, 0x01, 0x92, 0x41, 0x99, 0x01, 0x12, 0x46, 0x28,
	0x42, 0x45, 0x54, 0x41, 0x29, 0x20, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x50,
	0x49, 0x2e, 0x20, 0x42, 0x61, 0x73, 0x65, 0x20, 0x55, 0x52, 0x4c, 0x3a, 0x20, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x2f, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x4f, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x42, 0x51, 0x0a, 0x19, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x42, 0x0c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_billing_v1_billing_proto_rawDescOnce sync.Once
	file_billing_v1_billing_proto_rawDescData = file_billing_v1_billing_proto_rawDesc
)

func file_billing_v1_billing_proto_rawDescGZIP() []byte {
	file_billing_v1_billing_proto_rawDescOnce.Do(func() {
		file_billing_v1_billing_proto_rawDescData = protoimpl.X.CompressGZIP(file_billing_v1_billing_proto_rawDescData)
	})
	return file_billing_v1_billing_proto_rawDescData
}

var file_billing_v1_billing_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_billing_v1_billing_proto_goTypes = []interface{}{
	(*BillingGroup)(nil),                                 // 0: blueapi.billing.v1.BillingGroup
	(*BillingGroupInvoiceSettings)(nil),                  // 1: blueapi.billing.v1.BillingGroupInvoiceSettings
	(*BillingGroupVendoredInvoiceSetting)(nil),           // 2: blueapi.billing.v1.BillingGroupVendoredInvoiceSetting
	(*ListBillingGroupsRequest)(nil),                     // 3: blueapi.billing.v1.ListBillingGroupsRequest
	(*CreateBillingGroupRequest)(nil),                    // 4: blueapi.billing.v1.CreateBillingGroupRequest
	(*AwsOptions)(nil),                                   // 5: blueapi.billing.v1.AwsOptions
	(*AccountOptions)(nil),                               // 6: blueapi.billing.v1.AccountOptions
	(*RegisterAccounts)(nil),                             // 7: blueapi.billing.v1.RegisterAccounts
	(*CreateBillingGroupRequestInvoice)(nil),             // 8: blueapi.billing.v1.CreateBillingGroupRequestInvoice
	(*CreateBillingGroupRequestInvoiceVendor)(nil),       // 9: blueapi.billing.v1.CreateBillingGroupRequestInvoiceVendor
	(*GetBillingGroupRequest)(nil),                       // 10: blueapi.billing.v1.GetBillingGroupRequest
	(*GetBillingGroupResponse)(nil),                      // 11: blueapi.billing.v1.GetBillingGroupResponse
	(*AccessGroup)(nil),                                  // 12: blueapi.billing.v1.AccessGroup
	(*GetAccessGroupRequest)(nil),                        // 13: blueapi.billing.v1.GetAccessGroupRequest
	(*GetAccessGroupResponse)(nil),                       // 14: blueapi.billing.v1.GetAccessGroupResponse
	(*AwsDailyRunHistory)(nil),                           // 15: blueapi.billing.v1.AwsDailyRunHistory
	(*ListAwsDailyRunHistoryRequest)(nil),                // 16: blueapi.billing.v1.ListAwsDailyRunHistoryRequest
	(*ListUsageCostsDriftRequest)(nil),                   // 17: blueapi.billing.v1.ListUsageCostsDriftRequest
	(*UsageCostsDrift)(nil),                              // 18: blueapi.billing.v1.UsageCostsDrift
	(*GetInvoiceRequest)(nil),                            // 19: blueapi.billing.v1.GetInvoiceRequest
	(*ExportInvoiceFileRequest)(nil),                     // 20: blueapi.billing.v1.ExportInvoiceFileRequest
	(*ExportInvoiceFileResponse)(nil),                    // 21: blueapi.billing.v1.ExportInvoiceFileResponse
	(*ListInvoiceServiceDiscountsRequest)(nil),           // 22: blueapi.billing.v1.ListInvoiceServiceDiscountsRequest
	(*InvoiceServiceDiscounts)(nil),                      // 23: blueapi.billing.v1.InvoiceServiceDiscounts
	(*ListAccountInvoiceServiceDiscountsRequest)(nil),    // 24: blueapi.billing.v1.ListAccountInvoiceServiceDiscountsRequest
	(*AccountInvoiceServiceDiscounts)(nil),               // 25: blueapi.billing.v1.AccountInvoiceServiceDiscounts
	(*AccountServiceDiscounts)(nil),                      // 26: blueapi.billing.v1.AccountServiceDiscounts
	(*CreateAccountInvoiceServiceDiscountsRequest)(nil),  // 27: blueapi.billing.v1.CreateAccountInvoiceServiceDiscountsRequest
	(*CreateAccountInvoiceServiceDiscountsResponse)(nil), // 28: blueapi.billing.v1.CreateAccountInvoiceServiceDiscountsResponse
	(*UpdateAccountInvoiceServiceDiscountsRequest)(nil),  // 29: blueapi.billing.v1.UpdateAccountInvoiceServiceDiscountsRequest
	(*UpdateAccountInvoiceServiceDiscountsResponse)(nil), // 30: blueapi.billing.v1.UpdateAccountInvoiceServiceDiscountsResponse
	(*DeleteAccountInvoiceServiceDiscountsRequest)(nil),  // 31: blueapi.billing.v1.DeleteAccountInvoiceServiceDiscountsRequest
	(*RemoveAccountInvoiceServiceDiscountsRequest)(nil),  // 32: blueapi.billing.v1.RemoveAccountInvoiceServiceDiscountsRequest
	(*CreateInvoiceRequest)(nil),                         // 33: blueapi.billing.v1.CreateInvoiceRequest
	(*GetInvoiceStatusRequest)(nil),                      // 34: blueapi.billing.v1.GetInvoiceStatusRequest
	(*ListInvoiceStatusRequest)(nil),                     // 35: blueapi.billing.v1.ListInvoiceStatusRequest
	(*UpdateInvoicePreviewsRequest)(nil),                 // 36: blueapi.billing.v1.UpdateInvoicePreviewsRequest
	(*CreateResellerRequest)(nil),                        // 37: blueapi.billing.v1.CreateResellerRequest
	(*ListResellersRequest)(nil),                         // 38: blueapi.billing.v1.ListResellersRequest
	(*GetResellerRequest)(nil),                           // 39: blueapi.billing.v1.GetResellerRequest
	(*UpdateResellerRequest)(nil),                        // 40: blueapi.billing.v1.UpdateResellerRequest
	(*DeleteResellerRequest)(nil),                        // 41: blueapi.billing.v1.DeleteResellerRequest
	(*GetBillingSettingRequest)(nil),                     // 42: blueapi.billing.v1.GetBillingSettingRequest
	(*GetBillingSettingResponse)(nil),                    // 43: blueapi.billing.v1.GetBillingSettingResponse
	(*ListExchangeRatesRequest)(nil),                     // 44: blueapi.billing.v1.ListExchangeRatesRequest
	(*ListExchangeRatesResponse)(nil),                    // 45: blueapi.billing.v1.ListExchangeRatesResponse
	(*ListAccessGroupsRequest)(nil),                      // 46: blueapi.billing.v1.ListAccessGroupsRequest
	(*CreateAccessGroupRequest)(nil),                     // 47: blueapi.billing.v1.CreateAccessGroupRequest
	(*UpdateAccessGroupRequest)(nil),                     // 48: blueapi.billing.v1.UpdateAccessGroupRequest
	(*DeleteAccessGroupRequest)(nil),                     // 49: blueapi.billing.v1.DeleteAccessGroupRequest
	(*ListInvoiceRequest)(nil),                           // 50: blueapi.billing.v1.ListInvoiceRequest
	(*ListInvoiceResponse)(nil),                          // 51: blueapi.billing.v1.ListInvoiceResponse
	(*ListAbcBillingGroupsRequest)(nil),                  // 52: blueapi.billing.v1.ListAbcBillingGroupsRequest
	(*ListAbcBillingGroupAccountsRequest)(nil),           // 53: blueapi.billing.v1.ListAbcBillingGroupAccountsRequest
	(*AbcBillingGroup)(nil),                              // 54: blueapi.billing.v1.AbcBillingGroup
	(*AbcAccount)(nil),                                   // 55: blueapi.billing.v1.AbcAccount
	(*ReadInvoiceAdjustmentsRequest)(nil),                // 56: blueapi.billing.v1.ReadInvoiceAdjustmentsRequest
	(*ListAccountResourcesRequest)(nil),                  // 57: blueapi.billing.v1.ListAccountResourcesRequest
	(*ResourceAccount)(nil),                              // 58: blueapi.billing.v1.ResourceAccount
	(*GetAdjustmentConfigRequest)(nil),                   // 59: blueapi.billing.v1.GetAdjustmentConfigRequest
	(*CreateAdjustmentConfigRequest)(nil),                // 60: blueapi.billing.v1.CreateAdjustmentConfigRequest
	(*UpdateAdjustmentConfigRequest)(nil),                // 61: blueapi.billing.v1.UpdateAdjustmentConfigRequest
	(*DeleteAdjustmentConfigRequest)(nil),                // 62: blueapi.billing.v1.DeleteAdjustmentConfigRequest
	(*AwsDailyRunHistory_Account)(nil),                   // 63: blueapi.billing.v1.AwsDailyRunHistory.Account
	(*AwsDailyRunHistory_Account_History)(nil),           // 64: blueapi.billing.v1.AwsDailyRunHistory.Account.History
	(*ripple.BillingGroupInfo)(nil),                      // 65: blueapi.api.ripple.BillingGroupInfo
	(*api.Account)(nil),                                  // 66: blueapi.api.Account
	(*api.CostTag)(nil),                                  // 67: blueapi.api.CostTag
	(*fieldmaskpb.FieldMask)(nil),                        // 68: google.protobuf.FieldMask
	(*ripple.ResellerConfig)(nil),                        // 69: blueapi.api.ripple.ResellerConfig
	(*ripple.YearMonth)(nil),                             // 70: blueapi.api.ripple.YearMonth
	(*ripple.Rounding)(nil),                              // 71: blueapi.api.ripple.Rounding
	(*ripple.InvoiceLayout)(nil),                         // 72: blueapi.api.ripple.InvoiceLayout
	(*ripple.DueDate)(nil),                               // 73: blueapi.api.ripple.DueDate
	(*ripple.CommonExchangeRate)(nil),                    // 74: blueapi.api.ripple.CommonExchangeRate
	(*ripple.BillingGroupExchangeRate)(nil),              // 75: blueapi.api.ripple.BillingGroupExchangeRate
	(*ripple.VendorPayerExchangeRate)(nil),               // 76: blueapi.api.ripple.VendorPayerExchangeRate
	(*api.ConfigFilters)(nil),                            // 77: blueapi.api.ConfigFilters
	(*api.ManagementAccount)(nil),                        // 78: blueapi.api.ManagementAccount
	(*api.InvoiceMessage)(nil),                           // 79: blueapi.api.InvoiceMessage
	(*api.Invoice)(nil),                                  // 80: blueapi.api.Invoice
	(*emptypb.Empty)(nil),                                // 81: google.protobuf.Empty
	(*ripple.Reseller)(nil),                              // 82: blueapi.api.ripple.Reseller
	(*ripple.AccessGroup)(nil),                           // 83: blueapi.api.ripple.AccessGroup
	(*wave.Adjustment)(nil),                              // 84: blueapi.api.wave.Adjustment
	(*api.AdjustmentConfig)(nil),                         // 85: blueapi.api.AdjustmentConfig
}
var file_billing_v1_billing_proto_depIdxs = []int32{
	65, // 0: blueapi.billing.v1.BillingGroup.billingGroupInfo:type_name -> blueapi.api.ripple.BillingGroupInfo
	6,  // 1: blueapi.billing.v1.BillingGroup.accountOptions:type_name -> blueapi.billing.v1.AccountOptions
	66, // 2: blueapi.billing.v1.BillingGroup.accounts:type_name -> blueapi.api.Account
	67, // 3: blueapi.billing.v1.BillingGroup.tags:type_name -> blueapi.api.CostTag
	1,  // 4: blueapi.billing.v1.BillingGroup.invoiceSettings:type_name -> blueapi.billing.v1.BillingGroupInvoiceSettings
	5,  // 5: blueapi.billing.v1.BillingGroup.awsOptions:type_name -> blueapi.billing.v1.AwsOptions
	2,  // 6: blueapi.billing.v1.BillingGroupInvoiceSettings.aws:type_name -> blueapi.billing.v1.BillingGroupVendoredInvoiceSetting
	2,  // 7: blueapi.billing.v1.BillingGroupInvoiceSettings.azure:type_name -> blueapi.billing.v1.BillingGroupVendoredInvoiceSetting
	2,  // 8: blueapi.billing.v1.BillingGroupInvoiceSettings.gcp:type_name -> blueapi.billing.v1.BillingGroupVendoredInvoiceSetting
	68, // 9: blueapi.billing.v1.ListBillingGroupsRequest.field_mask:type_name -> google.protobuf.FieldMask
	6,  // 10: blueapi.billing.v1.CreateBillingGroupRequest.accountOptions:type_name -> blueapi.billing.v1.AccountOptions
	8,  // 11: blueapi.billing.v1.CreateBillingGroupRequest.invoices:type_name -> blueapi.billing.v1.CreateBillingGroupRequestInvoice
	5,  // 12: blueapi.billing.v1.CreateBillingGroupRequest.awsOptions:type_name -> blueapi.billing.v1.AwsOptions
	7,  // 13: blueapi.billing.v1.AccountOptions.aws:type_name -> blueapi.billing.v1.RegisterAccounts
	7,  // 14: blueapi.billing.v1.AccountOptions.gcp:type_name -> blueapi.billing.v1.RegisterAccounts
	7,  // 15: blueapi.billing.v1.AccountOptions.azure:type_name -> blueapi.billing.v1.RegisterAccounts
	9,  // 16: blueapi.billing.v1.CreateBillingGroupRequestInvoice.aws:type_name -> blueapi.billing.v1.CreateBillingGroupRequestInvoiceVendor
	9,  // 17: blueapi.billing.v1.CreateBillingGroupRequestInvoice.azure:type_name -> blueapi.billing.v1.CreateBillingGroupRequestInvoiceVendor
	9,  // 18: blueapi.billing.v1.CreateBillingGroupRequestInvoice.gcp:type_name -> blueapi.billing.v1.CreateBillingGroupRequestInvoiceVendor
	68, // 19: blueapi.billing.v1.GetBillingGroupRequest.field_mask:type_name -> google.protobuf.FieldMask
	0,  // 20: blueapi.billing.v1.GetBillingGroupResponse.billingGroup:type_name -> blueapi.billing.v1.BillingGroup
	0,  // 21: blueapi.billing.v1.AccessGroup.billingGroups:type_name -> blueapi.billing.v1.BillingGroup
	68, // 22: blueapi.billing.v1.GetAccessGroupRequest.field_mask:type_name -> google.protobuf.FieldMask
	12, // 23: blueapi.billing.v1.GetAccessGroupResponse.accessGroup:type_name -> blueapi.billing.v1.AccessGroup
	63, // 24: blueapi.billing.v1.AwsDailyRunHistory.accounts:type_name -> blueapi.billing.v1.AwsDailyRunHistory.Account
	26, // 25: blueapi.billing.v1.CreateAccountInvoiceServiceDiscountsRequest.accounts:type_name -> blueapi.billing.v1.AccountServiceDiscounts
	26, // 26: blueapi.billing.v1.CreateAccountInvoiceServiceDiscountsResponse.accounts:type_name -> blueapi.billing.v1.AccountServiceDiscounts
	26, // 27: blueapi.billing.v1.UpdateAccountInvoiceServiceDiscountsRequest.accounts:type_name -> blueapi.billing.v1.AccountServiceDiscounts
	26, // 28: blueapi.billing.v1.UpdateAccountInvoiceServiceDiscountsResponse.accounts:type_name -> blueapi.billing.v1.AccountServiceDiscounts
	26, // 29: blueapi.billing.v1.RemoveAccountInvoiceServiceDiscountsRequest.accounts:type_name -> blueapi.billing.v1.AccountServiceDiscounts
	69, // 30: blueapi.billing.v1.CreateResellerRequest.waveConfig:type_name -> blueapi.api.ripple.ResellerConfig
	69, // 31: blueapi.billing.v1.CreateResellerRequest.aquaConfig:type_name -> blueapi.api.ripple.ResellerConfig
	68, // 32: blueapi.billing.v1.ListResellersRequest.field_mask:type_name -> google.protobuf.FieldMask
	68, // 33: blueapi.billing.v1.GetResellerRequest.field_mask:type_name -> google.protobuf.FieldMask
	69, // 34: blueapi.billing.v1.UpdateResellerRequest.waveConfig:type_name -> blueapi.api.ripple.ResellerConfig
	69, // 35: blueapi.billing.v1.UpdateResellerRequest.aquaConfig:type_name -> blueapi.api.ripple.ResellerConfig
	68, // 36: blueapi.billing.v1.GetBillingSettingRequest.field_mask:type_name -> google.protobuf.FieldMask
	70, // 37: blueapi.billing.v1.GetBillingSettingResponse.yearMonth:type_name -> blueapi.api.ripple.YearMonth
	71, // 38: blueapi.billing.v1.GetBillingSettingResponse.roundingMethod:type_name -> blueapi.api.ripple.Rounding
	71, // 39: blueapi.billing.v1.GetBillingSettingResponse.exportRoundingMethod:type_name -> blueapi.api.ripple.Rounding
	72, // 40: blueapi.billing.v1.GetBillingSettingResponse.invoiceLayout:type_name -> blueapi.api.ripple.InvoiceLayout
	73, // 41: blueapi.billing.v1.GetBillingSettingResponse.invoiceDueDate:type_name -> blueapi.api.ripple.DueDate
	74, // 42: blueapi.billing.v1.ListExchangeRatesResponse.common:type_name -> blueapi.api.ripple.CommonExchangeRate
	75, // 43: blueapi.billing.v1.ListExchangeRatesResponse.billingGroup:type_name -> blueapi.api.ripple.BillingGroupExchangeRate
	76, // 44: blueapi.billing.v1.ListExchangeRatesResponse.payer:type_name -> blueapi.api.ripple.VendorPayerExchangeRate
	68, // 45: blueapi.billing.v1.ListAccessGroupsRequest.field_mask:type_name -> google.protobuf.FieldMask
	77, // 46: blueapi.billing.v1.CreateAdjustmentConfigRequest.config:type_name -> blueapi.api.ConfigFilters
	78, // 47: blueapi.billing.v1.CreateAdjustmentConfigRequest.accounts:type_name -> blueapi.api.ManagementAccount
	77, // 48: blueapi.billing.v1.UpdateAdjustmentConfigRequest.config:type_name -> blueapi.api.ConfigFilters
	78, // 49: blueapi.billing.v1.UpdateAdjustmentConfigRequest.accounts:type_name -> blueapi.api.ManagementAccount
	64, // 50: blueapi.billing.v1.AwsDailyRunHistory.Account.history:type_name -> blueapi.billing.v1.AwsDailyRunHistory.Account.History
	3,  // 51: blueapi.billing.v1.Billing.ListBillingGroups:input_type -> blueapi.billing.v1.ListBillingGroupsRequest
	4,  // 52: blueapi.billing.v1.Billing.CreateBillingGroup:input_type -> blueapi.billing.v1.CreateBillingGroupRequest
	10, // 53: blueapi.billing.v1.Billing.GetBillingGroup:input_type -> blueapi.billing.v1.GetBillingGroupRequest
	13, // 54: blueapi.billing.v1.Billing.GetAccessGroup:input_type -> blueapi.billing.v1.GetAccessGroupRequest
	16, // 55: blueapi.billing.v1.Billing.ListAwsDailyRunHistory:input_type -> blueapi.billing.v1.ListAwsDailyRunHistoryRequest
	17, // 56: blueapi.billing.v1.Billing.ListUsageCostsDrift:input_type -> blueapi.billing.v1.ListUsageCostsDriftRequest
	33, // 57: blueapi.billing.v1.Billing.CreateInvoice:input_type -> blueapi.billing.v1.CreateInvoiceRequest
	34, // 58: blueapi.billing.v1.Billing.GetInvoiceStatus:input_type -> blueapi.billing.v1.GetInvoiceStatusRequest
	35, // 59: blueapi.billing.v1.Billing.ListInvoiceStatus:input_type -> blueapi.billing.v1.ListInvoiceStatusRequest
	19, // 60: blueapi.billing.v1.Billing.GetInvoice:input_type -> blueapi.billing.v1.GetInvoiceRequest
	50, // 61: blueapi.billing.v1.Billing.ListInvoice:input_type -> blueapi.billing.v1.ListInvoiceRequest
	36, // 62: blueapi.billing.v1.Billing.UpdateInvoicePreviews:input_type -> blueapi.billing.v1.UpdateInvoicePreviewsRequest
	20, // 63: blueapi.billing.v1.Billing.ExportInvoiceFile:input_type -> blueapi.billing.v1.ExportInvoiceFileRequest
	22, // 64: blueapi.billing.v1.Billing.ListInvoiceServiceDiscounts:input_type -> blueapi.billing.v1.ListInvoiceServiceDiscountsRequest
	24, // 65: blueapi.billing.v1.Billing.ListAccountInvoiceServiceDiscounts:input_type -> blueapi.billing.v1.ListAccountInvoiceServiceDiscountsRequest
	27, // 66: blueapi.billing.v1.Billing.CreateAccountInvoiceServiceDiscounts:input_type -> blueapi.billing.v1.CreateAccountInvoiceServiceDiscountsRequest
	29, // 67: blueapi.billing.v1.Billing.UpdateAccountInvoiceServiceDiscounts:input_type -> blueapi.billing.v1.UpdateAccountInvoiceServiceDiscountsRequest
	32, // 68: blueapi.billing.v1.Billing.RemoveAccountInvoiceServiceDiscounts:input_type -> blueapi.billing.v1.RemoveAccountInvoiceServiceDiscountsRequest
	31, // 69: blueapi.billing.v1.Billing.DeleteAccountInvoiceServiceDiscounts:input_type -> blueapi.billing.v1.DeleteAccountInvoiceServiceDiscountsRequest
	37, // 70: blueapi.billing.v1.Billing.CreateReseller:input_type -> blueapi.billing.v1.CreateResellerRequest
	38, // 71: blueapi.billing.v1.Billing.ListResellers:input_type -> blueapi.billing.v1.ListResellersRequest
	39, // 72: blueapi.billing.v1.Billing.GetReseller:input_type -> blueapi.billing.v1.GetResellerRequest
	40, // 73: blueapi.billing.v1.Billing.UpdateReseller:input_type -> blueapi.billing.v1.UpdateResellerRequest
	41, // 74: blueapi.billing.v1.Billing.DeleteReseller:input_type -> blueapi.billing.v1.DeleteResellerRequest
	42, // 75: blueapi.billing.v1.Billing.GetBillingSetting:input_type -> blueapi.billing.v1.GetBillingSettingRequest
	44, // 76: blueapi.billing.v1.Billing.ListExchangeRates:input_type -> blueapi.billing.v1.ListExchangeRatesRequest
	46, // 77: blueapi.billing.v1.Billing.ListAccessGroups:input_type -> blueapi.billing.v1.ListAccessGroupsRequest
	47, // 78: blueapi.billing.v1.Billing.CreateAccessGroup:input_type -> blueapi.billing.v1.CreateAccessGroupRequest
	48, // 79: blueapi.billing.v1.Billing.UpdateAccessGroup:input_type -> blueapi.billing.v1.UpdateAccessGroupRequest
	49, // 80: blueapi.billing.v1.Billing.DeleteAccessGroup:input_type -> blueapi.billing.v1.DeleteAccessGroupRequest
	52, // 81: blueapi.billing.v1.Billing.ListAbcBillingGroups:input_type -> blueapi.billing.v1.ListAbcBillingGroupsRequest
	53, // 82: blueapi.billing.v1.Billing.ListAbcBillingGroupAccounts:input_type -> blueapi.billing.v1.ListAbcBillingGroupAccountsRequest
	56, // 83: blueapi.billing.v1.Billing.ReadInvoiceAdjustments:input_type -> blueapi.billing.v1.ReadInvoiceAdjustmentsRequest
	57, // 84: blueapi.billing.v1.Billing.ListAccountResources:input_type -> blueapi.billing.v1.ListAccountResourcesRequest
	59, // 85: blueapi.billing.v1.Billing.GetAdjustmentConfig:input_type -> blueapi.billing.v1.GetAdjustmentConfigRequest
	60, // 86: blueapi.billing.v1.Billing.CreateAdjustmentConfig:input_type -> blueapi.billing.v1.CreateAdjustmentConfigRequest
	61, // 87: blueapi.billing.v1.Billing.UpdateAdjustmentConfig:input_type -> blueapi.billing.v1.UpdateAdjustmentConfigRequest
	62, // 88: blueapi.billing.v1.Billing.DeleteAdjustmentConfig:input_type -> blueapi.billing.v1.DeleteAdjustmentConfigRequest
	0,  // 89: blueapi.billing.v1.Billing.ListBillingGroups:output_type -> blueapi.billing.v1.BillingGroup
	0,  // 90: blueapi.billing.v1.Billing.CreateBillingGroup:output_type -> blueapi.billing.v1.BillingGroup
	11, // 91: blueapi.billing.v1.Billing.GetBillingGroup:output_type -> blueapi.billing.v1.GetBillingGroupResponse
	14, // 92: blueapi.billing.v1.Billing.GetAccessGroup:output_type -> blueapi.billing.v1.GetAccessGroupResponse
	15, // 93: blueapi.billing.v1.Billing.ListAwsDailyRunHistory:output_type -> blueapi.billing.v1.AwsDailyRunHistory
	18, // 94: blueapi.billing.v1.Billing.ListUsageCostsDrift:output_type -> blueapi.billing.v1.UsageCostsDrift
	79, // 95: blueapi.billing.v1.Billing.CreateInvoice:output_type -> blueapi.api.InvoiceMessage
	79, // 96: blueapi.billing.v1.Billing.GetInvoiceStatus:output_type -> blueapi.api.InvoiceMessage
	79, // 97: blueapi.billing.v1.Billing.ListInvoiceStatus:output_type -> blueapi.api.InvoiceMessage
	80, // 98: blueapi.billing.v1.Billing.GetInvoice:output_type -> blueapi.api.Invoice
	51, // 99: blueapi.billing.v1.Billing.ListInvoice:output_type -> blueapi.billing.v1.ListInvoiceResponse
	81, // 100: blueapi.billing.v1.Billing.UpdateInvoicePreviews:output_type -> google.protobuf.Empty
	21, // 101: blueapi.billing.v1.Billing.ExportInvoiceFile:output_type -> blueapi.billing.v1.ExportInvoiceFileResponse
	23, // 102: blueapi.billing.v1.Billing.ListInvoiceServiceDiscounts:output_type -> blueapi.billing.v1.InvoiceServiceDiscounts
	25, // 103: blueapi.billing.v1.Billing.ListAccountInvoiceServiceDiscounts:output_type -> blueapi.billing.v1.AccountInvoiceServiceDiscounts
	28, // 104: blueapi.billing.v1.Billing.CreateAccountInvoiceServiceDiscounts:output_type -> blueapi.billing.v1.CreateAccountInvoiceServiceDiscountsResponse
	30, // 105: blueapi.billing.v1.Billing.UpdateAccountInvoiceServiceDiscounts:output_type -> blueapi.billing.v1.UpdateAccountInvoiceServiceDiscountsResponse
	81, // 106: blueapi.billing.v1.Billing.RemoveAccountInvoiceServiceDiscounts:output_type -> google.protobuf.Empty
	81, // 107: blueapi.billing.v1.Billing.DeleteAccountInvoiceServiceDiscounts:output_type -> google.protobuf.Empty
	82, // 108: blueapi.billing.v1.Billing.CreateReseller:output_type -> blueapi.api.ripple.Reseller
	82, // 109: blueapi.billing.v1.Billing.ListResellers:output_type -> blueapi.api.ripple.Reseller
	82, // 110: blueapi.billing.v1.Billing.GetReseller:output_type -> blueapi.api.ripple.Reseller
	82, // 111: blueapi.billing.v1.Billing.UpdateReseller:output_type -> blueapi.api.ripple.Reseller
	81, // 112: blueapi.billing.v1.Billing.DeleteReseller:output_type -> google.protobuf.Empty
	43, // 113: blueapi.billing.v1.Billing.GetBillingSetting:output_type -> blueapi.billing.v1.GetBillingSettingResponse
	45, // 114: blueapi.billing.v1.Billing.ListExchangeRates:output_type -> blueapi.billing.v1.ListExchangeRatesResponse
	83, // 115: blueapi.billing.v1.Billing.ListAccessGroups:output_type -> blueapi.api.ripple.AccessGroup
	83, // 116: blueapi.billing.v1.Billing.CreateAccessGroup:output_type -> blueapi.api.ripple.AccessGroup
	83, // 117: blueapi.billing.v1.Billing.UpdateAccessGroup:output_type -> blueapi.api.ripple.AccessGroup
	81, // 118: blueapi.billing.v1.Billing.DeleteAccessGroup:output_type -> google.protobuf.Empty
	54, // 119: blueapi.billing.v1.Billing.ListAbcBillingGroups:output_type -> blueapi.billing.v1.AbcBillingGroup
	55, // 120: blueapi.billing.v1.Billing.ListAbcBillingGroupAccounts:output_type -> blueapi.billing.v1.AbcAccount
	84, // 121: blueapi.billing.v1.Billing.ReadInvoiceAdjustments:output_type -> blueapi.api.wave.Adjustment
	58, // 122: blueapi.billing.v1.Billing.ListAccountResources:output_type -> blueapi.billing.v1.ResourceAccount
	85, // 123: blueapi.billing.v1.Billing.GetAdjustmentConfig:output_type -> blueapi.api.AdjustmentConfig
	85, // 124: blueapi.billing.v1.Billing.CreateAdjustmentConfig:output_type -> blueapi.api.AdjustmentConfig
	85, // 125: blueapi.billing.v1.Billing.UpdateAdjustmentConfig:output_type -> blueapi.api.AdjustmentConfig
	81, // 126: blueapi.billing.v1.Billing.DeleteAdjustmentConfig:output_type -> google.protobuf.Empty
	89, // [89:127] is the sub-list for method output_type
	51, // [51:89] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_billing_v1_billing_proto_init() }
func file_billing_v1_billing_proto_init() {
	if File_billing_v1_billing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_billing_v1_billing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillingGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillingGroupInvoiceSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillingGroupVendoredInvoiceSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBillingGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBillingGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAccounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBillingGroupRequestInvoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBillingGroupRequestInvoiceVendor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBillingGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBillingGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsDailyRunHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAwsDailyRunHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsageCostsDriftRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageCostsDrift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportInvoiceFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportInvoiceFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInvoiceServiceDiscountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceServiceDiscounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountInvoiceServiceDiscountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInvoiceServiceDiscounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountServiceDiscounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountInvoiceServiceDiscountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountInvoiceServiceDiscountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountInvoiceServiceDiscountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountInvoiceServiceDiscountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountInvoiceServiceDiscountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAccountInvoiceServiceDiscountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInvoiceStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInvoiceStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInvoicePreviewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResellerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResellersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResellerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResellerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResellerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBillingSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBillingSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExchangeRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExchangeRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccessGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccessGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccessGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccessGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInvoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAbcBillingGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAbcBillingGroupAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbcBillingGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbcAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadInvoiceAdjustmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdjustmentConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdjustmentConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAdjustmentConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdjustmentConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsDailyRunHistory_Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_v1_billing_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsDailyRunHistory_Account_History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_billing_v1_billing_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_billing_v1_billing_proto_goTypes,
		DependencyIndexes: file_billing_v1_billing_proto_depIdxs,
		MessageInfos:      file_billing_v1_billing_proto_msgTypes,
	}.Build()
	File_billing_v1_billing_proto = out.File
	file_billing_v1_billing_proto_rawDesc = nil
	file_billing_v1_billing_proto_goTypes = nil
	file_billing_v1_billing_proto_depIdxs = nil
}
