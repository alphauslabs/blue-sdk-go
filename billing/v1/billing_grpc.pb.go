// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: billing/v1/billing.proto

package billing

import (
	context "context"
	api "github.com/alphauslabs/blue-sdk-go/api"
	ripple "github.com/alphauslabs/blue-sdk-go/api/ripple"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Billing_ListBillingGroups_FullMethodName                    = "/blueapi.billing.v1.Billing/ListBillingGroups"
	Billing_CreateBillingGroup_FullMethodName                   = "/blueapi.billing.v1.Billing/CreateBillingGroup"
	Billing_GetBillingGroup_FullMethodName                      = "/blueapi.billing.v1.Billing/GetBillingGroup"
	Billing_GetAccessGroup_FullMethodName                       = "/blueapi.billing.v1.Billing/GetAccessGroup"
	Billing_ListAwsDailyRunHistory_FullMethodName               = "/blueapi.billing.v1.Billing/ListAwsDailyRunHistory"
	Billing_ListUsageCostsDrift_FullMethodName                  = "/blueapi.billing.v1.Billing/ListUsageCostsDrift"
	Billing_CreateInvoice_FullMethodName                        = "/blueapi.billing.v1.Billing/CreateInvoice"
	Billing_GetInvoiceStatus_FullMethodName                     = "/blueapi.billing.v1.Billing/GetInvoiceStatus"
	Billing_GetInvoice_FullMethodName                           = "/blueapi.billing.v1.Billing/GetInvoice"
	Billing_UpdateInvoicePreviews_FullMethodName                = "/blueapi.billing.v1.Billing/UpdateInvoicePreviews"
	Billing_ExportInvoiceFile_FullMethodName                    = "/blueapi.billing.v1.Billing/ExportInvoiceFile"
	Billing_ListInvoiceServiceDiscounts_FullMethodName          = "/blueapi.billing.v1.Billing/ListInvoiceServiceDiscounts"
	Billing_ListAccountInvoiceServiceDiscounts_FullMethodName   = "/blueapi.billing.v1.Billing/ListAccountInvoiceServiceDiscounts"
	Billing_CreateAccountInvoiceServiceDiscounts_FullMethodName = "/blueapi.billing.v1.Billing/CreateAccountInvoiceServiceDiscounts"
	Billing_UpdateAccountInvoiceServiceDiscounts_FullMethodName = "/blueapi.billing.v1.Billing/UpdateAccountInvoiceServiceDiscounts"
	Billing_RemoveAccountInvoiceServiceDiscounts_FullMethodName = "/blueapi.billing.v1.Billing/RemoveAccountInvoiceServiceDiscounts"
	Billing_DeleteAccountInvoiceServiceDiscounts_FullMethodName = "/blueapi.billing.v1.Billing/DeleteAccountInvoiceServiceDiscounts"
	Billing_CreateReseller_FullMethodName                       = "/blueapi.billing.v1.Billing/CreateReseller"
	Billing_ListResellers_FullMethodName                        = "/blueapi.billing.v1.Billing/ListResellers"
	Billing_GetReseller_FullMethodName                          = "/blueapi.billing.v1.Billing/GetReseller"
	Billing_UpdateReseller_FullMethodName                       = "/blueapi.billing.v1.Billing/UpdateReseller"
	Billing_DeleteReseller_FullMethodName                       = "/blueapi.billing.v1.Billing/DeleteReseller"
	Billing_GetBillingSetting_FullMethodName                    = "/blueapi.billing.v1.Billing/GetBillingSetting"
	Billing_ListExchangeRates_FullMethodName                    = "/blueapi.billing.v1.Billing/ListExchangeRates"
	Billing_ListAccessGroups_FullMethodName                     = "/blueapi.billing.v1.Billing/ListAccessGroups"
	Billing_CreateAccessGroup_FullMethodName                    = "/blueapi.billing.v1.Billing/CreateAccessGroup"
	Billing_UpdateAccessGroup_FullMethodName                    = "/blueapi.billing.v1.Billing/UpdateAccessGroup"
	Billing_DeleteAccessGroup_FullMethodName                    = "/blueapi.billing.v1.Billing/DeleteAccessGroup"
)

// BillingClient is the client API for Billing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingClient interface {
	// Lists all billing groups.
	ListBillingGroups(ctx context.Context, in *ListBillingGroupsRequest, opts ...grpc.CallOption) (Billing_ListBillingGroupsClient, error)
	// Registers a billing group.
	CreateBillingGroup(ctx context.Context, in *CreateBillingGroupRequest, opts ...grpc.CallOption) (*BillingGroup, error)
	// Gets a billing group.
	GetBillingGroup(ctx context.Context, in *GetBillingGroupRequest, opts ...grpc.CallOption) (*GetBillingGroupResponse, error)
	// WORK-IN-PROGRESS: Gets an access group.
	GetAccessGroup(ctx context.Context, in *GetAccessGroupRequest, opts ...grpc.CallOption) (*GetAccessGroupResponse, error)
	// Reads the daily calculation history of all accounts in your billing groups. Only available in Ripple.
	ListAwsDailyRunHistory(ctx context.Context, in *ListAwsDailyRunHistoryRequest, opts ...grpc.CallOption) (Billing_ListAwsDailyRunHistoryClient, error)
	// Returns a list of accounts that have been updated after invoice along with the differences in costs, if any. Only available in Ripple.
	ListUsageCostsDrift(ctx context.Context, in *ListUsageCostsDriftRequest, opts ...grpc.CallOption) (Billing_ListUsageCostsDriftClient, error)
	// WORK-IN-PROGRESS: Creates an invoice. Only available in Ripple.
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*api.InvoiceMessage, error)
	// WORK-IN-PROGRESS: Gets an invoice. Only available in Ripple.
	GetInvoiceStatus(ctx context.Context, in *GetInvoiceStatusRequest, opts ...grpc.CallOption) (*api.InvoiceMessage, error)
	// Gets an invoice.
	GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*api.Invoice, error)
	// Updates an invoice preview. Only available in Ripple.
	UpdateInvoicePreviews(ctx context.Context, in *UpdateInvoicePreviewsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Exports an invoice.
	ExportInvoiceFile(ctx context.Context, in *ExportInvoiceFileRequest, opts ...grpc.CallOption) (*ExportInvoiceFileResponse, error)
	// Reads the invoice service discounts. Only available in Ripple.
	ListInvoiceServiceDiscounts(ctx context.Context, in *ListInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (Billing_ListInvoiceServiceDiscountsClient, error)
	// Reads the account invoice service discounts. Only available in Ripple.
	ListAccountInvoiceServiceDiscounts(ctx context.Context, in *ListAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (Billing_ListAccountInvoiceServiceDiscountsClient, error)
	// Registers the account invoice service discounts. Only available in Ripple.
	CreateAccountInvoiceServiceDiscounts(ctx context.Context, in *CreateAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*CreateAccountInvoiceServiceDiscountsResponse, error)
	// Updates the account invoice service discounts. Only available in Ripple.
	UpdateAccountInvoiceServiceDiscounts(ctx context.Context, in *UpdateAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*UpdateAccountInvoiceServiceDiscountsResponse, error)
	// Removes the account invoice service discounts. Only available in Ripple.
	RemoveAccountInvoiceServiceDiscounts(ctx context.Context, in *RemoveAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes the account invoice service discounts. Only available in Ripple.
	DeleteAccountInvoiceServiceDiscounts(ctx context.Context, in *DeleteAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Registers the reseller account. Only available in Ripple.
	CreateReseller(ctx context.Context, in *CreateResellerRequest, opts ...grpc.CallOption) (*ripple.Reseller, error)
	// WORK-IN-PROGRESS: Lists all the reseller accounts. Only available in Ripple.
	ListResellers(ctx context.Context, in *ListResellersRequest, opts ...grpc.CallOption) (Billing_ListResellersClient, error)
	// WORK-IN-PROGRESS: Gets the reseller account. Only available in Ripple.
	GetReseller(ctx context.Context, in *GetResellerRequest, opts ...grpc.CallOption) (*ripple.Reseller, error)
	// WORK-IN-PROGRESS: Updates the reseller account. Only available in Ripple.
	UpdateReseller(ctx context.Context, in *UpdateResellerRequest, opts ...grpc.CallOption) (*ripple.Reseller, error)
	// WORK-IN-PROGRESS: Deletes the reseller account. Only available in Ripple.
	DeleteReseller(ctx context.Context, in *DeleteResellerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Gets all billing settings.
	GetBillingSetting(ctx context.Context, in *GetBillingSettingRequest, opts ...grpc.CallOption) (*GetBillingSettingResponse, error)
	// WORK-IN-PROGRESS: Lists all exchange rate. Only available in Ripple.
	ListExchangeRates(ctx context.Context, in *ListExchangeRatesRequest, opts ...grpc.CallOption) (*ListExchangeRatesResponse, error)
	// WORK-IN-PROGRESS: Lists access group. Only available in Ripple.
	ListAccessGroups(ctx context.Context, in *ListAccessGroupsRequest, opts ...grpc.CallOption) (*ripple.AccessGroup, error)
	// WORK-IN-PROGRESS: Registers the access group. Only available in Ripple.
	CreateAccessGroup(ctx context.Context, in *CreateAccessGroupRequest, opts ...grpc.CallOption) (*ripple.AccessGroup, error)
	// WORK-IN-PROGRESS: Updates the access group. Only available in Ripple.
	UpdateAccessGroup(ctx context.Context, in *UpdateAccessGroupRequest, opts ...grpc.CallOption) (*ripple.AccessGroup, error)
	// WORK-IN-PROGRESS: Deletes the access group. Only available in Ripple.
	DeleteAccessGroup(ctx context.Context, in *DeleteAccessGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type billingClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingClient(cc grpc.ClientConnInterface) BillingClient {
	return &billingClient{cc}
}

func (c *billingClient) ListBillingGroups(ctx context.Context, in *ListBillingGroupsRequest, opts ...grpc.CallOption) (Billing_ListBillingGroupsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[0], Billing_ListBillingGroups_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &billingListBillingGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListBillingGroupsClient interface {
	Recv() (*BillingGroup, error)
	grpc.ClientStream
}

type billingListBillingGroupsClient struct {
	grpc.ClientStream
}

func (x *billingListBillingGroupsClient) Recv() (*BillingGroup, error) {
	m := new(BillingGroup)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) CreateBillingGroup(ctx context.Context, in *CreateBillingGroupRequest, opts ...grpc.CallOption) (*BillingGroup, error) {
	out := new(BillingGroup)
	err := c.cc.Invoke(ctx, Billing_CreateBillingGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) GetBillingGroup(ctx context.Context, in *GetBillingGroupRequest, opts ...grpc.CallOption) (*GetBillingGroupResponse, error) {
	out := new(GetBillingGroupResponse)
	err := c.cc.Invoke(ctx, Billing_GetBillingGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) GetAccessGroup(ctx context.Context, in *GetAccessGroupRequest, opts ...grpc.CallOption) (*GetAccessGroupResponse, error) {
	out := new(GetAccessGroupResponse)
	err := c.cc.Invoke(ctx, Billing_GetAccessGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListAwsDailyRunHistory(ctx context.Context, in *ListAwsDailyRunHistoryRequest, opts ...grpc.CallOption) (Billing_ListAwsDailyRunHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[1], Billing_ListAwsDailyRunHistory_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &billingListAwsDailyRunHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListAwsDailyRunHistoryClient interface {
	Recv() (*AwsDailyRunHistory, error)
	grpc.ClientStream
}

type billingListAwsDailyRunHistoryClient struct {
	grpc.ClientStream
}

func (x *billingListAwsDailyRunHistoryClient) Recv() (*AwsDailyRunHistory, error) {
	m := new(AwsDailyRunHistory)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) ListUsageCostsDrift(ctx context.Context, in *ListUsageCostsDriftRequest, opts ...grpc.CallOption) (Billing_ListUsageCostsDriftClient, error) {
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[2], Billing_ListUsageCostsDrift_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &billingListUsageCostsDriftClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListUsageCostsDriftClient interface {
	Recv() (*UsageCostsDrift, error)
	grpc.ClientStream
}

type billingListUsageCostsDriftClient struct {
	grpc.ClientStream
}

func (x *billingListUsageCostsDriftClient) Recv() (*UsageCostsDrift, error) {
	m := new(UsageCostsDrift)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*api.InvoiceMessage, error) {
	out := new(api.InvoiceMessage)
	err := c.cc.Invoke(ctx, Billing_CreateInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) GetInvoiceStatus(ctx context.Context, in *GetInvoiceStatusRequest, opts ...grpc.CallOption) (*api.InvoiceMessage, error) {
	out := new(api.InvoiceMessage)
	err := c.cc.Invoke(ctx, Billing_GetInvoiceStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*api.Invoice, error) {
	out := new(api.Invoice)
	err := c.cc.Invoke(ctx, Billing_GetInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateInvoicePreviews(ctx context.Context, in *UpdateInvoicePreviewsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_UpdateInvoicePreviews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ExportInvoiceFile(ctx context.Context, in *ExportInvoiceFileRequest, opts ...grpc.CallOption) (*ExportInvoiceFileResponse, error) {
	out := new(ExportInvoiceFileResponse)
	err := c.cc.Invoke(ctx, Billing_ExportInvoiceFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListInvoiceServiceDiscounts(ctx context.Context, in *ListInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (Billing_ListInvoiceServiceDiscountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[3], Billing_ListInvoiceServiceDiscounts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &billingListInvoiceServiceDiscountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListInvoiceServiceDiscountsClient interface {
	Recv() (*InvoiceServiceDiscounts, error)
	grpc.ClientStream
}

type billingListInvoiceServiceDiscountsClient struct {
	grpc.ClientStream
}

func (x *billingListInvoiceServiceDiscountsClient) Recv() (*InvoiceServiceDiscounts, error) {
	m := new(InvoiceServiceDiscounts)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) ListAccountInvoiceServiceDiscounts(ctx context.Context, in *ListAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (Billing_ListAccountInvoiceServiceDiscountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[4], Billing_ListAccountInvoiceServiceDiscounts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &billingListAccountInvoiceServiceDiscountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListAccountInvoiceServiceDiscountsClient interface {
	Recv() (*AccountInvoiceServiceDiscounts, error)
	grpc.ClientStream
}

type billingListAccountInvoiceServiceDiscountsClient struct {
	grpc.ClientStream
}

func (x *billingListAccountInvoiceServiceDiscountsClient) Recv() (*AccountInvoiceServiceDiscounts, error) {
	m := new(AccountInvoiceServiceDiscounts)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) CreateAccountInvoiceServiceDiscounts(ctx context.Context, in *CreateAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*CreateAccountInvoiceServiceDiscountsResponse, error) {
	out := new(CreateAccountInvoiceServiceDiscountsResponse)
	err := c.cc.Invoke(ctx, Billing_CreateAccountInvoiceServiceDiscounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateAccountInvoiceServiceDiscounts(ctx context.Context, in *UpdateAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*UpdateAccountInvoiceServiceDiscountsResponse, error) {
	out := new(UpdateAccountInvoiceServiceDiscountsResponse)
	err := c.cc.Invoke(ctx, Billing_UpdateAccountInvoiceServiceDiscounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) RemoveAccountInvoiceServiceDiscounts(ctx context.Context, in *RemoveAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_RemoveAccountInvoiceServiceDiscounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteAccountInvoiceServiceDiscounts(ctx context.Context, in *DeleteAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteAccountInvoiceServiceDiscounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) CreateReseller(ctx context.Context, in *CreateResellerRequest, opts ...grpc.CallOption) (*ripple.Reseller, error) {
	out := new(ripple.Reseller)
	err := c.cc.Invoke(ctx, Billing_CreateReseller_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListResellers(ctx context.Context, in *ListResellersRequest, opts ...grpc.CallOption) (Billing_ListResellersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[5], Billing_ListResellers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &billingListResellersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListResellersClient interface {
	Recv() (*ripple.Reseller, error)
	grpc.ClientStream
}

type billingListResellersClient struct {
	grpc.ClientStream
}

func (x *billingListResellersClient) Recv() (*ripple.Reseller, error) {
	m := new(ripple.Reseller)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) GetReseller(ctx context.Context, in *GetResellerRequest, opts ...grpc.CallOption) (*ripple.Reseller, error) {
	out := new(ripple.Reseller)
	err := c.cc.Invoke(ctx, Billing_GetReseller_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateReseller(ctx context.Context, in *UpdateResellerRequest, opts ...grpc.CallOption) (*ripple.Reseller, error) {
	out := new(ripple.Reseller)
	err := c.cc.Invoke(ctx, Billing_UpdateReseller_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteReseller(ctx context.Context, in *DeleteResellerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteReseller_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) GetBillingSetting(ctx context.Context, in *GetBillingSettingRequest, opts ...grpc.CallOption) (*GetBillingSettingResponse, error) {
	out := new(GetBillingSettingResponse)
	err := c.cc.Invoke(ctx, Billing_GetBillingSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListExchangeRates(ctx context.Context, in *ListExchangeRatesRequest, opts ...grpc.CallOption) (*ListExchangeRatesResponse, error) {
	out := new(ListExchangeRatesResponse)
	err := c.cc.Invoke(ctx, Billing_ListExchangeRates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListAccessGroups(ctx context.Context, in *ListAccessGroupsRequest, opts ...grpc.CallOption) (*ripple.AccessGroup, error) {
	out := new(ripple.AccessGroup)
	err := c.cc.Invoke(ctx, Billing_ListAccessGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) CreateAccessGroup(ctx context.Context, in *CreateAccessGroupRequest, opts ...grpc.CallOption) (*ripple.AccessGroup, error) {
	out := new(ripple.AccessGroup)
	err := c.cc.Invoke(ctx, Billing_CreateAccessGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateAccessGroup(ctx context.Context, in *UpdateAccessGroupRequest, opts ...grpc.CallOption) (*ripple.AccessGroup, error) {
	out := new(ripple.AccessGroup)
	err := c.cc.Invoke(ctx, Billing_UpdateAccessGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteAccessGroup(ctx context.Context, in *DeleteAccessGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteAccessGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServer is the server API for Billing service.
// All implementations must embed UnimplementedBillingServer
// for forward compatibility
type BillingServer interface {
	// Lists all billing groups.
	ListBillingGroups(*ListBillingGroupsRequest, Billing_ListBillingGroupsServer) error
	// Registers a billing group.
	CreateBillingGroup(context.Context, *CreateBillingGroupRequest) (*BillingGroup, error)
	// Gets a billing group.
	GetBillingGroup(context.Context, *GetBillingGroupRequest) (*GetBillingGroupResponse, error)
	// WORK-IN-PROGRESS: Gets an access group.
	GetAccessGroup(context.Context, *GetAccessGroupRequest) (*GetAccessGroupResponse, error)
	// Reads the daily calculation history of all accounts in your billing groups. Only available in Ripple.
	ListAwsDailyRunHistory(*ListAwsDailyRunHistoryRequest, Billing_ListAwsDailyRunHistoryServer) error
	// Returns a list of accounts that have been updated after invoice along with the differences in costs, if any. Only available in Ripple.
	ListUsageCostsDrift(*ListUsageCostsDriftRequest, Billing_ListUsageCostsDriftServer) error
	// WORK-IN-PROGRESS: Creates an invoice. Only available in Ripple.
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*api.InvoiceMessage, error)
	// WORK-IN-PROGRESS: Gets an invoice. Only available in Ripple.
	GetInvoiceStatus(context.Context, *GetInvoiceStatusRequest) (*api.InvoiceMessage, error)
	// Gets an invoice.
	GetInvoice(context.Context, *GetInvoiceRequest) (*api.Invoice, error)
	// Updates an invoice preview. Only available in Ripple.
	UpdateInvoicePreviews(context.Context, *UpdateInvoicePreviewsRequest) (*emptypb.Empty, error)
	// Exports an invoice.
	ExportInvoiceFile(context.Context, *ExportInvoiceFileRequest) (*ExportInvoiceFileResponse, error)
	// Reads the invoice service discounts. Only available in Ripple.
	ListInvoiceServiceDiscounts(*ListInvoiceServiceDiscountsRequest, Billing_ListInvoiceServiceDiscountsServer) error
	// Reads the account invoice service discounts. Only available in Ripple.
	ListAccountInvoiceServiceDiscounts(*ListAccountInvoiceServiceDiscountsRequest, Billing_ListAccountInvoiceServiceDiscountsServer) error
	// Registers the account invoice service discounts. Only available in Ripple.
	CreateAccountInvoiceServiceDiscounts(context.Context, *CreateAccountInvoiceServiceDiscountsRequest) (*CreateAccountInvoiceServiceDiscountsResponse, error)
	// Updates the account invoice service discounts. Only available in Ripple.
	UpdateAccountInvoiceServiceDiscounts(context.Context, *UpdateAccountInvoiceServiceDiscountsRequest) (*UpdateAccountInvoiceServiceDiscountsResponse, error)
	// Removes the account invoice service discounts. Only available in Ripple.
	RemoveAccountInvoiceServiceDiscounts(context.Context, *RemoveAccountInvoiceServiceDiscountsRequest) (*emptypb.Empty, error)
	// Deletes the account invoice service discounts. Only available in Ripple.
	DeleteAccountInvoiceServiceDiscounts(context.Context, *DeleteAccountInvoiceServiceDiscountsRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Registers the reseller account. Only available in Ripple.
	CreateReseller(context.Context, *CreateResellerRequest) (*ripple.Reseller, error)
	// WORK-IN-PROGRESS: Lists all the reseller accounts. Only available in Ripple.
	ListResellers(*ListResellersRequest, Billing_ListResellersServer) error
	// WORK-IN-PROGRESS: Gets the reseller account. Only available in Ripple.
	GetReseller(context.Context, *GetResellerRequest) (*ripple.Reseller, error)
	// WORK-IN-PROGRESS: Updates the reseller account. Only available in Ripple.
	UpdateReseller(context.Context, *UpdateResellerRequest) (*ripple.Reseller, error)
	// WORK-IN-PROGRESS: Deletes the reseller account. Only available in Ripple.
	DeleteReseller(context.Context, *DeleteResellerRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Gets all billing settings.
	GetBillingSetting(context.Context, *GetBillingSettingRequest) (*GetBillingSettingResponse, error)
	// WORK-IN-PROGRESS: Lists all exchange rate. Only available in Ripple.
	ListExchangeRates(context.Context, *ListExchangeRatesRequest) (*ListExchangeRatesResponse, error)
	// WORK-IN-PROGRESS: Lists access group. Only available in Ripple.
	ListAccessGroups(context.Context, *ListAccessGroupsRequest) (*ripple.AccessGroup, error)
	// WORK-IN-PROGRESS: Registers the access group. Only available in Ripple.
	CreateAccessGroup(context.Context, *CreateAccessGroupRequest) (*ripple.AccessGroup, error)
	// WORK-IN-PROGRESS: Updates the access group. Only available in Ripple.
	UpdateAccessGroup(context.Context, *UpdateAccessGroupRequest) (*ripple.AccessGroup, error)
	// WORK-IN-PROGRESS: Deletes the access group. Only available in Ripple.
	DeleteAccessGroup(context.Context, *DeleteAccessGroupRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBillingServer()
}

// UnimplementedBillingServer must be embedded to have forward compatible implementations.
type UnimplementedBillingServer struct {
}

func (UnimplementedBillingServer) ListBillingGroups(*ListBillingGroupsRequest, Billing_ListBillingGroupsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBillingGroups not implemented")
}
func (UnimplementedBillingServer) CreateBillingGroup(context.Context, *CreateBillingGroupRequest) (*BillingGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillingGroup not implemented")
}
func (UnimplementedBillingServer) GetBillingGroup(context.Context, *GetBillingGroupRequest) (*GetBillingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingGroup not implemented")
}
func (UnimplementedBillingServer) GetAccessGroup(context.Context, *GetAccessGroupRequest) (*GetAccessGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessGroup not implemented")
}
func (UnimplementedBillingServer) ListAwsDailyRunHistory(*ListAwsDailyRunHistoryRequest, Billing_ListAwsDailyRunHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAwsDailyRunHistory not implemented")
}
func (UnimplementedBillingServer) ListUsageCostsDrift(*ListUsageCostsDriftRequest, Billing_ListUsageCostsDriftServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsageCostsDrift not implemented")
}
func (UnimplementedBillingServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*api.InvoiceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedBillingServer) GetInvoiceStatus(context.Context, *GetInvoiceStatusRequest) (*api.InvoiceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceStatus not implemented")
}
func (UnimplementedBillingServer) GetInvoice(context.Context, *GetInvoiceRequest) (*api.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedBillingServer) UpdateInvoicePreviews(context.Context, *UpdateInvoicePreviewsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoicePreviews not implemented")
}
func (UnimplementedBillingServer) ExportInvoiceFile(context.Context, *ExportInvoiceFileRequest) (*ExportInvoiceFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportInvoiceFile not implemented")
}
func (UnimplementedBillingServer) ListInvoiceServiceDiscounts(*ListInvoiceServiceDiscountsRequest, Billing_ListInvoiceServiceDiscountsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) ListAccountInvoiceServiceDiscounts(*ListAccountInvoiceServiceDiscountsRequest, Billing_ListAccountInvoiceServiceDiscountsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAccountInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) CreateAccountInvoiceServiceDiscounts(context.Context, *CreateAccountInvoiceServiceDiscountsRequest) (*CreateAccountInvoiceServiceDiscountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) UpdateAccountInvoiceServiceDiscounts(context.Context, *UpdateAccountInvoiceServiceDiscountsRequest) (*UpdateAccountInvoiceServiceDiscountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) RemoveAccountInvoiceServiceDiscounts(context.Context, *RemoveAccountInvoiceServiceDiscountsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAccountInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) DeleteAccountInvoiceServiceDiscounts(context.Context, *DeleteAccountInvoiceServiceDiscountsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) CreateReseller(context.Context, *CreateResellerRequest) (*ripple.Reseller, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReseller not implemented")
}
func (UnimplementedBillingServer) ListResellers(*ListResellersRequest, Billing_ListResellersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListResellers not implemented")
}
func (UnimplementedBillingServer) GetReseller(context.Context, *GetResellerRequest) (*ripple.Reseller, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReseller not implemented")
}
func (UnimplementedBillingServer) UpdateReseller(context.Context, *UpdateResellerRequest) (*ripple.Reseller, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReseller not implemented")
}
func (UnimplementedBillingServer) DeleteReseller(context.Context, *DeleteResellerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReseller not implemented")
}
func (UnimplementedBillingServer) GetBillingSetting(context.Context, *GetBillingSettingRequest) (*GetBillingSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingSetting not implemented")
}
func (UnimplementedBillingServer) ListExchangeRates(context.Context, *ListExchangeRatesRequest) (*ListExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExchangeRates not implemented")
}
func (UnimplementedBillingServer) ListAccessGroups(context.Context, *ListAccessGroupsRequest) (*ripple.AccessGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessGroups not implemented")
}
func (UnimplementedBillingServer) CreateAccessGroup(context.Context, *CreateAccessGroupRequest) (*ripple.AccessGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessGroup not implemented")
}
func (UnimplementedBillingServer) UpdateAccessGroup(context.Context, *UpdateAccessGroupRequest) (*ripple.AccessGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessGroup not implemented")
}
func (UnimplementedBillingServer) DeleteAccessGroup(context.Context, *DeleteAccessGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessGroup not implemented")
}
func (UnimplementedBillingServer) mustEmbedUnimplementedBillingServer() {}

// UnsafeBillingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServer will
// result in compilation errors.
type UnsafeBillingServer interface {
	mustEmbedUnimplementedBillingServer()
}

func RegisterBillingServer(s grpc.ServiceRegistrar, srv BillingServer) {
	s.RegisterService(&Billing_ServiceDesc, srv)
}

func _Billing_ListBillingGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBillingGroupsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListBillingGroups(m, &billingListBillingGroupsServer{stream})
}

type Billing_ListBillingGroupsServer interface {
	Send(*BillingGroup) error
	grpc.ServerStream
}

type billingListBillingGroupsServer struct {
	grpc.ServerStream
}

func (x *billingListBillingGroupsServer) Send(m *BillingGroup) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_CreateBillingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateBillingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateBillingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateBillingGroup(ctx, req.(*CreateBillingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_GetBillingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetBillingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetBillingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetBillingGroup(ctx, req.(*GetBillingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_GetAccessGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetAccessGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetAccessGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetAccessGroup(ctx, req.(*GetAccessGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListAwsDailyRunHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAwsDailyRunHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListAwsDailyRunHistory(m, &billingListAwsDailyRunHistoryServer{stream})
}

type Billing_ListAwsDailyRunHistoryServer interface {
	Send(*AwsDailyRunHistory) error
	grpc.ServerStream
}

type billingListAwsDailyRunHistoryServer struct {
	grpc.ServerStream
}

func (x *billingListAwsDailyRunHistoryServer) Send(m *AwsDailyRunHistory) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_ListUsageCostsDrift_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUsageCostsDriftRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListUsageCostsDrift(m, &billingListUsageCostsDriftServer{stream})
}

type Billing_ListUsageCostsDriftServer interface {
	Send(*UsageCostsDrift) error
	grpc.ServerStream
}

type billingListUsageCostsDriftServer struct {
	grpc.ServerStream
}

func (x *billingListUsageCostsDriftServer) Send(m *UsageCostsDrift) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_GetInvoiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetInvoiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetInvoiceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetInvoiceStatus(ctx, req.(*GetInvoiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetInvoice(ctx, req.(*GetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateInvoicePreviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoicePreviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateInvoicePreviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateInvoicePreviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateInvoicePreviews(ctx, req.(*UpdateInvoicePreviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ExportInvoiceFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportInvoiceFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).ExportInvoiceFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_ExportInvoiceFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).ExportInvoiceFile(ctx, req.(*ExportInvoiceFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListInvoiceServiceDiscounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListInvoiceServiceDiscountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListInvoiceServiceDiscounts(m, &billingListInvoiceServiceDiscountsServer{stream})
}

type Billing_ListInvoiceServiceDiscountsServer interface {
	Send(*InvoiceServiceDiscounts) error
	grpc.ServerStream
}

type billingListInvoiceServiceDiscountsServer struct {
	grpc.ServerStream
}

func (x *billingListInvoiceServiceDiscountsServer) Send(m *InvoiceServiceDiscounts) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_ListAccountInvoiceServiceDiscounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAccountInvoiceServiceDiscountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListAccountInvoiceServiceDiscounts(m, &billingListAccountInvoiceServiceDiscountsServer{stream})
}

type Billing_ListAccountInvoiceServiceDiscountsServer interface {
	Send(*AccountInvoiceServiceDiscounts) error
	grpc.ServerStream
}

type billingListAccountInvoiceServiceDiscountsServer struct {
	grpc.ServerStream
}

func (x *billingListAccountInvoiceServiceDiscountsServer) Send(m *AccountInvoiceServiceDiscounts) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_CreateAccountInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateAccountInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateAccountInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateAccountInvoiceServiceDiscounts(ctx, req.(*CreateAccountInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateAccountInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateAccountInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateAccountInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateAccountInvoiceServiceDiscounts(ctx, req.(*UpdateAccountInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_RemoveAccountInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAccountInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).RemoveAccountInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_RemoveAccountInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).RemoveAccountInvoiceServiceDiscounts(ctx, req.(*RemoveAccountInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteAccountInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteAccountInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteAccountInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteAccountInvoiceServiceDiscounts(ctx, req.(*DeleteAccountInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_CreateReseller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateReseller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateReseller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateReseller(ctx, req.(*CreateResellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListResellers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListResellersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListResellers(m, &billingListResellersServer{stream})
}

type Billing_ListResellersServer interface {
	Send(*ripple.Reseller) error
	grpc.ServerStream
}

type billingListResellersServer struct {
	grpc.ServerStream
}

func (x *billingListResellersServer) Send(m *ripple.Reseller) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_GetReseller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetReseller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetReseller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetReseller(ctx, req.(*GetResellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateReseller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateReseller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateReseller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateReseller(ctx, req.(*UpdateResellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteReseller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteReseller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteReseller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteReseller(ctx, req.(*DeleteResellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_GetBillingSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetBillingSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetBillingSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetBillingSetting(ctx, req.(*GetBillingSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).ListExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_ListExchangeRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).ListExchangeRates(ctx, req.(*ListExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListAccessGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).ListAccessGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_ListAccessGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).ListAccessGroups(ctx, req.(*ListAccessGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_CreateAccessGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateAccessGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateAccessGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateAccessGroup(ctx, req.(*CreateAccessGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateAccessGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateAccessGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateAccessGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateAccessGroup(ctx, req.(*UpdateAccessGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteAccessGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteAccessGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteAccessGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteAccessGroup(ctx, req.(*DeleteAccessGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Billing_ServiceDesc is the grpc.ServiceDesc for Billing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Billing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.billing.v1.Billing",
	HandlerType: (*BillingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBillingGroup",
			Handler:    _Billing_CreateBillingGroup_Handler,
		},
		{
			MethodName: "GetBillingGroup",
			Handler:    _Billing_GetBillingGroup_Handler,
		},
		{
			MethodName: "GetAccessGroup",
			Handler:    _Billing_GetAccessGroup_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _Billing_CreateInvoice_Handler,
		},
		{
			MethodName: "GetInvoiceStatus",
			Handler:    _Billing_GetInvoiceStatus_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _Billing_GetInvoice_Handler,
		},
		{
			MethodName: "UpdateInvoicePreviews",
			Handler:    _Billing_UpdateInvoicePreviews_Handler,
		},
		{
			MethodName: "ExportInvoiceFile",
			Handler:    _Billing_ExportInvoiceFile_Handler,
		},
		{
			MethodName: "CreateAccountInvoiceServiceDiscounts",
			Handler:    _Billing_CreateAccountInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "UpdateAccountInvoiceServiceDiscounts",
			Handler:    _Billing_UpdateAccountInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "RemoveAccountInvoiceServiceDiscounts",
			Handler:    _Billing_RemoveAccountInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "DeleteAccountInvoiceServiceDiscounts",
			Handler:    _Billing_DeleteAccountInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "CreateReseller",
			Handler:    _Billing_CreateReseller_Handler,
		},
		{
			MethodName: "GetReseller",
			Handler:    _Billing_GetReseller_Handler,
		},
		{
			MethodName: "UpdateReseller",
			Handler:    _Billing_UpdateReseller_Handler,
		},
		{
			MethodName: "DeleteReseller",
			Handler:    _Billing_DeleteReseller_Handler,
		},
		{
			MethodName: "GetBillingSetting",
			Handler:    _Billing_GetBillingSetting_Handler,
		},
		{
			MethodName: "ListExchangeRates",
			Handler:    _Billing_ListExchangeRates_Handler,
		},
		{
			MethodName: "ListAccessGroups",
			Handler:    _Billing_ListAccessGroups_Handler,
		},
		{
			MethodName: "CreateAccessGroup",
			Handler:    _Billing_CreateAccessGroup_Handler,
		},
		{
			MethodName: "UpdateAccessGroup",
			Handler:    _Billing_UpdateAccessGroup_Handler,
		},
		{
			MethodName: "DeleteAccessGroup",
			Handler:    _Billing_DeleteAccessGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBillingGroups",
			Handler:       _Billing_ListBillingGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAwsDailyRunHistory",
			Handler:       _Billing_ListAwsDailyRunHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUsageCostsDrift",
			Handler:       _Billing_ListUsageCostsDrift_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListInvoiceServiceDiscounts",
			Handler:       _Billing_ListInvoiceServiceDiscounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAccountInvoiceServiceDiscounts",
			Handler:       _Billing_ListAccountInvoiceServiceDiscounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListResellers",
			Handler:       _Billing_ListResellers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "billing/v1/billing.proto",
}
