// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: billing/v1/billing.proto

package billing

import (
	context "context"
	api "github.com/alphauslabs/blue-sdk-go/api"
	ripple "github.com/alphauslabs/blue-sdk-go/api/ripple"
	v1 "github.com/alphauslabs/blue-sdk-go/api/ripple/v1"
	wave "github.com/alphauslabs/blue-sdk-go/api/wave"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Billing_ListBillingGroups_FullMethodName                          = "/blueapi.billing.v1.Billing/ListBillingGroups"
	Billing_CreateBillingGroup_FullMethodName                         = "/blueapi.billing.v1.Billing/CreateBillingGroup"
	Billing_CreateBillingGroupMerged_FullMethodName                   = "/blueapi.billing.v1.Billing/CreateBillingGroupMerged"
	Billing_DeleteBillinGroup_FullMethodName                          = "/blueapi.billing.v1.Billing/DeleteBillinGroup"
	Billing_AddAccountToBillingGroup_FullMethodName                   = "/blueapi.billing.v1.Billing/AddAccountToBillingGroup"
	Billing_GetBillingGroup_FullMethodName                            = "/blueapi.billing.v1.Billing/GetBillingGroup"
	Billing_GetAccessGroup_FullMethodName                             = "/blueapi.billing.v1.Billing/GetAccessGroup"
	Billing_ListAwsDailyRunHistory_FullMethodName                     = "/blueapi.billing.v1.Billing/ListAwsDailyRunHistory"
	Billing_ListUsageCostsDrift_FullMethodName                        = "/blueapi.billing.v1.Billing/ListUsageCostsDrift"
	Billing_CreateInvoice_FullMethodName                              = "/blueapi.billing.v1.Billing/CreateInvoice"
	Billing_CreateInvoiceWithSettings_FullMethodName                  = "/blueapi.billing.v1.Billing/CreateInvoiceWithSettings"
	Billing_SaveInvoiceSettings_FullMethodName                        = "/blueapi.billing.v1.Billing/SaveInvoiceSettings"
	Billing_GetInvoiceStatus_FullMethodName                           = "/blueapi.billing.v1.Billing/GetInvoiceStatus"
	Billing_ListInvoiceStatus_FullMethodName                          = "/blueapi.billing.v1.Billing/ListInvoiceStatus"
	Billing_GetInvoice_FullMethodName                                 = "/blueapi.billing.v1.Billing/GetInvoice"
	Billing_ListInvoice_FullMethodName                                = "/blueapi.billing.v1.Billing/ListInvoice"
	Billing_UpdateInvoicePreviews_FullMethodName                      = "/blueapi.billing.v1.Billing/UpdateInvoicePreviews"
	Billing_ExportInvoiceFile_FullMethodName                          = "/blueapi.billing.v1.Billing/ExportInvoiceFile"
	Billing_ListInvoiceTemplate_FullMethodName                        = "/blueapi.billing.v1.Billing/ListInvoiceTemplate"
	Billing_GetInvoiceDisplaySettings_FullMethodName                  = "/blueapi.billing.v1.Billing/GetInvoiceDisplaySettings"
	Billing_UpdateBillingGroupInvoiceTemplate_FullMethodName          = "/blueapi.billing.v1.Billing/UpdateBillingGroupInvoiceTemplate"
	Billing_ReadServiceDiscountsServices_FullMethodName               = "/blueapi.billing.v1.Billing/ReadServiceDiscountsServices"
	Billing_CreateInvoiceServiceDiscounts_FullMethodName              = "/blueapi.billing.v1.Billing/CreateInvoiceServiceDiscounts"
	Billing_UpdateInvoiceServiceDiscounts_FullMethodName              = "/blueapi.billing.v1.Billing/UpdateInvoiceServiceDiscounts"
	Billing_DeleteInvoiceServiceDiscounts_FullMethodName              = "/blueapi.billing.v1.Billing/DeleteInvoiceServiceDiscounts"
	Billing_ListInvoiceServiceDiscounts_FullMethodName                = "/blueapi.billing.v1.Billing/ListInvoiceServiceDiscounts"
	Billing_GetInvoiceServiceDiscounts_FullMethodName                 = "/blueapi.billing.v1.Billing/GetInvoiceServiceDiscounts"
	Billing_ExportServiceDiscounts_FullMethodName                     = "/blueapi.billing.v1.Billing/ExportServiceDiscounts"
	Billing_CreateBillingGroupInvoiceServiceDiscounts_FullMethodName  = "/blueapi.billing.v1.Billing/CreateBillingGroupInvoiceServiceDiscounts"
	Billing_UpdateBillingGroupInvoiceServiceDiscounts_FullMethodName  = "/blueapi.billing.v1.Billing/UpdateBillingGroupInvoiceServiceDiscounts"
	Billing_DeleteBillingGroupInvoiceServiceDiscounts_FullMethodName  = "/blueapi.billing.v1.Billing/DeleteBillingGroupInvoiceServiceDiscounts"
	Billing_ListAccountInvoiceServiceDiscounts_FullMethodName         = "/blueapi.billing.v1.Billing/ListAccountInvoiceServiceDiscounts"
	Billing_CreateAccountInvoiceServiceDiscounts_FullMethodName       = "/blueapi.billing.v1.Billing/CreateAccountInvoiceServiceDiscounts"
	Billing_UpdateAccountInvoiceServiceDiscounts_FullMethodName       = "/blueapi.billing.v1.Billing/UpdateAccountInvoiceServiceDiscounts"
	Billing_RemoveAccountInvoiceServiceDiscounts_FullMethodName       = "/blueapi.billing.v1.Billing/RemoveAccountInvoiceServiceDiscounts"
	Billing_DeleteAccountInvoiceServiceDiscounts_FullMethodName       = "/blueapi.billing.v1.Billing/DeleteAccountInvoiceServiceDiscounts"
	Billing_ExportAccountInvoiceServiceDiscounts_FullMethodName       = "/blueapi.billing.v1.Billing/ExportAccountInvoiceServiceDiscounts"
	Billing_ExportBillingGroupInvoiceServiceDiscounts_FullMethodName  = "/blueapi.billing.v1.Billing/ExportBillingGroupInvoiceServiceDiscounts"
	Billing_GetBillingGroupInvoiceServiceDiscounts_FullMethodName     = "/blueapi.billing.v1.Billing/GetBillingGroupInvoiceServiceDiscounts"
	Billing_CreateReseller_FullMethodName                             = "/blueapi.billing.v1.Billing/CreateReseller"
	Billing_ListResellers_FullMethodName                              = "/blueapi.billing.v1.Billing/ListResellers"
	Billing_GetReseller_FullMethodName                                = "/blueapi.billing.v1.Billing/GetReseller"
	Billing_UpdateReseller_FullMethodName                             = "/blueapi.billing.v1.Billing/UpdateReseller"
	Billing_DeleteReseller_FullMethodName                             = "/blueapi.billing.v1.Billing/DeleteReseller"
	Billing_GetBillingSetting_FullMethodName                          = "/blueapi.billing.v1.Billing/GetBillingSetting"
	Billing_ListExchangeRates_FullMethodName                          = "/blueapi.billing.v1.Billing/ListExchangeRates"
	Billing_SetGlobalExchangeRate_FullMethodName                      = "/blueapi.billing.v1.Billing/SetGlobalExchangeRate"
	Billing_SetPayerExchangeRate_FullMethodName                       = "/blueapi.billing.v1.Billing/SetPayerExchangeRate"
	Billing_SetBillingGroupExchangeRate_FullMethodName                = "/blueapi.billing.v1.Billing/SetBillingGroupExchangeRate"
	Billing_ListAccessGroups_FullMethodName                           = "/blueapi.billing.v1.Billing/ListAccessGroups"
	Billing_CreateAccessGroup_FullMethodName                          = "/blueapi.billing.v1.Billing/CreateAccessGroup"
	Billing_UpdateAccessGroup_FullMethodName                          = "/blueapi.billing.v1.Billing/UpdateAccessGroup"
	Billing_DeleteAccessGroup_FullMethodName                          = "/blueapi.billing.v1.Billing/DeleteAccessGroup"
	Billing_ListAbcBillingGroups_FullMethodName                       = "/blueapi.billing.v1.Billing/ListAbcBillingGroups"
	Billing_ListAbcBillingGroupAccounts_FullMethodName                = "/blueapi.billing.v1.Billing/ListAbcBillingGroupAccounts"
	Billing_ReadInvoiceAdjustments_FullMethodName                     = "/blueapi.billing.v1.Billing/ReadInvoiceAdjustments"
	Billing_ReadAdjustmentEntries_FullMethodName                      = "/blueapi.billing.v1.Billing/ReadAdjustmentEntries"
	Billing_GetAdjustmentEntry_FullMethodName                         = "/blueapi.billing.v1.Billing/GetAdjustmentEntry"
	Billing_ApplyAdjustmentEntry_FullMethodName                       = "/blueapi.billing.v1.Billing/ApplyAdjustmentEntry"
	Billing_RestoreAdjustmentEntry_FullMethodName                     = "/blueapi.billing.v1.Billing/RestoreAdjustmentEntry"
	Billing_SplitAdjustmentEntry_FullMethodName                       = "/blueapi.billing.v1.Billing/SplitAdjustmentEntry"
	Billing_AllocateAdjustmentEntry_FullMethodName                    = "/blueapi.billing.v1.Billing/AllocateAdjustmentEntry"
	Billing_RestoreSplitAdjustmentEntry_FullMethodName                = "/blueapi.billing.v1.Billing/RestoreSplitAdjustmentEntry"
	Billing_RestoreAllocateAdjustmentEntry_FullMethodName             = "/blueapi.billing.v1.Billing/RestoreAllocateAdjustmentEntry"
	Billing_ListAccountResources_FullMethodName                       = "/blueapi.billing.v1.Billing/ListAccountResources"
	Billing_GetAdjustmentConfig_FullMethodName                        = "/blueapi.billing.v1.Billing/GetAdjustmentConfig"
	Billing_CreateAdjustmentConfig_FullMethodName                     = "/blueapi.billing.v1.Billing/CreateAdjustmentConfig"
	Billing_UpdateAdjustmentConfig_FullMethodName                     = "/blueapi.billing.v1.Billing/UpdateAdjustmentConfig"
	Billing_DeleteAdjustmentConfig_FullMethodName                     = "/blueapi.billing.v1.Billing/DeleteAdjustmentConfig"
	Billing_ReadUntaggedGroups_FullMethodName                         = "/blueapi.billing.v1.Billing/ReadUntaggedGroups"
	Billing_ReadCustomizedBillingServices_FullMethodName              = "/blueapi.billing.v1.Billing/ReadCustomizedBillingServices"
	Billing_GetCustomizedBillingService_FullMethodName                = "/blueapi.billing.v1.Billing/GetCustomizedBillingService"
	Billing_CreateCustomizedBillingService_FullMethodName             = "/blueapi.billing.v1.Billing/CreateCustomizedBillingService"
	Billing_UpdateCustomizedBillingService_FullMethodName             = "/blueapi.billing.v1.Billing/UpdateCustomizedBillingService"
	Billing_DeleteCustomizedBillingService_FullMethodName             = "/blueapi.billing.v1.Billing/DeleteCustomizedBillingService"
	Billing_GetCustomizedBillingServiceBillingGroup_FullMethodName    = "/blueapi.billing.v1.Billing/GetCustomizedBillingServiceBillingGroup"
	Billing_SetCustomizedBillingServiceBillingGroup_FullMethodName    = "/blueapi.billing.v1.Billing/SetCustomizedBillingServiceBillingGroup"
	Billing_DeleteCustomizedBillingServiceBillingGroup_FullMethodName = "/blueapi.billing.v1.Billing/DeleteCustomizedBillingServiceBillingGroup"
	Billing_GetTags_FullMethodName                                    = "/blueapi.billing.v1.Billing/GetTags"
	Billing_CreateCustomField_FullMethodName                          = "/blueapi.billing.v1.Billing/CreateCustomField"
	Billing_ListCustomField_FullMethodName                            = "/blueapi.billing.v1.Billing/ListCustomField"
	Billing_AddBillingGroupCustomField_FullMethodName                 = "/blueapi.billing.v1.Billing/AddBillingGroupCustomField"
	Billing_ListBillingGroupCustomField_FullMethodName                = "/blueapi.billing.v1.Billing/ListBillingGroupCustomField"
	Billing_AddTagsToBillingGroup_FullMethodName                      = "/blueapi.billing.v1.Billing/AddTagsToBillingGroup"
	Billing_UpdateNonTagGroupToBillingGroup_FullMethodName            = "/blueapi.billing.v1.Billing/UpdateNonTagGroupToBillingGroup"
	Billing_DeleteBillingGroupCustomField_FullMethodName              = "/blueapi.billing.v1.Billing/DeleteBillingGroupCustomField"
	Billing_UpdateCustomField_FullMethodName                          = "/blueapi.billing.v1.Billing/UpdateCustomField"
	Billing_DeleteCustomField_FullMethodName                          = "/blueapi.billing.v1.Billing/DeleteCustomField"
	Billing_CreateFreeFormat_FullMethodName                           = "/blueapi.billing.v1.Billing/CreateFreeFormat"
	Billing_DeleteFreeFormat_FullMethodName                           = "/blueapi.billing.v1.Billing/DeleteFreeFormat"
	Billing_GetFreeFormat_FullMethodName                              = "/blueapi.billing.v1.Billing/GetFreeFormat"
	Billing_GetTagsAddingSetting_FullMethodName                       = "/blueapi.billing.v1.Billing/GetTagsAddingSetting"
	Billing_UpdateTagsAddingSetting_FullMethodName                    = "/blueapi.billing.v1.Billing/UpdateTagsAddingSetting"
	Billing_ExportBillingGroupCsv_FullMethodName                      = "/blueapi.billing.v1.Billing/ExportBillingGroupCsv"
	Billing_ExportInvoiceSettingCsv_FullMethodName                    = "/blueapi.billing.v1.Billing/ExportInvoiceSettingCsv"
	Billing_UpdateBillingGroupBasicInformation_FullMethodName         = "/blueapi.billing.v1.Billing/UpdateBillingGroupBasicInformation"
	Billing_UpdateBillingGroupCustomFields_FullMethodName             = "/blueapi.billing.v1.Billing/UpdateBillingGroupCustomFields"
	Billing_GetBillingGroupAccountSupportPlan_FullMethodName          = "/blueapi.billing.v1.Billing/GetBillingGroupAccountSupportPlan"
	Billing_UpdateBillingGroupAccountSupportPlan_FullMethodName       = "/blueapi.billing.v1.Billing/UpdateBillingGroupAccountSupportPlan"
)

// BillingClient is the client API for Billing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Billing service definition.
type BillingClient interface {
	// Lists all billing groups.
	ListBillingGroups(ctx context.Context, in *ListBillingGroupsRequest, opts ...grpc.CallOption) (Billing_ListBillingGroupsClient, error)
	// Registers a billing group.
	CreateBillingGroup(ctx context.Context, in *CreateBillingGroupRequest, opts ...grpc.CallOption) (*BillingGroup, error)
	// Registers a billing group with Merged Endpoints. Only available in Ripple. WORK IN PROGRESS
	CreateBillingGroupMerged(ctx context.Context, in *CreateBillingGroupMergedRequest, opts ...grpc.CallOption) (*BillingGroup, error)
	// Delete a billing group.
	DeleteBillinGroup(ctx context.Context, in *DeleteBillingGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Add a vendor account to a billing group.
	AddAccountToBillingGroup(ctx context.Context, in *AddAccountToBillingGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets a billing group.
	GetBillingGroup(ctx context.Context, in *GetBillingGroupRequest, opts ...grpc.CallOption) (*GetBillingGroupResponse, error)
	// WORK-IN-PROGRESS: Gets an access group.
	GetAccessGroup(ctx context.Context, in *GetAccessGroupRequest, opts ...grpc.CallOption) (*GetAccessGroupResponse, error)
	// Reads the daily calculation history of all accounts in your billing groups. Only available in Ripple.
	ListAwsDailyRunHistory(ctx context.Context, in *ListAwsDailyRunHistoryRequest, opts ...grpc.CallOption) (Billing_ListAwsDailyRunHistoryClient, error)
	// Returns a list of accounts that have been updated after invoice along with the differences in costs, if any. Only available in Ripple.
	ListUsageCostsDrift(ctx context.Context, in *ListUsageCostsDriftRequest, opts ...grpc.CallOption) (Billing_ListUsageCostsDriftClient, error)
	// Creates an invoice. Only available in Ripple.
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*api.InvoiceMessage, error)
	// Creates an invoice and add settings. Only available in Ripple.
	CreateInvoiceWithSettings(ctx context.Context, in *SaveInvoiceSettingsRequest, opts ...grpc.CallOption) (*api.InvoiceMessage, error)
	// WORK-IN-PROGRESS: Save invoice settings for the month
	SaveInvoiceSettings(ctx context.Context, in *SaveInvoiceSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets an invoice. Only available in Ripple.
	GetInvoiceStatus(ctx context.Context, in *GetInvoiceStatusRequest, opts ...grpc.CallOption) (*api.InvoiceMessage, error)
	// Reads an invoice status. Only available in Ripple.
	ListInvoiceStatus(ctx context.Context, in *ListInvoiceStatusRequest, opts ...grpc.CallOption) (Billing_ListInvoiceStatusClient, error)
	// Gets an invoice.
	GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*api.Invoice, error)
	// WORK-IN-PROGRESS: Reads list of the invoice.
	ListInvoice(ctx context.Context, in *ListInvoiceRequest, opts ...grpc.CallOption) (Billing_ListInvoiceClient, error)
	// Updates an invoice preview. Only available in Ripple.
	UpdateInvoicePreviews(ctx context.Context, in *UpdateInvoicePreviewsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Exports an invoice.
	ExportInvoiceFile(ctx context.Context, in *ExportInvoiceFileRequest, opts ...grpc.CallOption) (*ExportInvoiceFileResponse, error)
	// Lists Invoice Template. Only available in Ripple.
	ListInvoiceTemplate(ctx context.Context, in *ListInvoiceTemplateRequest, opts ...grpc.CallOption) (Billing_ListInvoiceTemplateClient, error)
	// WORK-IN-PROGRESS: Gets the invoice display settings for invoice-ui
	GetInvoiceDisplaySettings(ctx context.Context, in *GetInvoiceDisplaySettingsRequest, opts ...grpc.CallOption) (*GetInvoiceDisplaySettingsResponse, error)
	// Creates/Updates a billing group's invoice template. Only available in Ripple.
	UpdateBillingGroupInvoiceTemplate(ctx context.Context, in *UpdateBillingGroupInvoiceTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Reads the service relate to the service discounts. Only available in Ripple.
	ReadServiceDiscountsServices(ctx context.Context, in *ReadServiceDiscountsServicesRequest, opts ...grpc.CallOption) (Billing_ReadServiceDiscountsServicesClient, error)
	// Creates the invoice service discounts. Only available in Ripple.
	CreateInvoiceServiceDiscounts(ctx context.Context, in *CreateInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*v1.InvoiceServiceDiscounts, error)
	// Updates the invoice service discounts. Only available in Ripple.
	UpdateInvoiceServiceDiscounts(ctx context.Context, in *UpdateInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*v1.InvoiceServiceDiscounts, error)
	// Deletes the invoice service discounts. Only available in Ripple.
	DeleteInvoiceServiceDiscounts(ctx context.Context, in *DeleteInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Reads the invoice service discounts. Only available in Ripple.
	ListInvoiceServiceDiscounts(ctx context.Context, in *ListInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (Billing_ListInvoiceServiceDiscountsClient, error)
	// Gets the invoice service discounts. Only available in Ripple.
	GetInvoiceServiceDiscounts(ctx context.Context, in *GetInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*v1.InvoiceServiceDiscounts, error)
	// WORK-IN-PROGRESS: Exports service discounts. Only available in Ripple.
	ExportServiceDiscounts(ctx context.Context, in *ExportServiceDiscountsRequest, opts ...grpc.CallOption) (*v1.ServiceDiscountsExport, error)
	// WORK-IN-PROGRESS: Registers the billing group invoice service discounts. Only available in Ripple.
	CreateBillingGroupInvoiceServiceDiscounts(ctx context.Context, in *CreateBillingGroupInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*CreateBillingGroupInvoiceServiceDiscountsResponse, error)
	// WORK-IN-PROGRESS: Updates the billing group invoice service discounts. Only available in Ripple.
	UpdateBillingGroupInvoiceServiceDiscounts(ctx context.Context, in *UpdateBillingGroupInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*UpdateBillingGroupInvoiceServiceDiscountsResponse, error)
	// WORK-IN-PROGRESS: Deletes the billing group invoice service discounts. Only available in Ripple.
	DeleteBillingGroupInvoiceServiceDiscounts(ctx context.Context, in *DeleteBillingGroupInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Reads the account invoice service discounts. Only available in Ripple.
	ListAccountInvoiceServiceDiscounts(ctx context.Context, in *ListAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (Billing_ListAccountInvoiceServiceDiscountsClient, error)
	// Registers the account invoice service discounts. Only available in Ripple.
	CreateAccountInvoiceServiceDiscounts(ctx context.Context, in *CreateAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*CreateAccountInvoiceServiceDiscountsResponse, error)
	// Updates the account invoice service discounts. Only available in Ripple.
	UpdateAccountInvoiceServiceDiscounts(ctx context.Context, in *UpdateAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*UpdateAccountInvoiceServiceDiscountsResponse, error)
	// Removes the account invoice service discounts. Only available in Ripple.
	RemoveAccountInvoiceServiceDiscounts(ctx context.Context, in *RemoveAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes the account invoice service discounts. Only available in Ripple.
	DeleteAccountInvoiceServiceDiscounts(ctx context.Context, in *DeleteAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Exports service discounts for account in billing group. Only available in Ripple.
	ExportAccountInvoiceServiceDiscounts(ctx context.Context, in *ExportAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*v1.AccountServiceDiscountsExport, error)
	// Exports service discounts for billing group. Only available in Ripple.
	ExportBillingGroupInvoiceServiceDiscounts(ctx context.Context, in *ExportBillingGroupInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*v1.GroupServiceDiscountsExport, error)
	// Returns the service discount associated with the billing group id
	GetBillingGroupInvoiceServiceDiscounts(ctx context.Context, in *GetBillingGroupInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*GetBillingGroupInvoiceServiceDiscountsResponse, error)
	// Registers the reseller account. Only available in Ripple.
	CreateReseller(ctx context.Context, in *CreateResellerRequest, opts ...grpc.CallOption) (*ripple.Reseller, error)
	// ListResellers
	//
	// **Lists all the reseller accounts.**
	// > **Only available in Ripple.**
	ListResellers(ctx context.Context, in *ListResellersRequest, opts ...grpc.CallOption) (Billing_ListResellersClient, error)
	// Gets the reseller account. Only available in Ripple.
	GetReseller(ctx context.Context, in *GetResellerRequest, opts ...grpc.CallOption) (*ripple.Reseller, error)
	// Updates the reseller account. Only available in Ripple.
	UpdateReseller(ctx context.Context, in *UpdateResellerRequest, opts ...grpc.CallOption) (*ripple.Reseller, error)
	// Deletes the reseller account. Only available in Ripple.
	DeleteReseller(ctx context.Context, in *DeleteResellerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Gets all billing settings.
	GetBillingSetting(ctx context.Context, in *GetBillingSettingRequest, opts ...grpc.CallOption) (*GetBillingSettingResponse, error)
	// ListExchangeRates
	//
	// Lists all exchange rate.
	// > Only available in Ripple.
	ListExchangeRates(ctx context.Context, in *ListExchangeRatesRequest, opts ...grpc.CallOption) (*ListExchangeRatesResponse, error)
	// Set global exchangerate. Only available in Ripple.
	SetGlobalExchangeRate(ctx context.Context, in *SetGlobalExchangeRateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Set payer exchangerate. Only available in Ripple.
	SetPayerExchangeRate(ctx context.Context, in *SetPayerExchangeRateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Set billing group exchangerate. Only available in Ripple.
	SetBillingGroupExchangeRate(ctx context.Context, in *SetBillingGroupExchangeRateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists access group. Only available in Ripple.
	ListAccessGroups(ctx context.Context, in *ListAccessGroupsRequest, opts ...grpc.CallOption) (Billing_ListAccessGroupsClient, error)
	// Registers the access group. Only available in Ripple.
	CreateAccessGroup(ctx context.Context, in *CreateAccessGroupRequest, opts ...grpc.CallOption) (*ripple.AccessGroup, error)
	// Updates the access group. Only available in Ripple.
	UpdateAccessGroup(ctx context.Context, in *UpdateAccessGroupRequest, opts ...grpc.CallOption) (*ripple.AccessGroup, error)
	// Deletes the access group. Only available in Ripple.
	DeleteAccessGroup(ctx context.Context, in *DeleteAccessGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Gets all Billing Groups in AWS Billing Conductor(ABC) for specific payer id.
	ListAbcBillingGroups(ctx context.Context, in *ListAbcBillingGroupsRequest, opts ...grpc.CallOption) (Billing_ListAbcBillingGroupsClient, error)
	// WORK-IN-PROGRESS: Gets all accounts associated to AWS Billing Conductor(ABC) Billing group
	ListAbcBillingGroupAccounts(ctx context.Context, in *ListAbcBillingGroupAccountsRequest, opts ...grpc.CallOption) (Billing_ListAbcBillingGroupAccountsClient, error)
	// Reads the adjustment details involved in invoicing of an organization billing group (Wave).
	ReadInvoiceAdjustments(ctx context.Context, in *ReadInvoiceAdjustmentsRequest, opts ...grpc.CallOption) (Billing_ReadInvoiceAdjustmentsClient, error)
	// WORK-IN-PROGRESS: Reads the adjustment entries. Only available in Ripple.
	ReadAdjustmentEntries(ctx context.Context, in *ReadAdjustmentEntriesRequest, opts ...grpc.CallOption) (Billing_ReadAdjustmentEntriesClient, error)
	// WORK-IN-PROGRESS: Gets the adjustment entry. Only available in Ripple.
	GetAdjustmentEntry(ctx context.Context, in *GetAdjustmentEntryRequest, opts ...grpc.CallOption) (*v1.AdjustmentEntry, error)
	// WORK-IN-PROGRESS: Applies the adjustment entry item. Only available in Ripple.
	ApplyAdjustmentEntry(ctx context.Context, in *ApplyAdjustmentEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Restores the adjustment entry item. Only available in Ripple.
	RestoreAdjustmentEntry(ctx context.Context, in *RestoreAdjustmentEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Splits the adjustment entry item. Only available in Ripple.
	SplitAdjustmentEntry(ctx context.Context, in *SplitAdjustmentEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Allocates the adjustment entry item. Only available in Ripple.
	AllocateAdjustmentEntry(ctx context.Context, in *AllocateAdjustmentEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Restores the splitted adjustment entry item. Only available in Ripple.
	RestoreSplitAdjustmentEntry(ctx context.Context, in *RestoreSplitAdjustmentEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Restores the allocate adjustment entry item. Only available in Ripple.
	RestoreAllocateAdjustmentEntry(ctx context.Context, in *RestoreAllocateAdjustmentEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Returns all registered accounts that are not associated to any billing groups and accounts found in CUR for the specified month. For Ripple only
	ListAccountResources(ctx context.Context, in *ListAccountResourcesRequest, opts ...grpc.CallOption) (Billing_ListAccountResourcesClient, error)
	// Gets adjustment config
	GetAdjustmentConfig(ctx context.Context, in *GetAdjustmentConfigRequest, opts ...grpc.CallOption) (*api.AdjustmentConfig, error)
	// Creates adjustment config
	//
	// [ERRORS]
	// - InvalidArgument:
	//   - the AdjustmentConfig is already exists.
	//
	// - NotFound:
	//   - the AdjustmentConfig is not found.
	CreateAdjustmentConfig(ctx context.Context, in *CreateAdjustmentConfigRequest, opts ...grpc.CallOption) (*api.AdjustmentConfig, error)
	// Updates adjustment config
	UpdateAdjustmentConfig(ctx context.Context, in *UpdateAdjustmentConfigRequest, opts ...grpc.CallOption) (*api.AdjustmentConfig, error)
	// Deletes adjustment config
	DeleteAdjustmentConfig(ctx context.Context, in *DeleteAdjustmentConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Reads the untagged group. Only available in Ripple.
	ReadUntaggedGroups(ctx context.Context, in *ReadUntaggedGroupsRequest, opts ...grpc.CallOption) (Billing_ReadUntaggedGroupsClient, error)
	// Reads the customized billing service. Only available in Ripple.
	ReadCustomizedBillingServices(ctx context.Context, in *ReadCustomizedBillingServicesRequest, opts ...grpc.CallOption) (Billing_ReadCustomizedBillingServicesClient, error)
	// Gets the customized billing service. Only available in Ripple.
	GetCustomizedBillingService(ctx context.Context, in *GetCustomizedBillingServiceRequest, opts ...grpc.CallOption) (*ripple.CustomizedBillingService, error)
	// Creates the customized billing service. Only available in Ripple.
	CreateCustomizedBillingService(ctx context.Context, in *CreateCustomizedBillingServiceRequest, opts ...grpc.CallOption) (*ripple.CustomizedBillingService, error)
	// Updates the customized billing service by updating the fields specified in the update mask. Only available in Ripple.
	UpdateCustomizedBillingService(ctx context.Context, in *UpdateCustomizedBillingServiceRequest, opts ...grpc.CallOption) (*ripple.CustomizedBillingService, error)
	// Deletes the customized billing service. Only available in Ripple.
	DeleteCustomizedBillingService(ctx context.Context, in *DeleteCustomizedBillingServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets the customized billing service in billing group. Only available in Ripple.
	GetCustomizedBillingServiceBillingGroup(ctx context.Context, in *GetCustomizedBillingServiceBillingGroupRequest, opts ...grpc.CallOption) (Billing_GetCustomizedBillingServiceBillingGroupClient, error)
	// Sets the customized billing service in billing group. Only available in Ripple.
	SetCustomizedBillingServiceBillingGroup(ctx context.Context, in *SetCustomizedBillingServiceBillingGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes the customized billing service in billing group. Only available in Ripple.
	DeleteCustomizedBillingServiceBillingGroup(ctx context.Context, in *DeleteCustomizedBillingServiceBillingGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns the customer details and its tags.
	// Port for: m/ripple/tags/vendor/{vendor}?type={type}
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (Billing_GetTagsClient, error)
	// Creates new customfield
	CreateCustomField(ctx context.Context, in *CreateCustomFieldRequest, opts ...grpc.CallOption) (*CustomField, error)
	// Returns all registered customfields
	ListCustomField(ctx context.Context, in *ListCustomFieldRequest, opts ...grpc.CallOption) (Billing_ListCustomFieldClient, error)
	// Add  a custom field into a billing group
	AddBillingGroupCustomField(ctx context.Context, in *AddBillingGroupCustomFieldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Show all the billing groups custom fields
	ListBillingGroupCustomField(ctx context.Context, in *ListBillingGroupCustomFieldRequest, opts ...grpc.CallOption) (Billing_ListBillingGroupCustomFieldClient, error)
	// Add Tags to the billing group
	AddTagsToBillingGroup(ctx context.Context, in *AddTagsToBillingGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Sets non-tag group settings for a billing group.
	UpdateNonTagGroupToBillingGroup(ctx context.Context, in *UpdateNonTagGroupToBillingGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Remove a custom field from a billing group
	DeleteBillingGroupCustomField(ctx context.Context, in *DeleteBillingGroupCustomFieldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update the `customField` specified id, modifying its key and description
	UpdateCustomField(ctx context.Context, in *UpdateCustomFieldRequest, opts ...grpc.CallOption) (*CustomField, error)
	// Deletes the customfield
	DeleteCustomField(ctx context.Context, in *DeleteCustomFieldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates new billing group free format item (miscellaneous)
	CreateFreeFormat(ctx context.Context, in *CreateFreeFormatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete billing group free format item (miscellaneous)
	DeleteFreeFormat(ctx context.Context, in *DeleteFreeFormatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get billing group free format item (miscellaneous)
	GetFreeFormat(ctx context.Context, in *GetFreeFormatRequest, opts ...grpc.CallOption) (Billing_GetFreeFormatClient, error)
	GetTagsAddingSetting(ctx context.Context, in *GetTagsAddingSettingRequest, opts ...grpc.CallOption) (Billing_GetTagsAddingSettingClient, error)
	UpdateTagsAddingSetting(ctx context.Context, in *UpdateTagsAddingSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Export the billing groups into csv format
	ExportBillingGroupCsv(ctx context.Context, in *ExportBillingGroupCsvRequest, opts ...grpc.CallOption) (*ExportBillingGroupCsvResponse, error)
	// Exports the invoice settings into csv format
	ExportInvoiceSettingCsv(ctx context.Context, in *ExportInvoiceSettingCsvRequest, opts ...grpc.CallOption) (*ExportInvoiceSettingCsvResponse, error)
	// Update billing group basic information
	UpdateBillingGroupBasicInformation(ctx context.Context, in *UpdateBillingGroupBasicInformationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update billing group basic information
	UpdateBillingGroupCustomFields(ctx context.Context, in *UpdateBillingGroupCustomFieldsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Gets the account support plan in billing group. Only available in Ripple.
	GetBillingGroupAccountSupportPlan(ctx context.Context, in *GetBillingGroupAccountSupportPlanRequest, opts ...grpc.CallOption) (*GetBillingGroupAccountSupportPlanResponse, error)
	// WORK-IN-PROGRESS: Updates the account support plan in billing group. Only available in Ripple.
	UpdateBillingGroupAccountSupportPlan(ctx context.Context, in *UpdateBillingGroupAccountSupportPlanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type billingClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingClient(cc grpc.ClientConnInterface) BillingClient {
	return &billingClient{cc}
}

func (c *billingClient) ListBillingGroups(ctx context.Context, in *ListBillingGroupsRequest, opts ...grpc.CallOption) (Billing_ListBillingGroupsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[0], Billing_ListBillingGroups_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListBillingGroupsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListBillingGroupsClient interface {
	Recv() (*BillingGroup, error)
	grpc.ClientStream
}

type billingListBillingGroupsClient struct {
	grpc.ClientStream
}

func (x *billingListBillingGroupsClient) Recv() (*BillingGroup, error) {
	m := new(BillingGroup)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) CreateBillingGroup(ctx context.Context, in *CreateBillingGroupRequest, opts ...grpc.CallOption) (*BillingGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BillingGroup)
	err := c.cc.Invoke(ctx, Billing_CreateBillingGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) CreateBillingGroupMerged(ctx context.Context, in *CreateBillingGroupMergedRequest, opts ...grpc.CallOption) (*BillingGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BillingGroup)
	err := c.cc.Invoke(ctx, Billing_CreateBillingGroupMerged_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteBillinGroup(ctx context.Context, in *DeleteBillingGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteBillinGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) AddAccountToBillingGroup(ctx context.Context, in *AddAccountToBillingGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_AddAccountToBillingGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) GetBillingGroup(ctx context.Context, in *GetBillingGroupRequest, opts ...grpc.CallOption) (*GetBillingGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBillingGroupResponse)
	err := c.cc.Invoke(ctx, Billing_GetBillingGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) GetAccessGroup(ctx context.Context, in *GetAccessGroupRequest, opts ...grpc.CallOption) (*GetAccessGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccessGroupResponse)
	err := c.cc.Invoke(ctx, Billing_GetAccessGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListAwsDailyRunHistory(ctx context.Context, in *ListAwsDailyRunHistoryRequest, opts ...grpc.CallOption) (Billing_ListAwsDailyRunHistoryClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[1], Billing_ListAwsDailyRunHistory_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListAwsDailyRunHistoryClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListAwsDailyRunHistoryClient interface {
	Recv() (*AwsDailyRunHistory, error)
	grpc.ClientStream
}

type billingListAwsDailyRunHistoryClient struct {
	grpc.ClientStream
}

func (x *billingListAwsDailyRunHistoryClient) Recv() (*AwsDailyRunHistory, error) {
	m := new(AwsDailyRunHistory)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) ListUsageCostsDrift(ctx context.Context, in *ListUsageCostsDriftRequest, opts ...grpc.CallOption) (Billing_ListUsageCostsDriftClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[2], Billing_ListUsageCostsDrift_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListUsageCostsDriftClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListUsageCostsDriftClient interface {
	Recv() (*UsageCostsDrift, error)
	grpc.ClientStream
}

type billingListUsageCostsDriftClient struct {
	grpc.ClientStream
}

func (x *billingListUsageCostsDriftClient) Recv() (*UsageCostsDrift, error) {
	m := new(UsageCostsDrift)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*api.InvoiceMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.InvoiceMessage)
	err := c.cc.Invoke(ctx, Billing_CreateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) CreateInvoiceWithSettings(ctx context.Context, in *SaveInvoiceSettingsRequest, opts ...grpc.CallOption) (*api.InvoiceMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.InvoiceMessage)
	err := c.cc.Invoke(ctx, Billing_CreateInvoiceWithSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) SaveInvoiceSettings(ctx context.Context, in *SaveInvoiceSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_SaveInvoiceSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) GetInvoiceStatus(ctx context.Context, in *GetInvoiceStatusRequest, opts ...grpc.CallOption) (*api.InvoiceMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.InvoiceMessage)
	err := c.cc.Invoke(ctx, Billing_GetInvoiceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListInvoiceStatus(ctx context.Context, in *ListInvoiceStatusRequest, opts ...grpc.CallOption) (Billing_ListInvoiceStatusClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[3], Billing_ListInvoiceStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListInvoiceStatusClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListInvoiceStatusClient interface {
	Recv() (*api.InvoiceMessage, error)
	grpc.ClientStream
}

type billingListInvoiceStatusClient struct {
	grpc.ClientStream
}

func (x *billingListInvoiceStatusClient) Recv() (*api.InvoiceMessage, error) {
	m := new(api.InvoiceMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*api.Invoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.Invoice)
	err := c.cc.Invoke(ctx, Billing_GetInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListInvoice(ctx context.Context, in *ListInvoiceRequest, opts ...grpc.CallOption) (Billing_ListInvoiceClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[4], Billing_ListInvoice_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListInvoiceClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListInvoiceClient interface {
	Recv() (*ListInvoiceResponse, error)
	grpc.ClientStream
}

type billingListInvoiceClient struct {
	grpc.ClientStream
}

func (x *billingListInvoiceClient) Recv() (*ListInvoiceResponse, error) {
	m := new(ListInvoiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) UpdateInvoicePreviews(ctx context.Context, in *UpdateInvoicePreviewsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_UpdateInvoicePreviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ExportInvoiceFile(ctx context.Context, in *ExportInvoiceFileRequest, opts ...grpc.CallOption) (*ExportInvoiceFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportInvoiceFileResponse)
	err := c.cc.Invoke(ctx, Billing_ExportInvoiceFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListInvoiceTemplate(ctx context.Context, in *ListInvoiceTemplateRequest, opts ...grpc.CallOption) (Billing_ListInvoiceTemplateClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[5], Billing_ListInvoiceTemplate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListInvoiceTemplateClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListInvoiceTemplateClient interface {
	Recv() (*ListInvoiceTemplateResponse, error)
	grpc.ClientStream
}

type billingListInvoiceTemplateClient struct {
	grpc.ClientStream
}

func (x *billingListInvoiceTemplateClient) Recv() (*ListInvoiceTemplateResponse, error) {
	m := new(ListInvoiceTemplateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) GetInvoiceDisplaySettings(ctx context.Context, in *GetInvoiceDisplaySettingsRequest, opts ...grpc.CallOption) (*GetInvoiceDisplaySettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceDisplaySettingsResponse)
	err := c.cc.Invoke(ctx, Billing_GetInvoiceDisplaySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateBillingGroupInvoiceTemplate(ctx context.Context, in *UpdateBillingGroupInvoiceTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_UpdateBillingGroupInvoiceTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ReadServiceDiscountsServices(ctx context.Context, in *ReadServiceDiscountsServicesRequest, opts ...grpc.CallOption) (Billing_ReadServiceDiscountsServicesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[6], Billing_ReadServiceDiscountsServices_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingReadServiceDiscountsServicesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ReadServiceDiscountsServicesClient interface {
	Recv() (*v1.Service, error)
	grpc.ClientStream
}

type billingReadServiceDiscountsServicesClient struct {
	grpc.ClientStream
}

func (x *billingReadServiceDiscountsServicesClient) Recv() (*v1.Service, error) {
	m := new(v1.Service)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) CreateInvoiceServiceDiscounts(ctx context.Context, in *CreateInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*v1.InvoiceServiceDiscounts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.InvoiceServiceDiscounts)
	err := c.cc.Invoke(ctx, Billing_CreateInvoiceServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateInvoiceServiceDiscounts(ctx context.Context, in *UpdateInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*v1.InvoiceServiceDiscounts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.InvoiceServiceDiscounts)
	err := c.cc.Invoke(ctx, Billing_UpdateInvoiceServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteInvoiceServiceDiscounts(ctx context.Context, in *DeleteInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteInvoiceServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListInvoiceServiceDiscounts(ctx context.Context, in *ListInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (Billing_ListInvoiceServiceDiscountsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[7], Billing_ListInvoiceServiceDiscounts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListInvoiceServiceDiscountsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListInvoiceServiceDiscountsClient interface {
	Recv() (*InvoiceServiceDiscounts, error)
	grpc.ClientStream
}

type billingListInvoiceServiceDiscountsClient struct {
	grpc.ClientStream
}

func (x *billingListInvoiceServiceDiscountsClient) Recv() (*InvoiceServiceDiscounts, error) {
	m := new(InvoiceServiceDiscounts)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) GetInvoiceServiceDiscounts(ctx context.Context, in *GetInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*v1.InvoiceServiceDiscounts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.InvoiceServiceDiscounts)
	err := c.cc.Invoke(ctx, Billing_GetInvoiceServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ExportServiceDiscounts(ctx context.Context, in *ExportServiceDiscountsRequest, opts ...grpc.CallOption) (*v1.ServiceDiscountsExport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ServiceDiscountsExport)
	err := c.cc.Invoke(ctx, Billing_ExportServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) CreateBillingGroupInvoiceServiceDiscounts(ctx context.Context, in *CreateBillingGroupInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*CreateBillingGroupInvoiceServiceDiscountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBillingGroupInvoiceServiceDiscountsResponse)
	err := c.cc.Invoke(ctx, Billing_CreateBillingGroupInvoiceServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateBillingGroupInvoiceServiceDiscounts(ctx context.Context, in *UpdateBillingGroupInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*UpdateBillingGroupInvoiceServiceDiscountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBillingGroupInvoiceServiceDiscountsResponse)
	err := c.cc.Invoke(ctx, Billing_UpdateBillingGroupInvoiceServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteBillingGroupInvoiceServiceDiscounts(ctx context.Context, in *DeleteBillingGroupInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteBillingGroupInvoiceServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListAccountInvoiceServiceDiscounts(ctx context.Context, in *ListAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (Billing_ListAccountInvoiceServiceDiscountsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[8], Billing_ListAccountInvoiceServiceDiscounts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListAccountInvoiceServiceDiscountsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListAccountInvoiceServiceDiscountsClient interface {
	Recv() (*AccountInvoiceServiceDiscounts, error)
	grpc.ClientStream
}

type billingListAccountInvoiceServiceDiscountsClient struct {
	grpc.ClientStream
}

func (x *billingListAccountInvoiceServiceDiscountsClient) Recv() (*AccountInvoiceServiceDiscounts, error) {
	m := new(AccountInvoiceServiceDiscounts)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) CreateAccountInvoiceServiceDiscounts(ctx context.Context, in *CreateAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*CreateAccountInvoiceServiceDiscountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountInvoiceServiceDiscountsResponse)
	err := c.cc.Invoke(ctx, Billing_CreateAccountInvoiceServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateAccountInvoiceServiceDiscounts(ctx context.Context, in *UpdateAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*UpdateAccountInvoiceServiceDiscountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccountInvoiceServiceDiscountsResponse)
	err := c.cc.Invoke(ctx, Billing_UpdateAccountInvoiceServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) RemoveAccountInvoiceServiceDiscounts(ctx context.Context, in *RemoveAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_RemoveAccountInvoiceServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteAccountInvoiceServiceDiscounts(ctx context.Context, in *DeleteAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteAccountInvoiceServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ExportAccountInvoiceServiceDiscounts(ctx context.Context, in *ExportAccountInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*v1.AccountServiceDiscountsExport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.AccountServiceDiscountsExport)
	err := c.cc.Invoke(ctx, Billing_ExportAccountInvoiceServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ExportBillingGroupInvoiceServiceDiscounts(ctx context.Context, in *ExportBillingGroupInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*v1.GroupServiceDiscountsExport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GroupServiceDiscountsExport)
	err := c.cc.Invoke(ctx, Billing_ExportBillingGroupInvoiceServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) GetBillingGroupInvoiceServiceDiscounts(ctx context.Context, in *GetBillingGroupInvoiceServiceDiscountsRequest, opts ...grpc.CallOption) (*GetBillingGroupInvoiceServiceDiscountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBillingGroupInvoiceServiceDiscountsResponse)
	err := c.cc.Invoke(ctx, Billing_GetBillingGroupInvoiceServiceDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) CreateReseller(ctx context.Context, in *CreateResellerRequest, opts ...grpc.CallOption) (*ripple.Reseller, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ripple.Reseller)
	err := c.cc.Invoke(ctx, Billing_CreateReseller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListResellers(ctx context.Context, in *ListResellersRequest, opts ...grpc.CallOption) (Billing_ListResellersClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[9], Billing_ListResellers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListResellersClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListResellersClient interface {
	Recv() (*ripple.Reseller, error)
	grpc.ClientStream
}

type billingListResellersClient struct {
	grpc.ClientStream
}

func (x *billingListResellersClient) Recv() (*ripple.Reseller, error) {
	m := new(ripple.Reseller)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) GetReseller(ctx context.Context, in *GetResellerRequest, opts ...grpc.CallOption) (*ripple.Reseller, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ripple.Reseller)
	err := c.cc.Invoke(ctx, Billing_GetReseller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateReseller(ctx context.Context, in *UpdateResellerRequest, opts ...grpc.CallOption) (*ripple.Reseller, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ripple.Reseller)
	err := c.cc.Invoke(ctx, Billing_UpdateReseller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteReseller(ctx context.Context, in *DeleteResellerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteReseller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) GetBillingSetting(ctx context.Context, in *GetBillingSettingRequest, opts ...grpc.CallOption) (*GetBillingSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBillingSettingResponse)
	err := c.cc.Invoke(ctx, Billing_GetBillingSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListExchangeRates(ctx context.Context, in *ListExchangeRatesRequest, opts ...grpc.CallOption) (*ListExchangeRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExchangeRatesResponse)
	err := c.cc.Invoke(ctx, Billing_ListExchangeRates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) SetGlobalExchangeRate(ctx context.Context, in *SetGlobalExchangeRateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_SetGlobalExchangeRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) SetPayerExchangeRate(ctx context.Context, in *SetPayerExchangeRateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_SetPayerExchangeRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) SetBillingGroupExchangeRate(ctx context.Context, in *SetBillingGroupExchangeRateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_SetBillingGroupExchangeRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListAccessGroups(ctx context.Context, in *ListAccessGroupsRequest, opts ...grpc.CallOption) (Billing_ListAccessGroupsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[10], Billing_ListAccessGroups_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListAccessGroupsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListAccessGroupsClient interface {
	Recv() (*ripple.AccessGroup, error)
	grpc.ClientStream
}

type billingListAccessGroupsClient struct {
	grpc.ClientStream
}

func (x *billingListAccessGroupsClient) Recv() (*ripple.AccessGroup, error) {
	m := new(ripple.AccessGroup)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) CreateAccessGroup(ctx context.Context, in *CreateAccessGroupRequest, opts ...grpc.CallOption) (*ripple.AccessGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ripple.AccessGroup)
	err := c.cc.Invoke(ctx, Billing_CreateAccessGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateAccessGroup(ctx context.Context, in *UpdateAccessGroupRequest, opts ...grpc.CallOption) (*ripple.AccessGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ripple.AccessGroup)
	err := c.cc.Invoke(ctx, Billing_UpdateAccessGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteAccessGroup(ctx context.Context, in *DeleteAccessGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteAccessGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListAbcBillingGroups(ctx context.Context, in *ListAbcBillingGroupsRequest, opts ...grpc.CallOption) (Billing_ListAbcBillingGroupsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[11], Billing_ListAbcBillingGroups_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListAbcBillingGroupsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListAbcBillingGroupsClient interface {
	Recv() (*AbcBillingGroup, error)
	grpc.ClientStream
}

type billingListAbcBillingGroupsClient struct {
	grpc.ClientStream
}

func (x *billingListAbcBillingGroupsClient) Recv() (*AbcBillingGroup, error) {
	m := new(AbcBillingGroup)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) ListAbcBillingGroupAccounts(ctx context.Context, in *ListAbcBillingGroupAccountsRequest, opts ...grpc.CallOption) (Billing_ListAbcBillingGroupAccountsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[12], Billing_ListAbcBillingGroupAccounts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListAbcBillingGroupAccountsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListAbcBillingGroupAccountsClient interface {
	Recv() (*AbcAccount, error)
	grpc.ClientStream
}

type billingListAbcBillingGroupAccountsClient struct {
	grpc.ClientStream
}

func (x *billingListAbcBillingGroupAccountsClient) Recv() (*AbcAccount, error) {
	m := new(AbcAccount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) ReadInvoiceAdjustments(ctx context.Context, in *ReadInvoiceAdjustmentsRequest, opts ...grpc.CallOption) (Billing_ReadInvoiceAdjustmentsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[13], Billing_ReadInvoiceAdjustments_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingReadInvoiceAdjustmentsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ReadInvoiceAdjustmentsClient interface {
	Recv() (*wave.Adjustment, error)
	grpc.ClientStream
}

type billingReadInvoiceAdjustmentsClient struct {
	grpc.ClientStream
}

func (x *billingReadInvoiceAdjustmentsClient) Recv() (*wave.Adjustment, error) {
	m := new(wave.Adjustment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) ReadAdjustmentEntries(ctx context.Context, in *ReadAdjustmentEntriesRequest, opts ...grpc.CallOption) (Billing_ReadAdjustmentEntriesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[14], Billing_ReadAdjustmentEntries_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingReadAdjustmentEntriesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ReadAdjustmentEntriesClient interface {
	Recv() (*v1.AdjustmentEntry, error)
	grpc.ClientStream
}

type billingReadAdjustmentEntriesClient struct {
	grpc.ClientStream
}

func (x *billingReadAdjustmentEntriesClient) Recv() (*v1.AdjustmentEntry, error) {
	m := new(v1.AdjustmentEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) GetAdjustmentEntry(ctx context.Context, in *GetAdjustmentEntryRequest, opts ...grpc.CallOption) (*v1.AdjustmentEntry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.AdjustmentEntry)
	err := c.cc.Invoke(ctx, Billing_GetAdjustmentEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ApplyAdjustmentEntry(ctx context.Context, in *ApplyAdjustmentEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_ApplyAdjustmentEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) RestoreAdjustmentEntry(ctx context.Context, in *RestoreAdjustmentEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_RestoreAdjustmentEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) SplitAdjustmentEntry(ctx context.Context, in *SplitAdjustmentEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_SplitAdjustmentEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) AllocateAdjustmentEntry(ctx context.Context, in *AllocateAdjustmentEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_AllocateAdjustmentEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) RestoreSplitAdjustmentEntry(ctx context.Context, in *RestoreSplitAdjustmentEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_RestoreSplitAdjustmentEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) RestoreAllocateAdjustmentEntry(ctx context.Context, in *RestoreAllocateAdjustmentEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_RestoreAllocateAdjustmentEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListAccountResources(ctx context.Context, in *ListAccountResourcesRequest, opts ...grpc.CallOption) (Billing_ListAccountResourcesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[15], Billing_ListAccountResources_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListAccountResourcesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListAccountResourcesClient interface {
	Recv() (*ResourceAccount, error)
	grpc.ClientStream
}

type billingListAccountResourcesClient struct {
	grpc.ClientStream
}

func (x *billingListAccountResourcesClient) Recv() (*ResourceAccount, error) {
	m := new(ResourceAccount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) GetAdjustmentConfig(ctx context.Context, in *GetAdjustmentConfigRequest, opts ...grpc.CallOption) (*api.AdjustmentConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.AdjustmentConfig)
	err := c.cc.Invoke(ctx, Billing_GetAdjustmentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) CreateAdjustmentConfig(ctx context.Context, in *CreateAdjustmentConfigRequest, opts ...grpc.CallOption) (*api.AdjustmentConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.AdjustmentConfig)
	err := c.cc.Invoke(ctx, Billing_CreateAdjustmentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateAdjustmentConfig(ctx context.Context, in *UpdateAdjustmentConfigRequest, opts ...grpc.CallOption) (*api.AdjustmentConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.AdjustmentConfig)
	err := c.cc.Invoke(ctx, Billing_UpdateAdjustmentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteAdjustmentConfig(ctx context.Context, in *DeleteAdjustmentConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteAdjustmentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ReadUntaggedGroups(ctx context.Context, in *ReadUntaggedGroupsRequest, opts ...grpc.CallOption) (Billing_ReadUntaggedGroupsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[16], Billing_ReadUntaggedGroups_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingReadUntaggedGroupsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ReadUntaggedGroupsClient interface {
	Recv() (*ripple.UntaggedGroup, error)
	grpc.ClientStream
}

type billingReadUntaggedGroupsClient struct {
	grpc.ClientStream
}

func (x *billingReadUntaggedGroupsClient) Recv() (*ripple.UntaggedGroup, error) {
	m := new(ripple.UntaggedGroup)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) ReadCustomizedBillingServices(ctx context.Context, in *ReadCustomizedBillingServicesRequest, opts ...grpc.CallOption) (Billing_ReadCustomizedBillingServicesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[17], Billing_ReadCustomizedBillingServices_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingReadCustomizedBillingServicesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ReadCustomizedBillingServicesClient interface {
	Recv() (*ripple.CustomizedBillingService, error)
	grpc.ClientStream
}

type billingReadCustomizedBillingServicesClient struct {
	grpc.ClientStream
}

func (x *billingReadCustomizedBillingServicesClient) Recv() (*ripple.CustomizedBillingService, error) {
	m := new(ripple.CustomizedBillingService)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) GetCustomizedBillingService(ctx context.Context, in *GetCustomizedBillingServiceRequest, opts ...grpc.CallOption) (*ripple.CustomizedBillingService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ripple.CustomizedBillingService)
	err := c.cc.Invoke(ctx, Billing_GetCustomizedBillingService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) CreateCustomizedBillingService(ctx context.Context, in *CreateCustomizedBillingServiceRequest, opts ...grpc.CallOption) (*ripple.CustomizedBillingService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ripple.CustomizedBillingService)
	err := c.cc.Invoke(ctx, Billing_CreateCustomizedBillingService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateCustomizedBillingService(ctx context.Context, in *UpdateCustomizedBillingServiceRequest, opts ...grpc.CallOption) (*ripple.CustomizedBillingService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ripple.CustomizedBillingService)
	err := c.cc.Invoke(ctx, Billing_UpdateCustomizedBillingService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteCustomizedBillingService(ctx context.Context, in *DeleteCustomizedBillingServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteCustomizedBillingService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) GetCustomizedBillingServiceBillingGroup(ctx context.Context, in *GetCustomizedBillingServiceBillingGroupRequest, opts ...grpc.CallOption) (Billing_GetCustomizedBillingServiceBillingGroupClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[18], Billing_GetCustomizedBillingServiceBillingGroup_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingGetCustomizedBillingServiceBillingGroupClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_GetCustomizedBillingServiceBillingGroupClient interface {
	Recv() (*GetCustomizedBillingServiceBillingGroupResponse, error)
	grpc.ClientStream
}

type billingGetCustomizedBillingServiceBillingGroupClient struct {
	grpc.ClientStream
}

func (x *billingGetCustomizedBillingServiceBillingGroupClient) Recv() (*GetCustomizedBillingServiceBillingGroupResponse, error) {
	m := new(GetCustomizedBillingServiceBillingGroupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) SetCustomizedBillingServiceBillingGroup(ctx context.Context, in *SetCustomizedBillingServiceBillingGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_SetCustomizedBillingServiceBillingGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteCustomizedBillingServiceBillingGroup(ctx context.Context, in *DeleteCustomizedBillingServiceBillingGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteCustomizedBillingServiceBillingGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (Billing_GetTagsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[19], Billing_GetTags_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingGetTagsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_GetTagsClient interface {
	Recv() (*TagData, error)
	grpc.ClientStream
}

type billingGetTagsClient struct {
	grpc.ClientStream
}

func (x *billingGetTagsClient) Recv() (*TagData, error) {
	m := new(TagData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) CreateCustomField(ctx context.Context, in *CreateCustomFieldRequest, opts ...grpc.CallOption) (*CustomField, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomField)
	err := c.cc.Invoke(ctx, Billing_CreateCustomField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListCustomField(ctx context.Context, in *ListCustomFieldRequest, opts ...grpc.CallOption) (Billing_ListCustomFieldClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[20], Billing_ListCustomField_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListCustomFieldClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListCustomFieldClient interface {
	Recv() (*CustomField, error)
	grpc.ClientStream
}

type billingListCustomFieldClient struct {
	grpc.ClientStream
}

func (x *billingListCustomFieldClient) Recv() (*CustomField, error) {
	m := new(CustomField)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) AddBillingGroupCustomField(ctx context.Context, in *AddBillingGroupCustomFieldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_AddBillingGroupCustomField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ListBillingGroupCustomField(ctx context.Context, in *ListBillingGroupCustomFieldRequest, opts ...grpc.CallOption) (Billing_ListBillingGroupCustomFieldClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[21], Billing_ListBillingGroupCustomField_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingListBillingGroupCustomFieldClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_ListBillingGroupCustomFieldClient interface {
	Recv() (*ListBillingGroupCustomFieldResponse, error)
	grpc.ClientStream
}

type billingListBillingGroupCustomFieldClient struct {
	grpc.ClientStream
}

func (x *billingListBillingGroupCustomFieldClient) Recv() (*ListBillingGroupCustomFieldResponse, error) {
	m := new(ListBillingGroupCustomFieldResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) AddTagsToBillingGroup(ctx context.Context, in *AddTagsToBillingGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_AddTagsToBillingGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateNonTagGroupToBillingGroup(ctx context.Context, in *UpdateNonTagGroupToBillingGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_UpdateNonTagGroupToBillingGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteBillingGroupCustomField(ctx context.Context, in *DeleteBillingGroupCustomFieldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteBillingGroupCustomField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateCustomField(ctx context.Context, in *UpdateCustomFieldRequest, opts ...grpc.CallOption) (*CustomField, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomField)
	err := c.cc.Invoke(ctx, Billing_UpdateCustomField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteCustomField(ctx context.Context, in *DeleteCustomFieldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteCustomField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) CreateFreeFormat(ctx context.Context, in *CreateFreeFormatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_CreateFreeFormat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) DeleteFreeFormat(ctx context.Context, in *DeleteFreeFormatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_DeleteFreeFormat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) GetFreeFormat(ctx context.Context, in *GetFreeFormatRequest, opts ...grpc.CallOption) (Billing_GetFreeFormatClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[22], Billing_GetFreeFormat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingGetFreeFormatClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_GetFreeFormatClient interface {
	Recv() (*GetFreeFormatResponse, error)
	grpc.ClientStream
}

type billingGetFreeFormatClient struct {
	grpc.ClientStream
}

func (x *billingGetFreeFormatClient) Recv() (*GetFreeFormatResponse, error) {
	m := new(GetFreeFormatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) GetTagsAddingSetting(ctx context.Context, in *GetTagsAddingSettingRequest, opts ...grpc.CallOption) (Billing_GetTagsAddingSettingClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Billing_ServiceDesc.Streams[23], Billing_GetTagsAddingSetting_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &billingGetTagsAddingSettingClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Billing_GetTagsAddingSettingClient interface {
	Recv() (*TagsAddingSetting, error)
	grpc.ClientStream
}

type billingGetTagsAddingSettingClient struct {
	grpc.ClientStream
}

func (x *billingGetTagsAddingSettingClient) Recv() (*TagsAddingSetting, error) {
	m := new(TagsAddingSetting)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billingClient) UpdateTagsAddingSetting(ctx context.Context, in *UpdateTagsAddingSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_UpdateTagsAddingSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ExportBillingGroupCsv(ctx context.Context, in *ExportBillingGroupCsvRequest, opts ...grpc.CallOption) (*ExportBillingGroupCsvResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportBillingGroupCsvResponse)
	err := c.cc.Invoke(ctx, Billing_ExportBillingGroupCsv_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) ExportInvoiceSettingCsv(ctx context.Context, in *ExportInvoiceSettingCsvRequest, opts ...grpc.CallOption) (*ExportInvoiceSettingCsvResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportInvoiceSettingCsvResponse)
	err := c.cc.Invoke(ctx, Billing_ExportInvoiceSettingCsv_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateBillingGroupBasicInformation(ctx context.Context, in *UpdateBillingGroupBasicInformationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_UpdateBillingGroupBasicInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateBillingGroupCustomFields(ctx context.Context, in *UpdateBillingGroupCustomFieldsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_UpdateBillingGroupCustomFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) GetBillingGroupAccountSupportPlan(ctx context.Context, in *GetBillingGroupAccountSupportPlanRequest, opts ...grpc.CallOption) (*GetBillingGroupAccountSupportPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBillingGroupAccountSupportPlanResponse)
	err := c.cc.Invoke(ctx, Billing_GetBillingGroupAccountSupportPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) UpdateBillingGroupAccountSupportPlan(ctx context.Context, in *UpdateBillingGroupAccountSupportPlanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Billing_UpdateBillingGroupAccountSupportPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServer is the server API for Billing service.
// All implementations must embed UnimplementedBillingServer
// for forward compatibility
//
// Billing service definition.
type BillingServer interface {
	// Lists all billing groups.
	ListBillingGroups(*ListBillingGroupsRequest, Billing_ListBillingGroupsServer) error
	// Registers a billing group.
	CreateBillingGroup(context.Context, *CreateBillingGroupRequest) (*BillingGroup, error)
	// Registers a billing group with Merged Endpoints. Only available in Ripple. WORK IN PROGRESS
	CreateBillingGroupMerged(context.Context, *CreateBillingGroupMergedRequest) (*BillingGroup, error)
	// Delete a billing group.
	DeleteBillinGroup(context.Context, *DeleteBillingGroupRequest) (*emptypb.Empty, error)
	// Add a vendor account to a billing group.
	AddAccountToBillingGroup(context.Context, *AddAccountToBillingGroupRequest) (*emptypb.Empty, error)
	// Gets a billing group.
	GetBillingGroup(context.Context, *GetBillingGroupRequest) (*GetBillingGroupResponse, error)
	// WORK-IN-PROGRESS: Gets an access group.
	GetAccessGroup(context.Context, *GetAccessGroupRequest) (*GetAccessGroupResponse, error)
	// Reads the daily calculation history of all accounts in your billing groups. Only available in Ripple.
	ListAwsDailyRunHistory(*ListAwsDailyRunHistoryRequest, Billing_ListAwsDailyRunHistoryServer) error
	// Returns a list of accounts that have been updated after invoice along with the differences in costs, if any. Only available in Ripple.
	ListUsageCostsDrift(*ListUsageCostsDriftRequest, Billing_ListUsageCostsDriftServer) error
	// Creates an invoice. Only available in Ripple.
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*api.InvoiceMessage, error)
	// Creates an invoice and add settings. Only available in Ripple.
	CreateInvoiceWithSettings(context.Context, *SaveInvoiceSettingsRequest) (*api.InvoiceMessage, error)
	// WORK-IN-PROGRESS: Save invoice settings for the month
	SaveInvoiceSettings(context.Context, *SaveInvoiceSettingsRequest) (*emptypb.Empty, error)
	// Gets an invoice. Only available in Ripple.
	GetInvoiceStatus(context.Context, *GetInvoiceStatusRequest) (*api.InvoiceMessage, error)
	// Reads an invoice status. Only available in Ripple.
	ListInvoiceStatus(*ListInvoiceStatusRequest, Billing_ListInvoiceStatusServer) error
	// Gets an invoice.
	GetInvoice(context.Context, *GetInvoiceRequest) (*api.Invoice, error)
	// WORK-IN-PROGRESS: Reads list of the invoice.
	ListInvoice(*ListInvoiceRequest, Billing_ListInvoiceServer) error
	// Updates an invoice preview. Only available in Ripple.
	UpdateInvoicePreviews(context.Context, *UpdateInvoicePreviewsRequest) (*emptypb.Empty, error)
	// Exports an invoice.
	ExportInvoiceFile(context.Context, *ExportInvoiceFileRequest) (*ExportInvoiceFileResponse, error)
	// Lists Invoice Template. Only available in Ripple.
	ListInvoiceTemplate(*ListInvoiceTemplateRequest, Billing_ListInvoiceTemplateServer) error
	// WORK-IN-PROGRESS: Gets the invoice display settings for invoice-ui
	GetInvoiceDisplaySettings(context.Context, *GetInvoiceDisplaySettingsRequest) (*GetInvoiceDisplaySettingsResponse, error)
	// Creates/Updates a billing group's invoice template. Only available in Ripple.
	UpdateBillingGroupInvoiceTemplate(context.Context, *UpdateBillingGroupInvoiceTemplateRequest) (*emptypb.Empty, error)
	// Reads the service relate to the service discounts. Only available in Ripple.
	ReadServiceDiscountsServices(*ReadServiceDiscountsServicesRequest, Billing_ReadServiceDiscountsServicesServer) error
	// Creates the invoice service discounts. Only available in Ripple.
	CreateInvoiceServiceDiscounts(context.Context, *CreateInvoiceServiceDiscountsRequest) (*v1.InvoiceServiceDiscounts, error)
	// Updates the invoice service discounts. Only available in Ripple.
	UpdateInvoiceServiceDiscounts(context.Context, *UpdateInvoiceServiceDiscountsRequest) (*v1.InvoiceServiceDiscounts, error)
	// Deletes the invoice service discounts. Only available in Ripple.
	DeleteInvoiceServiceDiscounts(context.Context, *DeleteInvoiceServiceDiscountsRequest) (*emptypb.Empty, error)
	// Reads the invoice service discounts. Only available in Ripple.
	ListInvoiceServiceDiscounts(*ListInvoiceServiceDiscountsRequest, Billing_ListInvoiceServiceDiscountsServer) error
	// Gets the invoice service discounts. Only available in Ripple.
	GetInvoiceServiceDiscounts(context.Context, *GetInvoiceServiceDiscountsRequest) (*v1.InvoiceServiceDiscounts, error)
	// WORK-IN-PROGRESS: Exports service discounts. Only available in Ripple.
	ExportServiceDiscounts(context.Context, *ExportServiceDiscountsRequest) (*v1.ServiceDiscountsExport, error)
	// WORK-IN-PROGRESS: Registers the billing group invoice service discounts. Only available in Ripple.
	CreateBillingGroupInvoiceServiceDiscounts(context.Context, *CreateBillingGroupInvoiceServiceDiscountsRequest) (*CreateBillingGroupInvoiceServiceDiscountsResponse, error)
	// WORK-IN-PROGRESS: Updates the billing group invoice service discounts. Only available in Ripple.
	UpdateBillingGroupInvoiceServiceDiscounts(context.Context, *UpdateBillingGroupInvoiceServiceDiscountsRequest) (*UpdateBillingGroupInvoiceServiceDiscountsResponse, error)
	// WORK-IN-PROGRESS: Deletes the billing group invoice service discounts. Only available in Ripple.
	DeleteBillingGroupInvoiceServiceDiscounts(context.Context, *DeleteBillingGroupInvoiceServiceDiscountsRequest) (*emptypb.Empty, error)
	// Reads the account invoice service discounts. Only available in Ripple.
	ListAccountInvoiceServiceDiscounts(*ListAccountInvoiceServiceDiscountsRequest, Billing_ListAccountInvoiceServiceDiscountsServer) error
	// Registers the account invoice service discounts. Only available in Ripple.
	CreateAccountInvoiceServiceDiscounts(context.Context, *CreateAccountInvoiceServiceDiscountsRequest) (*CreateAccountInvoiceServiceDiscountsResponse, error)
	// Updates the account invoice service discounts. Only available in Ripple.
	UpdateAccountInvoiceServiceDiscounts(context.Context, *UpdateAccountInvoiceServiceDiscountsRequest) (*UpdateAccountInvoiceServiceDiscountsResponse, error)
	// Removes the account invoice service discounts. Only available in Ripple.
	RemoveAccountInvoiceServiceDiscounts(context.Context, *RemoveAccountInvoiceServiceDiscountsRequest) (*emptypb.Empty, error)
	// Deletes the account invoice service discounts. Only available in Ripple.
	DeleteAccountInvoiceServiceDiscounts(context.Context, *DeleteAccountInvoiceServiceDiscountsRequest) (*emptypb.Empty, error)
	// Exports service discounts for account in billing group. Only available in Ripple.
	ExportAccountInvoiceServiceDiscounts(context.Context, *ExportAccountInvoiceServiceDiscountsRequest) (*v1.AccountServiceDiscountsExport, error)
	// Exports service discounts for billing group. Only available in Ripple.
	ExportBillingGroupInvoiceServiceDiscounts(context.Context, *ExportBillingGroupInvoiceServiceDiscountsRequest) (*v1.GroupServiceDiscountsExport, error)
	// Returns the service discount associated with the billing group id
	GetBillingGroupInvoiceServiceDiscounts(context.Context, *GetBillingGroupInvoiceServiceDiscountsRequest) (*GetBillingGroupInvoiceServiceDiscountsResponse, error)
	// Registers the reseller account. Only available in Ripple.
	CreateReseller(context.Context, *CreateResellerRequest) (*ripple.Reseller, error)
	// ListResellers
	//
	// **Lists all the reseller accounts.**
	// > **Only available in Ripple.**
	ListResellers(*ListResellersRequest, Billing_ListResellersServer) error
	// Gets the reseller account. Only available in Ripple.
	GetReseller(context.Context, *GetResellerRequest) (*ripple.Reseller, error)
	// Updates the reseller account. Only available in Ripple.
	UpdateReseller(context.Context, *UpdateResellerRequest) (*ripple.Reseller, error)
	// Deletes the reseller account. Only available in Ripple.
	DeleteReseller(context.Context, *DeleteResellerRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Gets all billing settings.
	GetBillingSetting(context.Context, *GetBillingSettingRequest) (*GetBillingSettingResponse, error)
	// ListExchangeRates
	//
	// Lists all exchange rate.
	// > Only available in Ripple.
	ListExchangeRates(context.Context, *ListExchangeRatesRequest) (*ListExchangeRatesResponse, error)
	// Set global exchangerate. Only available in Ripple.
	SetGlobalExchangeRate(context.Context, *SetGlobalExchangeRateRequest) (*emptypb.Empty, error)
	// Set payer exchangerate. Only available in Ripple.
	SetPayerExchangeRate(context.Context, *SetPayerExchangeRateRequest) (*emptypb.Empty, error)
	// Set billing group exchangerate. Only available in Ripple.
	SetBillingGroupExchangeRate(context.Context, *SetBillingGroupExchangeRateRequest) (*emptypb.Empty, error)
	// Lists access group. Only available in Ripple.
	ListAccessGroups(*ListAccessGroupsRequest, Billing_ListAccessGroupsServer) error
	// Registers the access group. Only available in Ripple.
	CreateAccessGroup(context.Context, *CreateAccessGroupRequest) (*ripple.AccessGroup, error)
	// Updates the access group. Only available in Ripple.
	UpdateAccessGroup(context.Context, *UpdateAccessGroupRequest) (*ripple.AccessGroup, error)
	// Deletes the access group. Only available in Ripple.
	DeleteAccessGroup(context.Context, *DeleteAccessGroupRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Gets all Billing Groups in AWS Billing Conductor(ABC) for specific payer id.
	ListAbcBillingGroups(*ListAbcBillingGroupsRequest, Billing_ListAbcBillingGroupsServer) error
	// WORK-IN-PROGRESS: Gets all accounts associated to AWS Billing Conductor(ABC) Billing group
	ListAbcBillingGroupAccounts(*ListAbcBillingGroupAccountsRequest, Billing_ListAbcBillingGroupAccountsServer) error
	// Reads the adjustment details involved in invoicing of an organization billing group (Wave).
	ReadInvoiceAdjustments(*ReadInvoiceAdjustmentsRequest, Billing_ReadInvoiceAdjustmentsServer) error
	// WORK-IN-PROGRESS: Reads the adjustment entries. Only available in Ripple.
	ReadAdjustmentEntries(*ReadAdjustmentEntriesRequest, Billing_ReadAdjustmentEntriesServer) error
	// WORK-IN-PROGRESS: Gets the adjustment entry. Only available in Ripple.
	GetAdjustmentEntry(context.Context, *GetAdjustmentEntryRequest) (*v1.AdjustmentEntry, error)
	// WORK-IN-PROGRESS: Applies the adjustment entry item. Only available in Ripple.
	ApplyAdjustmentEntry(context.Context, *ApplyAdjustmentEntryRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Restores the adjustment entry item. Only available in Ripple.
	RestoreAdjustmentEntry(context.Context, *RestoreAdjustmentEntryRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Splits the adjustment entry item. Only available in Ripple.
	SplitAdjustmentEntry(context.Context, *SplitAdjustmentEntryRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Allocates the adjustment entry item. Only available in Ripple.
	AllocateAdjustmentEntry(context.Context, *AllocateAdjustmentEntryRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Restores the splitted adjustment entry item. Only available in Ripple.
	RestoreSplitAdjustmentEntry(context.Context, *RestoreSplitAdjustmentEntryRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Restores the allocate adjustment entry item. Only available in Ripple.
	RestoreAllocateAdjustmentEntry(context.Context, *RestoreAllocateAdjustmentEntryRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Returns all registered accounts that are not associated to any billing groups and accounts found in CUR for the specified month. For Ripple only
	ListAccountResources(*ListAccountResourcesRequest, Billing_ListAccountResourcesServer) error
	// Gets adjustment config
	GetAdjustmentConfig(context.Context, *GetAdjustmentConfigRequest) (*api.AdjustmentConfig, error)
	// Creates adjustment config
	//
	// [ERRORS]
	// - InvalidArgument:
	//   - the AdjustmentConfig is already exists.
	//
	// - NotFound:
	//   - the AdjustmentConfig is not found.
	CreateAdjustmentConfig(context.Context, *CreateAdjustmentConfigRequest) (*api.AdjustmentConfig, error)
	// Updates adjustment config
	UpdateAdjustmentConfig(context.Context, *UpdateAdjustmentConfigRequest) (*api.AdjustmentConfig, error)
	// Deletes adjustment config
	DeleteAdjustmentConfig(context.Context, *DeleteAdjustmentConfigRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Reads the untagged group. Only available in Ripple.
	ReadUntaggedGroups(*ReadUntaggedGroupsRequest, Billing_ReadUntaggedGroupsServer) error
	// Reads the customized billing service. Only available in Ripple.
	ReadCustomizedBillingServices(*ReadCustomizedBillingServicesRequest, Billing_ReadCustomizedBillingServicesServer) error
	// Gets the customized billing service. Only available in Ripple.
	GetCustomizedBillingService(context.Context, *GetCustomizedBillingServiceRequest) (*ripple.CustomizedBillingService, error)
	// Creates the customized billing service. Only available in Ripple.
	CreateCustomizedBillingService(context.Context, *CreateCustomizedBillingServiceRequest) (*ripple.CustomizedBillingService, error)
	// Updates the customized billing service by updating the fields specified in the update mask. Only available in Ripple.
	UpdateCustomizedBillingService(context.Context, *UpdateCustomizedBillingServiceRequest) (*ripple.CustomizedBillingService, error)
	// Deletes the customized billing service. Only available in Ripple.
	DeleteCustomizedBillingService(context.Context, *DeleteCustomizedBillingServiceRequest) (*emptypb.Empty, error)
	// Gets the customized billing service in billing group. Only available in Ripple.
	GetCustomizedBillingServiceBillingGroup(*GetCustomizedBillingServiceBillingGroupRequest, Billing_GetCustomizedBillingServiceBillingGroupServer) error
	// Sets the customized billing service in billing group. Only available in Ripple.
	SetCustomizedBillingServiceBillingGroup(context.Context, *SetCustomizedBillingServiceBillingGroupRequest) (*emptypb.Empty, error)
	// Deletes the customized billing service in billing group. Only available in Ripple.
	DeleteCustomizedBillingServiceBillingGroup(context.Context, *DeleteCustomizedBillingServiceBillingGroupRequest) (*emptypb.Empty, error)
	// Returns the customer details and its tags.
	// Port for: m/ripple/tags/vendor/{vendor}?type={type}
	GetTags(*GetTagsRequest, Billing_GetTagsServer) error
	// Creates new customfield
	CreateCustomField(context.Context, *CreateCustomFieldRequest) (*CustomField, error)
	// Returns all registered customfields
	ListCustomField(*ListCustomFieldRequest, Billing_ListCustomFieldServer) error
	// Add  a custom field into a billing group
	AddBillingGroupCustomField(context.Context, *AddBillingGroupCustomFieldRequest) (*emptypb.Empty, error)
	// Show all the billing groups custom fields
	ListBillingGroupCustomField(*ListBillingGroupCustomFieldRequest, Billing_ListBillingGroupCustomFieldServer) error
	// Add Tags to the billing group
	AddTagsToBillingGroup(context.Context, *AddTagsToBillingGroupRequest) (*emptypb.Empty, error)
	// Sets non-tag group settings for a billing group.
	UpdateNonTagGroupToBillingGroup(context.Context, *UpdateNonTagGroupToBillingGroupRequest) (*emptypb.Empty, error)
	// Remove a custom field from a billing group
	DeleteBillingGroupCustomField(context.Context, *DeleteBillingGroupCustomFieldRequest) (*emptypb.Empty, error)
	// Update the `customField` specified id, modifying its key and description
	UpdateCustomField(context.Context, *UpdateCustomFieldRequest) (*CustomField, error)
	// Deletes the customfield
	DeleteCustomField(context.Context, *DeleteCustomFieldRequest) (*emptypb.Empty, error)
	// Creates new billing group free format item (miscellaneous)
	CreateFreeFormat(context.Context, *CreateFreeFormatRequest) (*emptypb.Empty, error)
	// Delete billing group free format item (miscellaneous)
	DeleteFreeFormat(context.Context, *DeleteFreeFormatRequest) (*emptypb.Empty, error)
	// Get billing group free format item (miscellaneous)
	GetFreeFormat(*GetFreeFormatRequest, Billing_GetFreeFormatServer) error
	GetTagsAddingSetting(*GetTagsAddingSettingRequest, Billing_GetTagsAddingSettingServer) error
	UpdateTagsAddingSetting(context.Context, *UpdateTagsAddingSettingRequest) (*emptypb.Empty, error)
	// Export the billing groups into csv format
	ExportBillingGroupCsv(context.Context, *ExportBillingGroupCsvRequest) (*ExportBillingGroupCsvResponse, error)
	// Exports the invoice settings into csv format
	ExportInvoiceSettingCsv(context.Context, *ExportInvoiceSettingCsvRequest) (*ExportInvoiceSettingCsvResponse, error)
	// Update billing group basic information
	UpdateBillingGroupBasicInformation(context.Context, *UpdateBillingGroupBasicInformationRequest) (*emptypb.Empty, error)
	// Update billing group basic information
	UpdateBillingGroupCustomFields(context.Context, *UpdateBillingGroupCustomFieldsRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Gets the account support plan in billing group. Only available in Ripple.
	GetBillingGroupAccountSupportPlan(context.Context, *GetBillingGroupAccountSupportPlanRequest) (*GetBillingGroupAccountSupportPlanResponse, error)
	// WORK-IN-PROGRESS: Updates the account support plan in billing group. Only available in Ripple.
	UpdateBillingGroupAccountSupportPlan(context.Context, *UpdateBillingGroupAccountSupportPlanRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBillingServer()
}

// UnimplementedBillingServer must be embedded to have forward compatible implementations.
type UnimplementedBillingServer struct {
}

func (UnimplementedBillingServer) ListBillingGroups(*ListBillingGroupsRequest, Billing_ListBillingGroupsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBillingGroups not implemented")
}
func (UnimplementedBillingServer) CreateBillingGroup(context.Context, *CreateBillingGroupRequest) (*BillingGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillingGroup not implemented")
}
func (UnimplementedBillingServer) CreateBillingGroupMerged(context.Context, *CreateBillingGroupMergedRequest) (*BillingGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillingGroupMerged not implemented")
}
func (UnimplementedBillingServer) DeleteBillinGroup(context.Context, *DeleteBillingGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBillinGroup not implemented")
}
func (UnimplementedBillingServer) AddAccountToBillingGroup(context.Context, *AddAccountToBillingGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccountToBillingGroup not implemented")
}
func (UnimplementedBillingServer) GetBillingGroup(context.Context, *GetBillingGroupRequest) (*GetBillingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingGroup not implemented")
}
func (UnimplementedBillingServer) GetAccessGroup(context.Context, *GetAccessGroupRequest) (*GetAccessGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessGroup not implemented")
}
func (UnimplementedBillingServer) ListAwsDailyRunHistory(*ListAwsDailyRunHistoryRequest, Billing_ListAwsDailyRunHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAwsDailyRunHistory not implemented")
}
func (UnimplementedBillingServer) ListUsageCostsDrift(*ListUsageCostsDriftRequest, Billing_ListUsageCostsDriftServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsageCostsDrift not implemented")
}
func (UnimplementedBillingServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*api.InvoiceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedBillingServer) CreateInvoiceWithSettings(context.Context, *SaveInvoiceSettingsRequest) (*api.InvoiceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoiceWithSettings not implemented")
}
func (UnimplementedBillingServer) SaveInvoiceSettings(context.Context, *SaveInvoiceSettingsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveInvoiceSettings not implemented")
}
func (UnimplementedBillingServer) GetInvoiceStatus(context.Context, *GetInvoiceStatusRequest) (*api.InvoiceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceStatus not implemented")
}
func (UnimplementedBillingServer) ListInvoiceStatus(*ListInvoiceStatusRequest, Billing_ListInvoiceStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method ListInvoiceStatus not implemented")
}
func (UnimplementedBillingServer) GetInvoice(context.Context, *GetInvoiceRequest) (*api.Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedBillingServer) ListInvoice(*ListInvoiceRequest, Billing_ListInvoiceServer) error {
	return status.Errorf(codes.Unimplemented, "method ListInvoice not implemented")
}
func (UnimplementedBillingServer) UpdateInvoicePreviews(context.Context, *UpdateInvoicePreviewsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoicePreviews not implemented")
}
func (UnimplementedBillingServer) ExportInvoiceFile(context.Context, *ExportInvoiceFileRequest) (*ExportInvoiceFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportInvoiceFile not implemented")
}
func (UnimplementedBillingServer) ListInvoiceTemplate(*ListInvoiceTemplateRequest, Billing_ListInvoiceTemplateServer) error {
	return status.Errorf(codes.Unimplemented, "method ListInvoiceTemplate not implemented")
}
func (UnimplementedBillingServer) GetInvoiceDisplaySettings(context.Context, *GetInvoiceDisplaySettingsRequest) (*GetInvoiceDisplaySettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceDisplaySettings not implemented")
}
func (UnimplementedBillingServer) UpdateBillingGroupInvoiceTemplate(context.Context, *UpdateBillingGroupInvoiceTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillingGroupInvoiceTemplate not implemented")
}
func (UnimplementedBillingServer) ReadServiceDiscountsServices(*ReadServiceDiscountsServicesRequest, Billing_ReadServiceDiscountsServicesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadServiceDiscountsServices not implemented")
}
func (UnimplementedBillingServer) CreateInvoiceServiceDiscounts(context.Context, *CreateInvoiceServiceDiscountsRequest) (*v1.InvoiceServiceDiscounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) UpdateInvoiceServiceDiscounts(context.Context, *UpdateInvoiceServiceDiscountsRequest) (*v1.InvoiceServiceDiscounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) DeleteInvoiceServiceDiscounts(context.Context, *DeleteInvoiceServiceDiscountsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) ListInvoiceServiceDiscounts(*ListInvoiceServiceDiscountsRequest, Billing_ListInvoiceServiceDiscountsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) GetInvoiceServiceDiscounts(context.Context, *GetInvoiceServiceDiscountsRequest) (*v1.InvoiceServiceDiscounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) ExportServiceDiscounts(context.Context, *ExportServiceDiscountsRequest) (*v1.ServiceDiscountsExport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) CreateBillingGroupInvoiceServiceDiscounts(context.Context, *CreateBillingGroupInvoiceServiceDiscountsRequest) (*CreateBillingGroupInvoiceServiceDiscountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillingGroupInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) UpdateBillingGroupInvoiceServiceDiscounts(context.Context, *UpdateBillingGroupInvoiceServiceDiscountsRequest) (*UpdateBillingGroupInvoiceServiceDiscountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillingGroupInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) DeleteBillingGroupInvoiceServiceDiscounts(context.Context, *DeleteBillingGroupInvoiceServiceDiscountsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBillingGroupInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) ListAccountInvoiceServiceDiscounts(*ListAccountInvoiceServiceDiscountsRequest, Billing_ListAccountInvoiceServiceDiscountsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAccountInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) CreateAccountInvoiceServiceDiscounts(context.Context, *CreateAccountInvoiceServiceDiscountsRequest) (*CreateAccountInvoiceServiceDiscountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) UpdateAccountInvoiceServiceDiscounts(context.Context, *UpdateAccountInvoiceServiceDiscountsRequest) (*UpdateAccountInvoiceServiceDiscountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) RemoveAccountInvoiceServiceDiscounts(context.Context, *RemoveAccountInvoiceServiceDiscountsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAccountInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) DeleteAccountInvoiceServiceDiscounts(context.Context, *DeleteAccountInvoiceServiceDiscountsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) ExportAccountInvoiceServiceDiscounts(context.Context, *ExportAccountInvoiceServiceDiscountsRequest) (*v1.AccountServiceDiscountsExport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportAccountInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) ExportBillingGroupInvoiceServiceDiscounts(context.Context, *ExportBillingGroupInvoiceServiceDiscountsRequest) (*v1.GroupServiceDiscountsExport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportBillingGroupInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) GetBillingGroupInvoiceServiceDiscounts(context.Context, *GetBillingGroupInvoiceServiceDiscountsRequest) (*GetBillingGroupInvoiceServiceDiscountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingGroupInvoiceServiceDiscounts not implemented")
}
func (UnimplementedBillingServer) CreateReseller(context.Context, *CreateResellerRequest) (*ripple.Reseller, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReseller not implemented")
}
func (UnimplementedBillingServer) ListResellers(*ListResellersRequest, Billing_ListResellersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListResellers not implemented")
}
func (UnimplementedBillingServer) GetReseller(context.Context, *GetResellerRequest) (*ripple.Reseller, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReseller not implemented")
}
func (UnimplementedBillingServer) UpdateReseller(context.Context, *UpdateResellerRequest) (*ripple.Reseller, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReseller not implemented")
}
func (UnimplementedBillingServer) DeleteReseller(context.Context, *DeleteResellerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReseller not implemented")
}
func (UnimplementedBillingServer) GetBillingSetting(context.Context, *GetBillingSettingRequest) (*GetBillingSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingSetting not implemented")
}
func (UnimplementedBillingServer) ListExchangeRates(context.Context, *ListExchangeRatesRequest) (*ListExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExchangeRates not implemented")
}
func (UnimplementedBillingServer) SetGlobalExchangeRate(context.Context, *SetGlobalExchangeRateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGlobalExchangeRate not implemented")
}
func (UnimplementedBillingServer) SetPayerExchangeRate(context.Context, *SetPayerExchangeRateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPayerExchangeRate not implemented")
}
func (UnimplementedBillingServer) SetBillingGroupExchangeRate(context.Context, *SetBillingGroupExchangeRateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBillingGroupExchangeRate not implemented")
}
func (UnimplementedBillingServer) ListAccessGroups(*ListAccessGroupsRequest, Billing_ListAccessGroupsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAccessGroups not implemented")
}
func (UnimplementedBillingServer) CreateAccessGroup(context.Context, *CreateAccessGroupRequest) (*ripple.AccessGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessGroup not implemented")
}
func (UnimplementedBillingServer) UpdateAccessGroup(context.Context, *UpdateAccessGroupRequest) (*ripple.AccessGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessGroup not implemented")
}
func (UnimplementedBillingServer) DeleteAccessGroup(context.Context, *DeleteAccessGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessGroup not implemented")
}
func (UnimplementedBillingServer) ListAbcBillingGroups(*ListAbcBillingGroupsRequest, Billing_ListAbcBillingGroupsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAbcBillingGroups not implemented")
}
func (UnimplementedBillingServer) ListAbcBillingGroupAccounts(*ListAbcBillingGroupAccountsRequest, Billing_ListAbcBillingGroupAccountsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAbcBillingGroupAccounts not implemented")
}
func (UnimplementedBillingServer) ReadInvoiceAdjustments(*ReadInvoiceAdjustmentsRequest, Billing_ReadInvoiceAdjustmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadInvoiceAdjustments not implemented")
}
func (UnimplementedBillingServer) ReadAdjustmentEntries(*ReadAdjustmentEntriesRequest, Billing_ReadAdjustmentEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadAdjustmentEntries not implemented")
}
func (UnimplementedBillingServer) GetAdjustmentEntry(context.Context, *GetAdjustmentEntryRequest) (*v1.AdjustmentEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdjustmentEntry not implemented")
}
func (UnimplementedBillingServer) ApplyAdjustmentEntry(context.Context, *ApplyAdjustmentEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyAdjustmentEntry not implemented")
}
func (UnimplementedBillingServer) RestoreAdjustmentEntry(context.Context, *RestoreAdjustmentEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAdjustmentEntry not implemented")
}
func (UnimplementedBillingServer) SplitAdjustmentEntry(context.Context, *SplitAdjustmentEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitAdjustmentEntry not implemented")
}
func (UnimplementedBillingServer) AllocateAdjustmentEntry(context.Context, *AllocateAdjustmentEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateAdjustmentEntry not implemented")
}
func (UnimplementedBillingServer) RestoreSplitAdjustmentEntry(context.Context, *RestoreSplitAdjustmentEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreSplitAdjustmentEntry not implemented")
}
func (UnimplementedBillingServer) RestoreAllocateAdjustmentEntry(context.Context, *RestoreAllocateAdjustmentEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllocateAdjustmentEntry not implemented")
}
func (UnimplementedBillingServer) ListAccountResources(*ListAccountResourcesRequest, Billing_ListAccountResourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAccountResources not implemented")
}
func (UnimplementedBillingServer) GetAdjustmentConfig(context.Context, *GetAdjustmentConfigRequest) (*api.AdjustmentConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdjustmentConfig not implemented")
}
func (UnimplementedBillingServer) CreateAdjustmentConfig(context.Context, *CreateAdjustmentConfigRequest) (*api.AdjustmentConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdjustmentConfig not implemented")
}
func (UnimplementedBillingServer) UpdateAdjustmentConfig(context.Context, *UpdateAdjustmentConfigRequest) (*api.AdjustmentConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdjustmentConfig not implemented")
}
func (UnimplementedBillingServer) DeleteAdjustmentConfig(context.Context, *DeleteAdjustmentConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdjustmentConfig not implemented")
}
func (UnimplementedBillingServer) ReadUntaggedGroups(*ReadUntaggedGroupsRequest, Billing_ReadUntaggedGroupsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadUntaggedGroups not implemented")
}
func (UnimplementedBillingServer) ReadCustomizedBillingServices(*ReadCustomizedBillingServicesRequest, Billing_ReadCustomizedBillingServicesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadCustomizedBillingServices not implemented")
}
func (UnimplementedBillingServer) GetCustomizedBillingService(context.Context, *GetCustomizedBillingServiceRequest) (*ripple.CustomizedBillingService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomizedBillingService not implemented")
}
func (UnimplementedBillingServer) CreateCustomizedBillingService(context.Context, *CreateCustomizedBillingServiceRequest) (*ripple.CustomizedBillingService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomizedBillingService not implemented")
}
func (UnimplementedBillingServer) UpdateCustomizedBillingService(context.Context, *UpdateCustomizedBillingServiceRequest) (*ripple.CustomizedBillingService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomizedBillingService not implemented")
}
func (UnimplementedBillingServer) DeleteCustomizedBillingService(context.Context, *DeleteCustomizedBillingServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomizedBillingService not implemented")
}
func (UnimplementedBillingServer) GetCustomizedBillingServiceBillingGroup(*GetCustomizedBillingServiceBillingGroupRequest, Billing_GetCustomizedBillingServiceBillingGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCustomizedBillingServiceBillingGroup not implemented")
}
func (UnimplementedBillingServer) SetCustomizedBillingServiceBillingGroup(context.Context, *SetCustomizedBillingServiceBillingGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomizedBillingServiceBillingGroup not implemented")
}
func (UnimplementedBillingServer) DeleteCustomizedBillingServiceBillingGroup(context.Context, *DeleteCustomizedBillingServiceBillingGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomizedBillingServiceBillingGroup not implemented")
}
func (UnimplementedBillingServer) GetTags(*GetTagsRequest, Billing_GetTagsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedBillingServer) CreateCustomField(context.Context, *CreateCustomFieldRequest) (*CustomField, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomField not implemented")
}
func (UnimplementedBillingServer) ListCustomField(*ListCustomFieldRequest, Billing_ListCustomFieldServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCustomField not implemented")
}
func (UnimplementedBillingServer) AddBillingGroupCustomField(context.Context, *AddBillingGroupCustomFieldRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBillingGroupCustomField not implemented")
}
func (UnimplementedBillingServer) ListBillingGroupCustomField(*ListBillingGroupCustomFieldRequest, Billing_ListBillingGroupCustomFieldServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBillingGroupCustomField not implemented")
}
func (UnimplementedBillingServer) AddTagsToBillingGroup(context.Context, *AddTagsToBillingGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTagsToBillingGroup not implemented")
}
func (UnimplementedBillingServer) UpdateNonTagGroupToBillingGroup(context.Context, *UpdateNonTagGroupToBillingGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNonTagGroupToBillingGroup not implemented")
}
func (UnimplementedBillingServer) DeleteBillingGroupCustomField(context.Context, *DeleteBillingGroupCustomFieldRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBillingGroupCustomField not implemented")
}
func (UnimplementedBillingServer) UpdateCustomField(context.Context, *UpdateCustomFieldRequest) (*CustomField, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomField not implemented")
}
func (UnimplementedBillingServer) DeleteCustomField(context.Context, *DeleteCustomFieldRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomField not implemented")
}
func (UnimplementedBillingServer) CreateFreeFormat(context.Context, *CreateFreeFormatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFreeFormat not implemented")
}
func (UnimplementedBillingServer) DeleteFreeFormat(context.Context, *DeleteFreeFormatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFreeFormat not implemented")
}
func (UnimplementedBillingServer) GetFreeFormat(*GetFreeFormatRequest, Billing_GetFreeFormatServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFreeFormat not implemented")
}
func (UnimplementedBillingServer) GetTagsAddingSetting(*GetTagsAddingSettingRequest, Billing_GetTagsAddingSettingServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTagsAddingSetting not implemented")
}
func (UnimplementedBillingServer) UpdateTagsAddingSetting(context.Context, *UpdateTagsAddingSettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTagsAddingSetting not implemented")
}
func (UnimplementedBillingServer) ExportBillingGroupCsv(context.Context, *ExportBillingGroupCsvRequest) (*ExportBillingGroupCsvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportBillingGroupCsv not implemented")
}
func (UnimplementedBillingServer) ExportInvoiceSettingCsv(context.Context, *ExportInvoiceSettingCsvRequest) (*ExportInvoiceSettingCsvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportInvoiceSettingCsv not implemented")
}
func (UnimplementedBillingServer) UpdateBillingGroupBasicInformation(context.Context, *UpdateBillingGroupBasicInformationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillingGroupBasicInformation not implemented")
}
func (UnimplementedBillingServer) UpdateBillingGroupCustomFields(context.Context, *UpdateBillingGroupCustomFieldsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillingGroupCustomFields not implemented")
}
func (UnimplementedBillingServer) GetBillingGroupAccountSupportPlan(context.Context, *GetBillingGroupAccountSupportPlanRequest) (*GetBillingGroupAccountSupportPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingGroupAccountSupportPlan not implemented")
}
func (UnimplementedBillingServer) UpdateBillingGroupAccountSupportPlan(context.Context, *UpdateBillingGroupAccountSupportPlanRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillingGroupAccountSupportPlan not implemented")
}
func (UnimplementedBillingServer) mustEmbedUnimplementedBillingServer() {}

// UnsafeBillingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServer will
// result in compilation errors.
type UnsafeBillingServer interface {
	mustEmbedUnimplementedBillingServer()
}

func RegisterBillingServer(s grpc.ServiceRegistrar, srv BillingServer) {
	s.RegisterService(&Billing_ServiceDesc, srv)
}

func _Billing_ListBillingGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBillingGroupsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListBillingGroups(m, &billingListBillingGroupsServer{ServerStream: stream})
}

type Billing_ListBillingGroupsServer interface {
	Send(*BillingGroup) error
	grpc.ServerStream
}

type billingListBillingGroupsServer struct {
	grpc.ServerStream
}

func (x *billingListBillingGroupsServer) Send(m *BillingGroup) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_CreateBillingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateBillingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateBillingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateBillingGroup(ctx, req.(*CreateBillingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_CreateBillingGroupMerged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillingGroupMergedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateBillingGroupMerged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateBillingGroupMerged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateBillingGroupMerged(ctx, req.(*CreateBillingGroupMergedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteBillinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBillingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteBillinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteBillinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteBillinGroup(ctx, req.(*DeleteBillingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_AddAccountToBillingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccountToBillingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).AddAccountToBillingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_AddAccountToBillingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).AddAccountToBillingGroup(ctx, req.(*AddAccountToBillingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_GetBillingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetBillingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetBillingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetBillingGroup(ctx, req.(*GetBillingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_GetAccessGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetAccessGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetAccessGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetAccessGroup(ctx, req.(*GetAccessGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListAwsDailyRunHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAwsDailyRunHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListAwsDailyRunHistory(m, &billingListAwsDailyRunHistoryServer{ServerStream: stream})
}

type Billing_ListAwsDailyRunHistoryServer interface {
	Send(*AwsDailyRunHistory) error
	grpc.ServerStream
}

type billingListAwsDailyRunHistoryServer struct {
	grpc.ServerStream
}

func (x *billingListAwsDailyRunHistoryServer) Send(m *AwsDailyRunHistory) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_ListUsageCostsDrift_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUsageCostsDriftRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListUsageCostsDrift(m, &billingListUsageCostsDriftServer{ServerStream: stream})
}

type Billing_ListUsageCostsDriftServer interface {
	Send(*UsageCostsDrift) error
	grpc.ServerStream
}

type billingListUsageCostsDriftServer struct {
	grpc.ServerStream
}

func (x *billingListUsageCostsDriftServer) Send(m *UsageCostsDrift) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_CreateInvoiceWithSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveInvoiceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateInvoiceWithSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateInvoiceWithSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateInvoiceWithSettings(ctx, req.(*SaveInvoiceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_SaveInvoiceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveInvoiceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).SaveInvoiceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_SaveInvoiceSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).SaveInvoiceSettings(ctx, req.(*SaveInvoiceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_GetInvoiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetInvoiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetInvoiceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetInvoiceStatus(ctx, req.(*GetInvoiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListInvoiceStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListInvoiceStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListInvoiceStatus(m, &billingListInvoiceStatusServer{ServerStream: stream})
}

type Billing_ListInvoiceStatusServer interface {
	Send(*api.InvoiceMessage) error
	grpc.ServerStream
}

type billingListInvoiceStatusServer struct {
	grpc.ServerStream
}

func (x *billingListInvoiceStatusServer) Send(m *api.InvoiceMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetInvoice(ctx, req.(*GetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListInvoice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListInvoiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListInvoice(m, &billingListInvoiceServer{ServerStream: stream})
}

type Billing_ListInvoiceServer interface {
	Send(*ListInvoiceResponse) error
	grpc.ServerStream
}

type billingListInvoiceServer struct {
	grpc.ServerStream
}

func (x *billingListInvoiceServer) Send(m *ListInvoiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_UpdateInvoicePreviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoicePreviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateInvoicePreviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateInvoicePreviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateInvoicePreviews(ctx, req.(*UpdateInvoicePreviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ExportInvoiceFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportInvoiceFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).ExportInvoiceFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_ExportInvoiceFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).ExportInvoiceFile(ctx, req.(*ExportInvoiceFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListInvoiceTemplate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListInvoiceTemplateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListInvoiceTemplate(m, &billingListInvoiceTemplateServer{ServerStream: stream})
}

type Billing_ListInvoiceTemplateServer interface {
	Send(*ListInvoiceTemplateResponse) error
	grpc.ServerStream
}

type billingListInvoiceTemplateServer struct {
	grpc.ServerStream
}

func (x *billingListInvoiceTemplateServer) Send(m *ListInvoiceTemplateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_GetInvoiceDisplaySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceDisplaySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetInvoiceDisplaySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetInvoiceDisplaySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetInvoiceDisplaySettings(ctx, req.(*GetInvoiceDisplaySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateBillingGroupInvoiceTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillingGroupInvoiceTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateBillingGroupInvoiceTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateBillingGroupInvoiceTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateBillingGroupInvoiceTemplate(ctx, req.(*UpdateBillingGroupInvoiceTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ReadServiceDiscountsServices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadServiceDiscountsServicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ReadServiceDiscountsServices(m, &billingReadServiceDiscountsServicesServer{ServerStream: stream})
}

type Billing_ReadServiceDiscountsServicesServer interface {
	Send(*v1.Service) error
	grpc.ServerStream
}

type billingReadServiceDiscountsServicesServer struct {
	grpc.ServerStream
}

func (x *billingReadServiceDiscountsServicesServer) Send(m *v1.Service) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_CreateInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateInvoiceServiceDiscounts(ctx, req.(*CreateInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateInvoiceServiceDiscounts(ctx, req.(*UpdateInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteInvoiceServiceDiscounts(ctx, req.(*DeleteInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListInvoiceServiceDiscounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListInvoiceServiceDiscountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListInvoiceServiceDiscounts(m, &billingListInvoiceServiceDiscountsServer{ServerStream: stream})
}

type Billing_ListInvoiceServiceDiscountsServer interface {
	Send(*InvoiceServiceDiscounts) error
	grpc.ServerStream
}

type billingListInvoiceServiceDiscountsServer struct {
	grpc.ServerStream
}

func (x *billingListInvoiceServiceDiscountsServer) Send(m *InvoiceServiceDiscounts) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_GetInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetInvoiceServiceDiscounts(ctx, req.(*GetInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ExportServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).ExportServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_ExportServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).ExportServiceDiscounts(ctx, req.(*ExportServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_CreateBillingGroupInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillingGroupInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateBillingGroupInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateBillingGroupInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateBillingGroupInvoiceServiceDiscounts(ctx, req.(*CreateBillingGroupInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateBillingGroupInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillingGroupInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateBillingGroupInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateBillingGroupInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateBillingGroupInvoiceServiceDiscounts(ctx, req.(*UpdateBillingGroupInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteBillingGroupInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBillingGroupInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteBillingGroupInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteBillingGroupInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteBillingGroupInvoiceServiceDiscounts(ctx, req.(*DeleteBillingGroupInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListAccountInvoiceServiceDiscounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAccountInvoiceServiceDiscountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListAccountInvoiceServiceDiscounts(m, &billingListAccountInvoiceServiceDiscountsServer{ServerStream: stream})
}

type Billing_ListAccountInvoiceServiceDiscountsServer interface {
	Send(*AccountInvoiceServiceDiscounts) error
	grpc.ServerStream
}

type billingListAccountInvoiceServiceDiscountsServer struct {
	grpc.ServerStream
}

func (x *billingListAccountInvoiceServiceDiscountsServer) Send(m *AccountInvoiceServiceDiscounts) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_CreateAccountInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateAccountInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateAccountInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateAccountInvoiceServiceDiscounts(ctx, req.(*CreateAccountInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateAccountInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateAccountInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateAccountInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateAccountInvoiceServiceDiscounts(ctx, req.(*UpdateAccountInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_RemoveAccountInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAccountInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).RemoveAccountInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_RemoveAccountInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).RemoveAccountInvoiceServiceDiscounts(ctx, req.(*RemoveAccountInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteAccountInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteAccountInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteAccountInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteAccountInvoiceServiceDiscounts(ctx, req.(*DeleteAccountInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ExportAccountInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportAccountInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).ExportAccountInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_ExportAccountInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).ExportAccountInvoiceServiceDiscounts(ctx, req.(*ExportAccountInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ExportBillingGroupInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportBillingGroupInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).ExportBillingGroupInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_ExportBillingGroupInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).ExportBillingGroupInvoiceServiceDiscounts(ctx, req.(*ExportBillingGroupInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_GetBillingGroupInvoiceServiceDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingGroupInvoiceServiceDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetBillingGroupInvoiceServiceDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetBillingGroupInvoiceServiceDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetBillingGroupInvoiceServiceDiscounts(ctx, req.(*GetBillingGroupInvoiceServiceDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_CreateReseller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateReseller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateReseller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateReseller(ctx, req.(*CreateResellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListResellers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListResellersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListResellers(m, &billingListResellersServer{ServerStream: stream})
}

type Billing_ListResellersServer interface {
	Send(*ripple.Reseller) error
	grpc.ServerStream
}

type billingListResellersServer struct {
	grpc.ServerStream
}

func (x *billingListResellersServer) Send(m *ripple.Reseller) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_GetReseller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetReseller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetReseller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetReseller(ctx, req.(*GetResellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateReseller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateReseller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateReseller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateReseller(ctx, req.(*UpdateResellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteReseller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteReseller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteReseller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteReseller(ctx, req.(*DeleteResellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_GetBillingSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetBillingSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetBillingSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetBillingSetting(ctx, req.(*GetBillingSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).ListExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_ListExchangeRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).ListExchangeRates(ctx, req.(*ListExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_SetGlobalExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGlobalExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).SetGlobalExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_SetGlobalExchangeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).SetGlobalExchangeRate(ctx, req.(*SetGlobalExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_SetPayerExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPayerExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).SetPayerExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_SetPayerExchangeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).SetPayerExchangeRate(ctx, req.(*SetPayerExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_SetBillingGroupExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBillingGroupExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).SetBillingGroupExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_SetBillingGroupExchangeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).SetBillingGroupExchangeRate(ctx, req.(*SetBillingGroupExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListAccessGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAccessGroupsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListAccessGroups(m, &billingListAccessGroupsServer{ServerStream: stream})
}

type Billing_ListAccessGroupsServer interface {
	Send(*ripple.AccessGroup) error
	grpc.ServerStream
}

type billingListAccessGroupsServer struct {
	grpc.ServerStream
}

func (x *billingListAccessGroupsServer) Send(m *ripple.AccessGroup) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_CreateAccessGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateAccessGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateAccessGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateAccessGroup(ctx, req.(*CreateAccessGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateAccessGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateAccessGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateAccessGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateAccessGroup(ctx, req.(*UpdateAccessGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteAccessGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteAccessGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteAccessGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteAccessGroup(ctx, req.(*DeleteAccessGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListAbcBillingGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAbcBillingGroupsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListAbcBillingGroups(m, &billingListAbcBillingGroupsServer{ServerStream: stream})
}

type Billing_ListAbcBillingGroupsServer interface {
	Send(*AbcBillingGroup) error
	grpc.ServerStream
}

type billingListAbcBillingGroupsServer struct {
	grpc.ServerStream
}

func (x *billingListAbcBillingGroupsServer) Send(m *AbcBillingGroup) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_ListAbcBillingGroupAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAbcBillingGroupAccountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListAbcBillingGroupAccounts(m, &billingListAbcBillingGroupAccountsServer{ServerStream: stream})
}

type Billing_ListAbcBillingGroupAccountsServer interface {
	Send(*AbcAccount) error
	grpc.ServerStream
}

type billingListAbcBillingGroupAccountsServer struct {
	grpc.ServerStream
}

func (x *billingListAbcBillingGroupAccountsServer) Send(m *AbcAccount) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_ReadInvoiceAdjustments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadInvoiceAdjustmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ReadInvoiceAdjustments(m, &billingReadInvoiceAdjustmentsServer{ServerStream: stream})
}

type Billing_ReadInvoiceAdjustmentsServer interface {
	Send(*wave.Adjustment) error
	grpc.ServerStream
}

type billingReadInvoiceAdjustmentsServer struct {
	grpc.ServerStream
}

func (x *billingReadInvoiceAdjustmentsServer) Send(m *wave.Adjustment) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_ReadAdjustmentEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadAdjustmentEntriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ReadAdjustmentEntries(m, &billingReadAdjustmentEntriesServer{ServerStream: stream})
}

type Billing_ReadAdjustmentEntriesServer interface {
	Send(*v1.AdjustmentEntry) error
	grpc.ServerStream
}

type billingReadAdjustmentEntriesServer struct {
	grpc.ServerStream
}

func (x *billingReadAdjustmentEntriesServer) Send(m *v1.AdjustmentEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_GetAdjustmentEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdjustmentEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetAdjustmentEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetAdjustmentEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetAdjustmentEntry(ctx, req.(*GetAdjustmentEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ApplyAdjustmentEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyAdjustmentEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).ApplyAdjustmentEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_ApplyAdjustmentEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).ApplyAdjustmentEntry(ctx, req.(*ApplyAdjustmentEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_RestoreAdjustmentEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreAdjustmentEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).RestoreAdjustmentEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_RestoreAdjustmentEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).RestoreAdjustmentEntry(ctx, req.(*RestoreAdjustmentEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_SplitAdjustmentEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitAdjustmentEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).SplitAdjustmentEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_SplitAdjustmentEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).SplitAdjustmentEntry(ctx, req.(*SplitAdjustmentEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_AllocateAdjustmentEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateAdjustmentEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).AllocateAdjustmentEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_AllocateAdjustmentEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).AllocateAdjustmentEntry(ctx, req.(*AllocateAdjustmentEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_RestoreSplitAdjustmentEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreSplitAdjustmentEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).RestoreSplitAdjustmentEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_RestoreSplitAdjustmentEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).RestoreSplitAdjustmentEntry(ctx, req.(*RestoreSplitAdjustmentEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_RestoreAllocateAdjustmentEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreAllocateAdjustmentEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).RestoreAllocateAdjustmentEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_RestoreAllocateAdjustmentEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).RestoreAllocateAdjustmentEntry(ctx, req.(*RestoreAllocateAdjustmentEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListAccountResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAccountResourcesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListAccountResources(m, &billingListAccountResourcesServer{ServerStream: stream})
}

type Billing_ListAccountResourcesServer interface {
	Send(*ResourceAccount) error
	grpc.ServerStream
}

type billingListAccountResourcesServer struct {
	grpc.ServerStream
}

func (x *billingListAccountResourcesServer) Send(m *ResourceAccount) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_GetAdjustmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdjustmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetAdjustmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetAdjustmentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetAdjustmentConfig(ctx, req.(*GetAdjustmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_CreateAdjustmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdjustmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateAdjustmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateAdjustmentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateAdjustmentConfig(ctx, req.(*CreateAdjustmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateAdjustmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdjustmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateAdjustmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateAdjustmentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateAdjustmentConfig(ctx, req.(*UpdateAdjustmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteAdjustmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdjustmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteAdjustmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteAdjustmentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteAdjustmentConfig(ctx, req.(*DeleteAdjustmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ReadUntaggedGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadUntaggedGroupsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ReadUntaggedGroups(m, &billingReadUntaggedGroupsServer{ServerStream: stream})
}

type Billing_ReadUntaggedGroupsServer interface {
	Send(*ripple.UntaggedGroup) error
	grpc.ServerStream
}

type billingReadUntaggedGroupsServer struct {
	grpc.ServerStream
}

func (x *billingReadUntaggedGroupsServer) Send(m *ripple.UntaggedGroup) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_ReadCustomizedBillingServices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadCustomizedBillingServicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ReadCustomizedBillingServices(m, &billingReadCustomizedBillingServicesServer{ServerStream: stream})
}

type Billing_ReadCustomizedBillingServicesServer interface {
	Send(*ripple.CustomizedBillingService) error
	grpc.ServerStream
}

type billingReadCustomizedBillingServicesServer struct {
	grpc.ServerStream
}

func (x *billingReadCustomizedBillingServicesServer) Send(m *ripple.CustomizedBillingService) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_GetCustomizedBillingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomizedBillingServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetCustomizedBillingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetCustomizedBillingService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetCustomizedBillingService(ctx, req.(*GetCustomizedBillingServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_CreateCustomizedBillingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomizedBillingServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateCustomizedBillingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateCustomizedBillingService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateCustomizedBillingService(ctx, req.(*CreateCustomizedBillingServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateCustomizedBillingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomizedBillingServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateCustomizedBillingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateCustomizedBillingService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateCustomizedBillingService(ctx, req.(*UpdateCustomizedBillingServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteCustomizedBillingService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomizedBillingServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteCustomizedBillingService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteCustomizedBillingService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteCustomizedBillingService(ctx, req.(*DeleteCustomizedBillingServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_GetCustomizedBillingServiceBillingGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCustomizedBillingServiceBillingGroupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).GetCustomizedBillingServiceBillingGroup(m, &billingGetCustomizedBillingServiceBillingGroupServer{ServerStream: stream})
}

type Billing_GetCustomizedBillingServiceBillingGroupServer interface {
	Send(*GetCustomizedBillingServiceBillingGroupResponse) error
	grpc.ServerStream
}

type billingGetCustomizedBillingServiceBillingGroupServer struct {
	grpc.ServerStream
}

func (x *billingGetCustomizedBillingServiceBillingGroupServer) Send(m *GetCustomizedBillingServiceBillingGroupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_SetCustomizedBillingServiceBillingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomizedBillingServiceBillingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).SetCustomizedBillingServiceBillingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_SetCustomizedBillingServiceBillingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).SetCustomizedBillingServiceBillingGroup(ctx, req.(*SetCustomizedBillingServiceBillingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteCustomizedBillingServiceBillingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomizedBillingServiceBillingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteCustomizedBillingServiceBillingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteCustomizedBillingServiceBillingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteCustomizedBillingServiceBillingGroup(ctx, req.(*DeleteCustomizedBillingServiceBillingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_GetTags_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTagsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).GetTags(m, &billingGetTagsServer{ServerStream: stream})
}

type Billing_GetTagsServer interface {
	Send(*TagData) error
	grpc.ServerStream
}

type billingGetTagsServer struct {
	grpc.ServerStream
}

func (x *billingGetTagsServer) Send(m *TagData) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_CreateCustomField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateCustomField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateCustomField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateCustomField(ctx, req.(*CreateCustomFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListCustomField_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCustomFieldRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListCustomField(m, &billingListCustomFieldServer{ServerStream: stream})
}

type Billing_ListCustomFieldServer interface {
	Send(*CustomField) error
	grpc.ServerStream
}

type billingListCustomFieldServer struct {
	grpc.ServerStream
}

func (x *billingListCustomFieldServer) Send(m *CustomField) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_AddBillingGroupCustomField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBillingGroupCustomFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).AddBillingGroupCustomField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_AddBillingGroupCustomField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).AddBillingGroupCustomField(ctx, req.(*AddBillingGroupCustomFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ListBillingGroupCustomField_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBillingGroupCustomFieldRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).ListBillingGroupCustomField(m, &billingListBillingGroupCustomFieldServer{ServerStream: stream})
}

type Billing_ListBillingGroupCustomFieldServer interface {
	Send(*ListBillingGroupCustomFieldResponse) error
	grpc.ServerStream
}

type billingListBillingGroupCustomFieldServer struct {
	grpc.ServerStream
}

func (x *billingListBillingGroupCustomFieldServer) Send(m *ListBillingGroupCustomFieldResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_AddTagsToBillingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTagsToBillingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).AddTagsToBillingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_AddTagsToBillingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).AddTagsToBillingGroup(ctx, req.(*AddTagsToBillingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateNonTagGroupToBillingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNonTagGroupToBillingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateNonTagGroupToBillingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateNonTagGroupToBillingGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateNonTagGroupToBillingGroup(ctx, req.(*UpdateNonTagGroupToBillingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteBillingGroupCustomField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBillingGroupCustomFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteBillingGroupCustomField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteBillingGroupCustomField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteBillingGroupCustomField(ctx, req.(*DeleteBillingGroupCustomFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateCustomField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateCustomField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateCustomField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateCustomField(ctx, req.(*UpdateCustomFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteCustomField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteCustomField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteCustomField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteCustomField(ctx, req.(*DeleteCustomFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_CreateFreeFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFreeFormatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateFreeFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_CreateFreeFormat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateFreeFormat(ctx, req.(*CreateFreeFormatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_DeleteFreeFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFreeFormatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).DeleteFreeFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_DeleteFreeFormat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).DeleteFreeFormat(ctx, req.(*DeleteFreeFormatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_GetFreeFormat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFreeFormatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).GetFreeFormat(m, &billingGetFreeFormatServer{ServerStream: stream})
}

type Billing_GetFreeFormatServer interface {
	Send(*GetFreeFormatResponse) error
	grpc.ServerStream
}

type billingGetFreeFormatServer struct {
	grpc.ServerStream
}

func (x *billingGetFreeFormatServer) Send(m *GetFreeFormatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_GetTagsAddingSetting_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTagsAddingSettingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BillingServer).GetTagsAddingSetting(m, &billingGetTagsAddingSettingServer{ServerStream: stream})
}

type Billing_GetTagsAddingSettingServer interface {
	Send(*TagsAddingSetting) error
	grpc.ServerStream
}

type billingGetTagsAddingSettingServer struct {
	grpc.ServerStream
}

func (x *billingGetTagsAddingSettingServer) Send(m *TagsAddingSetting) error {
	return x.ServerStream.SendMsg(m)
}

func _Billing_UpdateTagsAddingSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagsAddingSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateTagsAddingSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateTagsAddingSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateTagsAddingSetting(ctx, req.(*UpdateTagsAddingSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ExportBillingGroupCsv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportBillingGroupCsvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).ExportBillingGroupCsv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_ExportBillingGroupCsv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).ExportBillingGroupCsv(ctx, req.(*ExportBillingGroupCsvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_ExportInvoiceSettingCsv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportInvoiceSettingCsvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).ExportInvoiceSettingCsv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_ExportInvoiceSettingCsv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).ExportInvoiceSettingCsv(ctx, req.(*ExportInvoiceSettingCsvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateBillingGroupBasicInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillingGroupBasicInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateBillingGroupBasicInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateBillingGroupBasicInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateBillingGroupBasicInformation(ctx, req.(*UpdateBillingGroupBasicInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateBillingGroupCustomFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillingGroupCustomFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateBillingGroupCustomFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateBillingGroupCustomFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateBillingGroupCustomFields(ctx, req.(*UpdateBillingGroupCustomFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_GetBillingGroupAccountSupportPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingGroupAccountSupportPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).GetBillingGroupAccountSupportPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_GetBillingGroupAccountSupportPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).GetBillingGroupAccountSupportPlan(ctx, req.(*GetBillingGroupAccountSupportPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_UpdateBillingGroupAccountSupportPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillingGroupAccountSupportPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).UpdateBillingGroupAccountSupportPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Billing_UpdateBillingGroupAccountSupportPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).UpdateBillingGroupAccountSupportPlan(ctx, req.(*UpdateBillingGroupAccountSupportPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Billing_ServiceDesc is the grpc.ServiceDesc for Billing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Billing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.billing.v1.Billing",
	HandlerType: (*BillingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBillingGroup",
			Handler:    _Billing_CreateBillingGroup_Handler,
		},
		{
			MethodName: "CreateBillingGroupMerged",
			Handler:    _Billing_CreateBillingGroupMerged_Handler,
		},
		{
			MethodName: "DeleteBillinGroup",
			Handler:    _Billing_DeleteBillinGroup_Handler,
		},
		{
			MethodName: "AddAccountToBillingGroup",
			Handler:    _Billing_AddAccountToBillingGroup_Handler,
		},
		{
			MethodName: "GetBillingGroup",
			Handler:    _Billing_GetBillingGroup_Handler,
		},
		{
			MethodName: "GetAccessGroup",
			Handler:    _Billing_GetAccessGroup_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _Billing_CreateInvoice_Handler,
		},
		{
			MethodName: "CreateInvoiceWithSettings",
			Handler:    _Billing_CreateInvoiceWithSettings_Handler,
		},
		{
			MethodName: "SaveInvoiceSettings",
			Handler:    _Billing_SaveInvoiceSettings_Handler,
		},
		{
			MethodName: "GetInvoiceStatus",
			Handler:    _Billing_GetInvoiceStatus_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _Billing_GetInvoice_Handler,
		},
		{
			MethodName: "UpdateInvoicePreviews",
			Handler:    _Billing_UpdateInvoicePreviews_Handler,
		},
		{
			MethodName: "ExportInvoiceFile",
			Handler:    _Billing_ExportInvoiceFile_Handler,
		},
		{
			MethodName: "GetInvoiceDisplaySettings",
			Handler:    _Billing_GetInvoiceDisplaySettings_Handler,
		},
		{
			MethodName: "UpdateBillingGroupInvoiceTemplate",
			Handler:    _Billing_UpdateBillingGroupInvoiceTemplate_Handler,
		},
		{
			MethodName: "CreateInvoiceServiceDiscounts",
			Handler:    _Billing_CreateInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "UpdateInvoiceServiceDiscounts",
			Handler:    _Billing_UpdateInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "DeleteInvoiceServiceDiscounts",
			Handler:    _Billing_DeleteInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "GetInvoiceServiceDiscounts",
			Handler:    _Billing_GetInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "ExportServiceDiscounts",
			Handler:    _Billing_ExportServiceDiscounts_Handler,
		},
		{
			MethodName: "CreateBillingGroupInvoiceServiceDiscounts",
			Handler:    _Billing_CreateBillingGroupInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "UpdateBillingGroupInvoiceServiceDiscounts",
			Handler:    _Billing_UpdateBillingGroupInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "DeleteBillingGroupInvoiceServiceDiscounts",
			Handler:    _Billing_DeleteBillingGroupInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "CreateAccountInvoiceServiceDiscounts",
			Handler:    _Billing_CreateAccountInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "UpdateAccountInvoiceServiceDiscounts",
			Handler:    _Billing_UpdateAccountInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "RemoveAccountInvoiceServiceDiscounts",
			Handler:    _Billing_RemoveAccountInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "DeleteAccountInvoiceServiceDiscounts",
			Handler:    _Billing_DeleteAccountInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "ExportAccountInvoiceServiceDiscounts",
			Handler:    _Billing_ExportAccountInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "ExportBillingGroupInvoiceServiceDiscounts",
			Handler:    _Billing_ExportBillingGroupInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "GetBillingGroupInvoiceServiceDiscounts",
			Handler:    _Billing_GetBillingGroupInvoiceServiceDiscounts_Handler,
		},
		{
			MethodName: "CreateReseller",
			Handler:    _Billing_CreateReseller_Handler,
		},
		{
			MethodName: "GetReseller",
			Handler:    _Billing_GetReseller_Handler,
		},
		{
			MethodName: "UpdateReseller",
			Handler:    _Billing_UpdateReseller_Handler,
		},
		{
			MethodName: "DeleteReseller",
			Handler:    _Billing_DeleteReseller_Handler,
		},
		{
			MethodName: "GetBillingSetting",
			Handler:    _Billing_GetBillingSetting_Handler,
		},
		{
			MethodName: "ListExchangeRates",
			Handler:    _Billing_ListExchangeRates_Handler,
		},
		{
			MethodName: "SetGlobalExchangeRate",
			Handler:    _Billing_SetGlobalExchangeRate_Handler,
		},
		{
			MethodName: "SetPayerExchangeRate",
			Handler:    _Billing_SetPayerExchangeRate_Handler,
		},
		{
			MethodName: "SetBillingGroupExchangeRate",
			Handler:    _Billing_SetBillingGroupExchangeRate_Handler,
		},
		{
			MethodName: "CreateAccessGroup",
			Handler:    _Billing_CreateAccessGroup_Handler,
		},
		{
			MethodName: "UpdateAccessGroup",
			Handler:    _Billing_UpdateAccessGroup_Handler,
		},
		{
			MethodName: "DeleteAccessGroup",
			Handler:    _Billing_DeleteAccessGroup_Handler,
		},
		{
			MethodName: "GetAdjustmentEntry",
			Handler:    _Billing_GetAdjustmentEntry_Handler,
		},
		{
			MethodName: "ApplyAdjustmentEntry",
			Handler:    _Billing_ApplyAdjustmentEntry_Handler,
		},
		{
			MethodName: "RestoreAdjustmentEntry",
			Handler:    _Billing_RestoreAdjustmentEntry_Handler,
		},
		{
			MethodName: "SplitAdjustmentEntry",
			Handler:    _Billing_SplitAdjustmentEntry_Handler,
		},
		{
			MethodName: "AllocateAdjustmentEntry",
			Handler:    _Billing_AllocateAdjustmentEntry_Handler,
		},
		{
			MethodName: "RestoreSplitAdjustmentEntry",
			Handler:    _Billing_RestoreSplitAdjustmentEntry_Handler,
		},
		{
			MethodName: "RestoreAllocateAdjustmentEntry",
			Handler:    _Billing_RestoreAllocateAdjustmentEntry_Handler,
		},
		{
			MethodName: "GetAdjustmentConfig",
			Handler:    _Billing_GetAdjustmentConfig_Handler,
		},
		{
			MethodName: "CreateAdjustmentConfig",
			Handler:    _Billing_CreateAdjustmentConfig_Handler,
		},
		{
			MethodName: "UpdateAdjustmentConfig",
			Handler:    _Billing_UpdateAdjustmentConfig_Handler,
		},
		{
			MethodName: "DeleteAdjustmentConfig",
			Handler:    _Billing_DeleteAdjustmentConfig_Handler,
		},
		{
			MethodName: "GetCustomizedBillingService",
			Handler:    _Billing_GetCustomizedBillingService_Handler,
		},
		{
			MethodName: "CreateCustomizedBillingService",
			Handler:    _Billing_CreateCustomizedBillingService_Handler,
		},
		{
			MethodName: "UpdateCustomizedBillingService",
			Handler:    _Billing_UpdateCustomizedBillingService_Handler,
		},
		{
			MethodName: "DeleteCustomizedBillingService",
			Handler:    _Billing_DeleteCustomizedBillingService_Handler,
		},
		{
			MethodName: "SetCustomizedBillingServiceBillingGroup",
			Handler:    _Billing_SetCustomizedBillingServiceBillingGroup_Handler,
		},
		{
			MethodName: "DeleteCustomizedBillingServiceBillingGroup",
			Handler:    _Billing_DeleteCustomizedBillingServiceBillingGroup_Handler,
		},
		{
			MethodName: "CreateCustomField",
			Handler:    _Billing_CreateCustomField_Handler,
		},
		{
			MethodName: "AddBillingGroupCustomField",
			Handler:    _Billing_AddBillingGroupCustomField_Handler,
		},
		{
			MethodName: "AddTagsToBillingGroup",
			Handler:    _Billing_AddTagsToBillingGroup_Handler,
		},
		{
			MethodName: "UpdateNonTagGroupToBillingGroup",
			Handler:    _Billing_UpdateNonTagGroupToBillingGroup_Handler,
		},
		{
			MethodName: "DeleteBillingGroupCustomField",
			Handler:    _Billing_DeleteBillingGroupCustomField_Handler,
		},
		{
			MethodName: "UpdateCustomField",
			Handler:    _Billing_UpdateCustomField_Handler,
		},
		{
			MethodName: "DeleteCustomField",
			Handler:    _Billing_DeleteCustomField_Handler,
		},
		{
			MethodName: "CreateFreeFormat",
			Handler:    _Billing_CreateFreeFormat_Handler,
		},
		{
			MethodName: "DeleteFreeFormat",
			Handler:    _Billing_DeleteFreeFormat_Handler,
		},
		{
			MethodName: "UpdateTagsAddingSetting",
			Handler:    _Billing_UpdateTagsAddingSetting_Handler,
		},
		{
			MethodName: "ExportBillingGroupCsv",
			Handler:    _Billing_ExportBillingGroupCsv_Handler,
		},
		{
			MethodName: "ExportInvoiceSettingCsv",
			Handler:    _Billing_ExportInvoiceSettingCsv_Handler,
		},
		{
			MethodName: "UpdateBillingGroupBasicInformation",
			Handler:    _Billing_UpdateBillingGroupBasicInformation_Handler,
		},
		{
			MethodName: "UpdateBillingGroupCustomFields",
			Handler:    _Billing_UpdateBillingGroupCustomFields_Handler,
		},
		{
			MethodName: "GetBillingGroupAccountSupportPlan",
			Handler:    _Billing_GetBillingGroupAccountSupportPlan_Handler,
		},
		{
			MethodName: "UpdateBillingGroupAccountSupportPlan",
			Handler:    _Billing_UpdateBillingGroupAccountSupportPlan_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBillingGroups",
			Handler:       _Billing_ListBillingGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAwsDailyRunHistory",
			Handler:       _Billing_ListAwsDailyRunHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUsageCostsDrift",
			Handler:       _Billing_ListUsageCostsDrift_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListInvoiceStatus",
			Handler:       _Billing_ListInvoiceStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListInvoice",
			Handler:       _Billing_ListInvoice_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListInvoiceTemplate",
			Handler:       _Billing_ListInvoiceTemplate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadServiceDiscountsServices",
			Handler:       _Billing_ReadServiceDiscountsServices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListInvoiceServiceDiscounts",
			Handler:       _Billing_ListInvoiceServiceDiscounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAccountInvoiceServiceDiscounts",
			Handler:       _Billing_ListAccountInvoiceServiceDiscounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListResellers",
			Handler:       _Billing_ListResellers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAccessGroups",
			Handler:       _Billing_ListAccessGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAbcBillingGroups",
			Handler:       _Billing_ListAbcBillingGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAbcBillingGroupAccounts",
			Handler:       _Billing_ListAbcBillingGroupAccounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadInvoiceAdjustments",
			Handler:       _Billing_ReadInvoiceAdjustments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadAdjustmentEntries",
			Handler:       _Billing_ReadAdjustmentEntries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAccountResources",
			Handler:       _Billing_ListAccountResources_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadUntaggedGroups",
			Handler:       _Billing_ReadUntaggedGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadCustomizedBillingServices",
			Handler:       _Billing_ReadCustomizedBillingServices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCustomizedBillingServiceBillingGroup",
			Handler:       _Billing_GetCustomizedBillingServiceBillingGroup_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTags",
			Handler:       _Billing_GetTags_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListCustomField",
			Handler:       _Billing_ListCustomField_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListBillingGroupCustomField",
			Handler:       _Billing_ListBillingGroupCustomField_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFreeFormat",
			Handler:       _Billing_GetFreeFormat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTagsAddingSetting",
			Handler:       _Billing_GetTagsAddingSetting_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "billing/v1/billing.proto",
}
