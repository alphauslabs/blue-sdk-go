// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: pricing/v1/pricing.proto

package pricing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Pricing_GetInfo_FullMethodName        = "/blueapi.pricing.v1.Pricing/GetInfo"
	Pricing_GetPricingInfo_FullMethodName = "/blueapi.pricing.v1.Pricing/GetPricingInfo"
)

// PricingClient is the client API for Pricing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Pricing service definition.
type PricingClient interface {
	// Test endpoint only.
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// Get pricing info
	GetPricingInfo(ctx context.Context, in *GetPricingInfoRequest, opts ...grpc.CallOption) (Pricing_GetPricingInfoClient, error)
}

type pricingClient struct {
	cc grpc.ClientConnInterface
}

func NewPricingClient(cc grpc.ClientConnInterface) PricingClient {
	return &pricingClient{cc}
}

func (c *pricingClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, Pricing_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingClient) GetPricingInfo(ctx context.Context, in *GetPricingInfoRequest, opts ...grpc.CallOption) (Pricing_GetPricingInfoClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Pricing_ServiceDesc.Streams[0], Pricing_GetPricingInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &pricingGetPricingInfoClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pricing_GetPricingInfoClient interface {
	Recv() (*GetPricingInfoResponse, error)
	grpc.ClientStream
}

type pricingGetPricingInfoClient struct {
	grpc.ClientStream
}

func (x *pricingGetPricingInfoClient) Recv() (*GetPricingInfoResponse, error) {
	m := new(GetPricingInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PricingServer is the server API for Pricing service.
// All implementations must embed UnimplementedPricingServer
// for forward compatibility
//
// Pricing service definition.
type PricingServer interface {
	// Test endpoint only.
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// Get pricing info
	GetPricingInfo(*GetPricingInfoRequest, Pricing_GetPricingInfoServer) error
	mustEmbedUnimplementedPricingServer()
}

// UnimplementedPricingServer must be embedded to have forward compatible implementations.
type UnimplementedPricingServer struct {
}

func (UnimplementedPricingServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedPricingServer) GetPricingInfo(*GetPricingInfoRequest, Pricing_GetPricingInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPricingInfo not implemented")
}
func (UnimplementedPricingServer) mustEmbedUnimplementedPricingServer() {}

// UnsafePricingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PricingServer will
// result in compilation errors.
type UnsafePricingServer interface {
	mustEmbedUnimplementedPricingServer()
}

func RegisterPricingServer(s grpc.ServiceRegistrar, srv PricingServer) {
	s.RegisterService(&Pricing_ServiceDesc, srv)
}

func _Pricing_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pricing_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pricing_GetPricingInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPricingInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PricingServer).GetPricingInfo(m, &pricingGetPricingInfoServer{ServerStream: stream})
}

type Pricing_GetPricingInfoServer interface {
	Send(*GetPricingInfoResponse) error
	grpc.ServerStream
}

type pricingGetPricingInfoServer struct {
	grpc.ServerStream
}

func (x *pricingGetPricingInfoServer) Send(m *GetPricingInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Pricing_ServiceDesc is the grpc.ServiceDesc for Pricing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pricing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.pricing.v1.Pricing",
	HandlerType: (*PricingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Pricing_GetInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPricingInfo",
			Handler:       _Pricing_GetPricingInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pricing/v1/pricing.proto",
}
