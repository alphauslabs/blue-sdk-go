// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: prism/v1/prism.proto

package prism

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Prism_Test_FullMethodName                     = "/blueapi.prism.v1.Prism/Test"
	Prism_CreateProject_FullMethodName            = "/blueapi.prism.v1.Prism/CreateProject"
	Prism_GetProject_FullMethodName               = "/blueapi.prism.v1.Prism/GetProject"
	Prism_DeleteProject_FullMethodName            = "/blueapi.prism.v1.Prism/DeleteProject"
	Prism_ListProjects_FullMethodName             = "/blueapi.prism.v1.Prism/ListProjects"
	Prism_CreateOrganization_FullMethodName       = "/blueapi.prism.v1.Prism/CreateOrganization"
	Prism_GetOrganization_FullMethodName          = "/blueapi.prism.v1.Prism/GetOrganization"
	Prism_UpdateOrganization_FullMethodName       = "/blueapi.prism.v1.Prism/UpdateOrganization"
	Prism_DeleteOrganization_FullMethodName       = "/blueapi.prism.v1.Prism/DeleteOrganization"
	Prism_VerifyUser_FullMethodName               = "/blueapi.prism.v1.Prism/VerifyUser"
	Prism_CreateTeam_FullMethodName               = "/blueapi.prism.v1.Prism/CreateTeam"
	Prism_GetTeam_FullMethodName                  = "/blueapi.prism.v1.Prism/GetTeam"
	Prism_ListTeams_FullMethodName                = "/blueapi.prism.v1.Prism/ListTeams"
	Prism_ListTeamMembers_FullMethodName          = "/blueapi.prism.v1.Prism/ListTeamMembers"
	Prism_ListProjectToTeam_FullMethodName        = "/blueapi.prism.v1.Prism/ListProjectToTeam"
	Prism_ListProducts_FullMethodName             = "/blueapi.prism.v1.Prism/ListProducts"
	Prism_CreateProduct_FullMethodName            = "/blueapi.prism.v1.Prism/CreateProduct"
	Prism_DeleteProduct_FullMethodName            = "/blueapi.prism.v1.Prism/DeleteProduct"
	Prism_AssignProjectToTeam_FullMethodName      = "/blueapi.prism.v1.Prism/AssignProjectToTeam"
	Prism_DeleteTeam_FullMethodName               = "/blueapi.prism.v1.Prism/DeleteTeam"
	Prism_GetIntegrationStatus_FullMethodName     = "/blueapi.prism.v1.Prism/GetIntegrationStatus"
	Prism_ListReportSchedules_FullMethodName      = "/blueapi.prism.v1.Prism/ListReportSchedules"
	Prism_UpdateReportSchedule_FullMethodName     = "/blueapi.prism.v1.Prism/UpdateReportSchedule"
	Prism_CreateReportSchedule_FullMethodName     = "/blueapi.prism.v1.Prism/CreateReportSchedule"
	Prism_UpdateOrgTimezone_FullMethodName        = "/blueapi.prism.v1.Prism/UpdateOrgTimezone"
	Prism_ListIntegrationStatus_FullMethodName    = "/blueapi.prism.v1.Prism/ListIntegrationStatus"
	Prism_UpdateWorkflow_FullMethodName           = "/blueapi.prism.v1.Prism/UpdateWorkflow"
	Prism_ListWorkflows_FullMethodName            = "/blueapi.prism.v1.Prism/ListWorkflows"
	Prism_ListActivities_FullMethodName           = "/blueapi.prism.v1.Prism/ListActivities"
	Prism_JoinOrganization_FullMethodName         = "/blueapi.prism.v1.Prism/JoinOrganization"
	Prism_GenerateOrganizationCode_FullMethodName = "/blueapi.prism.v1.Prism/GenerateOrganizationCode"
)

// PrismClient is the client API for Prism service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Prism service definition.
type PrismClient interface {
	// Test endpoint only.
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	// WIP: Creates a new project.
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WIP: Gets information about a project by ID.
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// WIP: Deletes a project by ID.
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WIP: Lists all projects
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (Prism_ListProjectsClient, error)
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...grpc.CallOption) (*VerifyUserResponse, error)
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error)
	ListTeams(ctx context.Context, in *ListTeamsRequest, opts ...grpc.CallOption) (Prism_ListTeamsClient, error)
	ListTeamMembers(ctx context.Context, in *ListTeamMembersRequest, opts ...grpc.CallOption) (Prism_ListTeamMembersClient, error)
	ListProjectToTeam(ctx context.Context, in *ListProjectToTeamRequest, opts ...grpc.CallOption) (Prism_ListProjectToTeamClient, error)
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (Prism_ListProductsClient, error)
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AssignProjectToTeam(ctx context.Context, in *AssignProjectToTeamRequest, opts ...grpc.CallOption) (*AssignProjectToTeamResponse, error)
	DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetIntegrationStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIntegrationStatusResponse, error)
	ListReportSchedules(ctx context.Context, in *ListReportSchedulesRequest, opts ...grpc.CallOption) (Prism_ListReportSchedulesClient, error)
	UpdateReportSchedule(ctx context.Context, in *ReportSchedule, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateReportSchedule(ctx context.Context, in *ReportSchedule, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateOrgTimezone(ctx context.Context, in *UpdateOrgTimezoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListIntegrationStatus(ctx context.Context, in *ListIntegrationStatusRequest, opts ...grpc.CallOption) (Prism_ListIntegrationStatusClient, error)
	UpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (Prism_ListWorkflowsClient, error)
	ListActivities(ctx context.Context, in *ListActivitiesRequest, opts ...grpc.CallOption) (Prism_ListActivitiesClient, error)
	JoinOrganization(ctx context.Context, in *JoinOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GenerateOrganizationCode(ctx context.Context, in *GenerateOrganizationCodeRequest, opts ...grpc.CallOption) (*GenerateOrganizationCodeResponse, error)
}

type prismClient struct {
	cc grpc.ClientConnInterface
}

func NewPrismClient(cc grpc.ClientConnInterface) PrismClient {
	return &prismClient{cc}
}

func (c *prismClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, Prism_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Prism_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, Prism_GetProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Prism_DeleteProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (Prism_ListProjectsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Prism_ServiceDesc.Streams[0], Prism_ListProjects_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &prismListProjectsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Prism_ListProjectsClient interface {
	Recv() (*Project, error)
	grpc.ClientStream
}

type prismListProjectsClient struct {
	grpc.ClientStream
}

func (x *prismListProjectsClient) Recv() (*Project, error) {
	m := new(Project)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prismClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Prism_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, Prism_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Prism_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Prism_DeleteOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...grpc.CallOption) (*VerifyUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyUserResponse)
	err := c.cc.Invoke(ctx, Prism_VerifyUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Prism_CreateTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamResponse)
	err := c.cc.Invoke(ctx, Prism_GetTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) ListTeams(ctx context.Context, in *ListTeamsRequest, opts ...grpc.CallOption) (Prism_ListTeamsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Prism_ServiceDesc.Streams[1], Prism_ListTeams_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &prismListTeamsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Prism_ListTeamsClient interface {
	Recv() (*Team, error)
	grpc.ClientStream
}

type prismListTeamsClient struct {
	grpc.ClientStream
}

func (x *prismListTeamsClient) Recv() (*Team, error) {
	m := new(Team)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prismClient) ListTeamMembers(ctx context.Context, in *ListTeamMembersRequest, opts ...grpc.CallOption) (Prism_ListTeamMembersClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Prism_ServiceDesc.Streams[2], Prism_ListTeamMembers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &prismListTeamMembersClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Prism_ListTeamMembersClient interface {
	Recv() (*Member, error)
	grpc.ClientStream
}

type prismListTeamMembersClient struct {
	grpc.ClientStream
}

func (x *prismListTeamMembersClient) Recv() (*Member, error) {
	m := new(Member)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prismClient) ListProjectToTeam(ctx context.Context, in *ListProjectToTeamRequest, opts ...grpc.CallOption) (Prism_ListProjectToTeamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Prism_ServiceDesc.Streams[3], Prism_ListProjectToTeam_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &prismListProjectToTeamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Prism_ListProjectToTeamClient interface {
	Recv() (*ListProjectToTeamResponse, error)
	grpc.ClientStream
}

type prismListProjectToTeamClient struct {
	grpc.ClientStream
}

func (x *prismListProjectToTeamClient) Recv() (*ListProjectToTeamResponse, error) {
	m := new(ListProjectToTeamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prismClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (Prism_ListProductsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Prism_ServiceDesc.Streams[4], Prism_ListProducts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &prismListProductsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Prism_ListProductsClient interface {
	Recv() (*Product, error)
	grpc.ClientStream
}

type prismListProductsClient struct {
	grpc.ClientStream
}

func (x *prismListProductsClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prismClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Prism_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Prism_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) AssignProjectToTeam(ctx context.Context, in *AssignProjectToTeamRequest, opts ...grpc.CallOption) (*AssignProjectToTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignProjectToTeamResponse)
	err := c.cc.Invoke(ctx, Prism_AssignProjectToTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Prism_DeleteTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) GetIntegrationStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIntegrationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntegrationStatusResponse)
	err := c.cc.Invoke(ctx, Prism_GetIntegrationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) ListReportSchedules(ctx context.Context, in *ListReportSchedulesRequest, opts ...grpc.CallOption) (Prism_ListReportSchedulesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Prism_ServiceDesc.Streams[5], Prism_ListReportSchedules_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &prismListReportSchedulesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Prism_ListReportSchedulesClient interface {
	Recv() (*ReportSchedule, error)
	grpc.ClientStream
}

type prismListReportSchedulesClient struct {
	grpc.ClientStream
}

func (x *prismListReportSchedulesClient) Recv() (*ReportSchedule, error) {
	m := new(ReportSchedule)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prismClient) UpdateReportSchedule(ctx context.Context, in *ReportSchedule, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Prism_UpdateReportSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) CreateReportSchedule(ctx context.Context, in *ReportSchedule, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Prism_CreateReportSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) UpdateOrgTimezone(ctx context.Context, in *UpdateOrgTimezoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Prism_UpdateOrgTimezone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) ListIntegrationStatus(ctx context.Context, in *ListIntegrationStatusRequest, opts ...grpc.CallOption) (Prism_ListIntegrationStatusClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Prism_ServiceDesc.Streams[6], Prism_ListIntegrationStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &prismListIntegrationStatusClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Prism_ListIntegrationStatusClient interface {
	Recv() (*IntegrationStatus, error)
	grpc.ClientStream
}

type prismListIntegrationStatusClient struct {
	grpc.ClientStream
}

func (x *prismListIntegrationStatusClient) Recv() (*IntegrationStatus, error) {
	m := new(IntegrationStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prismClient) UpdateWorkflow(ctx context.Context, in *UpdateWorkflowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Prism_UpdateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (Prism_ListWorkflowsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Prism_ServiceDesc.Streams[7], Prism_ListWorkflows_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &prismListWorkflowsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Prism_ListWorkflowsClient interface {
	Recv() (*Workflow, error)
	grpc.ClientStream
}

type prismListWorkflowsClient struct {
	grpc.ClientStream
}

func (x *prismListWorkflowsClient) Recv() (*Workflow, error) {
	m := new(Workflow)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prismClient) ListActivities(ctx context.Context, in *ListActivitiesRequest, opts ...grpc.CallOption) (Prism_ListActivitiesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Prism_ServiceDesc.Streams[8], Prism_ListActivities_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &prismListActivitiesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Prism_ListActivitiesClient interface {
	Recv() (*Activity, error)
	grpc.ClientStream
}

type prismListActivitiesClient struct {
	grpc.ClientStream
}

func (x *prismListActivitiesClient) Recv() (*Activity, error) {
	m := new(Activity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prismClient) JoinOrganization(ctx context.Context, in *JoinOrganizationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Prism_JoinOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prismClient) GenerateOrganizationCode(ctx context.Context, in *GenerateOrganizationCodeRequest, opts ...grpc.CallOption) (*GenerateOrganizationCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateOrganizationCodeResponse)
	err := c.cc.Invoke(ctx, Prism_GenerateOrganizationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrismServer is the server API for Prism service.
// All implementations must embed UnimplementedPrismServer
// for forward compatibility
//
// Prism service definition.
type PrismServer interface {
	// Test endpoint only.
	Test(context.Context, *TestRequest) (*TestResponse, error)
	// WIP: Creates a new project.
	CreateProject(context.Context, *CreateProjectRequest) (*emptypb.Empty, error)
	// WIP: Gets information about a project by ID.
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// WIP: Deletes a project by ID.
	DeleteProject(context.Context, *DeleteProjectRequest) (*emptypb.Empty, error)
	// WIP: Lists all projects
	ListProjects(*ListProjectsRequest, Prism_ListProjectsServer) error
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*emptypb.Empty, error)
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*emptypb.Empty, error)
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*emptypb.Empty, error)
	VerifyUser(context.Context, *VerifyUserRequest) (*VerifyUserResponse, error)
	CreateTeam(context.Context, *CreateTeamRequest) (*emptypb.Empty, error)
	GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error)
	ListTeams(*ListTeamsRequest, Prism_ListTeamsServer) error
	ListTeamMembers(*ListTeamMembersRequest, Prism_ListTeamMembersServer) error
	ListProjectToTeam(*ListProjectToTeamRequest, Prism_ListProjectToTeamServer) error
	ListProducts(*ListProductsRequest, Prism_ListProductsServer) error
	CreateProduct(context.Context, *CreateProductRequest) (*emptypb.Empty, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*emptypb.Empty, error)
	AssignProjectToTeam(context.Context, *AssignProjectToTeamRequest) (*AssignProjectToTeamResponse, error)
	DeleteTeam(context.Context, *DeleteTeamRequest) (*emptypb.Empty, error)
	GetIntegrationStatus(context.Context, *emptypb.Empty) (*GetIntegrationStatusResponse, error)
	ListReportSchedules(*ListReportSchedulesRequest, Prism_ListReportSchedulesServer) error
	UpdateReportSchedule(context.Context, *ReportSchedule) (*emptypb.Empty, error)
	CreateReportSchedule(context.Context, *ReportSchedule) (*emptypb.Empty, error)
	UpdateOrgTimezone(context.Context, *UpdateOrgTimezoneRequest) (*emptypb.Empty, error)
	ListIntegrationStatus(*ListIntegrationStatusRequest, Prism_ListIntegrationStatusServer) error
	UpdateWorkflow(context.Context, *UpdateWorkflowRequest) (*emptypb.Empty, error)
	ListWorkflows(*ListWorkflowsRequest, Prism_ListWorkflowsServer) error
	ListActivities(*ListActivitiesRequest, Prism_ListActivitiesServer) error
	JoinOrganization(context.Context, *JoinOrganizationRequest) (*emptypb.Empty, error)
	GenerateOrganizationCode(context.Context, *GenerateOrganizationCodeRequest) (*GenerateOrganizationCodeResponse, error)
	mustEmbedUnimplementedPrismServer()
}

// UnimplementedPrismServer must be embedded to have forward compatible implementations.
type UnimplementedPrismServer struct {
}

func (UnimplementedPrismServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedPrismServer) CreateProject(context.Context, *CreateProjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedPrismServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedPrismServer) DeleteProject(context.Context, *DeleteProjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedPrismServer) ListProjects(*ListProjectsRequest, Prism_ListProjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedPrismServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedPrismServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedPrismServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedPrismServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedPrismServer) VerifyUser(context.Context, *VerifyUserRequest) (*VerifyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUser not implemented")
}
func (UnimplementedPrismServer) CreateTeam(context.Context, *CreateTeamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedPrismServer) GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedPrismServer) ListTeams(*ListTeamsRequest, Prism_ListTeamsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (UnimplementedPrismServer) ListTeamMembers(*ListTeamMembersRequest, Prism_ListTeamMembersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTeamMembers not implemented")
}
func (UnimplementedPrismServer) ListProjectToTeam(*ListProjectToTeamRequest, Prism_ListProjectToTeamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProjectToTeam not implemented")
}
func (UnimplementedPrismServer) ListProducts(*ListProductsRequest, Prism_ListProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedPrismServer) CreateProduct(context.Context, *CreateProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedPrismServer) DeleteProduct(context.Context, *DeleteProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedPrismServer) AssignProjectToTeam(context.Context, *AssignProjectToTeamRequest) (*AssignProjectToTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignProjectToTeam not implemented")
}
func (UnimplementedPrismServer) DeleteTeam(context.Context, *DeleteTeamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (UnimplementedPrismServer) GetIntegrationStatus(context.Context, *emptypb.Empty) (*GetIntegrationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationStatus not implemented")
}
func (UnimplementedPrismServer) ListReportSchedules(*ListReportSchedulesRequest, Prism_ListReportSchedulesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListReportSchedules not implemented")
}
func (UnimplementedPrismServer) UpdateReportSchedule(context.Context, *ReportSchedule) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportSchedule not implemented")
}
func (UnimplementedPrismServer) CreateReportSchedule(context.Context, *ReportSchedule) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReportSchedule not implemented")
}
func (UnimplementedPrismServer) UpdateOrgTimezone(context.Context, *UpdateOrgTimezoneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgTimezone not implemented")
}
func (UnimplementedPrismServer) ListIntegrationStatus(*ListIntegrationStatusRequest, Prism_ListIntegrationStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method ListIntegrationStatus not implemented")
}
func (UnimplementedPrismServer) UpdateWorkflow(context.Context, *UpdateWorkflowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflow not implemented")
}
func (UnimplementedPrismServer) ListWorkflows(*ListWorkflowsRequest, Prism_ListWorkflowsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedPrismServer) ListActivities(*ListActivitiesRequest, Prism_ListActivitiesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListActivities not implemented")
}
func (UnimplementedPrismServer) JoinOrganization(context.Context, *JoinOrganizationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinOrganization not implemented")
}
func (UnimplementedPrismServer) GenerateOrganizationCode(context.Context, *GenerateOrganizationCodeRequest) (*GenerateOrganizationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOrganizationCode not implemented")
}
func (UnimplementedPrismServer) mustEmbedUnimplementedPrismServer() {}

// UnsafePrismServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrismServer will
// result in compilation errors.
type UnsafePrismServer interface {
	mustEmbedUnimplementedPrismServer()
}

func RegisterPrismServer(s grpc.ServiceRegistrar, srv PrismServer) {
	s.RegisterService(&Prism_ServiceDesc, srv)
}

func _Prism_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_ListProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListProjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrismServer).ListProjects(m, &prismListProjectsServer{ServerStream: stream})
}

type Prism_ListProjectsServer interface {
	Send(*Project) error
	grpc.ServerStream
}

type prismListProjectsServer struct {
	grpc.ServerStream
}

func (x *prismListProjectsServer) Send(m *Project) error {
	return x.ServerStream.SendMsg(m)
}

func _Prism_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_VerifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).VerifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_VerifyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).VerifyUser(ctx, req.(*VerifyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_CreateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_GetTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_ListTeams_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTeamsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrismServer).ListTeams(m, &prismListTeamsServer{ServerStream: stream})
}

type Prism_ListTeamsServer interface {
	Send(*Team) error
	grpc.ServerStream
}

type prismListTeamsServer struct {
	grpc.ServerStream
}

func (x *prismListTeamsServer) Send(m *Team) error {
	return x.ServerStream.SendMsg(m)
}

func _Prism_ListTeamMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTeamMembersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrismServer).ListTeamMembers(m, &prismListTeamMembersServer{ServerStream: stream})
}

type Prism_ListTeamMembersServer interface {
	Send(*Member) error
	grpc.ServerStream
}

type prismListTeamMembersServer struct {
	grpc.ServerStream
}

func (x *prismListTeamMembersServer) Send(m *Member) error {
	return x.ServerStream.SendMsg(m)
}

func _Prism_ListProjectToTeam_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListProjectToTeamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrismServer).ListProjectToTeam(m, &prismListProjectToTeamServer{ServerStream: stream})
}

type Prism_ListProjectToTeamServer interface {
	Send(*ListProjectToTeamResponse) error
	grpc.ServerStream
}

type prismListProjectToTeamServer struct {
	grpc.ServerStream
}

func (x *prismListProjectToTeamServer) Send(m *ListProjectToTeamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Prism_ListProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListProductsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrismServer).ListProducts(m, &prismListProductsServer{ServerStream: stream})
}

type Prism_ListProductsServer interface {
	Send(*Product) error
	grpc.ServerStream
}

type prismListProductsServer struct {
	grpc.ServerStream
}

func (x *prismListProductsServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func _Prism_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_AssignProjectToTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignProjectToTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).AssignProjectToTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_AssignProjectToTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).AssignProjectToTeam(ctx, req.(*AssignProjectToTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_DeleteTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).DeleteTeam(ctx, req.(*DeleteTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_GetIntegrationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).GetIntegrationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_GetIntegrationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).GetIntegrationStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_ListReportSchedules_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListReportSchedulesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrismServer).ListReportSchedules(m, &prismListReportSchedulesServer{ServerStream: stream})
}

type Prism_ListReportSchedulesServer interface {
	Send(*ReportSchedule) error
	grpc.ServerStream
}

type prismListReportSchedulesServer struct {
	grpc.ServerStream
}

func (x *prismListReportSchedulesServer) Send(m *ReportSchedule) error {
	return x.ServerStream.SendMsg(m)
}

func _Prism_UpdateReportSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).UpdateReportSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_UpdateReportSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).UpdateReportSchedule(ctx, req.(*ReportSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_CreateReportSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).CreateReportSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_CreateReportSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).CreateReportSchedule(ctx, req.(*ReportSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_UpdateOrgTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).UpdateOrgTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_UpdateOrgTimezone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).UpdateOrgTimezone(ctx, req.(*UpdateOrgTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_ListIntegrationStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListIntegrationStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrismServer).ListIntegrationStatus(m, &prismListIntegrationStatusServer{ServerStream: stream})
}

type Prism_ListIntegrationStatusServer interface {
	Send(*IntegrationStatus) error
	grpc.ServerStream
}

type prismListIntegrationStatusServer struct {
	grpc.ServerStream
}

func (x *prismListIntegrationStatusServer) Send(m *IntegrationStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Prism_UpdateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).UpdateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_UpdateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).UpdateWorkflow(ctx, req.(*UpdateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_ListWorkflows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListWorkflowsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrismServer).ListWorkflows(m, &prismListWorkflowsServer{ServerStream: stream})
}

type Prism_ListWorkflowsServer interface {
	Send(*Workflow) error
	grpc.ServerStream
}

type prismListWorkflowsServer struct {
	grpc.ServerStream
}

func (x *prismListWorkflowsServer) Send(m *Workflow) error {
	return x.ServerStream.SendMsg(m)
}

func _Prism_ListActivities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListActivitiesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrismServer).ListActivities(m, &prismListActivitiesServer{ServerStream: stream})
}

type Prism_ListActivitiesServer interface {
	Send(*Activity) error
	grpc.ServerStream
}

type prismListActivitiesServer struct {
	grpc.ServerStream
}

func (x *prismListActivitiesServer) Send(m *Activity) error {
	return x.ServerStream.SendMsg(m)
}

func _Prism_JoinOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).JoinOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_JoinOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).JoinOrganization(ctx, req.(*JoinOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prism_GenerateOrganizationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOrganizationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).GenerateOrganizationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_GenerateOrganizationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).GenerateOrganizationCode(ctx, req.(*GenerateOrganizationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Prism_ServiceDesc is the grpc.ServiceDesc for Prism service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Prism_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.prism.v1.Prism",
	HandlerType: (*PrismServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _Prism_Test_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _Prism_CreateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Prism_GetProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _Prism_DeleteProject_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _Prism_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _Prism_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _Prism_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _Prism_DeleteOrganization_Handler,
		},
		{
			MethodName: "VerifyUser",
			Handler:    _Prism_VerifyUser_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _Prism_CreateTeam_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _Prism_GetTeam_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _Prism_CreateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _Prism_DeleteProduct_Handler,
		},
		{
			MethodName: "AssignProjectToTeam",
			Handler:    _Prism_AssignProjectToTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _Prism_DeleteTeam_Handler,
		},
		{
			MethodName: "GetIntegrationStatus",
			Handler:    _Prism_GetIntegrationStatus_Handler,
		},
		{
			MethodName: "UpdateReportSchedule",
			Handler:    _Prism_UpdateReportSchedule_Handler,
		},
		{
			MethodName: "CreateReportSchedule",
			Handler:    _Prism_CreateReportSchedule_Handler,
		},
		{
			MethodName: "UpdateOrgTimezone",
			Handler:    _Prism_UpdateOrgTimezone_Handler,
		},
		{
			MethodName: "UpdateWorkflow",
			Handler:    _Prism_UpdateWorkflow_Handler,
		},
		{
			MethodName: "JoinOrganization",
			Handler:    _Prism_JoinOrganization_Handler,
		},
		{
			MethodName: "GenerateOrganizationCode",
			Handler:    _Prism_GenerateOrganizationCode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListProjects",
			Handler:       _Prism_ListProjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTeams",
			Handler:       _Prism_ListTeams_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTeamMembers",
			Handler:       _Prism_ListTeamMembers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListProjectToTeam",
			Handler:       _Prism_ListProjectToTeam_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListProducts",
			Handler:       _Prism_ListProducts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListReportSchedules",
			Handler:       _Prism_ListReportSchedules_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListIntegrationStatus",
			Handler:       _Prism_ListIntegrationStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListWorkflows",
			Handler:       _Prism_ListWorkflows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListActivities",
			Handler:       _Prism_ListActivities_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "prism/v1/prism.proto",
}
