// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: prism/v1/prism.proto

package prism

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Prism_Test_FullMethodName = "/blueapi.prism.v1.Prism/Test"
)

// PrismClient is the client API for Prism service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Prism service definition.
type PrismClient interface {
	// Test endpoint only.
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type prismClient struct {
	cc grpc.ClientConnInterface
}

func NewPrismClient(cc grpc.ClientConnInterface) PrismClient {
	return &prismClient{cc}
}

func (c *prismClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, Prism_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrismServer is the server API for Prism service.
// All implementations must embed UnimplementedPrismServer
// for forward compatibility
//
// Prism service definition.
type PrismServer interface {
	// Test endpoint only.
	Test(context.Context, *TestRequest) (*TestResponse, error)
	mustEmbedUnimplementedPrismServer()
}

// UnimplementedPrismServer must be embedded to have forward compatible implementations.
type UnimplementedPrismServer struct {
}

func (UnimplementedPrismServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedPrismServer) mustEmbedUnimplementedPrismServer() {}

// UnsafePrismServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrismServer will
// result in compilation errors.
type UnsafePrismServer interface {
	mustEmbedUnimplementedPrismServer()
}

func RegisterPrismServer(s grpc.ServiceRegistrar, srv PrismServer) {
	s.RegisterService(&Prism_ServiceDesc, srv)
}

func _Prism_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrismServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prism_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrismServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Prism_ServiceDesc is the grpc.ServiceDesc for Prism service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Prism_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.prism.v1.Prism",
	HandlerType: (*PrismServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _Prism_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prism/v1/prism.proto",
}
