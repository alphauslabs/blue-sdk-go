// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package blue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlueClient is the client API for Blue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlueClient interface {
	Me(ctx context.Context, in *MeRequest, opts ...grpc.CallOption) (*MeResponse, error)
}

type blueClient struct {
	cc grpc.ClientConnInterface
}

func NewBlueClient(cc grpc.ClientConnInterface) BlueClient {
	return &blueClient{cc}
}

func (c *blueClient) Me(ctx context.Context, in *MeRequest, opts ...grpc.CallOption) (*MeResponse, error) {
	out := new(MeResponse)
	err := c.cc.Invoke(ctx, "/blueapi.blue.v1.Blue/Me", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlueServer is the server API for Blue service.
// All implementations must embed UnimplementedBlueServer
// for forward compatibility
type BlueServer interface {
	Me(context.Context, *MeRequest) (*MeResponse, error)
	mustEmbedUnimplementedBlueServer()
}

// UnimplementedBlueServer must be embedded to have forward compatible implementations.
type UnimplementedBlueServer struct {
}

func (UnimplementedBlueServer) Me(context.Context, *MeRequest) (*MeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (UnimplementedBlueServer) mustEmbedUnimplementedBlueServer() {}

// UnsafeBlueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlueServer will
// result in compilation errors.
type UnsafeBlueServer interface {
	mustEmbedUnimplementedBlueServer()
}

func RegisterBlueServer(s grpc.ServiceRegistrar, srv BlueServer) {
	s.RegisterService(&Blue_ServiceDesc, srv)
}

func _Blue_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.blue.v1.Blue/Me",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueServer).Me(ctx, req.(*MeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Blue_ServiceDesc is the grpc.ServiceDesc for Blue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.blue.v1.Blue",
	HandlerType: (*BlueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Me",
			Handler:    _Blue_Me_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blue/v1/blue.proto",
}
