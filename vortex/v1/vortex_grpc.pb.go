// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: vortex/v1/vortex.proto

package vortex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Vortex_Test_FullMethodName        = "/blueapi.vortex.v1.Vortex/Test"
	Vortex_CreateOrg_FullMethodName   = "/blueapi.vortex.v1.Vortex/CreateOrg"
	Vortex_GetUser_FullMethodName     = "/blueapi.vortex.v1.Vortex/GetUser"
	Vortex_ListPrompts_FullMethodName = "/blueapi.vortex.v1.Vortex/ListPrompts"
)

// VortexClient is the client API for Vortex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Vortex service definition.
type VortexClient interface {
	// Test endpoint only
	Test(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TestResponse, error)
	// Create an org in Vortex
	CreateOrg(ctx context.Context, in *CreateOrgRequest, opts ...grpc.CallOption) (*CreateOrgResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	ListPrompts(ctx context.Context, in *ListPromptsRequest, opts ...grpc.CallOption) (*ListPromptsResponse, error)
}

type vortexClient struct {
	cc grpc.ClientConnInterface
}

func NewVortexClient(cc grpc.ClientConnInterface) VortexClient {
	return &vortexClient{cc}
}

func (c *vortexClient) Test(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, Vortex_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vortexClient) CreateOrg(ctx context.Context, in *CreateOrgRequest, opts ...grpc.CallOption) (*CreateOrgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrgResponse)
	err := c.cc.Invoke(ctx, Vortex_CreateOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vortexClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, Vortex_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vortexClient) ListPrompts(ctx context.Context, in *ListPromptsRequest, opts ...grpc.CallOption) (*ListPromptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPromptsResponse)
	err := c.cc.Invoke(ctx, Vortex_ListPrompts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VortexServer is the server API for Vortex service.
// All implementations must embed UnimplementedVortexServer
// for forward compatibility
//
// Vortex service definition.
type VortexServer interface {
	// Test endpoint only
	Test(context.Context, *emptypb.Empty) (*TestResponse, error)
	// Create an org in Vortex
	CreateOrg(context.Context, *CreateOrgRequest) (*CreateOrgResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	ListPrompts(context.Context, *ListPromptsRequest) (*ListPromptsResponse, error)
	mustEmbedUnimplementedVortexServer()
}

// UnimplementedVortexServer must be embedded to have forward compatible implementations.
type UnimplementedVortexServer struct {
}

func (UnimplementedVortexServer) Test(context.Context, *emptypb.Empty) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedVortexServer) CreateOrg(context.Context, *CreateOrgRequest) (*CreateOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrg not implemented")
}
func (UnimplementedVortexServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedVortexServer) ListPrompts(context.Context, *ListPromptsRequest) (*ListPromptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrompts not implemented")
}
func (UnimplementedVortexServer) mustEmbedUnimplementedVortexServer() {}

// UnsafeVortexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VortexServer will
// result in compilation errors.
type UnsafeVortexServer interface {
	mustEmbedUnimplementedVortexServer()
}

func RegisterVortexServer(s grpc.ServiceRegistrar, srv VortexServer) {
	s.RegisterService(&Vortex_ServiceDesc, srv)
}

func _Vortex_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VortexServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vortex_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VortexServer).Test(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vortex_CreateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VortexServer).CreateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vortex_CreateOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VortexServer).CreateOrg(ctx, req.(*CreateOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vortex_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VortexServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vortex_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VortexServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vortex_ListPrompts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPromptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VortexServer).ListPrompts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vortex_ListPrompts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VortexServer).ListPrompts(ctx, req.(*ListPromptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vortex_ServiceDesc is the grpc.ServiceDesc for Vortex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vortex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.vortex.v1.Vortex",
	HandlerType: (*VortexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _Vortex_Test_Handler,
		},
		{
			MethodName: "CreateOrg",
			Handler:    _Vortex_CreateOrg_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Vortex_GetUser_Handler,
		},
		{
			MethodName: "ListPrompts",
			Handler:    _Vortex_ListPrompts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vortex/v1/vortex.proto",
}
