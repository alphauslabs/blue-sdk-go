// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: cover/v1/cover.proto

package cover

import (
	cover "github.com/alphauslabs/blue-sdk-go/api/cover"
	recommendation "github.com/alphauslabs/blue-sdk-go/api/cover/recommendation"
	protos "github.com/alphauslabs/blue-sdk-go/protos"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status of upload file
type Status int32

const (
	Status_PENDING     Status = 0
	Status_IN_PROGRESS Status = 1
	Status_SUCCESS     Status = 2
	Status_FAILED      Status = 3
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "PENDING",
		1: "IN_PROGRESS",
		2: "SUCCESS",
		3: "FAILED",
	}
	Status_value = map[string]int32{
		"PENDING":     0,
		"IN_PROGRESS": 1,
		"SUCCESS":     2,
		"FAILED":      3,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_cover_v1_cover_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_cover_v1_cover_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{0}
}

type GetRecommendationV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CostGroupId  string `protobuf:"bytes,2,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	PeriodOption string `protobuf:"bytes,3,opt,name=periodOption,proto3" json:"periodOption,omitempty"`
}

func (x *GetRecommendationV2Request) Reset() {
	*x = GetRecommendationV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendationV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationV2Request) ProtoMessage() {}

func (x *GetRecommendationV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationV2Request.ProtoReflect.Descriptor instead.
func (*GetRecommendationV2Request) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{0}
}

func (x *GetRecommendationV2Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetRecommendationV2Request) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *GetRecommendationV2Request) GetPeriodOption() string {
	if x != nil {
		return x.PeriodOption
	}
	return ""
}

type GetRecommendationV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *recommendation.RecommendationData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetRecommendationV2Response) Reset() {
	*x = GetRecommendationV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendationV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationV2Response) ProtoMessage() {}

func (x *GetRecommendationV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationV2Response.ProtoReflect.Descriptor instead.
func (*GetRecommendationV2Response) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{1}
}

func (x *GetRecommendationV2Response) GetData() *recommendation.RecommendationData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request message for OnboardOrg
type OnboardOrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	OrgId    string `protobuf:"bytes,4,opt,name=orgId,proto3" json:"orgId,omitempty"`
}

func (x *OnboardOrgRequest) Reset() {
	*x = OnboardOrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardOrgRequest) ProtoMessage() {}

func (x *OnboardOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardOrgRequest.ProtoReflect.Descriptor instead.
func (*OnboardOrgRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{2}
}

func (x *OnboardOrgRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OnboardOrgRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *OnboardOrgRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OnboardOrgRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// Response message for OnboardOrg
type OnboardOrgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *OnboardOrgResponse) Reset() {
	*x = OnboardOrgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnboardOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardOrgResponse) ProtoMessage() {}

func (x *OnboardOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardOrgResponse.ProtoReflect.Descriptor instead.
func (*OnboardOrgResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{3}
}

func (x *OnboardOrgResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for InviteMember
type InviteMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email         []string `protobuf:"bytes,1,rep,name=email,proto3" json:"email,omitempty"`
	IsResend      bool     `protobuf:"varint,2,opt,name=isResend,proto3" json:"isResend,omitempty"`
	InviteAsAdmin bool     `protobuf:"varint,3,opt,name=inviteAsAdmin,proto3" json:"inviteAsAdmin,omitempty"`
}

func (x *InviteMemberRequest) Reset() {
	*x = InviteMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteMemberRequest) ProtoMessage() {}

func (x *InviteMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteMemberRequest.ProtoReflect.Descriptor instead.
func (*InviteMemberRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{4}
}

func (x *InviteMemberRequest) GetEmail() []string {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *InviteMemberRequest) GetIsResend() bool {
	if x != nil {
		return x.IsResend
	}
	return false
}

func (x *InviteMemberRequest) GetInviteAsAdmin() bool {
	if x != nil {
		return x.InviteAsAdmin
	}
	return false
}

// Response message for InviteMember
type InviteMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email []string `protobuf:"bytes,1,rep,name=email,proto3" json:"email,omitempty"`
}

func (x *InviteMemberResponse) Reset() {
	*x = InviteMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteMemberResponse) ProtoMessage() {}

func (x *InviteMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteMemberResponse.ProtoReflect.Descriptor instead.
func (*InviteMemberResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{5}
}

func (x *InviteMemberResponse) GetEmail() []string {
	if x != nil {
		return x.Email
	}
	return nil
}

// Request message for ActivateUser
type ActivateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PreviousPassword string `protobuf:"bytes,2,opt,name=previousPassword,proto3" json:"previousPassword,omitempty"`
	Password         string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Name             string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Locale           string `protobuf:"bytes,5,opt,name=locale,proto3" json:"locale,omitempty"`
	// Email. For auth0 email validation.
	Email   string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	IsAuth0 bool   `protobuf:"varint,7,opt,name=isAuth0,proto3" json:"isAuth0,omitempty"`
	// Auth0 user Id. For updating of user metadata.
	Auth0UserId string `protobuf:"bytes,8,opt,name=auth0UserId,proto3" json:"auth0UserId,omitempty"`
}

func (x *ActivateUserRequest) Reset() {
	*x = ActivateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateUserRequest) ProtoMessage() {}

func (x *ActivateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateUserRequest.ProtoReflect.Descriptor instead.
func (*ActivateUserRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{6}
}

func (x *ActivateUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ActivateUserRequest) GetPreviousPassword() string {
	if x != nil {
		return x.PreviousPassword
	}
	return ""
}

func (x *ActivateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ActivateUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActivateUserRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *ActivateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ActivateUserRequest) GetIsAuth0() bool {
	if x != nil {
		return x.IsAuth0
	}
	return false
}

func (x *ActivateUserRequest) GetAuth0UserId() string {
	if x != nil {
		return x.Auth0UserId
	}
	return ""
}

// Response message for ActivateUser
type ActivateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *ActivateUserResponse) Reset() {
	*x = ActivateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateUserResponse) ProtoMessage() {}

func (x *ActivateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateUserResponse.ProtoReflect.Descriptor instead.
func (*ActivateUserResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{7}
}

func (x *ActivateUserResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for CreateMember
type CreateMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email      string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password   string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Name       string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Costgroups []string `protobuf:"bytes,4,rep,name=costgroups,proto3" json:"costgroups,omitempty"`
}

func (x *CreateMemberRequest) Reset() {
	*x = CreateMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMemberRequest) ProtoMessage() {}

func (x *CreateMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMemberRequest.ProtoReflect.Descriptor instead.
func (*CreateMemberRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{8}
}

func (x *CreateMemberRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateMemberRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateMemberRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateMemberRequest) GetCostgroups() []string {
	if x != nil {
		return x.Costgroups
	}
	return nil
}

// Response message for CreateMember
type CreateMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *CreateMemberResponse) Reset() {
	*x = CreateMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMemberResponse) ProtoMessage() {}

func (x *CreateMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMemberResponse.ProtoReflect.Descriptor instead.
func (*CreateMemberResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{9}
}

func (x *CreateMemberResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for GetMembers
type GetMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMembersRequest) Reset() {
	*x = GetMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembersRequest) ProtoMessage() {}

func (x *GetMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembersRequest.ProtoReflect.Descriptor instead.
func (*GetMembersRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{10}
}

// Response message for GetMembers
type GetMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData []*cover.UserData `protobuf:"bytes,1,rep,name=userData,proto3" json:"userData,omitempty"`
}

func (x *GetMembersResponse) Reset() {
	*x = GetMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembersResponse) ProtoMessage() {}

func (x *GetMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembersResponse.ProtoReflect.Descriptor instead.
func (*GetMembersResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{11}
}

func (x *GetMembersResponse) GetUserData() []*cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for GetMemberDetails
type GetMemberDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. UserId.
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetMemberDetailsRequest) Reset() {
	*x = GetMemberDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemberDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberDetailsRequest) ProtoMessage() {}

func (x *GetMemberDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetMemberDetailsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{12}
}

func (x *GetMemberDetailsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Response message for GetMemberDetails
type GetMemberDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *GetMemberDetailsResponse) Reset() {
	*x = GetMemberDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemberDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberDetailsResponse) ProtoMessage() {}

func (x *GetMemberDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetMemberDetailsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{13}
}

func (x *GetMemberDetailsResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for GetMemberCostGroup
type GetMemberCostGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. UserId.
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetMemberCostGroupRequest) Reset() {
	*x = GetMemberCostGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemberCostGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberCostGroupRequest) ProtoMessage() {}

func (x *GetMemberCostGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberCostGroupRequest.ProtoReflect.Descriptor instead.
func (*GetMemberCostGroupRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{14}
}

func (x *GetMemberCostGroupRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Response message for GetMemberCostGroup
type GetMemberCostGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostGroups []*cover.MemberCostGroup `protobuf:"bytes,1,rep,name=costGroups,proto3" json:"costGroups,omitempty"`
}

func (x *GetMemberCostGroupResponse) Reset() {
	*x = GetMemberCostGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemberCostGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberCostGroupResponse) ProtoMessage() {}

func (x *GetMemberCostGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberCostGroupResponse.ProtoReflect.Descriptor instead.
func (*GetMemberCostGroupResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{15}
}

func (x *GetMemberCostGroupResponse) GetCostGroups() []*cover.MemberCostGroup {
	if x != nil {
		return x.CostGroups
	}
	return nil
}

// Request message for UpdateMemberPermission
type UpdateMemberPermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. UserId.
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	// Required. IsAdmin.
	IsAdmin bool `protobuf:"varint,2,opt,name=isAdmin,proto3" json:"isAdmin,omitempty"`
}

func (x *UpdateMemberPermissionRequest) Reset() {
	*x = UpdateMemberPermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMemberPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemberPermissionRequest) ProtoMessage() {}

func (x *UpdateMemberPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemberPermissionRequest.ProtoReflect.Descriptor instead.
func (*UpdateMemberPermissionRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateMemberPermissionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateMemberPermissionRequest) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

// Response message for UpdateMemberPermission
type UpdateMemberPermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *UpdateMemberPermissionResponse) Reset() {
	*x = UpdateMemberPermissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMemberPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemberPermissionResponse) ProtoMessage() {}

func (x *UpdateMemberPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemberPermissionResponse.ProtoReflect.Descriptor instead.
func (*UpdateMemberPermissionResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateMemberPermissionResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for GetUserDetails
type GetUserDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserDetailsRequest) Reset() {
	*x = GetUserDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDetailsRequest) ProtoMessage() {}

func (x *GetUserDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetUserDetailsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{18}
}

// Response message for GetUserDetails
type GetUserDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *GetUserDetailsResponse) Reset() {
	*x = GetUserDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDetailsResponse) ProtoMessage() {}

func (x *GetUserDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetUserDetailsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{19}
}

func (x *GetUserDetailsResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for UpdateUserAvatar
type UpdateUserAvatarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar string `protobuf:"bytes,1,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *UpdateUserAvatarRequest) Reset() {
	*x = UpdateUserAvatarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserAvatarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserAvatarRequest) ProtoMessage() {}

func (x *UpdateUserAvatarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserAvatarRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserAvatarRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateUserAvatarRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

// Response message for UpdateUserAvatar
type UpdateUserAvatarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *UpdateUserAvatarResponse) Reset() {
	*x = UpdateUserAvatarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserAvatarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserAvatarResponse) ProtoMessage() {}

func (x *UpdateUserAvatarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserAvatarResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserAvatarResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateUserAvatarResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for UpdateUserIcon
type UpdateUserIconRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *UpdateUserIconRequest) Reset() {
	*x = UpdateUserIconRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserIconRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserIconRequest) ProtoMessage() {}

func (x *UpdateUserIconRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserIconRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserIconRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateUserIconRequest) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

// Response message for UpdateUserIcon
type UpdateUserIconResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *UpdateUserIconResponse) Reset() {
	*x = UpdateUserIconResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserIconResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserIconResponse) ProtoMessage() {}

func (x *UpdateUserIconResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserIconResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserIconResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateUserIconResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for UpdateUserColorTheme
type UpdateUserColorThemeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorTheme string `protobuf:"bytes,1,opt,name=colorTheme,proto3" json:"colorTheme,omitempty"`
}

func (x *UpdateUserColorThemeRequest) Reset() {
	*x = UpdateUserColorThemeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserColorThemeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserColorThemeRequest) ProtoMessage() {}

func (x *UpdateUserColorThemeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserColorThemeRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserColorThemeRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateUserColorThemeRequest) GetColorTheme() string {
	if x != nil {
		return x.ColorTheme
	}
	return ""
}

// Response message for UpdateUserColorTheme
type UpdateUserColorThemeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *UpdateUserColorThemeResponse) Reset() {
	*x = UpdateUserColorThemeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserColorThemeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserColorThemeResponse) ProtoMessage() {}

func (x *UpdateUserColorThemeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserColorThemeResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserColorThemeResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateUserColorThemeResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for UpdateUserName
type UpdateUserNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateUserNameRequest) Reset() {
	*x = UpdateUserNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserNameRequest) ProtoMessage() {}

func (x *UpdateUserNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserNameRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateUserNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response message for UpdateUserName
type UpdateUserNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *UpdateUserNameResponse) Reset() {
	*x = UpdateUserNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserNameResponse) ProtoMessage() {}

func (x *UpdateUserNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserNameResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserNameResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateUserNameResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for UpdateUserEmail
type UpdateUserEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *UpdateUserEmailRequest) Reset() {
	*x = UpdateUserEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserEmailRequest) ProtoMessage() {}

func (x *UpdateUserEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserEmailRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserEmailRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateUserEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// Response message for UpdateUserEmail
type UpdateUserEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *UpdateUserEmailResponse) Reset() {
	*x = UpdateUserEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserEmailResponse) ProtoMessage() {}

func (x *UpdateUserEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserEmailResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserEmailResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateUserEmailResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for UpdateUserMainView
type UpdateUserMainViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
}

func (x *UpdateUserMainViewRequest) Reset() {
	*x = UpdateUserMainViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserMainViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserMainViewRequest) ProtoMessage() {}

func (x *UpdateUserMainViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserMainViewRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserMainViewRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateUserMainViewRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

// Response message for UpdateUserMainView
type UpdateUserMainViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *UpdateUserMainViewResponse) Reset() {
	*x = UpdateUserMainViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserMainViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserMainViewResponse) ProtoMessage() {}

func (x *UpdateUserMainViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserMainViewResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserMainViewResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateUserMainViewResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for ResetUserPassword
type ResetUserPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousPassword string `protobuf:"bytes,1,opt,name=previousPassword,proto3" json:"previousPassword,omitempty"`
	NewPassword      string `protobuf:"bytes,2,opt,name=newPassword,proto3" json:"newPassword,omitempty"`
}

func (x *ResetUserPasswordRequest) Reset() {
	*x = ResetUserPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetUserPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetUserPasswordRequest) ProtoMessage() {}

func (x *ResetUserPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetUserPasswordRequest.ProtoReflect.Descriptor instead.
func (*ResetUserPasswordRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{32}
}

func (x *ResetUserPasswordRequest) GetPreviousPassword() string {
	if x != nil {
		return x.PreviousPassword
	}
	return ""
}

func (x *ResetUserPasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

// Response message for ResetUserPassword
type ResetUserPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *ResetUserPasswordResponse) Reset() {
	*x = ResetUserPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetUserPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetUserPasswordResponse) ProtoMessage() {}

func (x *ResetUserPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetUserPasswordResponse.ProtoReflect.Descriptor instead.
func (*ResetUserPasswordResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{33}
}

func (x *ResetUserPasswordResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for UpdateUserLocale
type UpdateUserLocaleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale string `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *UpdateUserLocaleRequest) Reset() {
	*x = UpdateUserLocaleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserLocaleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserLocaleRequest) ProtoMessage() {}

func (x *UpdateUserLocaleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserLocaleRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserLocaleRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateUserLocaleRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

// Response message for UpdateUserLocale
type UpdateUserLocaleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *UpdateUserLocaleResponse) Reset() {
	*x = UpdateUserLocaleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserLocaleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserLocaleResponse) ProtoMessage() {}

func (x *UpdateUserLocaleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserLocaleResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserLocaleResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateUserLocaleResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for UpdateUserAppTheme
type UpdateUserAppThemeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppTheme string `protobuf:"bytes,1,opt,name=appTheme,proto3" json:"appTheme,omitempty"`
}

func (x *UpdateUserAppThemeRequest) Reset() {
	*x = UpdateUserAppThemeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserAppThemeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserAppThemeRequest) ProtoMessage() {}

func (x *UpdateUserAppThemeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserAppThemeRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserAppThemeRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateUserAppThemeRequest) GetAppTheme() string {
	if x != nil {
		return x.AppTheme
	}
	return ""
}

// Response message for UpdateUserAppTheme
type UpdateUserAppThemeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *UpdateUserAppThemeResponse) Reset() {
	*x = UpdateUserAppThemeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserAppThemeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserAppThemeResponse) ProtoMessage() {}

func (x *UpdateUserAppThemeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserAppThemeResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserAppThemeResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateUserAppThemeResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for UpdateUserTimezone
type UpdateUserTimezoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeZone     string `protobuf:"bytes,1,opt,name=timeZone,proto3" json:"timeZone,omitempty"`
	AutoTimeZone bool   `protobuf:"varint,2,opt,name=autoTimeZone,proto3" json:"autoTimeZone,omitempty"`
}

func (x *UpdateUserTimezoneRequest) Reset() {
	*x = UpdateUserTimezoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserTimezoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserTimezoneRequest) ProtoMessage() {}

func (x *UpdateUserTimezoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserTimezoneRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserTimezoneRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateUserTimezoneRequest) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *UpdateUserTimezoneRequest) GetAutoTimeZone() bool {
	if x != nil {
		return x.AutoTimeZone
	}
	return false
}

// Response message for UpdateUserTimezone
type UpdateUserTimezoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *UpdateUserTimezoneResponse) Reset() {
	*x = UpdateUserTimezoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserTimezoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserTimezoneResponse) ProtoMessage() {}

func (x *UpdateUserTimezoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserTimezoneResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserTimezoneResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateUserTimezoneResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for UpdateUserAttributes
type UpdateUserAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes []string `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *UpdateUserAttributesRequest) Reset() {
	*x = UpdateUserAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserAttributesRequest) ProtoMessage() {}

func (x *UpdateUserAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserAttributesRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserAttributesRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateUserAttributesRequest) GetAttributes() []string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Response message for UpdateUserAttributes
type UpdateUserAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *UpdateUserAttributesResponse) Reset() {
	*x = UpdateUserAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserAttributesResponse) ProtoMessage() {}

func (x *UpdateUserAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserAttributesResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserAttributesResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateUserAttributesResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

// Request message for DeleteMember
type DeleteMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. UserId.
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *DeleteMemberRequest) Reset() {
	*x = DeleteMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMemberRequest) ProtoMessage() {}

func (x *DeleteMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMemberRequest.ProtoReflect.Descriptor instead.
func (*DeleteMemberRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Response message for DeleteMember
type DeleteMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *DeleteMemberResponse) Reset() {
	*x = DeleteMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMemberResponse) ProtoMessage() {}

func (x *DeleteMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMemberResponse.ProtoReflect.Descriptor instead.
func (*DeleteMemberResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteMemberResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Request message for ResetPassword
type ResetPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. UserId.
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ResetPasswordRequest) Reset() {
	*x = ResetPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordRequest) ProtoMessage() {}

func (x *ResetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordRequest.ProtoReflect.Descriptor instead.
func (*ResetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{44}
}

func (x *ResetPasswordRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Response message for ResetPassword
type ResetPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ResetPasswordResponse) Reset() {
	*x = ResetPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordResponse) ProtoMessage() {}

func (x *ResetPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordResponse.ProtoReflect.Descriptor instead.
func (*ResetPasswordResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{45}
}

func (x *ResetPasswordResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Request message for CreateView
type CreateViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsPrivate   bool   `protobuf:"varint,3,opt,name=isPrivate,proto3" json:"isPrivate,omitempty"`
	IsEditable  bool   `protobuf:"varint,4,opt,name=isEditable,proto3" json:"isEditable,omitempty"`
	Icon        string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	ReportType  string `protobuf:"bytes,6,opt,name=reportType,proto3" json:"reportType,omitempty"`
	ColorTheme  string `protobuf:"bytes,7,opt,name=colorTheme,proto3" json:"colorTheme,omitempty"`
}

func (x *CreateViewRequest) Reset() {
	*x = CreateViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateViewRequest) ProtoMessage() {}

func (x *CreateViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateViewRequest.ProtoReflect.Descriptor instead.
func (*CreateViewRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{46}
}

func (x *CreateViewRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateViewRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateViewRequest) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *CreateViewRequest) GetIsEditable() bool {
	if x != nil {
		return x.IsEditable
	}
	return false
}

func (x *CreateViewRequest) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *CreateViewRequest) GetReportType() string {
	if x != nil {
		return x.ReportType
	}
	return ""
}

func (x *CreateViewRequest) GetColorTheme() string {
	if x != nil {
		return x.ColorTheme
	}
	return ""
}

// Response message for CreateView
type CreateViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewData *cover.ViewData `protobuf:"bytes,1,opt,name=viewData,proto3" json:"viewData,omitempty"`
}

func (x *CreateViewResponse) Reset() {
	*x = CreateViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateViewResponse) ProtoMessage() {}

func (x *CreateViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateViewResponse.ProtoReflect.Descriptor instead.
func (*CreateViewResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{47}
}

func (x *CreateViewResponse) GetViewData() *cover.ViewData {
	if x != nil {
		return x.ViewData
	}
	return nil
}

// Request message for GetViews
type GetViewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetViewsRequest) Reset() {
	*x = GetViewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetViewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViewsRequest) ProtoMessage() {}

func (x *GetViewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViewsRequest.ProtoReflect.Descriptor instead.
func (*GetViewsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{48}
}

// Response message for GetViews
type GetViewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewList []*cover.ViewList `protobuf:"bytes,1,rep,name=viewList,proto3" json:"viewList,omitempty"`
}

func (x *GetViewsResponse) Reset() {
	*x = GetViewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetViewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViewsResponse) ProtoMessage() {}

func (x *GetViewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViewsResponse.ProtoReflect.Descriptor instead.
func (*GetViewsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{49}
}

func (x *GetViewsResponse) GetViewList() []*cover.ViewList {
	if x != nil {
		return x.ViewList
	}
	return nil
}

// Request message for GetCurrentView
type GetCurrentViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. View Id.
	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
}

func (x *GetCurrentViewRequest) Reset() {
	*x = GetCurrentViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentViewRequest) ProtoMessage() {}

func (x *GetCurrentViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentViewRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentViewRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{50}
}

func (x *GetCurrentViewRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

// Response message for GetCurrentView
type GetCurrentViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewData *cover.ViewData `protobuf:"bytes,1,opt,name=viewData,proto3" json:"viewData,omitempty"`
}

func (x *GetCurrentViewResponse) Reset() {
	*x = GetCurrentViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentViewResponse) ProtoMessage() {}

func (x *GetCurrentViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentViewResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentViewResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{51}
}

func (x *GetCurrentViewResponse) GetViewData() *cover.ViewData {
	if x != nil {
		return x.ViewData
	}
	return nil
}

// Request message for GetFavoriteViews
type GetFavoriteViewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFavoriteViewsRequest) Reset() {
	*x = GetFavoriteViewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoriteViewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteViewsRequest) ProtoMessage() {}

func (x *GetFavoriteViewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteViewsRequest.ProtoReflect.Descriptor instead.
func (*GetFavoriteViewsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{52}
}

// Response message for GetFavoriteViews
type GetFavoriteViewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Favorites []*cover.Favorites `protobuf:"bytes,1,rep,name=favorites,proto3" json:"favorites,omitempty"`
}

func (x *GetFavoriteViewsResponse) Reset() {
	*x = GetFavoriteViewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFavoriteViewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavoriteViewsResponse) ProtoMessage() {}

func (x *GetFavoriteViewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavoriteViewsResponse.ProtoReflect.Descriptor instead.
func (*GetFavoriteViewsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{53}
}

func (x *GetFavoriteViewsResponse) GetFavorites() []*cover.Favorites {
	if x != nil {
		return x.Favorites
	}
	return nil
}

// Request message for PublishView
type PublishViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. View Id.
	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
}

func (x *PublishViewRequest) Reset() {
	*x = PublishViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishViewRequest) ProtoMessage() {}

func (x *PublishViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishViewRequest.ProtoReflect.Descriptor instead.
func (*PublishViewRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{54}
}

func (x *PublishViewRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

// Response message for PublishView
type PublishViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *PublishViewResponse) Reset() {
	*x = PublishViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishViewResponse) ProtoMessage() {}

func (x *PublishViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishViewResponse.ProtoReflect.Descriptor instead.
func (*PublishViewResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{55}
}

func (x *PublishViewResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Request message for AddFavorite
type AddFavoriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. View Id.
	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
}

func (x *AddFavoriteRequest) Reset() {
	*x = AddFavoriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFavoriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFavoriteRequest) ProtoMessage() {}

func (x *AddFavoriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFavoriteRequest.ProtoReflect.Descriptor instead.
func (*AddFavoriteRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{56}
}

func (x *AddFavoriteRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

// Response message for AddFavorite
type AddFavoriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
}

func (x *AddFavoriteResponse) Reset() {
	*x = AddFavoriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFavoriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFavoriteResponse) ProtoMessage() {}

func (x *AddFavoriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFavoriteResponse.ProtoReflect.Descriptor instead.
func (*AddFavoriteResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{57}
}

func (x *AddFavoriteResponse) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

// Request message for RemoveFavorite
type RemoveFavoriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. View Id.
	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
}

func (x *RemoveFavoriteRequest) Reset() {
	*x = RemoveFavoriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFavoriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFavoriteRequest) ProtoMessage() {}

func (x *RemoveFavoriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFavoriteRequest.ProtoReflect.Descriptor instead.
func (*RemoveFavoriteRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{58}
}

func (x *RemoveFavoriteRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

// Response message for RemoveFavorite
type RemoveFavoriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
}

func (x *RemoveFavoriteResponse) Reset() {
	*x = RemoveFavoriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFavoriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFavoriteResponse) ProtoMessage() {}

func (x *RemoveFavoriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFavoriteResponse.ProtoReflect.Descriptor instead.
func (*RemoveFavoriteResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{59}
}

func (x *RemoveFavoriteResponse) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

// Request message for UpdateView
type UpdateViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. View Id.
	ViewId      string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Icon        string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	IsPrivate   bool   `protobuf:"varint,5,opt,name=isPrivate,proto3" json:"isPrivate,omitempty"`
	IsEditable  bool   `protobuf:"varint,6,opt,name=isEditable,proto3" json:"isEditable,omitempty"`
	ColorTheme  string `protobuf:"bytes,7,opt,name=colorTheme,proto3" json:"colorTheme,omitempty"`
}

func (x *UpdateViewRequest) Reset() {
	*x = UpdateViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateViewRequest) ProtoMessage() {}

func (x *UpdateViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateViewRequest.ProtoReflect.Descriptor instead.
func (*UpdateViewRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{60}
}

func (x *UpdateViewRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *UpdateViewRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateViewRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateViewRequest) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UpdateViewRequest) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *UpdateViewRequest) GetIsEditable() bool {
	if x != nil {
		return x.IsEditable
	}
	return false
}

func (x *UpdateViewRequest) GetColorTheme() string {
	if x != nil {
		return x.ColorTheme
	}
	return ""
}

// Response message for UpdateView
type UpdateViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
}

func (x *UpdateViewResponse) Reset() {
	*x = UpdateViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateViewResponse) ProtoMessage() {}

func (x *UpdateViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateViewResponse.ProtoReflect.Descriptor instead.
func (*UpdateViewResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateViewResponse) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

// Request message for UpdateViewLayout
type UpdateViewLayoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. View Id.
	ViewId string              `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
	Layout []*cover.WidgetData `protobuf:"bytes,2,rep,name=layout,proto3" json:"layout,omitempty"`
}

func (x *UpdateViewLayoutRequest) Reset() {
	*x = UpdateViewLayoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateViewLayoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateViewLayoutRequest) ProtoMessage() {}

func (x *UpdateViewLayoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateViewLayoutRequest.ProtoReflect.Descriptor instead.
func (*UpdateViewLayoutRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateViewLayoutRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *UpdateViewLayoutRequest) GetLayout() []*cover.WidgetData {
	if x != nil {
		return x.Layout
	}
	return nil
}

// Response message for UpdateViewLayout
type UpdateViewLayoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Layout []*cover.ViewLayout `protobuf:"bytes,1,rep,name=layout,proto3" json:"layout,omitempty"`
}

func (x *UpdateViewLayoutResponse) Reset() {
	*x = UpdateViewLayoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateViewLayoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateViewLayoutResponse) ProtoMessage() {}

func (x *UpdateViewLayoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateViewLayoutResponse.ProtoReflect.Descriptor instead.
func (*UpdateViewLayoutResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{63}
}

func (x *UpdateViewLayoutResponse) GetLayout() []*cover.ViewLayout {
	if x != nil {
		return x.Layout
	}
	return nil
}

// Request message for UpdateViewWidget
type UpdateViewWidgetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. View Id.
	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
	// Required. Widget Id.
	WidgetId string                  `protobuf:"bytes,2,opt,name=widgetId,proto3" json:"widgetId,omitempty"`
	Options  *structpb.Struct        `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	Requests []*cover.LayoutRequests `protobuf:"bytes,4,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *UpdateViewWidgetRequest) Reset() {
	*x = UpdateViewWidgetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateViewWidgetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateViewWidgetRequest) ProtoMessage() {}

func (x *UpdateViewWidgetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateViewWidgetRequest.ProtoReflect.Descriptor instead.
func (*UpdateViewWidgetRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{64}
}

func (x *UpdateViewWidgetRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *UpdateViewWidgetRequest) GetWidgetId() string {
	if x != nil {
		return x.WidgetId
	}
	return ""
}

func (x *UpdateViewWidgetRequest) GetOptions() *structpb.Struct {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *UpdateViewWidgetRequest) GetRequests() []*cover.LayoutRequests {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Response message for UpdateViewWidget
type UpdateViewWidgetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId   string            `protobuf:"bytes,1,opt,name=widgetId,proto3" json:"widgetId,omitempty"`
	WidgetData *cover.WidgetData `protobuf:"bytes,2,opt,name=widgetData,proto3" json:"widgetData,omitempty"`
}

func (x *UpdateViewWidgetResponse) Reset() {
	*x = UpdateViewWidgetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateViewWidgetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateViewWidgetResponse) ProtoMessage() {}

func (x *UpdateViewWidgetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateViewWidgetResponse.ProtoReflect.Descriptor instead.
func (*UpdateViewWidgetResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{65}
}

func (x *UpdateViewWidgetResponse) GetWidgetId() string {
	if x != nil {
		return x.WidgetId
	}
	return ""
}

func (x *UpdateViewWidgetResponse) GetWidgetData() *cover.WidgetData {
	if x != nil {
		return x.WidgetData
	}
	return nil
}

// Request message for UpdateViewColorTheme
type UpdateViewColorThemeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewId     string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
	ColorTheme string `protobuf:"bytes,2,opt,name=colorTheme,proto3" json:"colorTheme,omitempty"`
}

func (x *UpdateViewColorThemeRequest) Reset() {
	*x = UpdateViewColorThemeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateViewColorThemeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateViewColorThemeRequest) ProtoMessage() {}

func (x *UpdateViewColorThemeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateViewColorThemeRequest.ProtoReflect.Descriptor instead.
func (*UpdateViewColorThemeRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{66}
}

func (x *UpdateViewColorThemeRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *UpdateViewColorThemeRequest) GetColorTheme() string {
	if x != nil {
		return x.ColorTheme
	}
	return ""
}

// Response message for UpdateViewColorTheme
type UpdateViewColorThemeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewData *cover.ViewData `protobuf:"bytes,1,opt,name=viewData,proto3" json:"viewData,omitempty"`
}

func (x *UpdateViewColorThemeResponse) Reset() {
	*x = UpdateViewColorThemeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateViewColorThemeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateViewColorThemeResponse) ProtoMessage() {}

func (x *UpdateViewColorThemeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateViewColorThemeResponse.ProtoReflect.Descriptor instead.
func (*UpdateViewColorThemeResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateViewColorThemeResponse) GetViewData() *cover.ViewData {
	if x != nil {
		return x.ViewData
	}
	return nil
}

// Request message for UpdateViewCurrency
type UpdateViewCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewId   string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *UpdateViewCurrencyRequest) Reset() {
	*x = UpdateViewCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateViewCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateViewCurrencyRequest) ProtoMessage() {}

func (x *UpdateViewCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateViewCurrencyRequest.ProtoReflect.Descriptor instead.
func (*UpdateViewCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{68}
}

func (x *UpdateViewCurrencyRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *UpdateViewCurrencyRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// Response message for UpdateViewCurrency
type UpdateViewCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewData *cover.ViewData `protobuf:"bytes,1,opt,name=viewData,proto3" json:"viewData,omitempty"`
}

func (x *UpdateViewCurrencyResponse) Reset() {
	*x = UpdateViewCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateViewCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateViewCurrencyResponse) ProtoMessage() {}

func (x *UpdateViewCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateViewCurrencyResponse.ProtoReflect.Descriptor instead.
func (*UpdateViewCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{69}
}

func (x *UpdateViewCurrencyResponse) GetViewData() *cover.ViewData {
	if x != nil {
		return x.ViewData
	}
	return nil
}

type SetOrgUpdateCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Day of the month. Valid inputs are: "1 - 31"
	UpdateCurrency int64 `protobuf:"varint,1,opt,name=updateCurrency,proto3" json:"updateCurrency,omitempty"`
}

func (x *SetOrgUpdateCurrencyRequest) Reset() {
	*x = SetOrgUpdateCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrgUpdateCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrgUpdateCurrencyRequest) ProtoMessage() {}

func (x *SetOrgUpdateCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrgUpdateCurrencyRequest.ProtoReflect.Descriptor instead.
func (*SetOrgUpdateCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{70}
}

func (x *SetOrgUpdateCurrencyRequest) GetUpdateCurrency() int64 {
	if x != nil {
		return x.UpdateCurrency
	}
	return 0
}

type SetOrgUpdateCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateCurrency int64 `protobuf:"varint,1,opt,name=updateCurrency,proto3" json:"updateCurrency,omitempty"`
}

func (x *SetOrgUpdateCurrencyResponse) Reset() {
	*x = SetOrgUpdateCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrgUpdateCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrgUpdateCurrencyResponse) ProtoMessage() {}

func (x *SetOrgUpdateCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrgUpdateCurrencyResponse.ProtoReflect.Descriptor instead.
func (*SetOrgUpdateCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{71}
}

func (x *SetOrgUpdateCurrencyResponse) GetUpdateCurrency() int64 {
	if x != nil {
		return x.UpdateCurrency
	}
	return 0
}

type GetOrgUpdateCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetOrgUpdateCurrencyRequest) Reset() {
	*x = GetOrgUpdateCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgUpdateCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgUpdateCurrencyRequest) ProtoMessage() {}

func (x *GetOrgUpdateCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgUpdateCurrencyRequest.ProtoReflect.Descriptor instead.
func (*GetOrgUpdateCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{72}
}

type GetOrgUpdateCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateCurrency int64  `protobuf:"varint,1,opt,name=updateCurrency,proto3" json:"updateCurrency,omitempty"`
	DateRegistered string `protobuf:"bytes,2,opt,name=dateRegistered,proto3" json:"dateRegistered,omitempty"`
}

func (x *GetOrgUpdateCurrencyResponse) Reset() {
	*x = GetOrgUpdateCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgUpdateCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgUpdateCurrencyResponse) ProtoMessage() {}

func (x *GetOrgUpdateCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgUpdateCurrencyResponse.ProtoReflect.Descriptor instead.
func (*GetOrgUpdateCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{73}
}

func (x *GetOrgUpdateCurrencyResponse) GetUpdateCurrency() int64 {
	if x != nil {
		return x.UpdateCurrency
	}
	return 0
}

func (x *GetOrgUpdateCurrencyResponse) GetDateRegistered() string {
	if x != nil {
		return x.DateRegistered
	}
	return ""
}

// Request message for ListExchangeRates
type ListExchangeRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. View Id.
	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
	// Required. Start date Format: "YYYYMMDD"
	StartDate string `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate,omitempty"`
	// Required. End date Format: "YYYYMMDD"
	EndDate string `protobuf:"bytes,3,opt,name=endDate,proto3" json:"endDate,omitempty"`
}

func (x *ListExchangeRatesRequest) Reset() {
	*x = ListExchangeRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExchangeRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExchangeRatesRequest) ProtoMessage() {}

func (x *ListExchangeRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExchangeRatesRequest.ProtoReflect.Descriptor instead.
func (*ListExchangeRatesRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{74}
}

func (x *ListExchangeRatesRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *ListExchangeRatesRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ListExchangeRatesRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// Response message for ListExchangeRates
type ListExchangeRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeRates []*ExchangeRates `protobuf:"bytes,1,rep,name=exchangeRates,proto3" json:"exchangeRates,omitempty"`
}

func (x *ListExchangeRatesResponse) Reset() {
	*x = ListExchangeRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExchangeRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExchangeRatesResponse) ProtoMessage() {}

func (x *ListExchangeRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExchangeRatesResponse.ProtoReflect.Descriptor instead.
func (*ListExchangeRatesResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{75}
}

func (x *ListExchangeRatesResponse) GetExchangeRates() []*ExchangeRates {
	if x != nil {
		return x.ExchangeRates
	}
	return nil
}

type ExchangeRates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month        string  `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	ExchangeRate float32 `protobuf:"fixed32,2,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
}

func (x *ExchangeRates) Reset() {
	*x = ExchangeRates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRates) ProtoMessage() {}

func (x *ExchangeRates) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRates.ProtoReflect.Descriptor instead.
func (*ExchangeRates) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{76}
}

func (x *ExchangeRates) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *ExchangeRates) GetExchangeRate() float32 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

// Request message for DeleteView
type DeleteViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. View Id.
	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
}

func (x *DeleteViewRequest) Reset() {
	*x = DeleteViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteViewRequest) ProtoMessage() {}

func (x *DeleteViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteViewRequest.ProtoReflect.Descriptor instead.
func (*DeleteViewRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{77}
}

func (x *DeleteViewRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

// Response message for DeleteView
type DeleteViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
}

func (x *DeleteViewResponse) Reset() {
	*x = DeleteViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteViewResponse) ProtoMessage() {}

func (x *DeleteViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteViewResponse.ProtoReflect.Descriptor instead.
func (*DeleteViewResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{78}
}

func (x *DeleteViewResponse) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

// Request message for UpdateSideMenuState
type UpdateSideMenuStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. View Id.
	ViewId        string                 `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
	Sidemenustate []*cover.SideMenuState `protobuf:"bytes,2,rep,name=sidemenustate,proto3" json:"sidemenustate,omitempty"`
}

func (x *UpdateSideMenuStateRequest) Reset() {
	*x = UpdateSideMenuStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSideMenuStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSideMenuStateRequest) ProtoMessage() {}

func (x *UpdateSideMenuStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSideMenuStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateSideMenuStateRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{79}
}

func (x *UpdateSideMenuStateRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *UpdateSideMenuStateRequest) GetSidemenustate() []*cover.SideMenuState {
	if x != nil {
		return x.Sidemenustate
	}
	return nil
}

// Response message for UpdateSideMenuState
type UpdateSideMenuStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
}

func (x *UpdateSideMenuStateResponse) Reset() {
	*x = UpdateSideMenuStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSideMenuStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSideMenuStateResponse) ProtoMessage() {}

func (x *UpdateSideMenuStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSideMenuStateResponse.ProtoReflect.Descriptor instead.
func (*UpdateSideMenuStateResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{80}
}

func (x *UpdateSideMenuStateResponse) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

// Request message for AddSideMenuFavorite
type AddSideMenuFavoriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. View Id.
	ViewId     string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
	MenuItemId string `protobuf:"bytes,2,opt,name=menuItemId,proto3" json:"menuItemId,omitempty"`
}

func (x *AddSideMenuFavoriteRequest) Reset() {
	*x = AddSideMenuFavoriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSideMenuFavoriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSideMenuFavoriteRequest) ProtoMessage() {}

func (x *AddSideMenuFavoriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSideMenuFavoriteRequest.ProtoReflect.Descriptor instead.
func (*AddSideMenuFavoriteRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{81}
}

func (x *AddSideMenuFavoriteRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *AddSideMenuFavoriteRequest) GetMenuItemId() string {
	if x != nil {
		return x.MenuItemId
	}
	return ""
}

// Response message for AddSideMenuFavorite
type AddSideMenuFavoriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
}

func (x *AddSideMenuFavoriteResponse) Reset() {
	*x = AddSideMenuFavoriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSideMenuFavoriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSideMenuFavoriteResponse) ProtoMessage() {}

func (x *AddSideMenuFavoriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSideMenuFavoriteResponse.ProtoReflect.Descriptor instead.
func (*AddSideMenuFavoriteResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{82}
}

func (x *AddSideMenuFavoriteResponse) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

// Request message for RemoveSideMenuFavorite
type RemoveSideMenuFavoriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. View Id.
	ViewId     string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
	MenuItemId string `protobuf:"bytes,2,opt,name=menuItemId,proto3" json:"menuItemId,omitempty"`
}

func (x *RemoveSideMenuFavoriteRequest) Reset() {
	*x = RemoveSideMenuFavoriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSideMenuFavoriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSideMenuFavoriteRequest) ProtoMessage() {}

func (x *RemoveSideMenuFavoriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSideMenuFavoriteRequest.ProtoReflect.Descriptor instead.
func (*RemoveSideMenuFavoriteRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{83}
}

func (x *RemoveSideMenuFavoriteRequest) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *RemoveSideMenuFavoriteRequest) GetMenuItemId() string {
	if x != nil {
		return x.MenuItemId
	}
	return ""
}

// Response message for RemoveSideMenuFavorite
type RemoveSideMenuFavoriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewId string `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
}

func (x *RemoveSideMenuFavoriteResponse) Reset() {
	*x = RemoveSideMenuFavoriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSideMenuFavoriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSideMenuFavoriteResponse) ProtoMessage() {}

func (x *RemoveSideMenuFavoriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSideMenuFavoriteResponse.ProtoReflect.Descriptor instead.
func (*RemoveSideMenuFavoriteResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{84}
}

func (x *RemoveSideMenuFavoriteResponse) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

// Request message for CreateCostGroup
type CreateCostGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description  string              `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Image        string              `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Icon         string              `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	ColorTheme   string              `protobuf:"bytes,5,opt,name=colorTheme,proto3" json:"colorTheme,omitempty"`
	Combinations *cover.Combinations `protobuf:"bytes,6,opt,name=combinations,proto3" json:"combinations,omitempty"`
}

func (x *CreateCostGroupRequest) Reset() {
	*x = CreateCostGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCostGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCostGroupRequest) ProtoMessage() {}

func (x *CreateCostGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCostGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateCostGroupRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{85}
}

func (x *CreateCostGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCostGroupRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCostGroupRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CreateCostGroupRequest) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *CreateCostGroupRequest) GetColorTheme() string {
	if x != nil {
		return x.ColorTheme
	}
	return ""
}

func (x *CreateCostGroupRequest) GetCombinations() *cover.Combinations {
	if x != nil {
		return x.Combinations
	}
	return nil
}

// Response message for CreateCostGroup
type CreateCostGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostGroupData *cover.CostGroupData `protobuf:"bytes,1,opt,name=costGroupData,proto3" json:"costGroupData,omitempty"`
}

func (x *CreateCostGroupResponse) Reset() {
	*x = CreateCostGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCostGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCostGroupResponse) ProtoMessage() {}

func (x *CreateCostGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCostGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateCostGroupResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{86}
}

func (x *CreateCostGroupResponse) GetCostGroupData() *cover.CostGroupData {
	if x != nil {
		return x.CostGroupData
	}
	return nil
}

// Request message for GetCostGroups
type GetCostGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCostGroupsRequest) Reset() {
	*x = GetCostGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostGroupsRequest) ProtoMessage() {}

func (x *GetCostGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetCostGroupsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{87}
}

// Response message for GetCostGroups
type GetCostGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostGroupData []*cover.CostGroupData `protobuf:"bytes,1,rep,name=costGroupData,proto3" json:"costGroupData,omitempty"`
}

func (x *GetCostGroupsResponse) Reset() {
	*x = GetCostGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostGroupsResponse) ProtoMessage() {}

func (x *GetCostGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetCostGroupsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{88}
}

func (x *GetCostGroupsResponse) GetCostGroupData() []*cover.CostGroupData {
	if x != nil {
		return x.CostGroupData
	}
	return nil
}

// Request message for GetCostGroupDetails
type GetCostGroupDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
}

func (x *GetCostGroupDetailsRequest) Reset() {
	*x = GetCostGroupDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostGroupDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostGroupDetailsRequest) ProtoMessage() {}

func (x *GetCostGroupDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostGroupDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetCostGroupDetailsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{89}
}

func (x *GetCostGroupDetailsRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

// Response message for GetCostGroupDetails
type GetCostGroupDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostGroupData *cover.CostGroupData `protobuf:"bytes,1,opt,name=costGroupData,proto3" json:"costGroupData,omitempty"`
}

func (x *GetCostGroupDetailsResponse) Reset() {
	*x = GetCostGroupDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostGroupDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostGroupDetailsResponse) ProtoMessage() {}

func (x *GetCostGroupDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostGroupDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetCostGroupDetailsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{90}
}

func (x *GetCostGroupDetailsResponse) GetCostGroupData() *cover.CostGroupData {
	if x != nil {
		return x.CostGroupData
	}
	return nil
}

// Request message for UpdateCostGroupName
type UpdateCostGroupNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Required. Name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateCostGroupNameRequest) Reset() {
	*x = UpdateCostGroupNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostGroupNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostGroupNameRequest) ProtoMessage() {}

func (x *UpdateCostGroupNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostGroupNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateCostGroupNameRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{91}
}

func (x *UpdateCostGroupNameRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *UpdateCostGroupNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response message for UpdateCostGroupName
type UpdateCostGroupNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateCostGroupNameResponse) Reset() {
	*x = UpdateCostGroupNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostGroupNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostGroupNameResponse) ProtoMessage() {}

func (x *UpdateCostGroupNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostGroupNameResponse.ProtoReflect.Descriptor instead.
func (*UpdateCostGroupNameResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{92}
}

func (x *UpdateCostGroupNameResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for UpdateCostGroupDescription
type UpdateCostGroupDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Required. Description.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateCostGroupDescriptionRequest) Reset() {
	*x = UpdateCostGroupDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostGroupDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostGroupDescriptionRequest) ProtoMessage() {}

func (x *UpdateCostGroupDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostGroupDescriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateCostGroupDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{93}
}

func (x *UpdateCostGroupDescriptionRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *UpdateCostGroupDescriptionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Response message for UpdateCostGroupDescription
type UpdateCostGroupDescriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateCostGroupDescriptionResponse) Reset() {
	*x = UpdateCostGroupDescriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostGroupDescriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostGroupDescriptionResponse) ProtoMessage() {}

func (x *UpdateCostGroupDescriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostGroupDescriptionResponse.ProtoReflect.Descriptor instead.
func (*UpdateCostGroupDescriptionResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{94}
}

func (x *UpdateCostGroupDescriptionResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Request message for UpdateCostGroupImage
type UpdateCostGroupImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Required. Image.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *UpdateCostGroupImageRequest) Reset() {
	*x = UpdateCostGroupImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostGroupImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostGroupImageRequest) ProtoMessage() {}

func (x *UpdateCostGroupImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostGroupImageRequest.ProtoReflect.Descriptor instead.
func (*UpdateCostGroupImageRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{95}
}

func (x *UpdateCostGroupImageRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *UpdateCostGroupImageRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// Response message for UpdateCostGroupImage
type UpdateCostGroupImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *UpdateCostGroupImageResponse) Reset() {
	*x = UpdateCostGroupImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostGroupImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostGroupImageResponse) ProtoMessage() {}

func (x *UpdateCostGroupImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostGroupImageResponse.ProtoReflect.Descriptor instead.
func (*UpdateCostGroupImageResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{96}
}

func (x *UpdateCostGroupImageResponse) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// Request message for UpdateCostGroupIcon
type UpdateCostGroupIconRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Required. Icon.
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *UpdateCostGroupIconRequest) Reset() {
	*x = UpdateCostGroupIconRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostGroupIconRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostGroupIconRequest) ProtoMessage() {}

func (x *UpdateCostGroupIconRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostGroupIconRequest.ProtoReflect.Descriptor instead.
func (*UpdateCostGroupIconRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{97}
}

func (x *UpdateCostGroupIconRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *UpdateCostGroupIconRequest) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

// Response message for UpdateCostGroupIcon
type UpdateCostGroupIconResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *UpdateCostGroupIconResponse) Reset() {
	*x = UpdateCostGroupIconResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostGroupIconResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostGroupIconResponse) ProtoMessage() {}

func (x *UpdateCostGroupIconResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostGroupIconResponse.ProtoReflect.Descriptor instead.
func (*UpdateCostGroupIconResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{98}
}

func (x *UpdateCostGroupIconResponse) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

// Request message for UpdateCostGroupColorTheme
type UpdateCostGroupColorThemeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Required. Color Theme.
	ColorTheme string `protobuf:"bytes,2,opt,name=colorTheme,proto3" json:"colorTheme,omitempty"`
}

func (x *UpdateCostGroupColorThemeRequest) Reset() {
	*x = UpdateCostGroupColorThemeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostGroupColorThemeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostGroupColorThemeRequest) ProtoMessage() {}

func (x *UpdateCostGroupColorThemeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostGroupColorThemeRequest.ProtoReflect.Descriptor instead.
func (*UpdateCostGroupColorThemeRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{99}
}

func (x *UpdateCostGroupColorThemeRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *UpdateCostGroupColorThemeRequest) GetColorTheme() string {
	if x != nil {
		return x.ColorTheme
	}
	return ""
}

// Response message for UpdateCostGroupColorTheme
type UpdateCostGroupColorThemeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorTheme string `protobuf:"bytes,1,opt,name=colorTheme,proto3" json:"colorTheme,omitempty"`
}

func (x *UpdateCostGroupColorThemeResponse) Reset() {
	*x = UpdateCostGroupColorThemeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostGroupColorThemeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostGroupColorThemeResponse) ProtoMessage() {}

func (x *UpdateCostGroupColorThemeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostGroupColorThemeResponse.ProtoReflect.Descriptor instead.
func (*UpdateCostGroupColorThemeResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{100}
}

func (x *UpdateCostGroupColorThemeResponse) GetColorTheme() string {
	if x != nil {
		return x.ColorTheme
	}
	return ""
}

// Request message for UpdateCostGroupCombinations
type UpdateCostGroupCombinationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId  string              `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	Combinations *cover.Combinations `protobuf:"bytes,2,opt,name=combinations,proto3" json:"combinations,omitempty"`
}

func (x *UpdateCostGroupCombinationsRequest) Reset() {
	*x = UpdateCostGroupCombinationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostGroupCombinationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostGroupCombinationsRequest) ProtoMessage() {}

func (x *UpdateCostGroupCombinationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostGroupCombinationsRequest.ProtoReflect.Descriptor instead.
func (*UpdateCostGroupCombinationsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{101}
}

func (x *UpdateCostGroupCombinationsRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *UpdateCostGroupCombinationsRequest) GetCombinations() *cover.Combinations {
	if x != nil {
		return x.Combinations
	}
	return nil
}

// Response message for UpdateCostGroupCombinations
type UpdateCostGroupCombinationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Combinations *cover.Combinations `protobuf:"bytes,1,opt,name=combinations,proto3" json:"combinations,omitempty"`
}

func (x *UpdateCostGroupCombinationsResponse) Reset() {
	*x = UpdateCostGroupCombinationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostGroupCombinationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostGroupCombinationsResponse) ProtoMessage() {}

func (x *UpdateCostGroupCombinationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostGroupCombinationsResponse.ProtoReflect.Descriptor instead.
func (*UpdateCostGroupCombinationsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{102}
}

func (x *UpdateCostGroupCombinationsResponse) GetCombinations() *cover.Combinations {
	if x != nil {
		return x.Combinations
	}
	return nil
}

// Request message for AssignCostGroupMember
type AssignCostGroupMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Required. User Id.
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *AssignCostGroupMemberRequest) Reset() {
	*x = AssignCostGroupMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignCostGroupMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignCostGroupMemberRequest) ProtoMessage() {}

func (x *AssignCostGroupMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignCostGroupMemberRequest.ProtoReflect.Descriptor instead.
func (*AssignCostGroupMemberRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{103}
}

func (x *AssignCostGroupMemberRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *AssignCostGroupMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Response message for AssignCostGroupMember
type AssignCostGroupMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *AssignCostGroupMemberResponse) Reset() {
	*x = AssignCostGroupMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignCostGroupMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignCostGroupMemberResponse) ProtoMessage() {}

func (x *AssignCostGroupMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignCostGroupMemberResponse.ProtoReflect.Descriptor instead.
func (*AssignCostGroupMemberResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{104}
}

func (x *AssignCostGroupMemberResponse) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *AssignCostGroupMemberResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Request message for RemoveCostGroupMember
type RemoveCostGroupMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Required. User Id.
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *RemoveCostGroupMemberRequest) Reset() {
	*x = RemoveCostGroupMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCostGroupMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCostGroupMemberRequest) ProtoMessage() {}

func (x *RemoveCostGroupMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCostGroupMemberRequest.ProtoReflect.Descriptor instead.
func (*RemoveCostGroupMemberRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{105}
}

func (x *RemoveCostGroupMemberRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *RemoveCostGroupMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Response message for RemoveCostGroupMember
type RemoveCostGroupMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *RemoveCostGroupMemberResponse) Reset() {
	*x = RemoveCostGroupMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCostGroupMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCostGroupMemberResponse) ProtoMessage() {}

func (x *RemoveCostGroupMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCostGroupMemberResponse.ProtoReflect.Descriptor instead.
func (*RemoveCostGroupMemberResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{106}
}

func (x *RemoveCostGroupMemberResponse) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *RemoveCostGroupMemberResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Request message for DeleteCostGroup
type DeleteCostGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
}

func (x *DeleteCostGroupRequest) Reset() {
	*x = DeleteCostGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCostGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCostGroupRequest) ProtoMessage() {}

func (x *DeleteCostGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCostGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteCostGroupRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{107}
}

func (x *DeleteCostGroupRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

// Response message for DeleteCostGroup
type DeleteCostGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
}

func (x *DeleteCostGroupResponse) Reset() {
	*x = DeleteCostGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCostGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCostGroupResponse) ProtoMessage() {}

func (x *DeleteCostGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCostGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteCostGroupResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{108}
}

func (x *DeleteCostGroupResponse) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

// Request message for the GetAccountAccessTemplateUrlRequest rpc.
type GetAccountAccessTemplateUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All templates are publicly available from the reponse link (`templateUrl`) if you want to audit the included permissions.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetAccountAccessTemplateUrlRequest) Reset() {
	*x = GetAccountAccessTemplateUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountAccessTemplateUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountAccessTemplateUrlRequest) ProtoMessage() {}

func (x *GetAccountAccessTemplateUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountAccessTemplateUrlRequest.ProtoReflect.Descriptor instead.
func (*GetAccountAccessTemplateUrlRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{109}
}

func (x *GetAccountAccessTemplateUrlRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Response message for the GetAccountAccessTemplateUrlResponse rpc.
type GetAccountAccessTemplateUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CloudFormation launch url. Open it in your browser.
	LaunchUrl string `protobuf:"bytes,1,opt,name=launchUrl,proto3" json:"launchUrl,omitempty"`
	// The latest CloudFormation template. The version is included in the filename.
	TemplateUrl string `protobuf:"bytes,2,opt,name=templateUrl,proto3" json:"templateUrl,omitempty"`
	// The default stack name used. Can be modified.
	StackName string `protobuf:"bytes,3,opt,name=stackName,proto3" json:"stackName,omitempty"`
	// The AWS account that will receive the access. Do not change.
	Principal string `protobuf:"bytes,4,opt,name=principal,proto3" json:"principal,omitempty"`
	// The external id for this role. Do not change.
	ExternalId string `protobuf:"bytes,5,opt,name=externalId,proto3" json:"externalId,omitempty"`
}

func (x *GetAccountAccessTemplateUrlResponse) Reset() {
	*x = GetAccountAccessTemplateUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountAccessTemplateUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountAccessTemplateUrlResponse) ProtoMessage() {}

func (x *GetAccountAccessTemplateUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountAccessTemplateUrlResponse.ProtoReflect.Descriptor instead.
func (*GetAccountAccessTemplateUrlResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{110}
}

func (x *GetAccountAccessTemplateUrlResponse) GetLaunchUrl() string {
	if x != nil {
		return x.LaunchUrl
	}
	return ""
}

func (x *GetAccountAccessTemplateUrlResponse) GetTemplateUrl() string {
	if x != nil {
		return x.TemplateUrl
	}
	return ""
}

func (x *GetAccountAccessTemplateUrlResponse) GetStackName() string {
	if x != nil {
		return x.StackName
	}
	return ""
}

func (x *GetAccountAccessTemplateUrlResponse) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *GetAccountAccessTemplateUrlResponse) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

// Request message for the ListAccountAccess rpc.
type ListAccountAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAccountAccessRequest) Reset() {
	*x = ListAccountAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountAccessRequest) ProtoMessage() {}

func (x *ListAccountAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountAccessRequest.ProtoReflect.Descriptor instead.
func (*ListAccountAccessRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{111}
}

// Request message for the GetAccountAccess rpc.
type GetAccountAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The target AWS account to query.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *GetAccountAccessRequest) Reset() {
	*x = GetAccountAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountAccessRequest) ProtoMessage() {}

func (x *GetAccountAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountAccessRequest.ProtoReflect.Descriptor instead.
func (*GetAccountAccessRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{112}
}

func (x *GetAccountAccessRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// Response message for GetAccountAccess, CreateAccountAccess rpc.
type AccountAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The queried target account.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The account name
	AccountName string `protobuf:"bytes,2,opt,name=accountName,proto3" json:"accountName,omitempty"`
	// The account type. Payer or linked account.
	AccountType string `protobuf:"bytes,3,opt,name=accountType,proto3" json:"accountType,omitempty"`
	// The payer account of the account.
	PayerId string `protobuf:"bytes,4,opt,name=payerId,proto3" json:"payerId,omitempty"`
	// The role ARN that provides the cross-account access permissions.
	RoleArn string `protobuf:"bytes,5,opt,name=roleArn,proto3" json:"roleArn,omitempty"`
	// The external id for this role.
	ExternalId string `protobuf:"bytes,6,opt,name=externalId,proto3" json:"externalId,omitempty"`
	// The id of the CloudFormation stack deployed in the target account.
	StackId string `protobuf:"bytes,7,opt,name=stackId,proto3" json:"stackId,omitempty"`
	// The region where the stack is deployed.
	StackRegion string `protobuf:"bytes,8,opt,name=stackRegion,proto3" json:"stackRegion,omitempty"`
	// The latest template used to deploy the stack.
	TemplateUrl string `protobuf:"bytes,9,opt,name=templateUrl,proto3" json:"templateUrl,omitempty"`
	// The s3 bucket name
	BucketName string `protobuf:"bytes,10,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	// Report path prefix
	Prefix string `protobuf:"bytes,11,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// The report name
	ReportName string `protobuf:"bytes,12,opt,name=reportName,proto3" json:"reportName,omitempty"`
	// The status of registration for CUR export, API access and Cloudwatch streaming
	RegistrationStatus *cover.RegistrationStatus `protobuf:"bytes,13,opt,name=registrationStatus,proto3" json:"registrationStatus,omitempty"`
	// This can be `latest`, `outdated`, or some error information.
	Status string `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// The last updated timestamp, RFC3339 UTC.
	LastUpdated string `protobuf:"bytes,15,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
}

func (x *AccountAccess) Reset() {
	*x = AccountAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAccess) ProtoMessage() {}

func (x *AccountAccess) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAccess.ProtoReflect.Descriptor instead.
func (*AccountAccess) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{113}
}

func (x *AccountAccess) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *AccountAccess) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AccountAccess) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *AccountAccess) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

func (x *AccountAccess) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

func (x *AccountAccess) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *AccountAccess) GetStackId() string {
	if x != nil {
		return x.StackId
	}
	return ""
}

func (x *AccountAccess) GetStackRegion() string {
	if x != nil {
		return x.StackRegion
	}
	return ""
}

func (x *AccountAccess) GetTemplateUrl() string {
	if x != nil {
		return x.TemplateUrl
	}
	return ""
}

func (x *AccountAccess) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *AccountAccess) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *AccountAccess) GetReportName() string {
	if x != nil {
		return x.ReportName
	}
	return ""
}

func (x *AccountAccess) GetRegistrationStatus() *cover.RegistrationStatus {
	if x != nil {
		return x.RegistrationStatus
	}
	return nil
}

func (x *AccountAccess) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AccountAccess) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

// Request message for the CreateAccountAccess rpc.
type CreateAccountAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The target AWS account to validate.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Optional. Set to true if deployment is done through terraform
	FromTerraform bool `protobuf:"varint,2,opt,name=fromTerraform,proto3" json:"fromTerraform,omitempty"`
}

func (x *CreateAccountAccessRequest) Reset() {
	*x = CreateAccountAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountAccessRequest) ProtoMessage() {}

func (x *CreateAccountAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountAccessRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountAccessRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{114}
}

func (x *CreateAccountAccessRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *CreateAccountAccessRequest) GetFromTerraform() bool {
	if x != nil {
		return x.FromTerraform
	}
	return false
}

// Request message for the CreateAccountAccessStackset rpc.
type CreateAccountAccessStacksetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The AWS payer account to validate.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Required. The region of the stack deployment.
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *CreateAccountAccessStacksetRequest) Reset() {
	*x = CreateAccountAccessStacksetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountAccessStacksetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountAccessStacksetRequest) ProtoMessage() {}

func (x *CreateAccountAccessStacksetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountAccessStacksetRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountAccessStacksetRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{115}
}

func (x *CreateAccountAccessStacksetRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *CreateAccountAccessStacksetRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// Request message for the UpdateAccountAccess rpc.
type UpdateAccountAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The target AWS account to update.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *UpdateAccountAccessRequest) Reset() {
	*x = UpdateAccountAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountAccessRequest) ProtoMessage() {}

func (x *UpdateAccountAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountAccessRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccountAccessRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{116}
}

func (x *UpdateAccountAccessRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// Request message for the DeleteAccountAccess rpc.
type DeleteAccountAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The target AWS account to delete.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Vendor string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *DeleteAccountAccessRequest) Reset() {
	*x = DeleteAccountAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountAccessRequest) ProtoMessage() {}

func (x *DeleteAccountAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountAccessRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountAccessRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{117}
}

func (x *DeleteAccountAccessRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *DeleteAccountAccessRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

// Response message for the DeleteAccountAccess rpc.
type DeleteAccountAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId string `protobuf:"bytes,1,opt,name=targetId,proto3" json:"targetId,omitempty"`
}

func (x *DeleteAccountAccessResponse) Reset() {
	*x = DeleteAccountAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountAccessResponse) ProtoMessage() {}

func (x *DeleteAccountAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountAccessResponse.ProtoReflect.Descriptor instead.
func (*DeleteAccountAccessResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{118}
}

func (x *DeleteAccountAccessResponse) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

// Request message for the RegisterAccount rpc.
type RegisterAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cloud vendor.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The AWS account Id.
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// The account name
	AccountName string `protobuf:"bytes,3,opt,name=accountName,proto3" json:"accountName,omitempty"`
}

func (x *RegisterAccountRequest) Reset() {
	*x = RegisterAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAccountRequest) ProtoMessage() {}

func (x *RegisterAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAccountRequest.ProtoReflect.Descriptor instead.
func (*RegisterAccountRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{119}
}

func (x *RegisterAccountRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *RegisterAccountRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RegisterAccountRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

// Request message for the Asset.ListResources rpc.
type ListAssetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Optional. If not set, current month will be used. Format: `yyyymm`.
	StartMonth string `protobuf:"bytes,2,opt,name=startMonth,proto3" json:"startMonth,omitempty"`
	// Optional. If not set, current month will be used. Format: `yyyymm`.
	EndMonth string `protobuf:"bytes,3,opt,name=endMonth,proto3" json:"endMonth,omitempty"`
	// Optional. If true, returns only all assets with recommendation
	WithRecommendation bool `protobuf:"varint,4,opt,name=withRecommendation,proto3" json:"withRecommendation,omitempty"`
	// Optional. For AWS-specific filter options.
	AwsOptions []*ListAssetsFilters `protobuf:"bytes,5,rep,name=awsOptions,proto3" json:"awsOptions,omitempty"`
	// Optional. For AWS-specific properties filter options.
	AwsPropertiesOptions []*ListAssetsFilters `protobuf:"bytes,6,rep,name=awsPropertiesOptions,proto3" json:"awsPropertiesOptions,omitempty"`
}

func (x *ListAssetsRequest) Reset() {
	*x = ListAssetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetsRequest) ProtoMessage() {}

func (x *ListAssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetsRequest.ProtoReflect.Descriptor instead.
func (*ListAssetsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{120}
}

func (x *ListAssetsRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *ListAssetsRequest) GetStartMonth() string {
	if x != nil {
		return x.StartMonth
	}
	return ""
}

func (x *ListAssetsRequest) GetEndMonth() string {
	if x != nil {
		return x.EndMonth
	}
	return ""
}

func (x *ListAssetsRequest) GetWithRecommendation() bool {
	if x != nil {
		return x.WithRecommendation
	}
	return false
}

func (x *ListAssetsRequest) GetAwsOptions() []*ListAssetsFilters {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

func (x *ListAssetsRequest) GetAwsPropertiesOptions() []*ListAssetsFilters {
	if x != nil {
		return x.AwsPropertiesOptions
	}
	return nil
}

type ListAssetsFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AndFilters map[string]string `protobuf:"bytes,1,rep,name=andFilters,proto3" json:"andFilters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListAssetsFilters) Reset() {
	*x = ListAssetsFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetsFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetsFilters) ProtoMessage() {}

func (x *ListAssetsFilters) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetsFilters.ProtoReflect.Descriptor instead.
func (*ListAssetsFilters) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{121}
}

func (x *ListAssetsFilters) GetAndFilters() map[string]string {
	if x != nil {
		return x.AndFilters
	}
	return nil
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format is `yyyy-mm`
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Organization ID
	OrgId string `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	// Only `aws` is supported for now.
	Vendor string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Resource owner account
	Account string `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	// Only `AmazonEC2` is supported for now.
	Service string `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	// Resource unique identifier
	ResourceId string `protobuf:"bytes,6,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// Only `AWS::EC2::Instance` is supported for now
	ResourceType string `protobuf:"bytes,7,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	// Cost incurred for the resource on specified month.
	Cost float64 `protobuf:"fixed64,8,opt,name=cost,proto3" json:"cost,omitempty"`
	// Format: JSON String
	Properties string `protobuf:"bytes,9,opt,name=properties,proto3" json:"properties,omitempty"`
	// Format: JSON String
	Recommendation string `protobuf:"bytes,10,opt,name=recommendation,proto3" json:"recommendation,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{122}
}

func (x *Resource) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Resource) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Resource) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *Resource) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Resource) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Resource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *Resource) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *Resource) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Resource) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

func (x *Resource) GetRecommendation() string {
	if x != nil {
		return x.Recommendation
	}
	return ""
}

type GetAssetsSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Optional. If not set, current month will be used. Format: `yyyymm`.
	StartMonth string `protobuf:"bytes,2,opt,name=startMonth,proto3" json:"startMonth,omitempty"`
	// Optional. If not set, current month will be used. Format: `yyyymm`.
	EndMonth string `protobuf:"bytes,3,opt,name=endMonth,proto3" json:"endMonth,omitempty"`
	// Optional. If true, return the assets summary for the requested period. Else, summary per month is returned.
	CombineDates bool `protobuf:"varint,4,opt,name=combineDates,proto3" json:"combineDates,omitempty"`
	// Optional. For AWS-specific filter options.
	AwsOptions []*ListAssetsFilters `protobuf:"bytes,5,rep,name=awsOptions,proto3" json:"awsOptions,omitempty"`
	// Optional. For AWS-specific properties filter options.
	AwsPropertiesOptions []*ListAssetsFilters `protobuf:"bytes,6,rep,name=awsPropertiesOptions,proto3" json:"awsPropertiesOptions,omitempty"`
}

func (x *GetAssetsSummaryRequest) Reset() {
	*x = GetAssetsSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetsSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetsSummaryRequest) ProtoMessage() {}

func (x *GetAssetsSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetsSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetAssetsSummaryRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{123}
}

func (x *GetAssetsSummaryRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *GetAssetsSummaryRequest) GetStartMonth() string {
	if x != nil {
		return x.StartMonth
	}
	return ""
}

func (x *GetAssetsSummaryRequest) GetEndMonth() string {
	if x != nil {
		return x.EndMonth
	}
	return ""
}

func (x *GetAssetsSummaryRequest) GetCombineDates() bool {
	if x != nil {
		return x.CombineDates
	}
	return false
}

func (x *GetAssetsSummaryRequest) GetAwsOptions() []*ListAssetsFilters {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

func (x *GetAssetsSummaryRequest) GetAwsPropertiesOptions() []*ListAssetsFilters {
	if x != nil {
		return x.AwsPropertiesOptions
	}
	return nil
}

type GetAssetsSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary []*AssetsSummary `protobuf:"bytes,1,rep,name=summary,proto3" json:"summary,omitempty"`
	// Format: JSON String
	RecommendationSummary string `protobuf:"bytes,2,opt,name=recommendationSummary,proto3" json:"recommendationSummary,omitempty"`
}

func (x *GetAssetsSummaryResponse) Reset() {
	*x = GetAssetsSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetsSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetsSummaryResponse) ProtoMessage() {}

func (x *GetAssetsSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetsSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetAssetsSummaryResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{124}
}

func (x *GetAssetsSummaryResponse) GetSummary() []*AssetsSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *GetAssetsSummaryResponse) GetRecommendationSummary() string {
	if x != nil {
		return x.RecommendationSummary
	}
	return ""
}

type AssetsSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format is `yyyy-mm`
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Only `aws` is supported for now.
	Vendor string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Total number of resources
	TotalResources int64 `protobuf:"varint,3,opt,name=totalResources,proto3" json:"totalResources,omitempty"`
	// Total Cost incurred for the resources on specified month.
	TotalCost float64 `protobuf:"fixed64,4,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
}

func (x *AssetsSummary) Reset() {
	*x = AssetsSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsSummary) ProtoMessage() {}

func (x *AssetsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsSummary.ProtoReflect.Descriptor instead.
func (*AssetsSummary) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{125}
}

func (x *AssetsSummary) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *AssetsSummary) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *AssetsSummary) GetTotalResources() int64 {
	if x != nil {
		return x.TotalResources
	}
	return 0
}

func (x *AssetsSummary) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

type ResolveCostGroupCombinationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
}

func (x *ResolveCostGroupCombinationsRequest) Reset() {
	*x = ResolveCostGroupCombinationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveCostGroupCombinationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveCostGroupCombinationsRequest) ProtoMessage() {}

func (x *ResolveCostGroupCombinationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveCostGroupCombinationsRequest.ProtoReflect.Descriptor instead.
func (*ResolveCostGroupCombinationsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{126}
}

func (x *ResolveCostGroupCombinationsRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

type ResolveCostGroupCombinationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostGroupId string           `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	Accounts    []*cover.Account `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *ResolveCostGroupCombinationsResponse) Reset() {
	*x = ResolveCostGroupCombinationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveCostGroupCombinationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveCostGroupCombinationsResponse) ProtoMessage() {}

func (x *ResolveCostGroupCombinationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveCostGroupCombinationsResponse.ProtoReflect.Descriptor instead.
func (*ResolveCostGroupCombinationsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{127}
}

func (x *ResolveCostGroupCombinationsResponse) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *ResolveCostGroupCombinationsResponse) GetAccounts() []*cover.Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type GetCostUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Optional. If not set, the first day of the current month will be used. Format: `yyyymmdd`.
	StartTime string `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// Optional. If not set, current date will be used. Format: `yyyymmdd`.
	EndTime string `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	// Optional. If set to true, return data grouped by month within the date range.
	// If you want data that is grouped per account per month, set this to `true`, then set `groupByColumns` to `none`.
	// You can also use `groupByColumns` while setting this to true.
	GroupByMonth bool `protobuf:"varint,4,opt,name=groupByMonth,proto3" json:"groupByMonth,omitempty"`
	// Optional. If set, returns only the services or accounts with the highest cost or usage
	// Default value is 0.
	Limit int64 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// Optional. Valid values are `cost` and `usage`.
	// Default value is `cost`. Used only when limit is not 0.
	Category string `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	// Optional. Valid values are `service` and `account`. Only `service` is supported for now
	// Default value is `service`. Used only when limit is not 0.
	GroupBy string `protobuf:"bytes,7,opt,name=groupBy,proto3" json:"groupBy,omitempty"`
	// Optional. If set to true, return all available data including the data with zero cost.
	// Default value is `false` which means that only data with non-zero cost are returned.
	IncludeZeroCost bool `protobuf:"varint,8,opt,name=includeZeroCost,proto3" json:"includeZeroCost,omitempty"`
	// Optional. Valid only for the `aws` vendor. AWS-specific options.
	AwsOptions *GetCostUsageRequestAwsOptions `protobuf:"bytes,9,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
	// Optional. Valid only for the `azure` vendor. Azure-specific options.
	AzureOptions *GetCostUsageRequestAzureOptions `protobuf:"bytes,10,opt,name=azureOptions,proto3" json:"azureOptions,omitempty"`
	// Optional. Valid only for the `gcp` vendor. gcp-specific options.
	GcpOptions *GetCostUsageRequestGcpOptions `protobuf:"bytes,11,opt,name=gcpOptions,proto3" json:"gcpOptions,omitempty"`
	// Optional. Valid only for the `azurecsp` vendor. AzureCsp-specific options.
	AzurecspOptions *GetCostUsageRequestAzureCspOptions `protobuf:"bytes,12,opt,name=azurecspOptions,proto3" json:"azurecspOptions,omitempty"`
	// Optional. For custom selection when creating cost groups.
	// This field allows custom options for specifying criteria for cost group creation.
	CustomOptions *GetCostUsageRequestCustomOptions `protobuf:"bytes,13,opt,name=customOptions,proto3" json:"customOptions,omitempty"`
	// Optional. If set to true, include cost forecast
	IncludeForecast bool `protobuf:"varint,14,opt,name=includeForecast,proto3" json:"includeForecast,omitempty"`
}

func (x *GetCostUsageRequest) Reset() {
	*x = GetCostUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostUsageRequest) ProtoMessage() {}

func (x *GetCostUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostUsageRequest.ProtoReflect.Descriptor instead.
func (*GetCostUsageRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{128}
}

func (x *GetCostUsageRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *GetCostUsageRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetCostUsageRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetCostUsageRequest) GetGroupByMonth() bool {
	if x != nil {
		return x.GroupByMonth
	}
	return false
}

func (x *GetCostUsageRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCostUsageRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *GetCostUsageRequest) GetGroupBy() string {
	if x != nil {
		return x.GroupBy
	}
	return ""
}

func (x *GetCostUsageRequest) GetIncludeZeroCost() bool {
	if x != nil {
		return x.IncludeZeroCost
	}
	return false
}

func (x *GetCostUsageRequest) GetAwsOptions() *GetCostUsageRequestAwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

func (x *GetCostUsageRequest) GetAzureOptions() *GetCostUsageRequestAzureOptions {
	if x != nil {
		return x.AzureOptions
	}
	return nil
}

func (x *GetCostUsageRequest) GetGcpOptions() *GetCostUsageRequestGcpOptions {
	if x != nil {
		return x.GcpOptions
	}
	return nil
}

func (x *GetCostUsageRequest) GetAzurecspOptions() *GetCostUsageRequestAzureCspOptions {
	if x != nil {
		return x.AzurecspOptions
	}
	return nil
}

func (x *GetCostUsageRequest) GetCustomOptions() *GetCostUsageRequestCustomOptions {
	if x != nil {
		return x.CustomOptions
	}
	return nil
}

func (x *GetCostUsageRequest) GetIncludeForecast() bool {
	if x != nil {
		return x.IncludeForecast
	}
	return false
}

type GetCostUsageRequestAwsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A comma-separated list of columns to aggregate the data into.
	// Valid values are `productCode`, `serviceCode`, `region`, `zone`, `usageType`, `instanceType`, `operation`, `invoiceId`, `description`, and `resourceId`.
	// A special value of `none` is also supported, which means query by date or month per account only.
	//
	// For example, if you only want the services and region data, you can set this field to `productCode,region`.
	// Your input sequence doesn't matter (although the sequence above is recommended) as the actual sequence is already fixed in the return data (see the definition in https://github.com/alphauslabs/blueapi/blob/main/api/aws/cost.proto), which is generic to specific, top to bottom. Invalid values are discarded. Excluded columns will be empty.
	GroupByColumns string `protobuf:"bytes,1,opt,name=groupByColumns,proto3" json:"groupByColumns,omitempty"`
	// Optional. If set to true, group all input accounts into one.
	GroupAccounts bool `protobuf:"varint,2,opt,name=groupAccounts,proto3" json:"groupAccounts,omitempty"`
	// Optional. A list of filtering options. See [ReadCostsRequestOptionsFilters] for more information on each filter item.
	// Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	Filters []*ReadCostsRequestOptionsFilters `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. A list of filtering options specific for tags.
	// Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc. Discarded when `groupByColumns` field is set or if `groupByMonth` is true.
	TagFilters []*ReadCostsRequestOptionsFilters `protobuf:"bytes,4,rep,name=tagFilters,proto3" json:"tagFilters,omitempty"`
	// Optional. Tag key, only used when groupBy is set to `tag`.
	TagKey string `protobuf:"bytes,5,opt,name=tagKey,proto3" json:"tagKey,omitempty"`
}

func (x *GetCostUsageRequestAwsOptions) Reset() {
	*x = GetCostUsageRequestAwsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostUsageRequestAwsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostUsageRequestAwsOptions) ProtoMessage() {}

func (x *GetCostUsageRequestAwsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostUsageRequestAwsOptions.ProtoReflect.Descriptor instead.
func (*GetCostUsageRequestAwsOptions) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{129}
}

func (x *GetCostUsageRequestAwsOptions) GetGroupByColumns() string {
	if x != nil {
		return x.GroupByColumns
	}
	return ""
}

func (x *GetCostUsageRequestAwsOptions) GetGroupAccounts() bool {
	if x != nil {
		return x.GroupAccounts
	}
	return false
}

func (x *GetCostUsageRequestAwsOptions) GetFilters() []*ReadCostsRequestOptionsFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetCostUsageRequestAwsOptions) GetTagFilters() []*ReadCostsRequestOptionsFilters {
	if x != nil {
		return x.TagFilters
	}
	return nil
}

func (x *GetCostUsageRequestAwsOptions) GetTagKey() string {
	if x != nil {
		return x.TagKey
	}
	return ""
}

type GetCostUsageRequestAzureOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A comma-separated list of columns to aggregate the data into.
	// Valid values are `accountId`, `serviceName`, `serviceTier`, `location`, `product`, `partNumber`, `resourceGuid`, `offerId`, `consumedService`, `departmentId`, `departmentName`, `resourceGroup`, `enrollment`, `additionalInfo`
	// A special value of `none` is also supported, which means query by date or month per account only.
	//
	// For example, if you only want the services and location data, you can set this field to `serviceName,location`.
	GroupByColumns string `protobuf:"bytes,1,opt,name=groupByColumns,proto3" json:"groupByColumns,omitempty"`
	// Optional. If set to true, group all input subscription into one.
	GroupAccounts bool `protobuf:"varint,2,opt,name=groupAccounts,proto3" json:"groupAccounts,omitempty"`
	// Optional. A list of filtering options. See [ReadCostsRequestOptionsFilters] for more information on each filter item.
	// Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	Filters []*ReadCostsRequestOptionsFilters `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. A list of filtering options specific for tags.
	// Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	TagFilters []*ReadCostsRequestOptionsFilters `protobuf:"bytes,4,rep,name=tagFilters,proto3" json:"tagFilters,omitempty"`
}

func (x *GetCostUsageRequestAzureOptions) Reset() {
	*x = GetCostUsageRequestAzureOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostUsageRequestAzureOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostUsageRequestAzureOptions) ProtoMessage() {}

func (x *GetCostUsageRequestAzureOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostUsageRequestAzureOptions.ProtoReflect.Descriptor instead.
func (*GetCostUsageRequestAzureOptions) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{130}
}

func (x *GetCostUsageRequestAzureOptions) GetGroupByColumns() string {
	if x != nil {
		return x.GroupByColumns
	}
	return ""
}

func (x *GetCostUsageRequestAzureOptions) GetGroupAccounts() bool {
	if x != nil {
		return x.GroupAccounts
	}
	return false
}

func (x *GetCostUsageRequestAzureOptions) GetFilters() []*ReadCostsRequestOptionsFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetCostUsageRequestAzureOptions) GetTagFilters() []*ReadCostsRequestOptionsFilters {
	if x != nil {
		return x.TagFilters
	}
	return nil
}

type GetCostUsageRequestGcpOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A comma-separated list of columns to aggregate the data into.
	// A special value of `none` is also supported, which means query by date or month per account only.
	//
	// For example, if you only want the services and location data, you can set this field to `serviceName,location`.
	GroupByColumns string `protobuf:"bytes,1,opt,name=groupByColumns,proto3" json:"groupByColumns,omitempty"`
	// Optional. If set to true, group all input projects into one.
	GroupAccounts bool `protobuf:"varint,2,opt,name=groupAccounts,proto3" json:"groupAccounts,omitempty"`
	// Optional. A list of filtering options. See [ReadCostsRequestOptionsFilters] for more information on each filter item.
	// Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	Filters []*ReadCostsRequestOptionsFilters `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. A list of filtering options specific for tags.
	// Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	TagFilters          []*ReadCostsRequestOptionsFilters `protobuf:"bytes,4,rep,name=tagFilters,proto3" json:"tagFilters,omitempty"`
	LabelFilters        []*ReadCostsRequestOptionsFilters `protobuf:"bytes,5,rep,name=labelFilters,proto3" json:"labelFilters,omitempty"`
	ProjectLabelFilters []*ReadCostsRequestOptionsFilters `protobuf:"bytes,6,rep,name=projectLabelFilters,proto3" json:"projectLabelFilters,omitempty"`
	// Optional. Tag key, only used when groupBy is set to `tag`.
	TagKey string `protobuf:"bytes,7,opt,name=tagKey,proto3" json:"tagKey,omitempty"`
}

func (x *GetCostUsageRequestGcpOptions) Reset() {
	*x = GetCostUsageRequestGcpOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostUsageRequestGcpOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostUsageRequestGcpOptions) ProtoMessage() {}

func (x *GetCostUsageRequestGcpOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostUsageRequestGcpOptions.ProtoReflect.Descriptor instead.
func (*GetCostUsageRequestGcpOptions) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{131}
}

func (x *GetCostUsageRequestGcpOptions) GetGroupByColumns() string {
	if x != nil {
		return x.GroupByColumns
	}
	return ""
}

func (x *GetCostUsageRequestGcpOptions) GetGroupAccounts() bool {
	if x != nil {
		return x.GroupAccounts
	}
	return false
}

func (x *GetCostUsageRequestGcpOptions) GetFilters() []*ReadCostsRequestOptionsFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetCostUsageRequestGcpOptions) GetTagFilters() []*ReadCostsRequestOptionsFilters {
	if x != nil {
		return x.TagFilters
	}
	return nil
}

func (x *GetCostUsageRequestGcpOptions) GetLabelFilters() []*ReadCostsRequestOptionsFilters {
	if x != nil {
		return x.LabelFilters
	}
	return nil
}

func (x *GetCostUsageRequestGcpOptions) GetProjectLabelFilters() []*ReadCostsRequestOptionsFilters {
	if x != nil {
		return x.ProjectLabelFilters
	}
	return nil
}

func (x *GetCostUsageRequestGcpOptions) GetTagKey() string {
	if x != nil {
		return x.TagKey
	}
	return ""
}

type GetCostUsageRequestAzureCspOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A comma-separated list of columns to aggregate the data into.
	// A special value of `none` is also supported, which means query by date or month per account only.
	//
	// For example, if you only want the services and location data, you can set this field to `serviceName,location`.
	GroupByColumns string `protobuf:"bytes,1,opt,name=groupByColumns,proto3" json:"groupByColumns,omitempty"`
	// Optional. If set to true, group all input projects into one.
	GroupAccounts bool `protobuf:"varint,2,opt,name=groupAccounts,proto3" json:"groupAccounts,omitempty"`
	// Optional. A list of filtering options. See [ReadCostsRequestOptionsFilters] for more information on each filter item.
	// Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	Filters []*ReadCostsRequestOptionsFilters `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. A list of filtering options specific for tags.
	// Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	TagFilters []*ReadCostsRequestOptionsFilters `protobuf:"bytes,4,rep,name=tagFilters,proto3" json:"tagFilters,omitempty"`
	// Optional. Tag key, only used when groupBy is set to `tag`.
	TagKey string `protobuf:"bytes,5,opt,name=tagKey,proto3" json:"tagKey,omitempty"`
}

func (x *GetCostUsageRequestAzureCspOptions) Reset() {
	*x = GetCostUsageRequestAzureCspOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostUsageRequestAzureCspOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostUsageRequestAzureCspOptions) ProtoMessage() {}

func (x *GetCostUsageRequestAzureCspOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostUsageRequestAzureCspOptions.ProtoReflect.Descriptor instead.
func (*GetCostUsageRequestAzureCspOptions) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{132}
}

func (x *GetCostUsageRequestAzureCspOptions) GetGroupByColumns() string {
	if x != nil {
		return x.GroupByColumns
	}
	return ""
}

func (x *GetCostUsageRequestAzureCspOptions) GetGroupAccounts() bool {
	if x != nil {
		return x.GroupAccounts
	}
	return false
}

func (x *GetCostUsageRequestAzureCspOptions) GetFilters() []*ReadCostsRequestOptionsFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetCostUsageRequestAzureCspOptions) GetTagFilters() []*ReadCostsRequestOptionsFilters {
	if x != nil {
		return x.TagFilters
	}
	return nil
}

func (x *GetCostUsageRequestAzureCspOptions) GetTagKey() string {
	if x != nil {
		return x.TagKey
	}
	return ""
}

type GetCostUsageRequestCustomOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A comma-separated list of columns to aggregate the data into.
	// A special value of `none` is also supported, which means query by date or month per account only.
	//
	// For example, if you only want the services and location data, you can set this field to `serviceName,location`.
	GroupByColumns string `protobuf:"bytes,1,opt,name=groupByColumns,proto3" json:"groupByColumns,omitempty"`
	// Optional. If set to true, group all input projects into one.
	GroupAccounts bool `protobuf:"varint,2,opt,name=groupAccounts,proto3" json:"groupAccounts,omitempty"`
	// Optional. A list of filtering options. See [ReadCostsRequestOptionsFilters] for more information on each filter item.
	// Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	Filters []*ReadCostsRequestOptionsFilters `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. A list of filtering options specific for tags.
	// Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	TagFilters          []*ReadCostsRequestOptionsFilters `protobuf:"bytes,4,rep,name=tagFilters,proto3" json:"tagFilters,omitempty"`
	LabelFilters        []*ReadCostsRequestOptionsFilters `protobuf:"bytes,5,rep,name=labelFilters,proto3" json:"labelFilters,omitempty"`
	ProjectLabelFilters []*ReadCostsRequestOptionsFilters `protobuf:"bytes,6,rep,name=projectLabelFilters,proto3" json:"projectLabelFilters,omitempty"`
	// Optional. Tag key, only used when groupBy is set to `tag`.
	TagKey string `protobuf:"bytes,7,opt,name=tagKey,proto3" json:"tagKey,omitempty"`
}

func (x *GetCostUsageRequestCustomOptions) Reset() {
	*x = GetCostUsageRequestCustomOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostUsageRequestCustomOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostUsageRequestCustomOptions) ProtoMessage() {}

func (x *GetCostUsageRequestCustomOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostUsageRequestCustomOptions.ProtoReflect.Descriptor instead.
func (*GetCostUsageRequestCustomOptions) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{133}
}

func (x *GetCostUsageRequestCustomOptions) GetGroupByColumns() string {
	if x != nil {
		return x.GroupByColumns
	}
	return ""
}

func (x *GetCostUsageRequestCustomOptions) GetGroupAccounts() bool {
	if x != nil {
		return x.GroupAccounts
	}
	return false
}

func (x *GetCostUsageRequestCustomOptions) GetFilters() []*ReadCostsRequestOptionsFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetCostUsageRequestCustomOptions) GetTagFilters() []*ReadCostsRequestOptionsFilters {
	if x != nil {
		return x.TagFilters
	}
	return nil
}

func (x *GetCostUsageRequestCustomOptions) GetLabelFilters() []*ReadCostsRequestOptionsFilters {
	if x != nil {
		return x.LabelFilters
	}
	return nil
}

func (x *GetCostUsageRequestCustomOptions) GetProjectLabelFilters() []*ReadCostsRequestOptionsFilters {
	if x != nil {
		return x.ProjectLabelFilters
	}
	return nil
}

func (x *GetCostUsageRequestCustomOptions) GetTagKey() string {
	if x != nil {
		return x.TagKey
	}
	return ""
}

// A map of "key:value" column filters. Dependent on `groupByColumns` and/or `groupByMonth`. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
//
// For example, if you like to filter `productCode` to return only `AmazonEC2`, set to `{"productCode":"eq:AmazonEC2"}` or `{"productCode":"AmazonEC2"}`. You can also use a regular expression like `{"productCode":"re:AmazonEC2|AmazonRDS"}`, which means return all AmazonEC2 or AmazonRDS lineitems. Or reverse regexp, such as `{"productCode":"!re:^AmazonEC2$"}`, which means return all items except `AmazonEC2`.
type ReadCostsRequestOptionsFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AndFilters map[string]string `protobuf:"bytes,1,rep,name=andFilters,proto3" json:"andFilters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReadCostsRequestOptionsFilters) Reset() {
	*x = ReadCostsRequestOptionsFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCostsRequestOptionsFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCostsRequestOptionsFilters) ProtoMessage() {}

func (x *ReadCostsRequestOptionsFilters) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCostsRequestOptionsFilters.ProtoReflect.Descriptor instead.
func (*ReadCostsRequestOptionsFilters) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{134}
}

func (x *ReadCostsRequestOptionsFilters) GetAndFilters() map[string]string {
	if x != nil {
		return x.AndFilters
	}
	return nil
}

// Response message wrapper for cloud costs.
type CostItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `aws`, `azure`, `azureea` or `gcp`
	Vendor  string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Date    string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Product string `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	// AWS account, GCP projectId, AzureCSP accountId
	Account string  `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	Cost    float64 `protobuf:"fixed64,5,opt,name=cost,proto3" json:"cost,omitempty"`
	// Could be AWS, Azure or GCP Cost
	Details string `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`
	// Cost Forecast
	Forecast *cover.AwsCostForecast `protobuf:"bytes,7,opt,name=forecast,proto3" json:"forecast,omitempty"`
	Region   string                 `protobuf:"bytes,8,opt,name=region,proto3" json:"region,omitempty"`
	// AWS payer acount, GCP billing account, Azure Payer account
	BillingAccount string `protobuf:"bytes,9,opt,name=billingAccount,proto3" json:"billingAccount,omitempty"`
	// Tag Value. Contains tag value of the input tag key. Only used if groupBy is set to tag
	TagValue   string `protobuf:"bytes,10,opt,name=tagValue,proto3" json:"tagValue,omitempty"`
	LastUpdate string `protobuf:"bytes,11,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	// Contains the list of unit items. Used only when groupBy is set to the selected unit type (e.g., "Product", "Environment", "Customer").
	// Example: If groupBy is set to "Environment", this field might include values like "dev", "next", or "prod".
	Unit string `protobuf:"bytes,12,opt,name=unit,proto3" json:"unit,omitempty"`
	// Category. Contains the category to which a service belongs. Only used if groupBy is set to category.
	Category string `protobuf:"bytes,13,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *CostItem) Reset() {
	*x = CostItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostItem) ProtoMessage() {}

func (x *CostItem) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostItem.ProtoReflect.Descriptor instead.
func (*CostItem) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{135}
}

func (x *CostItem) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CostItem) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *CostItem) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *CostItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *CostItem) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *CostItem) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *CostItem) GetForecast() *cover.AwsCostForecast {
	if x != nil {
		return x.Forecast
	}
	return nil
}

func (x *CostItem) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CostItem) GetBillingAccount() string {
	if x != nil {
		return x.BillingAccount
	}
	return ""
}

func (x *CostItem) GetTagValue() string {
	if x != nil {
		return x.TagValue
	}
	return ""
}

func (x *CostItem) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

func (x *CostItem) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *CostItem) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

// Request message for GetRightSizingRecommendation
type GetRightSizingRecommendationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
}

func (x *GetRightSizingRecommendationRequest) Reset() {
	*x = GetRightSizingRecommendationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRightSizingRecommendationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRightSizingRecommendationRequest) ProtoMessage() {}

func (x *GetRightSizingRecommendationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRightSizingRecommendationRequest.ProtoReflect.Descriptor instead.
func (*GetRightSizingRecommendationRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{136}
}

func (x *GetRightSizingRecommendationRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

// Response message for GetRightSizingRecommendation
type GetRightSizingRecommendationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource []*cover.ResourceData `protobuf:"bytes,1,rep,name=resource,proto3" json:"resource,omitempty"`
}

func (x *GetRightSizingRecommendationResponse) Reset() {
	*x = GetRightSizingRecommendationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRightSizingRecommendationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRightSizingRecommendationResponse) ProtoMessage() {}

func (x *GetRightSizingRecommendationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRightSizingRecommendationResponse.ProtoReflect.Descriptor instead.
func (*GetRightSizingRecommendationResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{137}
}

func (x *GetRightSizingRecommendationResponse) GetResource() []*cover.ResourceData {
	if x != nil {
		return x.Resource
	}
	return nil
}

// Request message for ModifyResourceType
type ModifyResourceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cloud vendor.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Account Id.
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// Required. The resource Id.
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// Required. The recommended resource type.
	ResourceType string `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	// Required. Resource region.
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *ModifyResourceTypeRequest) Reset() {
	*x = ModifyResourceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyResourceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyResourceTypeRequest) ProtoMessage() {}

func (x *ModifyResourceTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyResourceTypeRequest.ProtoReflect.Descriptor instead.
func (*ModifyResourceTypeRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{138}
}

func (x *ModifyResourceTypeRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ModifyResourceTypeRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ModifyResourceTypeRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ModifyResourceTypeRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ModifyResourceTypeRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// Response message for ModifyResourceType
type ModifyResourceTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	ResourceId   string `protobuf:"bytes,2,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	ResourceType string `protobuf:"bytes,3,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	Region       string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *ModifyResourceTypeResponse) Reset() {
	*x = ModifyResourceTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyResourceTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyResourceTypeResponse) ProtoMessage() {}

func (x *ModifyResourceTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyResourceTypeResponse.ProtoReflect.Descriptor instead.
func (*ModifyResourceTypeResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{139}
}

func (x *ModifyResourceTypeResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ModifyResourceTypeResponse) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ModifyResourceTypeResponse) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ModifyResourceTypeResponse) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// Request message for TerminateResource
type TerminateResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cloud vendor.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Account Id.
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// Required. The resource Id.
	ResourceId string `protobuf:"bytes,3,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	// Required. Resource region.
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *TerminateResourceRequest) Reset() {
	*x = TerminateResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateResourceRequest) ProtoMessage() {}

func (x *TerminateResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateResourceRequest.ProtoReflect.Descriptor instead.
func (*TerminateResourceRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{140}
}

func (x *TerminateResourceRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *TerminateResourceRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TerminateResourceRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *TerminateResourceRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// Response message for TerminateResource
type TerminateResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	ResourceId string `protobuf:"bytes,2,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	Region     string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *TerminateResourceResponse) Reset() {
	*x = TerminateResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateResourceResponse) ProtoMessage() {}

func (x *TerminateResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateResourceResponse.ProtoReflect.Descriptor instead.
func (*TerminateResourceResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{141}
}

func (x *TerminateResourceResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TerminateResourceResponse) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *TerminateResourceResponse) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// (WIP): Request message for Upload Charge Code
type UploadChargeCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. File name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // file name
	// Required. File type
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // file type
	// Required. Convert file into bytes to transfer file
	File []byte `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"` // file in bytes
}

func (x *UploadChargeCodeRequest) Reset() {
	*x = UploadChargeCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChargeCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChargeCodeRequest) ProtoMessage() {}

func (x *UploadChargeCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChargeCodeRequest.ProtoReflect.Descriptor instead.
func (*UploadChargeCodeRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{142}
}

func (x *UploadChargeCodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadChargeCodeRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UploadChargeCodeRequest) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

// (WIP): Response message for Upload Charge Code
type UploadChargeCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Status
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=blueapi.cover.v1.Status" json:"status,omitempty"`
}

func (x *UploadChargeCodeResponse) Reset() {
	*x = UploadChargeCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChargeCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChargeCodeResponse) ProtoMessage() {}

func (x *UploadChargeCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChargeCodeResponse.ProtoReflect.Descriptor instead.
func (*UploadChargeCodeResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{143}
}

func (x *UploadChargeCodeResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadChargeCodeResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_PENDING
}

// Request message for AssignPayer
type AssignPayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cloud vendor.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Account Id.
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// Required. The Payer Id.
	PayerId string `protobuf:"bytes,3,opt,name=payerId,proto3" json:"payerId,omitempty"`
}

func (x *AssignPayerRequest) Reset() {
	*x = AssignPayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignPayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPayerRequest) ProtoMessage() {}

func (x *AssignPayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPayerRequest.ProtoReflect.Descriptor instead.
func (*AssignPayerRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{144}
}

func (x *AssignPayerRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *AssignPayerRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AssignPayerRequest) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

// Response message for AssignPayer
type AssignPayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	PayerId   string `protobuf:"bytes,2,opt,name=payerId,proto3" json:"payerId,omitempty"`
}

func (x *AssignPayerResponse) Reset() {
	*x = AssignPayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignPayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPayerResponse) ProtoMessage() {}

func (x *AssignPayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPayerResponse.ProtoReflect.Descriptor instead.
func (*AssignPayerResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{145}
}

func (x *AssignPayerResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AssignPayerResponse) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

// Request message for GetPayers
type GetPayersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cloud vendor.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *GetPayersRequest) Reset() {
	*x = GetPayersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayersRequest) ProtoMessage() {}

func (x *GetPayersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayersRequest.ProtoReflect.Descriptor instead.
func (*GetPayersRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{146}
}

func (x *GetPayersRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

// Response message for GetPayers
type GetPayersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payers []string `protobuf:"bytes,1,rep,name=payers,proto3" json:"payers,omitempty"`
}

func (x *GetPayersResponse) Reset() {
	*x = GetPayersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayersResponse) ProtoMessage() {}

func (x *GetPayersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayersResponse.ProtoReflect.Descriptor instead.
func (*GetPayersResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{147}
}

func (x *GetPayersResponse) GetPayers() []string {
	if x != nil {
		return x.Payers
	}
	return nil
}

// Request message for GetAccounts
type GetAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cloud vendor.
	Vendor      string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	CostGroupId string `protobuf:"bytes,2,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
}

func (x *GetAccountsRequest) Reset() {
	*x = GetAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountsRequest) ProtoMessage() {}

func (x *GetAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountsRequest.ProtoReflect.Descriptor instead.
func (*GetAccountsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{148}
}

func (x *GetAccountsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetAccountsRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

// Response message for GetAccounts
type GetAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *GetAccountsResponse) Reset() {
	*x = GetAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountsResponse) ProtoMessage() {}

func (x *GetAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountsResponse.ProtoReflect.Descriptor instead.
func (*GetAccountsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{149}
}

func (x *GetAccountsResponse) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request message for GetServices
type GetServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cloud vendor.
	Vendor      string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	CostGroupId string `protobuf:"bytes,2,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
}

func (x *GetServicesRequest) Reset() {
	*x = GetServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesRequest) ProtoMessage() {}

func (x *GetServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesRequest.ProtoReflect.Descriptor instead.
func (*GetServicesRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{150}
}

func (x *GetServicesRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetServicesRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

// Response message for GetServices
type GetServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *GetServicesResponse) Reset() {
	*x = GetServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesResponse) ProtoMessage() {}

func (x *GetServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesResponse.ProtoReflect.Descriptor instead.
func (*GetServicesResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{151}
}

func (x *GetServicesResponse) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

// Request message for GetRegions
type GetRegionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cloud vendor.
	Vendor      string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	CostGroupId string `protobuf:"bytes,2,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
}

func (x *GetRegionsRequest) Reset() {
	*x = GetRegionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionsRequest) ProtoMessage() {}

func (x *GetRegionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionsRequest.ProtoReflect.Descriptor instead.
func (*GetRegionsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{152}
}

func (x *GetRegionsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetRegionsRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

// Response message for GetRegions
type GetRegionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regions []string `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (x *GetRegionsResponse) Reset() {
	*x = GetRegionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionsResponse) ProtoMessage() {}

func (x *GetRegionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionsResponse.ProtoReflect.Descriptor instead.
func (*GetRegionsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{153}
}

func (x *GetRegionsResponse) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

// Request message for GetTags
type GetTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cloud vendor.
	Vendor      string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	CostGroupId string `protobuf:"bytes,2,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
}

func (x *GetTagsRequest) Reset() {
	*x = GetTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagsRequest) ProtoMessage() {}

func (x *GetTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagsRequest.ProtoReflect.Descriptor instead.
func (*GetTagsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{154}
}

func (x *GetTagsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetTagsRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

// Response message for GetTags
type GetTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagData []*cover.TagData `protobuf:"bytes,1,rep,name=tagData,proto3" json:"tagData,omitempty"`
}

func (x *GetTagsResponse) Reset() {
	*x = GetTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagsResponse) ProtoMessage() {}

func (x *GetTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagsResponse.ProtoReflect.Descriptor instead.
func (*GetTagsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{155}
}

func (x *GetTagsResponse) GetTagData() []*cover.TagData {
	if x != nil {
		return x.TagData
	}
	return nil
}

// Request message for the ListFees rpc.
type ListFeesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month string `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *ListFeesRequest) Reset() {
	*x = ListFeesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeesRequest) ProtoMessage() {}

func (x *ListFeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeesRequest.ProtoReflect.Descriptor instead.
func (*ListFeesRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{156}
}

func (x *ListFeesRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

// Response message for GetFeeDetails, CreateFeeReallocation rpc.
type FeeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId         string  `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Vendor        string  `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Account       string  `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	Month         string  `protobuf:"bytes,5,opt,name=month,proto3" json:"month,omitempty"`
	LineType      string  `protobuf:"bytes,6,opt,name=lineType,proto3" json:"lineType,omitempty"`
	FeeType       string  `protobuf:"bytes,7,opt,name=feeType,proto3" json:"feeType,omitempty"`
	ProductCode   string  `protobuf:"bytes,8,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Description   string  `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Started       string  `protobuf:"bytes,10,opt,name=started,proto3" json:"started,omitempty"`
	TimeInterval  string  `protobuf:"bytes,11,opt,name=timeInterval,proto3" json:"timeInterval,omitempty"`
	ProductName   string  `protobuf:"bytes,12,opt,name=productName,proto3" json:"productName,omitempty"`
	Currency      string  `protobuf:"bytes,13,opt,name=currency,proto3" json:"currency,omitempty"`
	SplitStatus   string  `protobuf:"bytes,14,opt,name=splitStatus,proto3" json:"splitStatus,omitempty"`
	IsAllocated   bool    `protobuf:"varint,15,opt,name=isAllocated,proto3" json:"isAllocated,omitempty"`
	IsApplied     bool    `protobuf:"varint,16,opt,name=isApplied,proto3" json:"isApplied,omitempty"`
	UnblendedCost float64 `protobuf:"fixed64,17,opt,name=unblendedCost,proto3" json:"unblendedCost,omitempty"`
	SourceFee     string  `protobuf:"bytes,18,opt,name=sourceFee,proto3" json:"sourceFee,omitempty"`
	LastUpdate    string  `protobuf:"bytes,19,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
}

func (x *FeeDetails) Reset() {
	*x = FeeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeDetails) ProtoMessage() {}

func (x *FeeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeDetails.ProtoReflect.Descriptor instead.
func (*FeeDetails) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{157}
}

func (x *FeeDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeeDetails) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *FeeDetails) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *FeeDetails) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *FeeDetails) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *FeeDetails) GetLineType() string {
	if x != nil {
		return x.LineType
	}
	return ""
}

func (x *FeeDetails) GetFeeType() string {
	if x != nil {
		return x.FeeType
	}
	return ""
}

func (x *FeeDetails) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *FeeDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FeeDetails) GetStarted() string {
	if x != nil {
		return x.Started
	}
	return ""
}

func (x *FeeDetails) GetTimeInterval() string {
	if x != nil {
		return x.TimeInterval
	}
	return ""
}

func (x *FeeDetails) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *FeeDetails) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *FeeDetails) GetSplitStatus() string {
	if x != nil {
		return x.SplitStatus
	}
	return ""
}

func (x *FeeDetails) GetIsAllocated() bool {
	if x != nil {
		return x.IsAllocated
	}
	return false
}

func (x *FeeDetails) GetIsApplied() bool {
	if x != nil {
		return x.IsApplied
	}
	return false
}

func (x *FeeDetails) GetUnblendedCost() float64 {
	if x != nil {
		return x.UnblendedCost
	}
	return 0
}

func (x *FeeDetails) GetSourceFee() string {
	if x != nil {
		return x.SourceFee
	}
	return ""
}

func (x *FeeDetails) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

// Request message for the RestoreFee rpc.
type RestoreFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The fee to restore.
	FeeId string `protobuf:"bytes,1,opt,name=feeId,proto3" json:"feeId,omitempty"`
}

func (x *RestoreFeeRequest) Reset() {
	*x = RestoreFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreFeeRequest) ProtoMessage() {}

func (x *RestoreFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreFeeRequest.ProtoReflect.Descriptor instead.
func (*RestoreFeeRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{158}
}

func (x *RestoreFeeRequest) GetFeeId() string {
	if x != nil {
		return x.FeeId
	}
	return ""
}

// Request message for the GetCostGroupFee rpc.
type GetCostGroupFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	StartTime   string `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime     string `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *GetCostGroupFeeRequest) Reset() {
	*x = GetCostGroupFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostGroupFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostGroupFeeRequest) ProtoMessage() {}

func (x *GetCostGroupFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostGroupFeeRequest.ProtoReflect.Descriptor instead.
func (*GetCostGroupFeeRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{159}
}

func (x *GetCostGroupFeeRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *GetCostGroupFeeRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetCostGroupFeeRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

// Response message wrapper for cost group fees.
type FeeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor  string  `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Month   string  `protobuf:"bytes,2,opt,name=month,proto3" json:"month,omitempty"`
	Product string  `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	Account string  `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	Type    string  `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Cost    float64 `protobuf:"fixed64,6,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *FeeItem) Reset() {
	*x = FeeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeItem) ProtoMessage() {}

func (x *FeeItem) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeItem.ProtoReflect.Descriptor instead.
func (*FeeItem) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{160}
}

func (x *FeeItem) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *FeeItem) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *FeeItem) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *FeeItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *FeeItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FeeItem) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type Allocator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The type where the adjustments are to be applied. This can support `account`, `costGroup` and `payer`.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Required. The value for the specified attribute. `accountId` for account, `costGroupId` for cost group, `payerId` for payer and account name regex for account name.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Required. The formula to use to compute the value of the allocation on an attribute. If left blank, allocation is based on usage.
	Formula string `protobuf:"bytes,3,opt,name=formula,proto3" json:"formula,omitempty"`
	// Optional. The number of months the adjustment is to be applied. If set, it will divide the cost equally to the number of months.
	Months int64 `protobuf:"varint,4,opt,name=months,proto3" json:"months,omitempty"`
}

func (x *Allocator) Reset() {
	*x = Allocator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Allocator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allocator) ProtoMessage() {}

func (x *Allocator) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allocator.ProtoReflect.Descriptor instead.
func (*Allocator) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{161}
}

func (x *Allocator) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Allocator) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Allocator) GetFormula() string {
	if x != nil {
		return x.Formula
	}
	return ""
}

func (x *Allocator) GetMonths() int64 {
	if x != nil {
		return x.Months
	}
	return 0
}

// A map of "key:value" attribute filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
type Criteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	And map[string]string `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Criteria) Reset() {
	*x = Criteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Criteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Criteria) ProtoMessage() {}

func (x *Criteria) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Criteria.ProtoReflect.Descriptor instead.
func (*Criteria) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{162}
}

func (x *Criteria) GetAnd() map[string]string {
	if x != nil {
		return x.And
	}
	return nil
}

type CostAllocatorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Category   string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Expiration int64  `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// Optional. The starting month of the allocator to be effective.
	StartMonth string `protobuf:"bytes,4,opt,name=startMonth,proto3" json:"startMonth,omitempty"`
	// Optional. The default account for remaining costs. If not set, will allocate the cost to the original account.
	DefaultAccount string `protobuf:"bytes,5,opt,name=defaultAccount,proto3" json:"defaultAccount,omitempty"`
	// Required. Criteria for the adjustment to be applied.
	Criteria   []*Criteria  `protobuf:"bytes,6,rep,name=criteria,proto3" json:"criteria,omitempty"`
	Allocator  []*Allocator `protobuf:"bytes,7,rep,name=allocator,proto3" json:"allocator,omitempty"`
	CreateTime string       `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime string       `protobuf:"bytes,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *CostAllocatorDetails) Reset() {
	*x = CostAllocatorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostAllocatorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostAllocatorDetails) ProtoMessage() {}

func (x *CostAllocatorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostAllocatorDetails.ProtoReflect.Descriptor instead.
func (*CostAllocatorDetails) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{163}
}

func (x *CostAllocatorDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CostAllocatorDetails) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *CostAllocatorDetails) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *CostAllocatorDetails) GetStartMonth() string {
	if x != nil {
		return x.StartMonth
	}
	return ""
}

func (x *CostAllocatorDetails) GetDefaultAccount() string {
	if x != nil {
		return x.DefaultAccount
	}
	return ""
}

func (x *CostAllocatorDetails) GetCriteria() []*Criteria {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *CostAllocatorDetails) GetAllocator() []*Allocator {
	if x != nil {
		return x.Allocator
	}
	return nil
}

func (x *CostAllocatorDetails) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CostAllocatorDetails) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type CostAllocatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Category   string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Expiration int64  `protobuf:"varint,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// Optional. The starting month of the allocator to be effective.
	StartMonth string `protobuf:"bytes,4,opt,name=startMonth,proto3" json:"startMonth,omitempty"`
	// Optional. The default account for remaining costs. If not set, will allocate the cost to the original account.
	DefaultAccount string `protobuf:"bytes,5,opt,name=defaultAccount,proto3" json:"defaultAccount,omitempty"`
	// Required. Criteria for the adjustment to be applied.
	Criteria  []*Criteria  `protobuf:"bytes,6,rep,name=criteria,proto3" json:"criteria,omitempty"`
	Allocator []*Allocator `protobuf:"bytes,7,rep,name=allocator,proto3" json:"allocator,omitempty"`
}

func (x *CostAllocatorRequest) Reset() {
	*x = CostAllocatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostAllocatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostAllocatorRequest) ProtoMessage() {}

func (x *CostAllocatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostAllocatorRequest.ProtoReflect.Descriptor instead.
func (*CostAllocatorRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{164}
}

func (x *CostAllocatorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CostAllocatorRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *CostAllocatorRequest) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *CostAllocatorRequest) GetStartMonth() string {
	if x != nil {
		return x.StartMonth
	}
	return ""
}

func (x *CostAllocatorRequest) GetDefaultAccount() string {
	if x != nil {
		return x.DefaultAccount
	}
	return ""
}

func (x *CostAllocatorRequest) GetCriteria() []*Criteria {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *CostAllocatorRequest) GetAllocator() []*Allocator {
	if x != nil {
		return x.Allocator
	}
	return nil
}

// Request message for the ListAllocators rpc.
type ListAllocatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAllocatorsRequest) Reset() {
	*x = ListAllocatorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllocatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllocatorsRequest) ProtoMessage() {}

func (x *ListAllocatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllocatorsRequest.ProtoReflect.Descriptor instead.
func (*ListAllocatorsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{165}
}

// Request message for the CreateAllocator rpc.
type CreateAllocatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The category where the allocator is to be applied. Applicable values are `fee`, `account`, or `savings`. Default value is `fee`.
	Category   string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Expiration int64  `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// Optional. The starting month of the allocator to be effective.
	StartMonth string `protobuf:"bytes,3,opt,name=startMonth,proto3" json:"startMonth,omitempty"`
	// Optional. The default account for remaining costs. If not set, will allocate the cost to the original account.
	DefaultAccount string `protobuf:"bytes,4,opt,name=defaultAccount,proto3" json:"defaultAccount,omitempty"`
	// Required. Criteria for the adjustment to be applied.
	Criteria  []*Criteria  `protobuf:"bytes,5,rep,name=criteria,proto3" json:"criteria,omitempty"`
	Allocator []*Allocator `protobuf:"bytes,6,rep,name=allocator,proto3" json:"allocator,omitempty"`
}

func (x *CreateAllocatorRequest) Reset() {
	*x = CreateAllocatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAllocatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAllocatorRequest) ProtoMessage() {}

func (x *CreateAllocatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAllocatorRequest.ProtoReflect.Descriptor instead.
func (*CreateAllocatorRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{166}
}

func (x *CreateAllocatorRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *CreateAllocatorRequest) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *CreateAllocatorRequest) GetStartMonth() string {
	if x != nil {
		return x.StartMonth
	}
	return ""
}

func (x *CreateAllocatorRequest) GetDefaultAccount() string {
	if x != nil {
		return x.DefaultAccount
	}
	return ""
}

func (x *CreateAllocatorRequest) GetCriteria() []*Criteria {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *CreateAllocatorRequest) GetAllocator() []*Allocator {
	if x != nil {
		return x.Allocator
	}
	return nil
}

// Request message for the DeleteAllocator rpc.
type DeleteAllocatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The id of the allocator to delete.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAllocatorRequest) Reset() {
	*x = DeleteAllocatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllocatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllocatorRequest) ProtoMessage() {}

func (x *DeleteAllocatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllocatorRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllocatorRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{167}
}

func (x *DeleteAllocatorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the ProxyCreateCompletion rpc.
type ProxyCreateCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params *structpb.Struct `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *ProxyCreateCompletionRequest) Reset() {
	*x = ProxyCreateCompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyCreateCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyCreateCompletionRequest) ProtoMessage() {}

func (x *ProxyCreateCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyCreateCompletionRequest.ProtoReflect.Descriptor instead.
func (*ProxyCreateCompletionRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{168}
}

func (x *ProxyCreateCompletionRequest) GetParams() *structpb.Struct {
	if x != nil {
		return x.Params
	}
	return nil
}

// Response message for the ProxyCreateCompletion rpc.
type ProxyCreateCompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line string `protobuf:"bytes,1,opt,name=line,proto3" json:"line,omitempty"`
}

func (x *ProxyCreateCompletionResponse) Reset() {
	*x = ProxyCreateCompletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyCreateCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyCreateCompletionResponse) ProtoMessage() {}

func (x *ProxyCreateCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyCreateCompletionResponse.ProtoReflect.Descriptor instead.
func (*ProxyCreateCompletionResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{169}
}

func (x *ProxyCreateCompletionResponse) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

// Response message for SimulateAccountCostAllocator rpc.
type AccountUsageDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId               string  `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Vendor              string  `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Account             string  `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	Date                string  `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	ProductCode         string  `protobuf:"bytes,6,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ServiceCode         string  `protobuf:"bytes,7,opt,name=serviceCode,proto3" json:"serviceCode,omitempty"`
	Region              string  `protobuf:"bytes,8,opt,name=region,proto3" json:"region,omitempty"`
	Zone                string  `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone,omitempty"`
	UsageType           string  `protobuf:"bytes,10,opt,name=usageType,proto3" json:"usageType,omitempty"`
	InstanceType        string  `protobuf:"bytes,11,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Operation           string  `protobuf:"bytes,12,opt,name=operation,proto3" json:"operation,omitempty"`
	InvoiceId           string  `protobuf:"bytes,13,opt,name=invoiceId,proto3" json:"invoiceId,omitempty"`
	Description         string  `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	ResourceId          string  `protobuf:"bytes,15,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
	Tags                string  `protobuf:"bytes,16,opt,name=tags,proto3" json:"tags,omitempty"`
	CostCategories      string  `protobuf:"bytes,17,opt,name=costCategories,proto3" json:"costCategories,omitempty"`
	UsageAmount         float64 `protobuf:"fixed64,18,opt,name=usageAmount,proto3" json:"usageAmount,omitempty"`
	TrueUnblendedCost   float64 `protobuf:"fixed64,19,opt,name=trueUnblendedCost,proto3" json:"trueUnblendedCost,omitempty"`
	UnblendedCost       float64 `protobuf:"fixed64,20,opt,name=unblendedCost,proto3" json:"unblendedCost,omitempty"`
	EffectiveCost       float64 `protobuf:"fixed64,21,opt,name=effectiveCost,proto3" json:"effectiveCost,omitempty"`
	AmortizedCost       float64 `protobuf:"fixed64,22,opt,name=amortizedCost,proto3" json:"amortizedCost,omitempty"`
	PublicOnDemandCost  float64 `protobuf:"fixed64,23,opt,name=publicOnDemandCost,proto3" json:"publicOnDemandCost,omitempty"`
	UnusedAmortizedCost float64 `protobuf:"fixed64,24,opt,name=unusedAmortizedCost,proto3" json:"unusedAmortizedCost,omitempty"`
	LastUpdate          string  `protobuf:"bytes,25,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	SplitStatus         string  `protobuf:"bytes,26,opt,name=splitStatus,proto3" json:"splitStatus,omitempty"`
	IsAllocated         bool    `protobuf:"varint,27,opt,name=isAllocated,proto3" json:"isAllocated,omitempty"`
	IsApplied           bool    `protobuf:"varint,28,opt,name=isApplied,proto3" json:"isApplied,omitempty"`
	Source              string  `protobuf:"bytes,29,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *AccountUsageDetails) Reset() {
	*x = AccountUsageDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountUsageDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountUsageDetails) ProtoMessage() {}

func (x *AccountUsageDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountUsageDetails.ProtoReflect.Descriptor instead.
func (*AccountUsageDetails) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{170}
}

func (x *AccountUsageDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountUsageDetails) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *AccountUsageDetails) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *AccountUsageDetails) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AccountUsageDetails) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *AccountUsageDetails) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *AccountUsageDetails) GetServiceCode() string {
	if x != nil {
		return x.ServiceCode
	}
	return ""
}

func (x *AccountUsageDetails) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AccountUsageDetails) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *AccountUsageDetails) GetUsageType() string {
	if x != nil {
		return x.UsageType
	}
	return ""
}

func (x *AccountUsageDetails) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *AccountUsageDetails) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *AccountUsageDetails) GetInvoiceId() string {
	if x != nil {
		return x.InvoiceId
	}
	return ""
}

func (x *AccountUsageDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AccountUsageDetails) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *AccountUsageDetails) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *AccountUsageDetails) GetCostCategories() string {
	if x != nil {
		return x.CostCategories
	}
	return ""
}

func (x *AccountUsageDetails) GetUsageAmount() float64 {
	if x != nil {
		return x.UsageAmount
	}
	return 0
}

func (x *AccountUsageDetails) GetTrueUnblendedCost() float64 {
	if x != nil {
		return x.TrueUnblendedCost
	}
	return 0
}

func (x *AccountUsageDetails) GetUnblendedCost() float64 {
	if x != nil {
		return x.UnblendedCost
	}
	return 0
}

func (x *AccountUsageDetails) GetEffectiveCost() float64 {
	if x != nil {
		return x.EffectiveCost
	}
	return 0
}

func (x *AccountUsageDetails) GetAmortizedCost() float64 {
	if x != nil {
		return x.AmortizedCost
	}
	return 0
}

func (x *AccountUsageDetails) GetPublicOnDemandCost() float64 {
	if x != nil {
		return x.PublicOnDemandCost
	}
	return 0
}

func (x *AccountUsageDetails) GetUnusedAmortizedCost() float64 {
	if x != nil {
		return x.UnusedAmortizedCost
	}
	return 0
}

func (x *AccountUsageDetails) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

func (x *AccountUsageDetails) GetSplitStatus() string {
	if x != nil {
		return x.SplitStatus
	}
	return ""
}

func (x *AccountUsageDetails) GetIsAllocated() bool {
	if x != nil {
		return x.IsAllocated
	}
	return false
}

func (x *AccountUsageDetails) GetIsApplied() bool {
	if x != nil {
		return x.IsApplied
	}
	return false
}

func (x *AccountUsageDetails) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// Request message for the RestoreAccountUsage rpc.
type ListAccountUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate string `protobuf:"bytes,1,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate   string `protobuf:"bytes,2,opt,name=endDate,proto3" json:"endDate,omitempty"`
}

func (x *ListAccountUsageRequest) Reset() {
	*x = ListAccountUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountUsageRequest) ProtoMessage() {}

func (x *ListAccountUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountUsageRequest.ProtoReflect.Descriptor instead.
func (*ListAccountUsageRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{171}
}

func (x *ListAccountUsageRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ListAccountUsageRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// Request message for the RestoreAccountUsage rpc.
type RestoreAccountUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The account usage to restore.
	AllocationId string `protobuf:"bytes,1,opt,name=allocationId,proto3" json:"allocationId,omitempty"`
}

func (x *RestoreAccountUsageRequest) Reset() {
	*x = RestoreAccountUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreAccountUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreAccountUsageRequest) ProtoMessage() {}

func (x *RestoreAccountUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreAccountUsageRequest.ProtoReflect.Descriptor instead.
func (*RestoreAccountUsageRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{172}
}

func (x *RestoreAccountUsageRequest) GetAllocationId() string {
	if x != nil {
		return x.AllocationId
	}
	return ""
}

// Request message for the RestoreSavings rpc.
type RestoreSavingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The item to restore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RestoreSavingsRequest) Reset() {
	*x = RestoreSavingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreSavingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreSavingsRequest) ProtoMessage() {}

func (x *RestoreSavingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreSavingsRequest.ProtoReflect.Descriptor instead.
func (*RestoreSavingsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{173}
}

func (x *RestoreSavingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response message for ListSavings, RestoreSavings, SimulateSavings rpc.
type SavingsDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId         string  `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Vendor        string  `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Account       string  `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	Month         string  `protobuf:"bytes,5,opt,name=month,proto3" json:"month,omitempty"`
	Type          string  `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Arn           string  `protobuf:"bytes,7,opt,name=arn,proto3" json:"arn,omitempty"`
	ProductCode   string  `protobuf:"bytes,8,opt,name=productCode,proto3" json:"productCode,omitempty"`
	OfferClass    string  `protobuf:"bytes,9,opt,name=offerClass,proto3" json:"offerClass,omitempty"`
	Ondemand      float64 `protobuf:"fixed64,10,opt,name=ondemand,proto3" json:"ondemand,omitempty"`
	EffectiveCost float64 `protobuf:"fixed64,11,opt,name=effectiveCost,proto3" json:"effectiveCost,omitempty"`
	Savings       float64 `protobuf:"fixed64,12,opt,name=savings,proto3" json:"savings,omitempty"`
	SplitStatus   string  `protobuf:"bytes,13,opt,name=splitStatus,proto3" json:"splitStatus,omitempty"`
	IsAllocated   bool    `protobuf:"varint,14,opt,name=isAllocated,proto3" json:"isAllocated,omitempty"`
	IsApplied     bool    `protobuf:"varint,15,opt,name=isApplied,proto3" json:"isApplied,omitempty"`
	Source        string  `protobuf:"bytes,16,opt,name=source,proto3" json:"source,omitempty"`
	LastUpdate    string  `protobuf:"bytes,17,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
}

func (x *SavingsDetails) Reset() {
	*x = SavingsDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavingsDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavingsDetails) ProtoMessage() {}

func (x *SavingsDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavingsDetails.ProtoReflect.Descriptor instead.
func (*SavingsDetails) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{174}
}

func (x *SavingsDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SavingsDetails) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SavingsDetails) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *SavingsDetails) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SavingsDetails) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *SavingsDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SavingsDetails) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *SavingsDetails) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *SavingsDetails) GetOfferClass() string {
	if x != nil {
		return x.OfferClass
	}
	return ""
}

func (x *SavingsDetails) GetOndemand() float64 {
	if x != nil {
		return x.Ondemand
	}
	return 0
}

func (x *SavingsDetails) GetEffectiveCost() float64 {
	if x != nil {
		return x.EffectiveCost
	}
	return 0
}

func (x *SavingsDetails) GetSavings() float64 {
	if x != nil {
		return x.Savings
	}
	return 0
}

func (x *SavingsDetails) GetSplitStatus() string {
	if x != nil {
		return x.SplitStatus
	}
	return ""
}

func (x *SavingsDetails) GetIsAllocated() bool {
	if x != nil {
		return x.IsAllocated
	}
	return false
}

func (x *SavingsDetails) GetIsApplied() bool {
	if x != nil {
		return x.IsApplied
	}
	return false
}

func (x *SavingsDetails) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SavingsDetails) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

// Request message for the GetCostGroupAllocation rpc.
type GetCostGroupAllocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The category to display on the cost group. Supports `fee` or `savings`.
	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,2,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	StartDate   string `protobuf:"bytes,3,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate     string `protobuf:"bytes,4,opt,name=endDate,proto3" json:"endDate,omitempty"`
}

func (x *GetCostGroupAllocationRequest) Reset() {
	*x = GetCostGroupAllocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostGroupAllocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostGroupAllocationRequest) ProtoMessage() {}

func (x *GetCostGroupAllocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostGroupAllocationRequest.ProtoReflect.Descriptor instead.
func (*GetCostGroupAllocationRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{175}
}

func (x *GetCostGroupAllocationRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *GetCostGroupAllocationRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *GetCostGroupAllocationRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetCostGroupAllocationRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// Response message wrapper for cost group allocations.
type AllocationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor  string  `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Month   string  `protobuf:"bytes,2,opt,name=month,proto3" json:"month,omitempty"`
	Product string  `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	Account string  `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	Type    string  `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Cost    float64 `protobuf:"fixed64,6,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *AllocationItem) Reset() {
	*x = AllocationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationItem) ProtoMessage() {}

func (x *AllocationItem) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationItem.ProtoReflect.Descriptor instead.
func (*AllocationItem) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{176}
}

func (x *AllocationItem) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *AllocationItem) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *AllocationItem) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *AllocationItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AllocationItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AllocationItem) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

// Request message for AddUserFromAuth0asRoot rpc
type ProcessAuth0UserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	CustomerId string `protobuf:"bytes,2,opt,name=customerId,proto3" json:"customerId,omitempty"`
	Email      string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	SubuserId  string `protobuf:"bytes,4,opt,name=subuserId,proto3" json:"subuserId,omitempty"`
}

func (x *ProcessAuth0UserRequest) Reset() {
	*x = ProcessAuth0UserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessAuth0UserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessAuth0UserRequest) ProtoMessage() {}

func (x *ProcessAuth0UserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessAuth0UserRequest.ProtoReflect.Descriptor instead.
func (*ProcessAuth0UserRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{177}
}

func (x *ProcessAuth0UserRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ProcessAuth0UserRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ProcessAuth0UserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ProcessAuth0UserRequest) GetSubuserId() string {
	if x != nil {
		return x.SubuserId
	}
	return ""
}

// Response message wrapper for adding user from Auth0 as root
type ProcessAuth0UserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAuthorized bool `protobuf:"varint,1,opt,name=isAuthorized,proto3" json:"isAuthorized,omitempty"`
}

func (x *ProcessAuth0UserResponse) Reset() {
	*x = ProcessAuth0UserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessAuth0UserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessAuth0UserResponse) ProtoMessage() {}

func (x *ProcessAuth0UserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessAuth0UserResponse.ProtoReflect.Descriptor instead.
func (*ProcessAuth0UserResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{178}
}

func (x *ProcessAuth0UserResponse) GetIsAuthorized() bool {
	if x != nil {
		return x.IsAuthorized
	}
	return false
}

// Message Response for GetDataAccess. For Azure and GCP
type DataAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Billing Id for GCP, Account Id for Azure
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Org Id
	OrgId string `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	// GCP Options
	GcpOptions *cover.GcpOptions `protobuf:"bytes,3,opt,name=gcpOptions,proto3" json:"gcpOptions,omitempty"`
	// Azure Options
	AzureOptions *cover.AzureOptions `protobuf:"bytes,4,opt,name=azureOptions,proto3" json:"azureOptions,omitempty"`
	AwsOptions   *cover.AwsOptions   `protobuf:"bytes,5,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
	// Account type, linked or payer
	AccountType string `protobuf:"bytes,6,opt,name=accountType,proto3" json:"accountType,omitempty"`
	// Last Update
	LastUpdate string `protobuf:"bytes,7,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	// Time Created
	CreateTime string `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Vendor     string `protobuf:"bytes,9,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *DataAccess) Reset() {
	*x = DataAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAccess) ProtoMessage() {}

func (x *DataAccess) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAccess.ProtoReflect.Descriptor instead.
func (*DataAccess) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{179}
}

func (x *DataAccess) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *DataAccess) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *DataAccess) GetGcpOptions() *cover.GcpOptions {
	if x != nil {
		return x.GcpOptions
	}
	return nil
}

func (x *DataAccess) GetAzureOptions() *cover.AzureOptions {
	if x != nil {
		return x.AzureOptions
	}
	return nil
}

func (x *DataAccess) GetAwsOptions() *cover.AwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

func (x *DataAccess) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *DataAccess) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

func (x *DataAccess) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *DataAccess) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

// Request message for Register Data Access. For azure and gcp.
type RegisterDataAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vendor (Azure/GCP)
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Billing Id for GCP, Account Id for Azure
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Account type (payer/linked)
	AccountType string `protobuf:"bytes,3,opt,name=accountType,proto3" json:"accountType,omitempty"`
	// GCP Options. Specific for GCP
	GcpOptions *cover.GcpOptions `protobuf:"bytes,4,opt,name=gcpOptions,proto3" json:"gcpOptions,omitempty"`
	// Azure Options. Specific for Azure
	AzureOptions *cover.AzureOptions `protobuf:"bytes,5,opt,name=azureOptions,proto3" json:"azureOptions,omitempty"`
	// Aws Options. Specific for Aws
	AwsOptions *cover.AwsOptions `protobuf:"bytes,6,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *RegisterDataAccessRequest) Reset() {
	*x = RegisterDataAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterDataAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDataAccessRequest) ProtoMessage() {}

func (x *RegisterDataAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDataAccessRequest.ProtoReflect.Descriptor instead.
func (*RegisterDataAccessRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{180}
}

func (x *RegisterDataAccessRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *RegisterDataAccessRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *RegisterDataAccessRequest) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *RegisterDataAccessRequest) GetGcpOptions() *cover.GcpOptions {
	if x != nil {
		return x.GcpOptions
	}
	return nil
}

func (x *RegisterDataAccessRequest) GetAzureOptions() *cover.AzureOptions {
	if x != nil {
		return x.AzureOptions
	}
	return nil
}

func (x *RegisterDataAccessRequest) GetAwsOptions() *cover.AwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

// Request message for UpdateDataAccess (GCP/Azure)
type UpdateDataAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Billing Id for GCP, Account Id for Azure
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// GCP or Azure
	Vendor string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// GCP Options
	GcpOptions *cover.GcpOptions `protobuf:"bytes,3,opt,name=gcpOptions,proto3" json:"gcpOptions,omitempty"`
	// Azure Options
	AzureOptions *cover.AzureOptions `protobuf:"bytes,4,opt,name=azureOptions,proto3" json:"azureOptions,omitempty"`
	// AWS Options
	AwsOptions *cover.AwsOptions `protobuf:"bytes,5,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
	// Account Type
	AccountType string `protobuf:"bytes,6,opt,name=accountType,proto3" json:"accountType,omitempty"`
}

func (x *UpdateDataAccessRequest) Reset() {
	*x = UpdateDataAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDataAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataAccessRequest) ProtoMessage() {}

func (x *UpdateDataAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataAccessRequest.ProtoReflect.Descriptor instead.
func (*UpdateDataAccessRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{181}
}

func (x *UpdateDataAccessRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *UpdateDataAccessRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *UpdateDataAccessRequest) GetGcpOptions() *cover.GcpOptions {
	if x != nil {
		return x.GcpOptions
	}
	return nil
}

func (x *UpdateDataAccessRequest) GetAzureOptions() *cover.AzureOptions {
	if x != nil {
		return x.AzureOptions
	}
	return nil
}

func (x *UpdateDataAccessRequest) GetAwsOptions() *cover.AwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

func (x *UpdateDataAccessRequest) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

// Request message for ListDataAccess
type ListDataAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListDataAccessRequest) Reset() {
	*x = ListDataAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataAccessRequest) ProtoMessage() {}

func (x *ListDataAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataAccessRequest.ProtoReflect.Descriptor instead.
func (*ListDataAccessRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{182}
}

// Request message for AddBillingAccount
type BillingAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The billing account id.
	BillingId string `protobuf:"bytes,1,opt,name=billingId,proto3" json:"billingId,omitempty"`
	// Name of dataset you created.
	DatasetId string `protobuf:"bytes,2,opt,name=datasetId,proto3" json:"datasetId,omitempty"`
	// In creating dataset, It requires you to select a region.
	DatasetRegion string `protobuf:"bytes,3,opt,name=datasetRegion,proto3" json:"datasetRegion,omitempty"`
	// Project Id where the datasetId of BQ can be found.
	ProjectId string `protobuf:"bytes,4,opt,name=projectId,proto3" json:"projectId,omitempty"`
	// Optional. Billing Name, this can be set by the users in Octo UI.
	BillingName string `protobuf:"bytes,5,opt,name=billingName,proto3" json:"billingName,omitempty"`
}

func (x *BillingAccountRequest) Reset() {
	*x = BillingAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillingAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingAccountRequest) ProtoMessage() {}

func (x *BillingAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingAccountRequest.ProtoReflect.Descriptor instead.
func (*BillingAccountRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{183}
}

func (x *BillingAccountRequest) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *BillingAccountRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *BillingAccountRequest) GetDatasetRegion() string {
	if x != nil {
		return x.DatasetRegion
	}
	return ""
}

func (x *BillingAccountRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BillingAccountRequest) GetBillingName() string {
	if x != nil {
		return x.BillingName
	}
	return ""
}

type GetAndDeleteDataAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. (Billing ID for GCP / Account ID for Azure)
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Vendor (GCP/Azure)
	Vendor string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// In the context of fetching account details, specifying the account type is necessary. This is because the target alone might not uniquely identify an account and could result in multiple data points.
	AccountType string `protobuf:"bytes,3,opt,name=accountType,proto3" json:"accountType,omitempty"`
}

func (x *GetAndDeleteDataAccessRequest) Reset() {
	*x = GetAndDeleteDataAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAndDeleteDataAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAndDeleteDataAccessRequest) ProtoMessage() {}

func (x *GetAndDeleteDataAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAndDeleteDataAccessRequest.ProtoReflect.Descriptor instead.
func (*GetAndDeleteDataAccessRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{184}
}

func (x *GetAndDeleteDataAccessRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *GetAndDeleteDataAccessRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetAndDeleteDataAccessRequest) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

// Request message for AddPartnerCenterCredentials
type AddPartnerCenterCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account Id
	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// Application Id
	ApplicationId string `protobuf:"bytes,2,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	// Secret Key
	SecretKey string `protobuf:"bytes,3,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
}

func (x *AddPartnerCenterCredentialsRequest) Reset() {
	*x = AddPartnerCenterCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPartnerCenterCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPartnerCenterCredentialsRequest) ProtoMessage() {}

func (x *AddPartnerCenterCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPartnerCenterCredentialsRequest.ProtoReflect.Descriptor instead.
func (*AddPartnerCenterCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{185}
}

func (x *AddPartnerCenterCredentialsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AddPartnerCenterCredentialsRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *AddPartnerCenterCredentialsRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

// Request message for AddMpnSetting
type AddMpnSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partner Id / MPN Id
	MpnId string `protobuf:"bytes,1,opt,name=mpnId,proto3" json:"mpnId,omitempty"`
}

func (x *AddMpnSettingRequest) Reset() {
	*x = AddMpnSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMpnSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMpnSettingRequest) ProtoMessage() {}

func (x *AddMpnSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMpnSettingRequest.ProtoReflect.Descriptor instead.
func (*AddMpnSettingRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{186}
}

func (x *AddMpnSettingRequest) GetMpnId() string {
	if x != nil {
		return x.MpnId
	}
	return ""
}

// Request message for GetCostGroupAttribute
type GetCostGroupAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor        string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	AttributeType string `protobuf:"bytes,2,opt,name=attributeType,proto3" json:"attributeType,omitempty"`
	CostGroupId   string `protobuf:"bytes,3,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
}

func (x *GetCostGroupAttributeRequest) Reset() {
	*x = GetCostGroupAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostGroupAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostGroupAttributeRequest) ProtoMessage() {}

func (x *GetCostGroupAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostGroupAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetCostGroupAttributeRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{187}
}

func (x *GetCostGroupAttributeRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetCostGroupAttributeRequest) GetAttributeType() string {
	if x != nil {
		return x.AttributeType
	}
	return ""
}

func (x *GetCostGroupAttributeRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

// Response message for GetCostGroupAttribute
type GetCostGroupAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  []*cover.Result  `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	TagData []*cover.TagData `protobuf:"bytes,2,rep,name=tagData,proto3" json:"tagData,omitempty"`
}

func (x *GetCostGroupAttributeResponse) Reset() {
	*x = GetCostGroupAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostGroupAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostGroupAttributeResponse) ProtoMessage() {}

func (x *GetCostGroupAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostGroupAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetCostGroupAttributeResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{188}
}

func (x *GetCostGroupAttributeResponse) GetResult() []*cover.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetCostGroupAttributeResponse) GetTagData() []*cover.TagData {
	if x != nil {
		return x.TagData
	}
	return nil
}

type GetCategoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *GetCategoriesRequest) Reset() {
	*x = GetCategoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesRequest) ProtoMessage() {}

func (x *GetCategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesRequest.ProtoReflect.Descriptor instead.
func (*GetCategoriesRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{189}
}

func (x *GetCategoriesRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

type GetCategoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category []*cover.Category `protobuf:"bytes,1,rep,name=category,proto3" json:"category,omitempty"`
}

func (x *GetCategoriesResponse) Reset() {
	*x = GetCategoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesResponse) ProtoMessage() {}

func (x *GetCategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesResponse.ProtoReflect.Descriptor instead.
func (*GetCategoriesResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{190}
}

func (x *GetCategoriesResponse) GetCategory() []*cover.Category {
	if x != nil {
		return x.Category
	}
	return nil
}

// Request message for GetAlerts
type GetAlertsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAlertsRequest) Reset() {
	*x = GetAlertsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertsRequest) ProtoMessage() {}

func (x *GetAlertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertsRequest.ProtoReflect.Descriptor instead.
func (*GetAlertsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{191}
}

// Response message for GetAlerts
type GetAlertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertData *cover.AlertData `protobuf:"bytes,1,opt,name=alertData,proto3" json:"alertData,omitempty"`
}

func (x *GetAlertsResponse) Reset() {
	*x = GetAlertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertsResponse) ProtoMessage() {}

func (x *GetAlertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertsResponse.ProtoReflect.Descriptor instead.
func (*GetAlertsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{192}
}

func (x *GetAlertsResponse) GetAlertData() *cover.AlertData {
	if x != nil {
		return x.AlertData
	}
	return nil
}

// Request message for CreateAlert
type CreateAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// At least one in either fixedAmount or percentage.
	FixedAmount float32 `protobuf:"fixed32,2,opt,name=fixedAmount,proto3" json:"fixedAmount,omitempty"`
	Percentage  float32 `protobuf:"fixed32,3,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// Optional. daily or monthly. Only 'daily' is supported for now.
	Granularity string `protobuf:"bytes,4,opt,name=granularity,proto3" json:"granularity,omitempty"`
	// Required. Cost group IDs.
	CostGroups []string `protobuf:"bytes,5,rep,name=costGroups,proto3" json:"costGroups,omitempty"`
	// Required. Channel IDs.
	Channels []string `protobuf:"bytes,6,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *CreateAlertRequest) Reset() {
	*x = CreateAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlertRequest) ProtoMessage() {}

func (x *CreateAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlertRequest.ProtoReflect.Descriptor instead.
func (*CreateAlertRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{193}
}

func (x *CreateAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAlertRequest) GetFixedAmount() float32 {
	if x != nil {
		return x.FixedAmount
	}
	return 0
}

func (x *CreateAlertRequest) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *CreateAlertRequest) GetGranularity() string {
	if x != nil {
		return x.Granularity
	}
	return ""
}

func (x *CreateAlertRequest) GetCostGroups() []string {
	if x != nil {
		return x.CostGroups
	}
	return nil
}

func (x *CreateAlertRequest) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

// Response message for CreateAlert
type CreateAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertData *cover.AlertData `protobuf:"bytes,1,opt,name=alertData,proto3" json:"alertData,omitempty"`
}

func (x *CreateAlertResponse) Reset() {
	*x = CreateAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlertResponse) ProtoMessage() {}

func (x *CreateAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlertResponse.ProtoReflect.Descriptor instead.
func (*CreateAlertResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{194}
}

func (x *CreateAlertResponse) GetAlertData() *cover.AlertData {
	if x != nil {
		return x.AlertData
	}
	return nil
}

// Request message for GetAlertDetails
type GetAlertDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Alert ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAlertDetailsRequest) Reset() {
	*x = GetAlertDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertDetailsRequest) ProtoMessage() {}

func (x *GetAlertDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetAlertDetailsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{195}
}

func (x *GetAlertDetailsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response message for GetAlertDetails
type GetAlertDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertData *cover.AlertData `protobuf:"bytes,1,opt,name=alertData,proto3" json:"alertData,omitempty"`
}

func (x *GetAlertDetailsResponse) Reset() {
	*x = GetAlertDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAlertDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertDetailsResponse) ProtoMessage() {}

func (x *GetAlertDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetAlertDetailsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{196}
}

func (x *GetAlertDetailsResponse) GetAlertData() *cover.AlertData {
	if x != nil {
		return x.AlertData
	}
	return nil
}

// Request message for DeleteAlert
type DeleteAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Alert ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAlertRequest) Reset() {
	*x = DeleteAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAlertRequest) ProtoMessage() {}

func (x *DeleteAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAlertRequest.ProtoReflect.Descriptor instead.
func (*DeleteAlertRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{197}
}

func (x *DeleteAlertRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response message for DeleteAlert
type DeleteAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAlertResponse) Reset() {
	*x = DeleteAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAlertResponse) ProtoMessage() {}

func (x *DeleteAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAlertResponse.ProtoReflect.Descriptor instead.
func (*DeleteAlertResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{198}
}

func (x *DeleteAlertResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for UpdateAlertDetails
type UpdateAlertDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Alert ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// If optional fields are not supplied, no changes occur.
	// Optional.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Both are optional.
	FixedAmount float32 `protobuf:"fixed32,3,opt,name=fixedAmount,proto3" json:"fixedAmount,omitempty"`
	Percentage  float32 `protobuf:"fixed32,4,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// Optional. daily or monthly. Only 'daily' is supported for now.
	Granularity string `protobuf:"bytes,5,opt,name=granularity,proto3" json:"granularity,omitempty"`
	// Optional. Cost group IDs.
	CostGroups []string `protobuf:"bytes,6,rep,name=costGroups,proto3" json:"costGroups,omitempty"`
	// Optional. Channel IDs.
	Channels []string `protobuf:"bytes,7,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *UpdateAlertDetailsRequest) Reset() {
	*x = UpdateAlertDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAlertDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertDetailsRequest) ProtoMessage() {}

func (x *UpdateAlertDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertDetailsRequest.ProtoReflect.Descriptor instead.
func (*UpdateAlertDetailsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{199}
}

func (x *UpdateAlertDetailsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAlertDetailsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAlertDetailsRequest) GetFixedAmount() float32 {
	if x != nil {
		return x.FixedAmount
	}
	return 0
}

func (x *UpdateAlertDetailsRequest) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *UpdateAlertDetailsRequest) GetGranularity() string {
	if x != nil {
		return x.Granularity
	}
	return ""
}

func (x *UpdateAlertDetailsRequest) GetCostGroups() []string {
	if x != nil {
		return x.CostGroups
	}
	return nil
}

func (x *UpdateAlertDetailsRequest) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

// Response message for UpdateAlertDetails
type UpdateAlertDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertData *cover.AlertData `protobuf:"bytes,1,opt,name=alertData,proto3" json:"alertData,omitempty"`
}

func (x *UpdateAlertDetailsResponse) Reset() {
	*x = UpdateAlertDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAlertDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertDetailsResponse) ProtoMessage() {}

func (x *UpdateAlertDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertDetailsResponse.ProtoReflect.Descriptor instead.
func (*UpdateAlertDetailsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{200}
}

func (x *UpdateAlertDetailsResponse) GetAlertData() *cover.AlertData {
	if x != nil {
		return x.AlertData
	}
	return nil
}

// Request message for GetChannels
type GetChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Use email, slack, or msteams to filter the type of channels
	// Otherwise, it returns all channels
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetChannelsRequest) Reset() {
	*x = GetChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelsRequest) ProtoMessage() {}

func (x *GetChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelsRequest.ProtoReflect.Descriptor instead.
func (*GetChannelsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{201}
}

func (x *GetChannelsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Response message for GetChannels
type GetChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelData *cover.ChannelData `protobuf:"bytes,1,opt,name=channelData,proto3" json:"channelData,omitempty"`
}

func (x *GetChannelsResponse) Reset() {
	*x = GetChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelsResponse) ProtoMessage() {}

func (x *GetChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelsResponse.ProtoReflect.Descriptor instead.
func (*GetChannelsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{202}
}

func (x *GetChannelsResponse) GetChannelData() *cover.ChannelData {
	if x != nil {
		return x.ChannelData
	}
	return nil
}

// Request message for CreateChannel
type CreateChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Either actual email address or slack/msteams channel name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. email, slack, or msteams.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Optional. Only needed for slack and msteams type.
	WebhookUrl string `protobuf:"bytes,3,opt,name=webhookUrl,proto3" json:"webhookUrl,omitempty"`
}

func (x *CreateChannelRequest) Reset() {
	*x = CreateChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelRequest) ProtoMessage() {}

func (x *CreateChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateChannelRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{203}
}

func (x *CreateChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateChannelRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateChannelRequest) GetWebhookUrl() string {
	if x != nil {
		return x.WebhookUrl
	}
	return ""
}

// Response message for CreateChannel
type CreateChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelData *cover.ChannelData `protobuf:"bytes,1,opt,name=channelData,proto3" json:"channelData,omitempty"`
}

func (x *CreateChannelResponse) Reset() {
	*x = CreateChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelResponse) ProtoMessage() {}

func (x *CreateChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelResponse.ProtoReflect.Descriptor instead.
func (*CreateChannelResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{204}
}

func (x *CreateChannelResponse) GetChannelData() *cover.ChannelData {
	if x != nil {
		return x.ChannelData
	}
	return nil
}

// Request message for GetChannelDetails
type GetChannelDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Channel ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetChannelDetailsRequest) Reset() {
	*x = GetChannelDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelDetailsRequest) ProtoMessage() {}

func (x *GetChannelDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetChannelDetailsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{205}
}

func (x *GetChannelDetailsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response message for GetChannelDetails
type GetChannelDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelData *cover.ChannelData `protobuf:"bytes,1,opt,name=channelData,proto3" json:"channelData,omitempty"`
}

func (x *GetChannelDetailsResponse) Reset() {
	*x = GetChannelDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelDetailsResponse) ProtoMessage() {}

func (x *GetChannelDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetChannelDetailsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{206}
}

func (x *GetChannelDetailsResponse) GetChannelData() *cover.ChannelData {
	if x != nil {
		return x.ChannelData
	}
	return nil
}

// Request message for DeleteChannel
type DeleteChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Channel ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteChannelRequest) Reset() {
	*x = DeleteChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannelRequest) ProtoMessage() {}

func (x *DeleteChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannelRequest.ProtoReflect.Descriptor instead.
func (*DeleteChannelRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{207}
}

func (x *DeleteChannelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response message for DeleteChannel
type DeleteChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteChannelResponse) Reset() {
	*x = DeleteChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannelResponse) ProtoMessage() {}

func (x *DeleteChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannelResponse.ProtoReflect.Descriptor instead.
func (*DeleteChannelResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{208}
}

func (x *DeleteChannelResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for UpdateChannelDetails
type UpdateChannelDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Channel ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// If optional fields are not supplied, no changes occur.
	// Optional. Either actual email address or slack/msteams channel name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. email, slack, or msteams.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Optional. Only needed for slack and msteams type.
	WebhookUrl string `protobuf:"bytes,4,opt,name=webhookUrl,proto3" json:"webhookUrl,omitempty"`
}

func (x *UpdateChannelDetailsRequest) Reset() {
	*x = UpdateChannelDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelDetailsRequest) ProtoMessage() {}

func (x *UpdateChannelDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelDetailsRequest.ProtoReflect.Descriptor instead.
func (*UpdateChannelDetailsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{209}
}

func (x *UpdateChannelDetailsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateChannelDetailsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateChannelDetailsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateChannelDetailsRequest) GetWebhookUrl() string {
	if x != nil {
		return x.WebhookUrl
	}
	return ""
}

// Response message for UpdateChannelDetails
type UpdateChannelDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelData *cover.ChannelData `protobuf:"bytes,1,opt,name=channelData,proto3" json:"channelData,omitempty"`
}

func (x *UpdateChannelDetailsResponse) Reset() {
	*x = UpdateChannelDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelDetailsResponse) ProtoMessage() {}

func (x *UpdateChannelDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelDetailsResponse.ProtoReflect.Descriptor instead.
func (*UpdateChannelDetailsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{210}
}

func (x *UpdateChannelDetailsResponse) GetChannelData() *cover.ChannelData {
	if x != nil {
		return x.ChannelData
	}
	return nil
}

// Request message for GetDiscountRecomemendations
type GetDiscountRecommendationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// AWS Inputs
	AwsInputs *cover.AwsInputs `protobuf:"bytes,2,opt,name=awsInputs,proto3" json:"awsInputs,omitempty"`
	// NOT SUPPORTED YET
	AzureInputs *cover.AzureInputs `protobuf:"bytes,3,opt,name=azureInputs,proto3" json:"azureInputs,omitempty"`
	// NOT SUPPORTED YET
	GcpInputs *cover.GcpInputs `protobuf:"bytes,4,opt,name=gcpInputs,proto3" json:"gcpInputs,omitempty"`
}

func (x *GetDiscountRecommendationsRequest) Reset() {
	*x = GetDiscountRecommendationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscountRecommendationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscountRecommendationsRequest) ProtoMessage() {}

func (x *GetDiscountRecommendationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscountRecommendationsRequest.ProtoReflect.Descriptor instead.
func (*GetDiscountRecommendationsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{211}
}

func (x *GetDiscountRecommendationsRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *GetDiscountRecommendationsRequest) GetAwsInputs() *cover.AwsInputs {
	if x != nil {
		return x.AwsInputs
	}
	return nil
}

func (x *GetDiscountRecommendationsRequest) GetAzureInputs() *cover.AzureInputs {
	if x != nil {
		return x.AzureInputs
	}
	return nil
}

func (x *GetDiscountRecommendationsRequest) GetGcpInputs() *cover.GcpInputs {
	if x != nil {
		return x.GcpInputs
	}
	return nil
}

// Response message for GetDiscountRecommendations
type GetDiscountRecommendationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwsRecommendations   *cover.AwsDiscountRecommendations   `protobuf:"bytes,1,opt,name=awsRecommendations,proto3" json:"awsRecommendations,omitempty"`
	AzureRecommendations *cover.AzureDiscountRecommendations `protobuf:"bytes,2,opt,name=azureRecommendations,proto3" json:"azureRecommendations,omitempty"`
	GcpRecommendations   *cover.GcpDiscountRecommendations   `protobuf:"bytes,3,opt,name=gcpRecommendations,proto3" json:"gcpRecommendations,omitempty"`
}

func (x *GetDiscountRecommendationsResponse) Reset() {
	*x = GetDiscountRecommendationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscountRecommendationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscountRecommendationsResponse) ProtoMessage() {}

func (x *GetDiscountRecommendationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscountRecommendationsResponse.ProtoReflect.Descriptor instead.
func (*GetDiscountRecommendationsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{212}
}

func (x *GetDiscountRecommendationsResponse) GetAwsRecommendations() *cover.AwsDiscountRecommendations {
	if x != nil {
		return x.AwsRecommendations
	}
	return nil
}

func (x *GetDiscountRecommendationsResponse) GetAzureRecommendations() *cover.AzureDiscountRecommendations {
	if x != nil {
		return x.AzureRecommendations
	}
	return nil
}

func (x *GetDiscountRecommendationsResponse) GetGcpRecommendations() *cover.GcpDiscountRecommendations {
	if x != nil {
		return x.GcpRecommendations
	}
	return nil
}

// Request message for getting anomaly
type GetAnomalyinCostGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Start date for detecting anomalies. Valid format: YYYYMMDD
	StartDate string `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate,omitempty"`
	// End date for detection anomalies. Valid format: YYYYMMDD
	EndDate string `protobuf:"bytes,3,opt,name=endDate,proto3" json:"endDate,omitempty"`
}

func (x *GetAnomalyinCostGroupRequest) Reset() {
	*x = GetAnomalyinCostGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnomalyinCostGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnomalyinCostGroupRequest) ProtoMessage() {}

func (x *GetAnomalyinCostGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnomalyinCostGroupRequest.ProtoReflect.Descriptor instead.
func (*GetAnomalyinCostGroupRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{213}
}

func (x *GetAnomalyinCostGroupRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *GetAnomalyinCostGroupRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetAnomalyinCostGroupRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// Message response for anomaly detection
type AnomalyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account     string  `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	CostGroupId string  `protobuf:"bytes,2,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	Vendor      string  `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Product     string  `protobuf:"bytes,4,opt,name=product,proto3" json:"product,omitempty"`
	Date        string  `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	TotalCost   float32 `protobuf:"fixed32,6,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
	// The value will be true if there is an anomaly for a specific account and product
	IsAnomaly bool `protobuf:"varint,7,opt,name=isAnomaly,proto3" json:"isAnomaly,omitempty"`
	// Lower bound. If the total cost is lesser than the lowerlimit it is considered as anomaly
	LowerLimit float32 `protobuf:"fixed32,8,opt,name=lowerLimit,proto3" json:"lowerLimit,omitempty"`
	// Upper bound. If the total cost is greater than the upperlimit it is considered as anomaly
	UpperLimit float32 `protobuf:"fixed32,9,opt,name=upperLimit,proto3" json:"upperLimit,omitempty"`
	// The difference of the total cost and the upperlimit or lowerlimit if it is anomamly, if not anomaly then anomaly cost is 0
	AnomalyCost float32 `protobuf:"fixed32,10,opt,name=anomalyCost,proto3" json:"anomalyCost,omitempty"`
	// How many percentage does the data is considered anomaly
	AnomalyProbability float32 `protobuf:"fixed32,11,opt,name=anomalyProbability,proto3" json:"anomalyProbability,omitempty"`
}

func (x *AnomalyData) Reset() {
	*x = AnomalyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnomalyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnomalyData) ProtoMessage() {}

func (x *AnomalyData) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnomalyData.ProtoReflect.Descriptor instead.
func (*AnomalyData) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{214}
}

func (x *AnomalyData) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AnomalyData) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *AnomalyData) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *AnomalyData) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *AnomalyData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *AnomalyData) GetTotalCost() float32 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *AnomalyData) GetIsAnomaly() bool {
	if x != nil {
		return x.IsAnomaly
	}
	return false
}

func (x *AnomalyData) GetLowerLimit() float32 {
	if x != nil {
		return x.LowerLimit
	}
	return 0
}

func (x *AnomalyData) GetUpperLimit() float32 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

func (x *AnomalyData) GetAnomalyCost() float32 {
	if x != nil {
		return x.AnomalyCost
	}
	return 0
}

func (x *AnomalyData) GetAnomalyProbability() float32 {
	if x != nil {
		return x.AnomalyProbability
	}
	return 0
}

// Request message for CreateDiscountExpirationAlert
type CreateDiscountExpirationAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required if the alertEnabled is set to true
	// Supported values are the following:
	// [0, 7, 30, 60, 90]
	Frequencies []int64 `protobuf:"varint,1,rep,packed,name=frequencies,proto3" json:"frequencies,omitempty"`
	// Required. Cost Group Id
	CostGroups []string `protobuf:"bytes,2,rep,name=costGroups,proto3" json:"costGroups,omitempty"`
	// required. Switch in enabling alert.
	AlertEnabled bool `protobuf:"varint,3,opt,name=alertEnabled,proto3" json:"alertEnabled,omitempty"`
	// required. Array of notificationChannel Ids from DynamoDB. Existing in ripple.
	Channels []string `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty"`
	// required. Name of alert
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateDiscountExpirationAlertRequest) Reset() {
	*x = CreateDiscountExpirationAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDiscountExpirationAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDiscountExpirationAlertRequest) ProtoMessage() {}

func (x *CreateDiscountExpirationAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDiscountExpirationAlertRequest.ProtoReflect.Descriptor instead.
func (*CreateDiscountExpirationAlertRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{215}
}

func (x *CreateDiscountExpirationAlertRequest) GetFrequencies() []int64 {
	if x != nil {
		return x.Frequencies
	}
	return nil
}

func (x *CreateDiscountExpirationAlertRequest) GetCostGroups() []string {
	if x != nil {
		return x.CostGroups
	}
	return nil
}

func (x *CreateDiscountExpirationAlertRequest) GetAlertEnabled() bool {
	if x != nil {
		return x.AlertEnabled
	}
	return false
}

func (x *CreateDiscountExpirationAlertRequest) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *CreateDiscountExpirationAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ManipulateDiscountExpirationAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required. Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ManipulateDiscountExpirationAlertRequest) Reset() {
	*x = ManipulateDiscountExpirationAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManipulateDiscountExpirationAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManipulateDiscountExpirationAlertRequest) ProtoMessage() {}

func (x *ManipulateDiscountExpirationAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManipulateDiscountExpirationAlertRequest.ProtoReflect.Descriptor instead.
func (*ManipulateDiscountExpirationAlertRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{216}
}

func (x *ManipulateDiscountExpirationAlertRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateDiscountExpirationAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required. Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// required.
	AlertEnabled bool `protobuf:"varint,2,opt,name=alertEnabled,proto3" json:"alertEnabled,omitempty"`
	// required. Notification Channel Ids.
	Channels []string `protobuf:"bytes,3,rep,name=channels,proto3" json:"channels,omitempty"`
	// required. Frequencies.
	Frequencies []int64 `protobuf:"varint,4,rep,packed,name=frequencies,proto3" json:"frequencies,omitempty"`
	// Required. Cost Group Ids
	CostGroups []string `protobuf:"bytes,5,rep,name=costGroups,proto3" json:"costGroups,omitempty"`
	// required. Name
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateDiscountExpirationAlertRequest) Reset() {
	*x = UpdateDiscountExpirationAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiscountExpirationAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiscountExpirationAlertRequest) ProtoMessage() {}

func (x *UpdateDiscountExpirationAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiscountExpirationAlertRequest.ProtoReflect.Descriptor instead.
func (*UpdateDiscountExpirationAlertRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{217}
}

func (x *UpdateDiscountExpirationAlertRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDiscountExpirationAlertRequest) GetAlertEnabled() bool {
	if x != nil {
		return x.AlertEnabled
	}
	return false
}

func (x *UpdateDiscountExpirationAlertRequest) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *UpdateDiscountExpirationAlertRequest) GetFrequencies() []int64 {
	if x != nil {
		return x.Frequencies
	}
	return nil
}

func (x *UpdateDiscountExpirationAlertRequest) GetCostGroups() []string {
	if x != nil {
		return x.CostGroups
	}
	return nil
}

func (x *UpdateDiscountExpirationAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DiscountExpiryAlertData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId        string                  `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	AlertEnabled bool                    `protobuf:"varint,3,opt,name=alertEnabled,proto3" json:"alertEnabled,omitempty"`
	Frequencies  []int64                 `protobuf:"varint,4,rep,packed,name=frequencies,proto3" json:"frequencies,omitempty"`
	CostGroups   []*cover.AlertCostGroup `protobuf:"bytes,5,rep,name=costGroups,proto3" json:"costGroups,omitempty"`
	Details      string                  `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`
	Channels     *cover.AlertChannels    `protobuf:"bytes,7,opt,name=channels,proto3" json:"channels,omitempty"`
	Name         string                  `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DiscountExpiryAlertData) Reset() {
	*x = DiscountExpiryAlertData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscountExpiryAlertData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscountExpiryAlertData) ProtoMessage() {}

func (x *DiscountExpiryAlertData) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscountExpiryAlertData.ProtoReflect.Descriptor instead.
func (*DiscountExpiryAlertData) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{218}
}

func (x *DiscountExpiryAlertData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DiscountExpiryAlertData) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *DiscountExpiryAlertData) GetAlertEnabled() bool {
	if x != nil {
		return x.AlertEnabled
	}
	return false
}

func (x *DiscountExpiryAlertData) GetFrequencies() []int64 {
	if x != nil {
		return x.Frequencies
	}
	return nil
}

func (x *DiscountExpiryAlertData) GetCostGroups() []*cover.AlertCostGroup {
	if x != nil {
		return x.CostGroups
	}
	return nil
}

func (x *DiscountExpiryAlertData) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *DiscountExpiryAlertData) GetChannels() *cover.AlertChannels {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *DiscountExpiryAlertData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for ListDiscountExpirationAlert
type ListDiscountExpirationAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListDiscountExpirationAlertRequest) Reset() {
	*x = ListDiscountExpirationAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiscountExpirationAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiscountExpirationAlertRequest) ProtoMessage() {}

func (x *ListDiscountExpirationAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiscountExpirationAlertRequest.ProtoReflect.Descriptor instead.
func (*ListDiscountExpirationAlertRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{219}
}

// Rquest message for CreateAnomalyAlert
type CreateAnomalyAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the Anomaly Alert
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Toggle disable and enable status of the alert
	AlertEnabled bool `protobuf:"varint,2,opt,name=alertEnabled,proto3" json:"alertEnabled,omitempty"`
	// Required. How often the user wants to receive alerts. Daily or Weekly
	Frequency string `protobuf:"bytes,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Requried. The Id of the cost group you want to monitor if there is an anomaly
	CostGroupId string `protobuf:"bytes,4,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Required. The Channels where you want to send the alerts.
	NotificationChannels []string `protobuf:"bytes,5,rep,name=notificationChannels,proto3" json:"notificationChannels,omitempty"`
}

func (x *CreateAnomalyAlertRequest) Reset() {
	*x = CreateAnomalyAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAnomalyAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAnomalyAlertRequest) ProtoMessage() {}

func (x *CreateAnomalyAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAnomalyAlertRequest.ProtoReflect.Descriptor instead.
func (*CreateAnomalyAlertRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{220}
}

func (x *CreateAnomalyAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAnomalyAlertRequest) GetAlertEnabled() bool {
	if x != nil {
		return x.AlertEnabled
	}
	return false
}

func (x *CreateAnomalyAlertRequest) GetFrequency() string {
	if x != nil {
		return x.Frequency
	}
	return ""
}

func (x *CreateAnomalyAlertRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *CreateAnomalyAlertRequest) GetNotificationChannels() []string {
	if x != nil {
		return x.NotificationChannels
	}
	return nil
}

type ManipulateAnomalyAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required. Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ManipulateAnomalyAlertRequest) Reset() {
	*x = ManipulateAnomalyAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManipulateAnomalyAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManipulateAnomalyAlertRequest) ProtoMessage() {}

func (x *ManipulateAnomalyAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManipulateAnomalyAlertRequest.ProtoReflect.Descriptor instead.
func (*ManipulateAnomalyAlertRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{221}
}

func (x *ManipulateAnomalyAlertRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AnomalyAlertData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId        string                `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Name         string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AlertEnabled bool                  `protobuf:"varint,4,opt,name=alertEnabled,proto3" json:"alertEnabled,omitempty"`
	Frequency    string                `protobuf:"bytes,5,opt,name=frequency,proto3" json:"frequency,omitempty"`
	CostGroupId  *cover.AlertCostGroup `protobuf:"bytes,6,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	Channels     *cover.AlertChannels  `protobuf:"bytes,7,opt,name=channels,proto3" json:"channels,omitempty"`
}

func (x *AnomalyAlertData) Reset() {
	*x = AnomalyAlertData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnomalyAlertData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnomalyAlertData) ProtoMessage() {}

func (x *AnomalyAlertData) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnomalyAlertData.ProtoReflect.Descriptor instead.
func (*AnomalyAlertData) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{222}
}

func (x *AnomalyAlertData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnomalyAlertData) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *AnomalyAlertData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AnomalyAlertData) GetAlertEnabled() bool {
	if x != nil {
		return x.AlertEnabled
	}
	return false
}

func (x *AnomalyAlertData) GetFrequency() string {
	if x != nil {
		return x.Frequency
	}
	return ""
}

func (x *AnomalyAlertData) GetCostGroupId() *cover.AlertCostGroup {
	if x != nil {
		return x.CostGroupId
	}
	return nil
}

func (x *AnomalyAlertData) GetChannels() *cover.AlertChannels {
	if x != nil {
		return x.Channels
	}
	return nil
}

// Request message for ListAnomalyAlert
type ListAnomalyAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAnomalyAlertRequest) Reset() {
	*x = ListAnomalyAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnomalyAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnomalyAlertRequest) ProtoMessage() {}

func (x *ListAnomalyAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnomalyAlertRequest.ProtoReflect.Descriptor instead.
func (*ListAnomalyAlertRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{223}
}

type UpdateAnomalyAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required. Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// required. alert name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// required.
	AlertEnabled bool `protobuf:"varint,3,opt,name=alertEnabled,proto3" json:"alertEnabled,omitempty"`
	// required. Notification Channel Ids.
	NotificationChannels []string `protobuf:"bytes,4,rep,name=notificationChannels,proto3" json:"notificationChannels,omitempty"`
	// required. Frequency.
	Frequency string `protobuf:"bytes,5,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// required. cost group id
	CostGroupId string `protobuf:"bytes,6,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
}

func (x *UpdateAnomalyAlertRequest) Reset() {
	*x = UpdateAnomalyAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAnomalyAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAnomalyAlertRequest) ProtoMessage() {}

func (x *UpdateAnomalyAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAnomalyAlertRequest.ProtoReflect.Descriptor instead.
func (*UpdateAnomalyAlertRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{224}
}

func (x *UpdateAnomalyAlertRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAnomalyAlertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAnomalyAlertRequest) GetAlertEnabled() bool {
	if x != nil {
		return x.AlertEnabled
	}
	return false
}

func (x *UpdateAnomalyAlertRequest) GetNotificationChannels() []string {
	if x != nil {
		return x.NotificationChannels
	}
	return nil
}

func (x *UpdateAnomalyAlertRequest) GetFrequency() string {
	if x != nil {
		return x.Frequency
	}
	return ""
}

func (x *UpdateAnomalyAlertRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

// Request message for RegisterNewUser
type RegisterNewUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required email
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// required password
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// required user Name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// required company name
	Company string `protobuf:"bytes,4,opt,name=company,proto3" json:"company,omitempty"`
	// required company role
	Role string `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	// optional company monthly cloud usage
	Amount string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	// optional intention
	Intention string `protobuf:"bytes,7,opt,name=intention,proto3" json:"intention,omitempty"`
}

func (x *RegisterNewUserRequest) Reset() {
	*x = RegisterNewUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterNewUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNewUserRequest) ProtoMessage() {}

func (x *RegisterNewUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNewUserRequest.ProtoReflect.Descriptor instead.
func (*RegisterNewUserRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{225}
}

func (x *RegisterNewUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegisterNewUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterNewUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterNewUserRequest) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *RegisterNewUserRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RegisterNewUserRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *RegisterNewUserRequest) GetIntention() string {
	if x != nil {
		return x.Intention
	}
	return ""
}

type RegisterNewUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAuthorized bool `protobuf:"varint,1,opt,name=isAuthorized,proto3" json:"isAuthorized,omitempty"`
}

func (x *RegisterNewUserResponse) Reset() {
	*x = RegisterNewUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterNewUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNewUserResponse) ProtoMessage() {}

func (x *RegisterNewUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNewUserResponse.ProtoReflect.Descriptor instead.
func (*RegisterNewUserResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{226}
}

func (x *RegisterNewUserResponse) GetIsAuthorized() bool {
	if x != nil {
		return x.IsAuthorized
	}
	return false
}

// Request message for GetUserProfile
type GetUserProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required email
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *GetUserProfileRequest) Reset() {
	*x = GetUserProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserProfileRequest) ProtoMessage() {}

func (x *GetUserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserProfileRequest.ProtoReflect.Descriptor instead.
func (*GetUserProfileRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{227}
}

func (x *GetUserProfileRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GetUserProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasCreatedProfile bool `protobuf:"varint,1,opt,name=hasCreatedProfile,proto3" json:"hasCreatedProfile,omitempty"`
}

func (x *GetUserProfileResponse) Reset() {
	*x = GetUserProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserProfileResponse) ProtoMessage() {}

func (x *GetUserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserProfileResponse.ProtoReflect.Descriptor instead.
func (*GetUserProfileResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{228}
}

func (x *GetUserProfileResponse) GetHasCreatedProfile() bool {
	if x != nil {
		return x.HasCreatedProfile
	}
	return false
}

type ListBudgetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Set to true to include monthly spending and forecast within the budget period
	IncludeSpendAndForecast bool `protobuf:"varint,1,opt,name=includeSpendAndForecast,proto3" json:"includeSpendAndForecast,omitempty"`
	// Optional. Cost group ID. Return budgets under this specific cost group.
	CostGroup string `protobuf:"bytes,2,opt,name=costGroup,proto3" json:"costGroup,omitempty"`
}

func (x *ListBudgetsRequest) Reset() {
	*x = ListBudgetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBudgetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBudgetsRequest) ProtoMessage() {}

func (x *ListBudgetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBudgetsRequest.ProtoReflect.Descriptor instead.
func (*ListBudgetsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{229}
}

func (x *ListBudgetsRequest) GetIncludeSpendAndForecast() bool {
	if x != nil {
		return x.IncludeSpendAndForecast
	}
	return false
}

func (x *ListBudgetsRequest) GetCostGroup() string {
	if x != nil {
		return x.CostGroup
	}
	return ""
}

type ListBudgetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BudgetData *cover.BudgetData `protobuf:"bytes,1,opt,name=budgetData,proto3" json:"budgetData,omitempty"`
}

func (x *ListBudgetsResponse) Reset() {
	*x = ListBudgetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBudgetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBudgetsResponse) ProtoMessage() {}

func (x *ListBudgetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBudgetsResponse.ProtoReflect.Descriptor instead.
func (*ListBudgetsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{230}
}

func (x *ListBudgetsResponse) GetBudgetData() *cover.BudgetData {
	if x != nil {
		return x.BudgetData
	}
	return nil
}

type GetBudgetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Budget ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBudgetRequest) Reset() {
	*x = GetBudgetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBudgetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBudgetRequest) ProtoMessage() {}

func (x *GetBudgetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBudgetRequest.ProtoReflect.Descriptor instead.
func (*GetBudgetRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{231}
}

func (x *GetBudgetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetBudgetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BudgetData *cover.BudgetData `protobuf:"bytes,1,opt,name=budgetData,proto3" json:"budgetData,omitempty"`
}

func (x *GetBudgetResponse) Reset() {
	*x = GetBudgetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBudgetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBudgetResponse) ProtoMessage() {}

func (x *GetBudgetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBudgetResponse.ProtoReflect.Descriptor instead.
func (*GetBudgetResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{232}
}

func (x *GetBudgetResponse) GetBudgetData() *cover.BudgetData {
	if x != nil {
		return x.BudgetData
	}
	return nil
}

type CreateBudgetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BudgetData *cover.BudgetData `protobuf:"bytes,1,opt,name=budgetData,proto3" json:"budgetData,omitempty"`
}

func (x *CreateBudgetRequest) Reset() {
	*x = CreateBudgetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBudgetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBudgetRequest) ProtoMessage() {}

func (x *CreateBudgetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBudgetRequest.ProtoReflect.Descriptor instead.
func (*CreateBudgetRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{233}
}

func (x *CreateBudgetRequest) GetBudgetData() *cover.BudgetData {
	if x != nil {
		return x.BudgetData
	}
	return nil
}

type CreateBudgetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BudgetData *cover.BudgetData `protobuf:"bytes,1,opt,name=budgetData,proto3" json:"budgetData,omitempty"`
}

func (x *CreateBudgetResponse) Reset() {
	*x = CreateBudgetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBudgetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBudgetResponse) ProtoMessage() {}

func (x *CreateBudgetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBudgetResponse.ProtoReflect.Descriptor instead.
func (*CreateBudgetResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{234}
}

func (x *CreateBudgetResponse) GetBudgetData() *cover.BudgetData {
	if x != nil {
		return x.BudgetData
	}
	return nil
}

type DeleteBudgetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Budget ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBudgetRequest) Reset() {
	*x = DeleteBudgetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBudgetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBudgetRequest) ProtoMessage() {}

func (x *DeleteBudgetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBudgetRequest.ProtoReflect.Descriptor instead.
func (*DeleteBudgetRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{235}
}

func (x *DeleteBudgetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteBudgetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBudgetResponse) Reset() {
	*x = DeleteBudgetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBudgetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBudgetResponse) ProtoMessage() {}

func (x *DeleteBudgetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBudgetResponse.ProtoReflect.Descriptor instead.
func (*DeleteBudgetResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{236}
}

func (x *DeleteBudgetResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateBudgetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Budget ID.
	Id         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BudgetData *cover.BudgetData `protobuf:"bytes,2,opt,name=budgetData,proto3" json:"budgetData,omitempty"`
}

func (x *UpdateBudgetRequest) Reset() {
	*x = UpdateBudgetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBudgetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBudgetRequest) ProtoMessage() {}

func (x *UpdateBudgetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBudgetRequest.ProtoReflect.Descriptor instead.
func (*UpdateBudgetRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{237}
}

func (x *UpdateBudgetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateBudgetRequest) GetBudgetData() *cover.BudgetData {
	if x != nil {
		return x.BudgetData
	}
	return nil
}

type UpdateBudgetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BudgetData *cover.BudgetData `protobuf:"bytes,1,opt,name=budgetData,proto3" json:"budgetData,omitempty"`
}

func (x *UpdateBudgetResponse) Reset() {
	*x = UpdateBudgetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBudgetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBudgetResponse) ProtoMessage() {}

func (x *UpdateBudgetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBudgetResponse.ProtoReflect.Descriptor instead.
func (*UpdateBudgetResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{238}
}

func (x *UpdateBudgetResponse) GetBudgetData() *cover.BudgetData {
	if x != nil {
		return x.BudgetData
	}
	return nil
}

type ResolveAWSMarketplaceTokenForOnboardingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationToken string `protobuf:"bytes,1,opt,name=registrationToken,proto3" json:"registrationToken,omitempty"`
}

func (x *ResolveAWSMarketplaceTokenForOnboardingRequest) Reset() {
	*x = ResolveAWSMarketplaceTokenForOnboardingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveAWSMarketplaceTokenForOnboardingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveAWSMarketplaceTokenForOnboardingRequest) ProtoMessage() {}

func (x *ResolveAWSMarketplaceTokenForOnboardingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveAWSMarketplaceTokenForOnboardingRequest.ProtoReflect.Descriptor instead.
func (*ResolveAWSMarketplaceTokenForOnboardingRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{239}
}

func (x *ResolveAWSMarketplaceTokenForOnboardingRequest) GetRegistrationToken() string {
	if x != nil {
		return x.RegistrationToken
	}
	return ""
}

type ResolveAWSMarketplaceTokenForOnboardingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAllowedToOnboard bool   `protobuf:"varint,1,opt,name=isAllowedToOnboard,proto3" json:"isAllowedToOnboard,omitempty"`
	CustomerId         string `protobuf:"bytes,2,opt,name=customerId,proto3" json:"customerId,omitempty"`
}

func (x *ResolveAWSMarketplaceTokenForOnboardingResponse) Reset() {
	*x = ResolveAWSMarketplaceTokenForOnboardingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveAWSMarketplaceTokenForOnboardingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveAWSMarketplaceTokenForOnboardingResponse) ProtoMessage() {}

func (x *ResolveAWSMarketplaceTokenForOnboardingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveAWSMarketplaceTokenForOnboardingResponse.ProtoReflect.Descriptor instead.
func (*ResolveAWSMarketplaceTokenForOnboardingResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{240}
}

func (x *ResolveAWSMarketplaceTokenForOnboardingResponse) GetIsAllowedToOnboard() bool {
	if x != nil {
		return x.IsAllowedToOnboard
	}
	return false
}

func (x *ResolveAWSMarketplaceTokenForOnboardingResponse) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

type GetCustomerSubscriptionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCustomerSubscriptionStatusRequest) Reset() {
	*x = GetCustomerSubscriptionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerSubscriptionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerSubscriptionStatusRequest) ProtoMessage() {}

func (x *GetCustomerSubscriptionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerSubscriptionStatusRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerSubscriptionStatusRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{241}
}

type GetCustomerSubscriptionStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateRegistered     string  `protobuf:"bytes,1,opt,name=dateRegistered,proto3" json:"dateRegistered,omitempty"`
	SubscriptionExpiry string  `protobuf:"bytes,2,opt,name=subscriptionExpiry,proto3" json:"subscriptionExpiry,omitempty"`
	DaysLeft           int32   `protobuf:"varint,3,opt,name=daysLeft,proto3" json:"daysLeft,omitempty"`
	IsSubscribed       bool    `protobuf:"varint,4,opt,name=isSubscribed,proto3" json:"isSubscribed,omitempty"`
	IsExpired          bool    `protobuf:"varint,5,opt,name=isExpired,proto3" json:"isExpired,omitempty"`
	Plan               string  `protobuf:"bytes,6,opt,name=plan,proto3" json:"plan,omitempty"`
	Amount             string  `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	PaymentOption      string  `protobuf:"bytes,8,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	PaymentMethod      string  `protobuf:"bytes,9,opt,name=paymentMethod,proto3" json:"paymentMethod,omitempty"`
	Credit             float64 `protobuf:"fixed64,10,opt,name=credit,proto3" json:"credit,omitempty"`
}

func (x *GetCustomerSubscriptionStatusResponse) Reset() {
	*x = GetCustomerSubscriptionStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerSubscriptionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerSubscriptionStatusResponse) ProtoMessage() {}

func (x *GetCustomerSubscriptionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerSubscriptionStatusResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerSubscriptionStatusResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{242}
}

func (x *GetCustomerSubscriptionStatusResponse) GetDateRegistered() string {
	if x != nil {
		return x.DateRegistered
	}
	return ""
}

func (x *GetCustomerSubscriptionStatusResponse) GetSubscriptionExpiry() string {
	if x != nil {
		return x.SubscriptionExpiry
	}
	return ""
}

func (x *GetCustomerSubscriptionStatusResponse) GetDaysLeft() int32 {
	if x != nil {
		return x.DaysLeft
	}
	return 0
}

func (x *GetCustomerSubscriptionStatusResponse) GetIsSubscribed() bool {
	if x != nil {
		return x.IsSubscribed
	}
	return false
}

func (x *GetCustomerSubscriptionStatusResponse) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *GetCustomerSubscriptionStatusResponse) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *GetCustomerSubscriptionStatusResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GetCustomerSubscriptionStatusResponse) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *GetCustomerSubscriptionStatusResponse) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *GetCustomerSubscriptionStatusResponse) GetCredit() float64 {
	if x != nil {
		return x.Credit
	}
	return 0
}

type CreateProfilingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Role         string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	Usage        string `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
	Intention    string `protobuf:"bytes,4,opt,name=intention,proto3" json:"intention,omitempty"`
	CompanyName  string `protobuf:"bytes,5,opt,name=companyName,proto3" json:"companyName,omitempty"`
	EmailAddress string `protobuf:"bytes,6,opt,name=emailAddress,proto3" json:"emailAddress,omitempty"`
}

func (x *CreateProfilingRequest) Reset() {
	*x = CreateProfilingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProfilingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProfilingRequest) ProtoMessage() {}

func (x *CreateProfilingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProfilingRequest.ProtoReflect.Descriptor instead.
func (*CreateProfilingRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{243}
}

func (x *CreateProfilingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProfilingRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CreateProfilingRequest) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *CreateProfilingRequest) GetIntention() string {
	if x != nil {
		return x.Intention
	}
	return ""
}

func (x *CreateProfilingRequest) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CreateProfilingRequest) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

type CreateProfilingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateProfilingResponse) Reset() {
	*x = CreateProfilingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProfilingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProfilingResponse) ProtoMessage() {}

func (x *CreateProfilingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProfilingResponse.ProtoReflect.Descriptor instead.
func (*CreateProfilingResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{244}
}

type AddInfotoMarketplaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerIdentifier string `protobuf:"bytes,1,opt,name=customerIdentifier,proto3" json:"customerIdentifier,omitempty"`
}

func (x *AddInfotoMarketplaceRequest) Reset() {
	*x = AddInfotoMarketplaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInfotoMarketplaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInfotoMarketplaceRequest) ProtoMessage() {}

func (x *AddInfotoMarketplaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInfotoMarketplaceRequest.ProtoReflect.Descriptor instead.
func (*AddInfotoMarketplaceRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{245}
}

func (x *AddInfotoMarketplaceRequest) GetCustomerIdentifier() string {
	if x != nil {
		return x.CustomerIdentifier
	}
	return ""
}

type AddInfotoMarketplaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddInfotoMarketplaceResponse) Reset() {
	*x = AddInfotoMarketplaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInfotoMarketplaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInfotoMarketplaceResponse) ProtoMessage() {}

func (x *AddInfotoMarketplaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInfotoMarketplaceResponse.ProtoReflect.Descriptor instead.
func (*AddInfotoMarketplaceResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{246}
}

type GetReportSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Required. Start date Format: "YYYYMMDD"
	StartDate string `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate,omitempty"`
	// Required. End date Format: "YYYYMMDD"
	EndDate string `protobuf:"bytes,3,opt,name=endDate,proto3" json:"endDate,omitempty"`
	// Required. Report Type. Valid inputs are: "quarterly", "yearly"
	ReportType string `protobuf:"bytes,4,opt,name=reportType,proto3" json:"reportType,omitempty"`
}

func (x *GetReportSummaryRequest) Reset() {
	*x = GetReportSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportSummaryRequest) ProtoMessage() {}

func (x *GetReportSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetReportSummaryRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{247}
}

func (x *GetReportSummaryRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *GetReportSummaryRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetReportSummaryRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *GetReportSummaryRequest) GetReportType() string {
	if x != nil {
		return x.ReportType
	}
	return ""
}

type GetReportSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostGroupId                       string                                   `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	StartDate                         string                                   `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate                           string                                   `protobuf:"bytes,3,opt,name=endDate,proto3" json:"endDate,omitempty"`
	ExecutiveSummary                  *cover.ExecutiveSummary                  `protobuf:"bytes,4,opt,name=executiveSummary,proto3" json:"executiveSummary,omitempty"`
	OptimizationRecommendationSummary *cover.OptimizationRecommendationSummary `protobuf:"bytes,5,opt,name=optimizationRecommendationSummary,proto3" json:"optimizationRecommendationSummary,omitempty"`
	SavingsSummary                    *cover.SavingsSummary                    `protobuf:"bytes,6,opt,name=savingsSummary,proto3" json:"savingsSummary,omitempty"`
}

func (x *GetReportSummaryResponse) Reset() {
	*x = GetReportSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportSummaryResponse) ProtoMessage() {}

func (x *GetReportSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetReportSummaryResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{248}
}

func (x *GetReportSummaryResponse) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *GetReportSummaryResponse) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetReportSummaryResponse) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *GetReportSummaryResponse) GetExecutiveSummary() *cover.ExecutiveSummary {
	if x != nil {
		return x.ExecutiveSummary
	}
	return nil
}

func (x *GetReportSummaryResponse) GetOptimizationRecommendationSummary() *cover.OptimizationRecommendationSummary {
	if x != nil {
		return x.OptimizationRecommendationSummary
	}
	return nil
}

func (x *GetReportSummaryResponse) GetSavingsSummary() *cover.SavingsSummary {
	if x != nil {
		return x.SavingsSummary
	}
	return nil
}

type ListRecommendationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostgroupId string `protobuf:"bytes,1,opt,name=costgroupId,proto3" json:"costgroupId,omitempty"`
	// Required. Start date of retrieved data. If not set, the default would be today.
	DateRangeStart string `protobuf:"bytes,2,opt,name=dateRangeStart,proto3" json:"dateRangeStart,omitempty"`
	// Required. End date of retrieved data. If not set, the default would be today.
	DateRangeEnd string `protobuf:"bytes,3,opt,name=dateRangeEnd,proto3" json:"dateRangeEnd,omitempty"`
	// Valid inputs are: "all", "aws", "gcp", and  "azure". Default is "all".
	Vendor string `protobuf:"bytes,4,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Valid inputs are: "all", "trustedadvisor", "costexplorer", and  "costoptimizationhub". Default is "all".
	Source string `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	// Valid inputs are: "in-progress", "error", "open","done" and "all"
	OptimizationStatus string `protobuf:"bytes,7,opt,name=optimizationStatus,proto3" json:"optimizationStatus,omitempty"`
	// Valid inputs are: "rate", "usage", and "all". If not set, default is "all".
	Type string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ListRecommendationRequest) Reset() {
	*x = ListRecommendationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecommendationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecommendationRequest) ProtoMessage() {}

func (x *ListRecommendationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecommendationRequest.ProtoReflect.Descriptor instead.
func (*ListRecommendationRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{249}
}

func (x *ListRecommendationRequest) GetCostgroupId() string {
	if x != nil {
		return x.CostgroupId
	}
	return ""
}

func (x *ListRecommendationRequest) GetDateRangeStart() string {
	if x != nil {
		return x.DateRangeStart
	}
	return ""
}

func (x *ListRecommendationRequest) GetDateRangeEnd() string {
	if x != nil {
		return x.DateRangeEnd
	}
	return ""
}

func (x *ListRecommendationRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListRecommendationRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ListRecommendationRequest) GetOptimizationStatus() string {
	if x != nil {
		return x.OptimizationStatus
	}
	return ""
}

func (x *ListRecommendationRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ListRecommendationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecommendationId       string                                     `protobuf:"bytes,1,opt,name=recommendationId,proto3" json:"recommendationId,omitempty"`
	Recommendation         string                                     `protobuf:"bytes,2,opt,name=recommendation,proto3" json:"recommendation,omitempty"`
	Service                string                                     `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	EstimatedMonthlySaving float64                                    `protobuf:"fixed64,4,opt,name=estimatedMonthlySaving,proto3" json:"estimatedMonthlySaving,omitempty"`
	EstimatedMonthlyCost   float64                                    `protobuf:"fixed64,5,opt,name=estimatedMonthlyCost,proto3" json:"estimatedMonthlyCost,omitempty"`
	Scoring                string                                     `protobuf:"bytes,6,opt,name=scoring,proto3" json:"scoring,omitempty"`
	Vendor                 string                                     `protobuf:"bytes,7,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Category               string                                     `protobuf:"bytes,8,opt,name=category,proto3" json:"category,omitempty"`
	OptimizationStatus     string                                     `protobuf:"bytes,9,opt,name=optimizationStatus,proto3" json:"optimizationStatus,omitempty"`
	ErrorMessage           string                                     `protobuf:"bytes,10,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	AccountId              string                                     `protobuf:"bytes,11,opt,name=accountId,proto3" json:"accountId,omitempty"`
	AccountName            string                                     `protobuf:"bytes,12,opt,name=accountName,proto3" json:"accountName,omitempty"`
	InstanceName           string                                     `protobuf:"bytes,13,opt,name=instanceName,proto3" json:"instanceName,omitempty"`
	InstanceId             string                                     `protobuf:"bytes,14,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	InstanceType           string                                     `protobuf:"bytes,15,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	Region                 string                                     `protobuf:"bytes,16,opt,name=region,proto3" json:"region,omitempty"`
	Commitment             float64                                    `protobuf:"fixed64,17,opt,name=commitment,proto3" json:"commitment,omitempty"`
	SpType                 string                                     `protobuf:"bytes,18,opt,name=spType,proto3" json:"spType,omitempty"`
	NumberToPurchase       int64                                      `protobuf:"varint,19,opt,name=numberToPurchase,proto3" json:"numberToPurchase,omitempty"`
	RiType                 string                                     `protobuf:"bytes,20,opt,name=riType,proto3" json:"riType,omitempty"`
	Type                   string                                     `protobuf:"bytes,21,opt,name=type,proto3" json:"type,omitempty"`
	Source                 string                                     `protobuf:"bytes,22,opt,name=source,proto3" json:"source,omitempty"`
	DateRecommended        string                                     `protobuf:"bytes,23,opt,name=dateRecommended,proto3" json:"dateRecommended,omitempty"`
	RecommendationGroup    string                                     `protobuf:"bytes,24,opt,name=recommendationGroup,proto3" json:"recommendationGroup,omitempty"`
	LastUpdatedAt          string                                     `protobuf:"bytes,25,opt,name=lastUpdatedAt,proto3" json:"lastUpdatedAt,omitempty"`
	PurchaseOption         *ListRecommendationResponse_PurchaseOption `protobuf:"bytes,26,opt,name=purchaseOption,proto3" json:"purchaseOption,omitempty"`
}

func (x *ListRecommendationResponse) Reset() {
	*x = ListRecommendationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecommendationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecommendationResponse) ProtoMessage() {}

func (x *ListRecommendationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecommendationResponse.ProtoReflect.Descriptor instead.
func (*ListRecommendationResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{250}
}

func (x *ListRecommendationResponse) GetRecommendationId() string {
	if x != nil {
		return x.RecommendationId
	}
	return ""
}

func (x *ListRecommendationResponse) GetRecommendation() string {
	if x != nil {
		return x.Recommendation
	}
	return ""
}

func (x *ListRecommendationResponse) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ListRecommendationResponse) GetEstimatedMonthlySaving() float64 {
	if x != nil {
		return x.EstimatedMonthlySaving
	}
	return 0
}

func (x *ListRecommendationResponse) GetEstimatedMonthlyCost() float64 {
	if x != nil {
		return x.EstimatedMonthlyCost
	}
	return 0
}

func (x *ListRecommendationResponse) GetScoring() string {
	if x != nil {
		return x.Scoring
	}
	return ""
}

func (x *ListRecommendationResponse) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListRecommendationResponse) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ListRecommendationResponse) GetOptimizationStatus() string {
	if x != nil {
		return x.OptimizationStatus
	}
	return ""
}

func (x *ListRecommendationResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ListRecommendationResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListRecommendationResponse) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *ListRecommendationResponse) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *ListRecommendationResponse) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ListRecommendationResponse) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *ListRecommendationResponse) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListRecommendationResponse) GetCommitment() float64 {
	if x != nil {
		return x.Commitment
	}
	return 0
}

func (x *ListRecommendationResponse) GetSpType() string {
	if x != nil {
		return x.SpType
	}
	return ""
}

func (x *ListRecommendationResponse) GetNumberToPurchase() int64 {
	if x != nil {
		return x.NumberToPurchase
	}
	return 0
}

func (x *ListRecommendationResponse) GetRiType() string {
	if x != nil {
		return x.RiType
	}
	return ""
}

func (x *ListRecommendationResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListRecommendationResponse) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ListRecommendationResponse) GetDateRecommended() string {
	if x != nil {
		return x.DateRecommended
	}
	return ""
}

func (x *ListRecommendationResponse) GetRecommendationGroup() string {
	if x != nil {
		return x.RecommendationGroup
	}
	return ""
}

func (x *ListRecommendationResponse) GetLastUpdatedAt() string {
	if x != nil {
		return x.LastUpdatedAt
	}
	return ""
}

func (x *ListRecommendationResponse) GetPurchaseOption() *ListRecommendationResponse_PurchaseOption {
	if x != nil {
		return x.PurchaseOption
	}
	return nil
}

type GetRecommendationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CostGroupId string `protobuf:"bytes,2,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Valid inputs are: "30days", "60days". and "90days". Default is "30days".
	PeriodOption string `protobuf:"bytes,3,opt,name=periodOption,proto3" json:"periodOption,omitempty"`
}

func (x *GetRecommendationRequest) Reset() {
	*x = GetRecommendationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationRequest) ProtoMessage() {}

func (x *GetRecommendationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationRequest.ProtoReflect.Descriptor instead.
func (*GetRecommendationRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{251}
}

func (x *GetRecommendationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetRecommendationRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *GetRecommendationRequest) GetPeriodOption() string {
	if x != nil {
		return x.PeriodOption
	}
	return ""
}

type GetRecommendationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecommendationData *cover.AWSRecommendations `protobuf:"bytes,1,opt,name=recommendationData,proto3" json:"recommendationData,omitempty"`
}

func (x *GetRecommendationResponse) Reset() {
	*x = GetRecommendationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationResponse) ProtoMessage() {}

func (x *GetRecommendationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationResponse.ProtoReflect.Descriptor instead.
func (*GetRecommendationResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{252}
}

func (x *GetRecommendationResponse) GetRecommendationData() *cover.AWSRecommendations {
	if x != nil {
		return x.RecommendationData
	}
	return nil
}

type ExecuteOptimizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecommendationId string `protobuf:"bytes,1,opt,name=recommendationId,proto3" json:"recommendationId,omitempty"`
}

func (x *ExecuteOptimizationRequest) Reset() {
	*x = ExecuteOptimizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteOptimizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteOptimizationRequest) ProtoMessage() {}

func (x *ExecuteOptimizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteOptimizationRequest.ProtoReflect.Descriptor instead.
func (*ExecuteOptimizationRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{253}
}

func (x *ExecuteOptimizationRequest) GetRecommendationId() string {
	if x != nil {
		return x.RecommendationId
	}
	return ""
}

type ExecuteOptimizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecuteOptimizationResponse) Reset() {
	*x = ExecuteOptimizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteOptimizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteOptimizationResponse) ProtoMessage() {}

func (x *ExecuteOptimizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteOptimizationResponse.ProtoReflect.Descriptor instead.
func (*ExecuteOptimizationResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{254}
}

type MarkAsExecutedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *MarkAsExecutedRequest) Reset() {
	*x = MarkAsExecutedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkAsExecutedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsExecutedRequest) ProtoMessage() {}

func (x *MarkAsExecutedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsExecutedRequest.ProtoReflect.Descriptor instead.
func (*MarkAsExecutedRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{255}
}

func (x *MarkAsExecutedRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type MarkAsExecutedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarkAsExecutedResponse) Reset() {
	*x = MarkAsExecutedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkAsExecutedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsExecutedResponse) ProtoMessage() {}

func (x *MarkAsExecutedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsExecutedResponse.ProtoReflect.Descriptor instead.
func (*MarkAsExecutedResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{256}
}

type UndoExecutedRecommendationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *UndoExecutedRecommendationRequest) Reset() {
	*x = UndoExecutedRecommendationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoExecutedRecommendationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoExecutedRecommendationRequest) ProtoMessage() {}

func (x *UndoExecutedRecommendationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoExecutedRecommendationRequest.ProtoReflect.Descriptor instead.
func (*UndoExecutedRecommendationRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{257}
}

func (x *UndoExecutedRecommendationRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type UndoExecutedRecommendationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UndoExecutedRecommendationResponse) Reset() {
	*x = UndoExecutedRecommendationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoExecutedRecommendationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoExecutedRecommendationResponse) ProtoMessage() {}

func (x *UndoExecutedRecommendationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoExecutedRecommendationResponse.ProtoReflect.Descriptor instead.
func (*UndoExecutedRecommendationResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{258}
}

type OptimizationHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostgroupId string `protobuf:"bytes,1,opt,name=costgroupId,proto3" json:"costgroupId,omitempty"`
	// Required. Start date of retrieved data. If not set, default is three months past.
	DateRangeStart string `protobuf:"bytes,2,opt,name=dateRangeStart,proto3" json:"dateRangeStart,omitempty"`
	// Required. End date of retrieved data.
	DateRangeEnd string `protobuf:"bytes,3,opt,name=dateRangeEnd,proto3" json:"dateRangeEnd,omitempty"`
	// Required. Valid inputs are: "all", "aws", "gcp", and  "azure".
	Vendor string `protobuf:"bytes,4,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Valid inputs are: "all", "trusted-advisor", "cost-explorer", and  "cost-optimization-hub". Default is "All".
	Source string `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	// Valid inputs are: "daily", "monthly". and "yearly". Default is "monthly".
	PeriodOption string `protobuf:"bytes,6,opt,name=periodOption,proto3" json:"periodOption,omitempty"`
}

func (x *OptimizationHistoryRequest) Reset() {
	*x = OptimizationHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptimizationHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizationHistoryRequest) ProtoMessage() {}

func (x *OptimizationHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizationHistoryRequest.ProtoReflect.Descriptor instead.
func (*OptimizationHistoryRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{259}
}

func (x *OptimizationHistoryRequest) GetCostgroupId() string {
	if x != nil {
		return x.CostgroupId
	}
	return ""
}

func (x *OptimizationHistoryRequest) GetDateRangeStart() string {
	if x != nil {
		return x.DateRangeStart
	}
	return ""
}

func (x *OptimizationHistoryRequest) GetDateRangeEnd() string {
	if x != nil {
		return x.DateRangeEnd
	}
	return ""
}

func (x *OptimizationHistoryRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *OptimizationHistoryRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *OptimizationHistoryRequest) GetPeriodOption() string {
	if x != nil {
		return x.PeriodOption
	}
	return ""
}

type OptimizationHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutedRecommendationDetails []*cover.ExecutedRecommendationDetails `protobuf:"bytes,2,rep,name=executedRecommendationDetails,proto3" json:"executedRecommendationDetails,omitempty"`
}

func (x *OptimizationHistoryResponse) Reset() {
	*x = OptimizationHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptimizationHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizationHistoryResponse) ProtoMessage() {}

func (x *OptimizationHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizationHistoryResponse.ProtoReflect.Descriptor instead.
func (*OptimizationHistoryResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{260}
}

func (x *OptimizationHistoryResponse) GetExecutedRecommendationDetails() []*cover.ExecutedRecommendationDetails {
	if x != nil {
		return x.ExecutedRecommendationDetails
	}
	return nil
}

type SetCostGroupEventIndicatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Required. Only anomaly is supported as of now
	Anomaly bool `protobuf:"varint,2,opt,name=anomaly,proto3" json:"anomaly,omitempty"`
	// Optional. Temporary storage of cost group creation UI preference
	VisualBuilder bool `protobuf:"varint,3,opt,name=visualBuilder,proto3" json:"visualBuilder,omitempty"`
}

func (x *SetCostGroupEventIndicatorRequest) Reset() {
	*x = SetCostGroupEventIndicatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCostGroupEventIndicatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCostGroupEventIndicatorRequest) ProtoMessage() {}

func (x *SetCostGroupEventIndicatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCostGroupEventIndicatorRequest.ProtoReflect.Descriptor instead.
func (*SetCostGroupEventIndicatorRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{261}
}

func (x *SetCostGroupEventIndicatorRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *SetCostGroupEventIndicatorRequest) GetAnomaly() bool {
	if x != nil {
		return x.Anomaly
	}
	return false
}

func (x *SetCostGroupEventIndicatorRequest) GetVisualBuilder() bool {
	if x != nil {
		return x.VisualBuilder
	}
	return false
}

type SetCostGroupEventIndicatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostGroupId    string                `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	EventIndicator *cover.EventIndicator `protobuf:"bytes,2,opt,name=eventIndicator,proto3" json:"eventIndicator,omitempty"`
}

func (x *SetCostGroupEventIndicatorResponse) Reset() {
	*x = SetCostGroupEventIndicatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCostGroupEventIndicatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCostGroupEventIndicatorResponse) ProtoMessage() {}

func (x *SetCostGroupEventIndicatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCostGroupEventIndicatorResponse.ProtoReflect.Descriptor instead.
func (*SetCostGroupEventIndicatorResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{262}
}

func (x *SetCostGroupEventIndicatorResponse) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *SetCostGroupEventIndicatorResponse) GetEventIndicator() *cover.EventIndicator {
	if x != nil {
		return x.EventIndicator
	}
	return nil
}

type SetCostGroupAnomalyOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cost Group Id.
	CostGroupId string `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	// Required
	Threshold float32 `protobuf:"fixed32,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// Required. When set to true, the threshold is a percentage to the actual cost. Otherwise, it is a fixed amount.
	IsPercentage bool `protobuf:"varint,3,opt,name=isPercentage,proto3" json:"isPercentage,omitempty"`
	// Optional. The number of past months to be used in training the model. Note: This will affect the results of anomaly detection. Default and max is 9 while min is 1.
	PastDataInMonths int64 `protobuf:"varint,4,opt,name=pastDataInMonths,proto3" json:"pastDataInMonths,omitempty"`
}

func (x *SetCostGroupAnomalyOptionsRequest) Reset() {
	*x = SetCostGroupAnomalyOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCostGroupAnomalyOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCostGroupAnomalyOptionsRequest) ProtoMessage() {}

func (x *SetCostGroupAnomalyOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCostGroupAnomalyOptionsRequest.ProtoReflect.Descriptor instead.
func (*SetCostGroupAnomalyOptionsRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{263}
}

func (x *SetCostGroupAnomalyOptionsRequest) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *SetCostGroupAnomalyOptionsRequest) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *SetCostGroupAnomalyOptionsRequest) GetIsPercentage() bool {
	if x != nil {
		return x.IsPercentage
	}
	return false
}

func (x *SetCostGroupAnomalyOptionsRequest) GetPastDataInMonths() int64 {
	if x != nil {
		return x.PastDataInMonths
	}
	return 0
}

type SetCostGroupAnomalyOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostGroupId    string                `protobuf:"bytes,1,opt,name=costGroupId,proto3" json:"costGroupId,omitempty"`
	AnomalyOptions *cover.AnomalyOptions `protobuf:"bytes,2,opt,name=anomalyOptions,proto3" json:"anomalyOptions,omitempty"`
}

func (x *SetCostGroupAnomalyOptionsResponse) Reset() {
	*x = SetCostGroupAnomalyOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCostGroupAnomalyOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCostGroupAnomalyOptionsResponse) ProtoMessage() {}

func (x *SetCostGroupAnomalyOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCostGroupAnomalyOptionsResponse.ProtoReflect.Descriptor instead.
func (*SetCostGroupAnomalyOptionsResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{264}
}

func (x *SetCostGroupAnomalyOptionsResponse) GetCostGroupId() string {
	if x != nil {
		return x.CostGroupId
	}
	return ""
}

func (x *SetCostGroupAnomalyOptionsResponse) GetAnomalyOptions() *cover.AnomalyOptions {
	if x != nil {
		return x.AnomalyOptions
	}
	return nil
}

type SetOrgFiscalMonthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Fiscal month. Valid inputs are: "01 - 12"
	FiscalMonth string `protobuf:"bytes,1,opt,name=fiscalMonth,proto3" json:"fiscalMonth,omitempty"`
}

func (x *SetOrgFiscalMonthRequest) Reset() {
	*x = SetOrgFiscalMonthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrgFiscalMonthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrgFiscalMonthRequest) ProtoMessage() {}

func (x *SetOrgFiscalMonthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrgFiscalMonthRequest.ProtoReflect.Descriptor instead.
func (*SetOrgFiscalMonthRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{265}
}

func (x *SetOrgFiscalMonthRequest) GetFiscalMonth() string {
	if x != nil {
		return x.FiscalMonth
	}
	return ""
}

type SetOrgFiscalMonthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FiscalMonth string `protobuf:"bytes,1,opt,name=fiscalMonth,proto3" json:"fiscalMonth,omitempty"`
}

func (x *SetOrgFiscalMonthResponse) Reset() {
	*x = SetOrgFiscalMonthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrgFiscalMonthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrgFiscalMonthResponse) ProtoMessage() {}

func (x *SetOrgFiscalMonthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrgFiscalMonthResponse.ProtoReflect.Descriptor instead.
func (*SetOrgFiscalMonthResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{266}
}

func (x *SetOrgFiscalMonthResponse) GetFiscalMonth() string {
	if x != nil {
		return x.FiscalMonth
	}
	return ""
}

type GetOrgFiscalMonthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetOrgFiscalMonthRequest) Reset() {
	*x = GetOrgFiscalMonthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgFiscalMonthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgFiscalMonthRequest) ProtoMessage() {}

func (x *GetOrgFiscalMonthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgFiscalMonthRequest.ProtoReflect.Descriptor instead.
func (*GetOrgFiscalMonthRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{267}
}

type GetOrgFiscalMonthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FiscalMonth    string `protobuf:"bytes,1,opt,name=fiscalMonth,proto3" json:"fiscalMonth,omitempty"`
	DateRegistered string `protobuf:"bytes,2,opt,name=dateRegistered,proto3" json:"dateRegistered,omitempty"`
}

func (x *GetOrgFiscalMonthResponse) Reset() {
	*x = GetOrgFiscalMonthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgFiscalMonthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgFiscalMonthResponse) ProtoMessage() {}

func (x *GetOrgFiscalMonthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgFiscalMonthResponse.ProtoReflect.Descriptor instead.
func (*GetOrgFiscalMonthResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{268}
}

func (x *GetOrgFiscalMonthResponse) GetFiscalMonth() string {
	if x != nil {
		return x.FiscalMonth
	}
	return ""
}

func (x *GetOrgFiscalMonthResponse) GetDateRegistered() string {
	if x != nil {
		return x.DateRegistered
	}
	return ""
}

type TransferOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The target account to be transferred.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Required. The region of the target account.
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// Optional. Alphaus payer account to be used for the transfer.
	Payer string `protobuf:"bytes,3,opt,name=payer,proto3" json:"payer,omitempty"`
	// Optional. The org id of the payer account.
	OrgId string `protobuf:"bytes,4,opt,name=orgId,proto3" json:"orgId,omitempty"`
}

func (x *TransferOrganizationRequest) Reset() {
	*x = TransferOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOrganizationRequest) ProtoMessage() {}

func (x *TransferOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOrganizationRequest.ProtoReflect.Descriptor instead.
func (*TransferOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{269}
}

func (x *TransferOrganizationRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *TransferOrganizationRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *TransferOrganizationRequest) GetPayer() string {
	if x != nil {
		return x.Payer
	}
	return ""
}

func (x *TransferOrganizationRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type TransferOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *TransferOrganizationResponse) Reset() {
	*x = TransferOrganizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOrganizationResponse) ProtoMessage() {}

func (x *TransferOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOrganizationResponse.ProtoReflect.Descriptor instead.
func (*TransferOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{270}
}

func (x *TransferOrganizationResponse) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type UpdateCostGroupCreationUIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseNewCostGroupCreationUI bool `protobuf:"varint,1,opt,name=useNewCostGroupCreationUI,proto3" json:"useNewCostGroupCreationUI,omitempty"`
}

func (x *UpdateCostGroupCreationUIRequest) Reset() {
	*x = UpdateCostGroupCreationUIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostGroupCreationUIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostGroupCreationUIRequest) ProtoMessage() {}

func (x *UpdateCostGroupCreationUIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostGroupCreationUIRequest.ProtoReflect.Descriptor instead.
func (*UpdateCostGroupCreationUIRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{271}
}

func (x *UpdateCostGroupCreationUIRequest) GetUseNewCostGroupCreationUI() bool {
	if x != nil {
		return x.UseNewCostGroupCreationUI
	}
	return false
}

type UpdateCostGroupCreationUIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserData *cover.UserData `protobuf:"bytes,1,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *UpdateCostGroupCreationUIResponse) Reset() {
	*x = UpdateCostGroupCreationUIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostGroupCreationUIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostGroupCreationUIResponse) ProtoMessage() {}

func (x *UpdateCostGroupCreationUIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostGroupCreationUIResponse.ProtoReflect.Descriptor instead.
func (*UpdateCostGroupCreationUIResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{272}
}

func (x *UpdateCostGroupCreationUIResponse) GetUserData() *cover.UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

type ListUnitTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListUnitTypesRequest) Reset() {
	*x = ListUnitTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnitTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitTypesRequest) ProtoMessage() {}

func (x *ListUnitTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitTypesRequest.ProtoReflect.Descriptor instead.
func (*ListUnitTypesRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{273}
}

type ListUnitTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitCostData []*cover.UnitCostData `protobuf:"bytes,1,rep,name=unitCostData,proto3" json:"unitCostData,omitempty"`
}

func (x *ListUnitTypesResponse) Reset() {
	*x = ListUnitTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnitTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitTypesResponse) ProtoMessage() {}

func (x *ListUnitTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitTypesResponse.ProtoReflect.Descriptor instead.
func (*ListUnitTypesResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{274}
}

func (x *ListUnitTypesResponse) GetUnitCostData() []*cover.UnitCostData {
	if x != nil {
		return x.UnitCostData
	}
	return nil
}

type CreateUnitTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitName    string            `protobuf:"bytes,1,opt,name=unitName,proto3" json:"unitName,omitempty"`
	UnitItems   []*cover.UnitItem `protobuf:"bytes,2,rep,name=unitItems,proto3" json:"unitItems,omitempty"`
	Description string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateUnitTypeRequest) Reset() {
	*x = CreateUnitTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUnitTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUnitTypeRequest) ProtoMessage() {}

func (x *CreateUnitTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUnitTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateUnitTypeRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{275}
}

func (x *CreateUnitTypeRequest) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *CreateUnitTypeRequest) GetUnitItems() []*cover.UnitItem {
	if x != nil {
		return x.UnitItems
	}
	return nil
}

func (x *CreateUnitTypeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateUnitTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitCostData *cover.UnitCostData `protobuf:"bytes,1,opt,name=unitCostData,proto3" json:"unitCostData,omitempty"`
}

func (x *CreateUnitTypeResponse) Reset() {
	*x = CreateUnitTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUnitTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUnitTypeResponse) ProtoMessage() {}

func (x *CreateUnitTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUnitTypeResponse.ProtoReflect.Descriptor instead.
func (*CreateUnitTypeResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{276}
}

func (x *CreateUnitTypeResponse) GetUnitCostData() *cover.UnitCostData {
	if x != nil {
		return x.UnitCostData
	}
	return nil
}

type GetUnitTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Unit Type Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetUnitTypeRequest) Reset() {
	*x = GetUnitTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnitTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnitTypeRequest) ProtoMessage() {}

func (x *GetUnitTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnitTypeRequest.ProtoReflect.Descriptor instead.
func (*GetUnitTypeRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{277}
}

func (x *GetUnitTypeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetUnitTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitCostData *cover.UnitCostData `protobuf:"bytes,1,opt,name=unitCostData,proto3" json:"unitCostData,omitempty"`
}

func (x *GetUnitTypeResponse) Reset() {
	*x = GetUnitTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnitTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnitTypeResponse) ProtoMessage() {}

func (x *GetUnitTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnitTypeResponse.ProtoReflect.Descriptor instead.
func (*GetUnitTypeResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{278}
}

func (x *GetUnitTypeResponse) GetUnitCostData() *cover.UnitCostData {
	if x != nil {
		return x.UnitCostData
	}
	return nil
}

type UpdateUnitTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Unit Type Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional
	UnitName string `protobuf:"bytes,2,opt,name=unitName,proto3" json:"unitName,omitempty"`
	// Optional
	UnitItems []*cover.UnitItem `protobuf:"bytes,3,rep,name=unitItems,proto3" json:"unitItems,omitempty"`
	// Optional
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateUnitTypeRequest) Reset() {
	*x = UpdateUnitTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUnitTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUnitTypeRequest) ProtoMessage() {}

func (x *UpdateUnitTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUnitTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateUnitTypeRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{279}
}

func (x *UpdateUnitTypeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateUnitTypeRequest) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *UpdateUnitTypeRequest) GetUnitItems() []*cover.UnitItem {
	if x != nil {
		return x.UnitItems
	}
	return nil
}

func (x *UpdateUnitTypeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateUnitTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitCostData *cover.UnitCostData `protobuf:"bytes,1,opt,name=unitCostData,proto3" json:"unitCostData,omitempty"`
}

func (x *UpdateUnitTypeResponse) Reset() {
	*x = UpdateUnitTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUnitTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUnitTypeResponse) ProtoMessage() {}

func (x *UpdateUnitTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUnitTypeResponse.ProtoReflect.Descriptor instead.
func (*UpdateUnitTypeResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{280}
}

func (x *UpdateUnitTypeResponse) GetUnitCostData() *cover.UnitCostData {
	if x != nil {
		return x.UnitCostData
	}
	return nil
}

type DeleteUnitTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Unit Type Id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteUnitTypeRequest) Reset() {
	*x = DeleteUnitTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUnitTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUnitTypeRequest) ProtoMessage() {}

func (x *DeleteUnitTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUnitTypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteUnitTypeRequest) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{281}
}

func (x *DeleteUnitTypeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteUnitTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteUnitTypeResponse) Reset() {
	*x = DeleteUnitTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUnitTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUnitTypeResponse) ProtoMessage() {}

func (x *DeleteUnitTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUnitTypeResponse.ProtoReflect.Descriptor instead.
func (*DeleteUnitTypeResponse) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{282}
}

func (x *DeleteUnitTypeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListRecommendationResponse_PurchaseOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpType            string  `protobuf:"bytes,1,opt,name=spType,proto3" json:"spType,omitempty"`
	OfferingClass     string  `protobuf:"bytes,2,opt,name=offeringClass,proto3" json:"offeringClass,omitempty"`
	Commitment        float64 `protobuf:"fixed64,3,opt,name=commitment,proto3" json:"commitment,omitempty"`
	NumberToPurchase  int64   `protobuf:"varint,4,opt,name=numberToPurchase,proto3" json:"numberToPurchase,omitempty"`
	PaymentOption     string  `protobuf:"bytes,5,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	Term              string  `protobuf:"bytes,6,opt,name=term,proto3" json:"term,omitempty"`
	CurrentGeneration bool    `protobuf:"varint,7,opt,name=currentGeneration,proto3" json:"currentGeneration,omitempty"`
	ServiceType       string  `protobuf:"bytes,8,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
	UpfrontCost       float64 `protobuf:"fixed64,9,opt,name=upfrontCost,proto3" json:"upfrontCost,omitempty"`
}

func (x *ListRecommendationResponse_PurchaseOption) Reset() {
	*x = ListRecommendationResponse_PurchaseOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cover_v1_cover_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecommendationResponse_PurchaseOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecommendationResponse_PurchaseOption) ProtoMessage() {}

func (x *ListRecommendationResponse_PurchaseOption) ProtoReflect() protoreflect.Message {
	mi := &file_cover_v1_cover_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecommendationResponse_PurchaseOption.ProtoReflect.Descriptor instead.
func (*ListRecommendationResponse_PurchaseOption) Descriptor() ([]byte, []int) {
	return file_cover_v1_cover_proto_rawDescGZIP(), []int{250, 0}
}

func (x *ListRecommendationResponse_PurchaseOption) GetSpType() string {
	if x != nil {
		return x.SpType
	}
	return ""
}

func (x *ListRecommendationResponse_PurchaseOption) GetOfferingClass() string {
	if x != nil {
		return x.OfferingClass
	}
	return ""
}

func (x *ListRecommendationResponse_PurchaseOption) GetCommitment() float64 {
	if x != nil {
		return x.Commitment
	}
	return 0
}

func (x *ListRecommendationResponse_PurchaseOption) GetNumberToPurchase() int64 {
	if x != nil {
		return x.NumberToPurchase
	}
	return 0
}

func (x *ListRecommendationResponse_PurchaseOption) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *ListRecommendationResponse_PurchaseOption) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *ListRecommendationResponse_PurchaseOption) GetCurrentGeneration() bool {
	if x != nil {
		return x.CurrentGeneration
	}
	return false
}

func (x *ListRecommendationResponse_PurchaseOption) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *ListRecommendationResponse_PurchaseOption) GetUpfrontCost() float64 {
	if x != nil {
		return x.UpfrontCost
	}
	return 0
}

var File_cover_v1_cover_proto protoreflect.FileDescriptor

var file_cover_v1_cover_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x2a, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61,
	0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x63,
	0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x63,
	0x6f, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x26, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x6f, 0x0a, 0x11, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x72, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x22, 0x4d, 0x0a, 0x12, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x6d, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x41, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22,
	0x2c, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xf3, 0x01,
	0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68,
	0x30, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x30, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x30, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x4f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x33,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x51, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x59, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x31, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x22, 0x53, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x2b, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x2e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0x52, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x33, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x61, 0x69, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x68, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65,
	0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x54, 0x0a, 0x19, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x31, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x22, 0x53, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x37, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x22, 0x55, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65,
	0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x55, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x1c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x2e, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x2e, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x22, 0x4d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65,
	0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x64, 0x22, 0x51, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x76,
	0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x56, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x09, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0x2c, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x2c,
	0x0a, 0x12, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x13,
	0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x16,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0xd3,
	0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x64, 0x22, 0x68, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22, 0x51, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22,
	0xbf, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x57, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65,
	0x77, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x22, 0x75, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x22,
	0x57, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x55, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x45, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x46, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6e,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x22, 0x6a,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x62, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0x49,
	0x0a, 0x0d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x2b, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x64, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x73, 0x69,
	0x64, 0x65, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x69, 0x64, 0x65, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x35, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x65,
	0x4d, 0x65, 0x6e, 0x75, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x1a, 0x41, 0x64, 0x64,
	0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22,
	0x35, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22,
	0x38, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x6e,
	0x75, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x61, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x63,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x16, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x0d, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x63,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x31, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x22,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x22, 0x52, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x43,
	0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x6a, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x58, 0x0a,
	0x1c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x1d, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x58, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x1d,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x38, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x55, 0x72, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x1a,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x86, 0x04,
	0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x5a, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x22, 0x54, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x4c,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x39, 0x0a, 0x1b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2e, 0x0a,
	0x12, 0x77, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x61, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x14, 0x61, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x53, 0x0a, 0x0a, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x6e, 0x64, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb9, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x61,
	0x77, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x14,
	0x61, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x15,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x23, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x80, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x22, 0xe6, 0x05, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5a,
	0x65, 0x72, 0x6f, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x55, 0x0a, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x67, 0x63, 0x70, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x47, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x67, 0x63, 0x70,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x63, 0x73, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x73, 0x70, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x63, 0x73, 0x70,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x22, 0xa3, 0x02, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x74,
	0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67,
	0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x4b, 0x65,
	0x79, 0x22, 0x8d, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x50, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x22, 0xdd, 0x03, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x4a, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a,
	0x0a, 0x74, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x54, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67,
	0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x4b, 0x65,
	0x79, 0x22, 0xa8, 0x02, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x73,
	0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43,
	0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x22, 0xe0, 0x03, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x4a, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x74,
	0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a,
	0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x4b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x22,
	0xc1, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x60, 0x0a, 0x0a, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x84, 0x03, 0x0a, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3e,
	0x0a, 0x08, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x47, 0x0a, 0x23, 0x47, 0x65,
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x19, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x1a, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x19,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22,
	0x55, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x60, 0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x64, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x50, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4d,
	0x0a, 0x13, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2a, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x2b, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x4e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4a, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x61,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x74, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x27, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0xb6, 0x04, 0x0a, 0x0a, 0x46, 0x65,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x75, 0x6e, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x75, 0x6e, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x65,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x29, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x65, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x65, 0x65, 0x49, 0x64, 0x22, 0x72, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x65, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x93, 0x01, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73,
	0x22, 0x79, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x35, 0x0a, 0x03,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x61, 0x6e, 0x64, 0x1a, 0x36, 0x0a, 0x08, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd, 0x02, 0x0a, 0x14,
	0x43, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x12, 0x39, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x14,
	0x43, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x12, 0x39, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x17, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x39, 0x0a, 0x09, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x4f, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0x33, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xab, 0x07, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x65,
	0x55, 0x6e, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x72, 0x75, 0x65, 0x55, 0x6e, 0x62, 0x6c, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x62, 0x6c, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x75,
	0x6e, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x72, 0x74,
	0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4f, 0x6e, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x6e, 0x75, 0x73,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x72, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x51, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x40, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xdc, 0x03, 0x0a, 0x0e, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f,
	0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x95, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x30, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3e,
	0x0a, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x30, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22, 0xf7,
	0x02, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x67,
	0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a,
	0x67, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3d, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0xb0, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x67, 0x63, 0x70, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x67, 0x63, 0x70,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0a,
	0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x67, 0x63, 0x70, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x67, 0x63, 0x70, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x61,
	0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a,
	0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x17, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x71, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x22, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x2c, 0x0a,
	0x14, 0x41, 0x64, 0x64, 0x4d, 0x70, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x70, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x70, 0x6e, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x34, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x74,
	0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x50, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc8, 0x01,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72,
	0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x51, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x28, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x24, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x58, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x28, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x57, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x22, 0x59, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x5d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x26,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x75, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x22, 0x60, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0xff, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x09, 0x61, 0x77, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x52, 0x09, 0x61, 0x77, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0b,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x52, 0x0b, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3a,
	0x0a, 0x09, 0x67, 0x63, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x63, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52,
	0x09, 0x67, 0x63, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0xc7, 0x02, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5d, 0x0a, 0x12, 0x61, 0x77, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x77, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x61, 0x77,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x63, 0x0a, 0x14, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x14, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x12, 0x67, 0x63, 0x70, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x63, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x12, 0x67, 0x63, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x78, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6f, 0x6d, 0x61,
	0x6c, 0x79, 0x69, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xdd,
	0x02, 0x0a, 0x0b, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x61, 0x6e, 0x6f, 0x6d,
	0x61, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xbc,
	0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a,
	0x28, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x24, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x17, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3c, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x24, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22,
	0x2f, 0x0a, 0x1d, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6f,
	0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x91, 0x02, 0x0a, 0x10, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6f, 0x6d,
	0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xd7, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c,
	0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x16, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d,
	0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x2d, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x46, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x6c, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x54, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x62, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x54, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x62, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x0a, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x55, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x62,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x41, 0x57, 0x53, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x2f, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x57, 0x53, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x4f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x26, 0x0a,
	0x24, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xed, 0x02, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x79, 0x73, 0x4c,
	0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x79, 0x73, 0x4c,
	0x65, 0x66, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a,
	0x1b, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x1e, 0x0a, 0x1c,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x95, 0x03, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x82, 0x01, 0x0a, 0x21, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x21, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x49, 0x0a, 0x0e, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xfd, 0x01, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb0, 0x0a, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x12,
	0x32, 0x0a, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54,
	0x6f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x69, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x63, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc6, 0x02, 0x0a, 0x0e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54,
	0x6f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x70, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x72, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x12,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x57, 0x53,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x1a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x1d, 0x0a,
	0x1b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x15,
	0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x33, 0x0a, 0x21, 0x55, 0x6e, 0x64, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x55, 0x6e, 0x64, 0x6f, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x1a, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x1b,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x1d, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x1d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6e,
	0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x76, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x22,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0xb3, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x49,
	0x0a, 0x0e, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x6f, 0x6d, 0x61,
	0x6c, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x61, 0x6e, 0x6f, 0x6d, 0x61,
	0x6c, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x18, 0x53, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x46, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x73, 0x63,
	0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0x3d, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x46, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x73, 0x63, 0x61,
	0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x46, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x65, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x69, 0x73, 0x63,
	0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x22, 0x79, 0x0a, 0x1b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x60, 0x0a, 0x20,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x49, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x75, 0x73, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x49, 0x22, 0x5c,
	0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x16, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x0c, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09,
	0x75, 0x6e, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x2a, 0x3f, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xcb, 0xad, 0x01,
	0x0a, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x77, 0x0a, 0x0a, 0x4f, 0x6e, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x4f, 0x72, 0x67, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x12, 0x7c, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x7e,
	0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x75,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x6c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x12, 0x97, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x63, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xa4, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a,
	0x1a, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x69, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x73,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x0e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x1a, 0x0d, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x2f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x7b, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x1a, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x2f, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x1a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x7b, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x1a, 0x0b, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x1a, 0x0c, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x8b, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x69, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x2f,
	0x6d, 0x61, 0x69, 0x6e, 0x76, 0x69, 0x65, 0x77, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a,
	0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x1a, 0x0d, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x2f, 0x61,
	0x70, 0x70, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x2b,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x3a, 0x01, 0x2a, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2d,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x1a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x2a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x6d, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x64, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x21, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x7f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x7d, 0x12, 0x86, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x29, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x12, 0x78, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x7d, 0x0a, 0x0b, 0x41, 0x64,
	0x64, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01,
	0x2a, 0x1a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x1a, 0x19, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x2f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x76, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x1a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x7d, 0x12, 0x8f, 0x01,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x3a, 0x01, 0x2a, 0x1a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2f, 0x7b, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x7d, 0x12,
	0x9a, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x57, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x1a, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x2f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2f, 0x7b, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64,
	0x7d, 0x2f, 0x7b, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x7d, 0x12, 0x9f, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x1a,
	0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x97,
	0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x1a, 0x1b, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x7d, 0x2f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x9c, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x99, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x7d, 0x2f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64,
	0x7d, 0x12, 0x9f, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x65,
	0x4d, 0x65, 0x6e, 0x75, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01,
	0x2a, 0x1a, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x53, 0x69, 0x64, 0x65, 0x4d,
	0x65, 0x6e, 0x75, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x6d, 0x65, 0x6e, 0x75,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x64,
	0x65, 0x4d, 0x65, 0x6e, 0x75, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x69,
	0x64, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01,
	0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x6d, 0x65, 0x6e, 0x75, 0x75, 0x6e,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x78, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x26, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x78, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x98, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x1a, 0x21, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xbc,
	0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x3a, 0x01, 0x2a, 0x1a, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x7d, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa4, 0x01,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a,
	0x1a, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x63, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x3a, 0x01, 0x2a, 0x1a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x7d, 0x2f, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0xb8, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x32, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x1a, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x1a, 0x29, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x7d, 0x12, 0xac, 0x01, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x61,
	0x64, 0x64, 0x12, 0xaf, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x7d, 0x12, 0xa6, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55,
	0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x77,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x8a, 0x01, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x61,
	0x6c, 0x6c, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x29,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x74,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x7d, 0x12,
	0x7c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x7d, 0x12, 0x79, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x2a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f,
	0x7b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x7d, 0x12, 0x83, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x9c,
	0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x65, 0x74, 0x12, 0x34,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a,
	0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x65, 0x74, 0x12, 0x8a, 0x01,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x75, 0x72, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a,
	0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x74,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x75, 0x72, 0x12, 0x7b, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x1a, 0x1b, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x7b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x7d, 0x12, 0x93, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x74, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x7d, 0x12, 0x74, 0x0a,
	0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x16,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x70, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x42, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x63, 0x74, 0x12, 0x77, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30,
	0x01, 0x12, 0x76, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x3a, 0x01, 0x2a, 0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2f, 0x7b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x7d, 0x12, 0x6b, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x3a,
	0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2f, 0x7b,
	0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x12, 0x72, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x73, 0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01,
	0x12, 0xc2, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x7d, 0x12, 0x98, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a,
	0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x12, 0x98, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x10,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a,
	0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x28, 0x01, 0x12, 0x7a, 0x0a, 0x0b, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x79, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a,
	0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d,
	0x2f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x71, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x7d, 0x2f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12,
	0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x7d, 0x12, 0x87, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x12, 0x83,
	0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x7d, 0x12, 0x77, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x12, 0x77, 0x0a,
	0x08, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x3a,
	0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x46, 0x65, 0x65, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46,
	0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a,
	0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x30, 0x01, 0x12, 0x7e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x46, 0x65, 0x65, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64,
	0x30, 0x01, 0x12, 0x7b, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x30, 0x01, 0x12,
	0x7e, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22,
	0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x81, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x1a, 0x13,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x70, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x2a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x76, 0x31,
	0x2f, 0x78, 0x2f, 0x70, 0x63, 0x63, 0x30, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x14, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x73, 0x2f, 0x73, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x30, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x30, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01,
	0x12, 0x9d, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x30, 0x01,
	0x12, 0x9b, 0x01, 0x0a, 0x14, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x30, 0x01, 0x12, 0x81,
	0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x3a, 0x72, 0x65, 0x61, 0x64,
	0x30, 0x01, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x30, 0x01, 0x12, 0x8c,
	0x01, 0x0a, 0x0f, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x30, 0x01, 0x12, 0x8e, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0x87,
	0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x30, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75,
	0x74, 0x68, 0x30, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x30, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x30, 0x12, 0x9b, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01,
	0x2a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4d, 0x70, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x70,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a,
	0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x6d, 0x70, 0x6e, 0x12, 0x93, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f,
	0x73, 0x74, 0x30, 0x01, 0x12, 0x76, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x84, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x78, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x90, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x7a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x26, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x7b, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x93,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01,
	0x2a, 0x1a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41,
	0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x69, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x69,
	0x6e, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x30, 0x01, 0x12, 0x96, 0x01, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x36, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x25, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x36, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a,
	0x1a, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xac, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x3a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12,
	0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0xad, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01,
	0x12, 0x9c, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x3a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x78, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x12, 0x7e, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12,
	0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6f,
	0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x2a, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x61, 0x6e, 0x6f,
	0x6d, 0x61, 0x6c, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x88, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x29,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6f,
	0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x2f, 0x61, 0x6c, 0x6c, 0x3a, 0x72, 0x65,
	0x61, 0x64, 0x30, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x6f, 0x6d,
	0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x69,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6f,
	0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7d,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x3a, 0x01, 0x2a, 0x1a, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x2f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x87, 0x01,
	0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01,
	0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x7b, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x7d, 0x12, 0x78, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x74, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x12, 0x76, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x2a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x79, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x3a, 0x01, 0x2a, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0xd7, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x41, 0x57, 0x53, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x40, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x57, 0x53, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f,
	0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x41, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x57, 0x53,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x46, 0x6f, 0x72, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a,
	0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x77,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xac,
	0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x36, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x86, 0x01,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01,
	0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12,
	0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x9c, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x7d, 0x12, 0x9c,
	0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x01, 0x12, 0x9b, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9c, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x32, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb2, 0x01, 0x0a, 0x13, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x7d, 0x12,
	0x99, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x41, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a,
	0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0xb9, 0x01, 0x0a, 0x1a,
	0x55, 0x6e, 0x64, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x64, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a,
	0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x75, 0x6e, 0x64, 0x6f, 0x12, 0xa4, 0x01, 0x0a, 0x13, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0xbf,
	0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30,
	0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0xb8, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x33, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x7d, 0x2f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x12, 0x90, 0x01, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x69, 0x73, 0x63, 0x61,
	0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2f, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x8d,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x69,
	0x73, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x46, 0x69, 0x73, 0x63, 0x61, 0x6c,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2f, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0xa2,
	0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x7b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x7d, 0x12, 0xa9, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x49, 0x12, 0x32, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x49, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x1a, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x2f, 0x63, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x76, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e, 0x69,
	0x74, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x81, 0x01, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x1a, 0x11, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x7e, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x1a, 0x98, 0x01, 0x92, 0x41, 0x94, 0x01, 0x12, 0x43, 0x28, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x29,
	0x20, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x2e, 0x20, 0x42, 0x61, 0x73, 0x65,
	0x20, 0x55, 0x52, 0x4c, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x6d, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x1a, 0x4d, 0x0a, 0x12,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61,
	0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x2f,
	0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x42, 0x4b, 0x0a, 0x17, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x0a, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cover_v1_cover_proto_rawDescOnce sync.Once
	file_cover_v1_cover_proto_rawDescData = file_cover_v1_cover_proto_rawDesc
)

func file_cover_v1_cover_proto_rawDescGZIP() []byte {
	file_cover_v1_cover_proto_rawDescOnce.Do(func() {
		file_cover_v1_cover_proto_rawDescData = protoimpl.X.CompressGZIP(file_cover_v1_cover_proto_rawDescData)
	})
	return file_cover_v1_cover_proto_rawDescData
}

var file_cover_v1_cover_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cover_v1_cover_proto_msgTypes = make([]protoimpl.MessageInfo, 287)
var file_cover_v1_cover_proto_goTypes = []any{
	(Status)(0),                                             // 0: blueapi.cover.v1.Status
	(*GetRecommendationV2Request)(nil),                      // 1: blueapi.cover.v1.GetRecommendationV2Request
	(*GetRecommendationV2Response)(nil),                     // 2: blueapi.cover.v1.GetRecommendationV2Response
	(*OnboardOrgRequest)(nil),                               // 3: blueapi.cover.v1.OnboardOrgRequest
	(*OnboardOrgResponse)(nil),                              // 4: blueapi.cover.v1.OnboardOrgResponse
	(*InviteMemberRequest)(nil),                             // 5: blueapi.cover.v1.InviteMemberRequest
	(*InviteMemberResponse)(nil),                            // 6: blueapi.cover.v1.InviteMemberResponse
	(*ActivateUserRequest)(nil),                             // 7: blueapi.cover.v1.ActivateUserRequest
	(*ActivateUserResponse)(nil),                            // 8: blueapi.cover.v1.ActivateUserResponse
	(*CreateMemberRequest)(nil),                             // 9: blueapi.cover.v1.CreateMemberRequest
	(*CreateMemberResponse)(nil),                            // 10: blueapi.cover.v1.CreateMemberResponse
	(*GetMembersRequest)(nil),                               // 11: blueapi.cover.v1.GetMembersRequest
	(*GetMembersResponse)(nil),                              // 12: blueapi.cover.v1.GetMembersResponse
	(*GetMemberDetailsRequest)(nil),                         // 13: blueapi.cover.v1.GetMemberDetailsRequest
	(*GetMemberDetailsResponse)(nil),                        // 14: blueapi.cover.v1.GetMemberDetailsResponse
	(*GetMemberCostGroupRequest)(nil),                       // 15: blueapi.cover.v1.GetMemberCostGroupRequest
	(*GetMemberCostGroupResponse)(nil),                      // 16: blueapi.cover.v1.GetMemberCostGroupResponse
	(*UpdateMemberPermissionRequest)(nil),                   // 17: blueapi.cover.v1.UpdateMemberPermissionRequest
	(*UpdateMemberPermissionResponse)(nil),                  // 18: blueapi.cover.v1.UpdateMemberPermissionResponse
	(*GetUserDetailsRequest)(nil),                           // 19: blueapi.cover.v1.GetUserDetailsRequest
	(*GetUserDetailsResponse)(nil),                          // 20: blueapi.cover.v1.GetUserDetailsResponse
	(*UpdateUserAvatarRequest)(nil),                         // 21: blueapi.cover.v1.UpdateUserAvatarRequest
	(*UpdateUserAvatarResponse)(nil),                        // 22: blueapi.cover.v1.UpdateUserAvatarResponse
	(*UpdateUserIconRequest)(nil),                           // 23: blueapi.cover.v1.UpdateUserIconRequest
	(*UpdateUserIconResponse)(nil),                          // 24: blueapi.cover.v1.UpdateUserIconResponse
	(*UpdateUserColorThemeRequest)(nil),                     // 25: blueapi.cover.v1.UpdateUserColorThemeRequest
	(*UpdateUserColorThemeResponse)(nil),                    // 26: blueapi.cover.v1.UpdateUserColorThemeResponse
	(*UpdateUserNameRequest)(nil),                           // 27: blueapi.cover.v1.UpdateUserNameRequest
	(*UpdateUserNameResponse)(nil),                          // 28: blueapi.cover.v1.UpdateUserNameResponse
	(*UpdateUserEmailRequest)(nil),                          // 29: blueapi.cover.v1.UpdateUserEmailRequest
	(*UpdateUserEmailResponse)(nil),                         // 30: blueapi.cover.v1.UpdateUserEmailResponse
	(*UpdateUserMainViewRequest)(nil),                       // 31: blueapi.cover.v1.UpdateUserMainViewRequest
	(*UpdateUserMainViewResponse)(nil),                      // 32: blueapi.cover.v1.UpdateUserMainViewResponse
	(*ResetUserPasswordRequest)(nil),                        // 33: blueapi.cover.v1.ResetUserPasswordRequest
	(*ResetUserPasswordResponse)(nil),                       // 34: blueapi.cover.v1.ResetUserPasswordResponse
	(*UpdateUserLocaleRequest)(nil),                         // 35: blueapi.cover.v1.UpdateUserLocaleRequest
	(*UpdateUserLocaleResponse)(nil),                        // 36: blueapi.cover.v1.UpdateUserLocaleResponse
	(*UpdateUserAppThemeRequest)(nil),                       // 37: blueapi.cover.v1.UpdateUserAppThemeRequest
	(*UpdateUserAppThemeResponse)(nil),                      // 38: blueapi.cover.v1.UpdateUserAppThemeResponse
	(*UpdateUserTimezoneRequest)(nil),                       // 39: blueapi.cover.v1.UpdateUserTimezoneRequest
	(*UpdateUserTimezoneResponse)(nil),                      // 40: blueapi.cover.v1.UpdateUserTimezoneResponse
	(*UpdateUserAttributesRequest)(nil),                     // 41: blueapi.cover.v1.UpdateUserAttributesRequest
	(*UpdateUserAttributesResponse)(nil),                    // 42: blueapi.cover.v1.UpdateUserAttributesResponse
	(*DeleteMemberRequest)(nil),                             // 43: blueapi.cover.v1.DeleteMemberRequest
	(*DeleteMemberResponse)(nil),                            // 44: blueapi.cover.v1.DeleteMemberResponse
	(*ResetPasswordRequest)(nil),                            // 45: blueapi.cover.v1.ResetPasswordRequest
	(*ResetPasswordResponse)(nil),                           // 46: blueapi.cover.v1.ResetPasswordResponse
	(*CreateViewRequest)(nil),                               // 47: blueapi.cover.v1.CreateViewRequest
	(*CreateViewResponse)(nil),                              // 48: blueapi.cover.v1.CreateViewResponse
	(*GetViewsRequest)(nil),                                 // 49: blueapi.cover.v1.GetViewsRequest
	(*GetViewsResponse)(nil),                                // 50: blueapi.cover.v1.GetViewsResponse
	(*GetCurrentViewRequest)(nil),                           // 51: blueapi.cover.v1.GetCurrentViewRequest
	(*GetCurrentViewResponse)(nil),                          // 52: blueapi.cover.v1.GetCurrentViewResponse
	(*GetFavoriteViewsRequest)(nil),                         // 53: blueapi.cover.v1.GetFavoriteViewsRequest
	(*GetFavoriteViewsResponse)(nil),                        // 54: blueapi.cover.v1.GetFavoriteViewsResponse
	(*PublishViewRequest)(nil),                              // 55: blueapi.cover.v1.PublishViewRequest
	(*PublishViewResponse)(nil),                             // 56: blueapi.cover.v1.PublishViewResponse
	(*AddFavoriteRequest)(nil),                              // 57: blueapi.cover.v1.AddFavoriteRequest
	(*AddFavoriteResponse)(nil),                             // 58: blueapi.cover.v1.AddFavoriteResponse
	(*RemoveFavoriteRequest)(nil),                           // 59: blueapi.cover.v1.RemoveFavoriteRequest
	(*RemoveFavoriteResponse)(nil),                          // 60: blueapi.cover.v1.RemoveFavoriteResponse
	(*UpdateViewRequest)(nil),                               // 61: blueapi.cover.v1.UpdateViewRequest
	(*UpdateViewResponse)(nil),                              // 62: blueapi.cover.v1.UpdateViewResponse
	(*UpdateViewLayoutRequest)(nil),                         // 63: blueapi.cover.v1.UpdateViewLayoutRequest
	(*UpdateViewLayoutResponse)(nil),                        // 64: blueapi.cover.v1.UpdateViewLayoutResponse
	(*UpdateViewWidgetRequest)(nil),                         // 65: blueapi.cover.v1.UpdateViewWidgetRequest
	(*UpdateViewWidgetResponse)(nil),                        // 66: blueapi.cover.v1.UpdateViewWidgetResponse
	(*UpdateViewColorThemeRequest)(nil),                     // 67: blueapi.cover.v1.UpdateViewColorThemeRequest
	(*UpdateViewColorThemeResponse)(nil),                    // 68: blueapi.cover.v1.UpdateViewColorThemeResponse
	(*UpdateViewCurrencyRequest)(nil),                       // 69: blueapi.cover.v1.UpdateViewCurrencyRequest
	(*UpdateViewCurrencyResponse)(nil),                      // 70: blueapi.cover.v1.UpdateViewCurrencyResponse
	(*SetOrgUpdateCurrencyRequest)(nil),                     // 71: blueapi.cover.v1.SetOrgUpdateCurrencyRequest
	(*SetOrgUpdateCurrencyResponse)(nil),                    // 72: blueapi.cover.v1.SetOrgUpdateCurrencyResponse
	(*GetOrgUpdateCurrencyRequest)(nil),                     // 73: blueapi.cover.v1.GetOrgUpdateCurrencyRequest
	(*GetOrgUpdateCurrencyResponse)(nil),                    // 74: blueapi.cover.v1.GetOrgUpdateCurrencyResponse
	(*ListExchangeRatesRequest)(nil),                        // 75: blueapi.cover.v1.ListExchangeRatesRequest
	(*ListExchangeRatesResponse)(nil),                       // 76: blueapi.cover.v1.ListExchangeRatesResponse
	(*ExchangeRates)(nil),                                   // 77: blueapi.cover.v1.ExchangeRates
	(*DeleteViewRequest)(nil),                               // 78: blueapi.cover.v1.DeleteViewRequest
	(*DeleteViewResponse)(nil),                              // 79: blueapi.cover.v1.DeleteViewResponse
	(*UpdateSideMenuStateRequest)(nil),                      // 80: blueapi.cover.v1.UpdateSideMenuStateRequest
	(*UpdateSideMenuStateResponse)(nil),                     // 81: blueapi.cover.v1.UpdateSideMenuStateResponse
	(*AddSideMenuFavoriteRequest)(nil),                      // 82: blueapi.cover.v1.AddSideMenuFavoriteRequest
	(*AddSideMenuFavoriteResponse)(nil),                     // 83: blueapi.cover.v1.AddSideMenuFavoriteResponse
	(*RemoveSideMenuFavoriteRequest)(nil),                   // 84: blueapi.cover.v1.RemoveSideMenuFavoriteRequest
	(*RemoveSideMenuFavoriteResponse)(nil),                  // 85: blueapi.cover.v1.RemoveSideMenuFavoriteResponse
	(*CreateCostGroupRequest)(nil),                          // 86: blueapi.cover.v1.CreateCostGroupRequest
	(*CreateCostGroupResponse)(nil),                         // 87: blueapi.cover.v1.CreateCostGroupResponse
	(*GetCostGroupsRequest)(nil),                            // 88: blueapi.cover.v1.GetCostGroupsRequest
	(*GetCostGroupsResponse)(nil),                           // 89: blueapi.cover.v1.GetCostGroupsResponse
	(*GetCostGroupDetailsRequest)(nil),                      // 90: blueapi.cover.v1.GetCostGroupDetailsRequest
	(*GetCostGroupDetailsResponse)(nil),                     // 91: blueapi.cover.v1.GetCostGroupDetailsResponse
	(*UpdateCostGroupNameRequest)(nil),                      // 92: blueapi.cover.v1.UpdateCostGroupNameRequest
	(*UpdateCostGroupNameResponse)(nil),                     // 93: blueapi.cover.v1.UpdateCostGroupNameResponse
	(*UpdateCostGroupDescriptionRequest)(nil),               // 94: blueapi.cover.v1.UpdateCostGroupDescriptionRequest
	(*UpdateCostGroupDescriptionResponse)(nil),              // 95: blueapi.cover.v1.UpdateCostGroupDescriptionResponse
	(*UpdateCostGroupImageRequest)(nil),                     // 96: blueapi.cover.v1.UpdateCostGroupImageRequest
	(*UpdateCostGroupImageResponse)(nil),                    // 97: blueapi.cover.v1.UpdateCostGroupImageResponse
	(*UpdateCostGroupIconRequest)(nil),                      // 98: blueapi.cover.v1.UpdateCostGroupIconRequest
	(*UpdateCostGroupIconResponse)(nil),                     // 99: blueapi.cover.v1.UpdateCostGroupIconResponse
	(*UpdateCostGroupColorThemeRequest)(nil),                // 100: blueapi.cover.v1.UpdateCostGroupColorThemeRequest
	(*UpdateCostGroupColorThemeResponse)(nil),               // 101: blueapi.cover.v1.UpdateCostGroupColorThemeResponse
	(*UpdateCostGroupCombinationsRequest)(nil),              // 102: blueapi.cover.v1.UpdateCostGroupCombinationsRequest
	(*UpdateCostGroupCombinationsResponse)(nil),             // 103: blueapi.cover.v1.UpdateCostGroupCombinationsResponse
	(*AssignCostGroupMemberRequest)(nil),                    // 104: blueapi.cover.v1.AssignCostGroupMemberRequest
	(*AssignCostGroupMemberResponse)(nil),                   // 105: blueapi.cover.v1.AssignCostGroupMemberResponse
	(*RemoveCostGroupMemberRequest)(nil),                    // 106: blueapi.cover.v1.RemoveCostGroupMemberRequest
	(*RemoveCostGroupMemberResponse)(nil),                   // 107: blueapi.cover.v1.RemoveCostGroupMemberResponse
	(*DeleteCostGroupRequest)(nil),                          // 108: blueapi.cover.v1.DeleteCostGroupRequest
	(*DeleteCostGroupResponse)(nil),                         // 109: blueapi.cover.v1.DeleteCostGroupResponse
	(*GetAccountAccessTemplateUrlRequest)(nil),              // 110: blueapi.cover.v1.GetAccountAccessTemplateUrlRequest
	(*GetAccountAccessTemplateUrlResponse)(nil),             // 111: blueapi.cover.v1.GetAccountAccessTemplateUrlResponse
	(*ListAccountAccessRequest)(nil),                        // 112: blueapi.cover.v1.ListAccountAccessRequest
	(*GetAccountAccessRequest)(nil),                         // 113: blueapi.cover.v1.GetAccountAccessRequest
	(*AccountAccess)(nil),                                   // 114: blueapi.cover.v1.AccountAccess
	(*CreateAccountAccessRequest)(nil),                      // 115: blueapi.cover.v1.CreateAccountAccessRequest
	(*CreateAccountAccessStacksetRequest)(nil),              // 116: blueapi.cover.v1.CreateAccountAccessStacksetRequest
	(*UpdateAccountAccessRequest)(nil),                      // 117: blueapi.cover.v1.UpdateAccountAccessRequest
	(*DeleteAccountAccessRequest)(nil),                      // 118: blueapi.cover.v1.DeleteAccountAccessRequest
	(*DeleteAccountAccessResponse)(nil),                     // 119: blueapi.cover.v1.DeleteAccountAccessResponse
	(*RegisterAccountRequest)(nil),                          // 120: blueapi.cover.v1.RegisterAccountRequest
	(*ListAssetsRequest)(nil),                               // 121: blueapi.cover.v1.ListAssetsRequest
	(*ListAssetsFilters)(nil),                               // 122: blueapi.cover.v1.ListAssetsFilters
	(*Resource)(nil),                                        // 123: blueapi.cover.v1.Resource
	(*GetAssetsSummaryRequest)(nil),                         // 124: blueapi.cover.v1.GetAssetsSummaryRequest
	(*GetAssetsSummaryResponse)(nil),                        // 125: blueapi.cover.v1.GetAssetsSummaryResponse
	(*AssetsSummary)(nil),                                   // 126: blueapi.cover.v1.AssetsSummary
	(*ResolveCostGroupCombinationsRequest)(nil),             // 127: blueapi.cover.v1.ResolveCostGroupCombinationsRequest
	(*ResolveCostGroupCombinationsResponse)(nil),            // 128: blueapi.cover.v1.ResolveCostGroupCombinationsResponse
	(*GetCostUsageRequest)(nil),                             // 129: blueapi.cover.v1.GetCostUsageRequest
	(*GetCostUsageRequestAwsOptions)(nil),                   // 130: blueapi.cover.v1.GetCostUsageRequestAwsOptions
	(*GetCostUsageRequestAzureOptions)(nil),                 // 131: blueapi.cover.v1.GetCostUsageRequestAzureOptions
	(*GetCostUsageRequestGcpOptions)(nil),                   // 132: blueapi.cover.v1.GetCostUsageRequestGcpOptions
	(*GetCostUsageRequestAzureCspOptions)(nil),              // 133: blueapi.cover.v1.GetCostUsageRequestAzureCspOptions
	(*GetCostUsageRequestCustomOptions)(nil),                // 134: blueapi.cover.v1.GetCostUsageRequestCustomOptions
	(*ReadCostsRequestOptionsFilters)(nil),                  // 135: blueapi.cover.v1.ReadCostsRequestOptionsFilters
	(*CostItem)(nil),                                        // 136: blueapi.cover.v1.CostItem
	(*GetRightSizingRecommendationRequest)(nil),             // 137: blueapi.cover.v1.GetRightSizingRecommendationRequest
	(*GetRightSizingRecommendationResponse)(nil),            // 138: blueapi.cover.v1.GetRightSizingRecommendationResponse
	(*ModifyResourceTypeRequest)(nil),                       // 139: blueapi.cover.v1.ModifyResourceTypeRequest
	(*ModifyResourceTypeResponse)(nil),                      // 140: blueapi.cover.v1.ModifyResourceTypeResponse
	(*TerminateResourceRequest)(nil),                        // 141: blueapi.cover.v1.TerminateResourceRequest
	(*TerminateResourceResponse)(nil),                       // 142: blueapi.cover.v1.TerminateResourceResponse
	(*UploadChargeCodeRequest)(nil),                         // 143: blueapi.cover.v1.UploadChargeCodeRequest
	(*UploadChargeCodeResponse)(nil),                        // 144: blueapi.cover.v1.UploadChargeCodeResponse
	(*AssignPayerRequest)(nil),                              // 145: blueapi.cover.v1.AssignPayerRequest
	(*AssignPayerResponse)(nil),                             // 146: blueapi.cover.v1.AssignPayerResponse
	(*GetPayersRequest)(nil),                                // 147: blueapi.cover.v1.GetPayersRequest
	(*GetPayersResponse)(nil),                               // 148: blueapi.cover.v1.GetPayersResponse
	(*GetAccountsRequest)(nil),                              // 149: blueapi.cover.v1.GetAccountsRequest
	(*GetAccountsResponse)(nil),                             // 150: blueapi.cover.v1.GetAccountsResponse
	(*GetServicesRequest)(nil),                              // 151: blueapi.cover.v1.GetServicesRequest
	(*GetServicesResponse)(nil),                             // 152: blueapi.cover.v1.GetServicesResponse
	(*GetRegionsRequest)(nil),                               // 153: blueapi.cover.v1.GetRegionsRequest
	(*GetRegionsResponse)(nil),                              // 154: blueapi.cover.v1.GetRegionsResponse
	(*GetTagsRequest)(nil),                                  // 155: blueapi.cover.v1.GetTagsRequest
	(*GetTagsResponse)(nil),                                 // 156: blueapi.cover.v1.GetTagsResponse
	(*ListFeesRequest)(nil),                                 // 157: blueapi.cover.v1.ListFeesRequest
	(*FeeDetails)(nil),                                      // 158: blueapi.cover.v1.FeeDetails
	(*RestoreFeeRequest)(nil),                               // 159: blueapi.cover.v1.RestoreFeeRequest
	(*GetCostGroupFeeRequest)(nil),                          // 160: blueapi.cover.v1.GetCostGroupFeeRequest
	(*FeeItem)(nil),                                         // 161: blueapi.cover.v1.FeeItem
	(*Allocator)(nil),                                       // 162: blueapi.cover.v1.Allocator
	(*Criteria)(nil),                                        // 163: blueapi.cover.v1.Criteria
	(*CostAllocatorDetails)(nil),                            // 164: blueapi.cover.v1.CostAllocatorDetails
	(*CostAllocatorRequest)(nil),                            // 165: blueapi.cover.v1.CostAllocatorRequest
	(*ListAllocatorsRequest)(nil),                           // 166: blueapi.cover.v1.ListAllocatorsRequest
	(*CreateAllocatorRequest)(nil),                          // 167: blueapi.cover.v1.CreateAllocatorRequest
	(*DeleteAllocatorRequest)(nil),                          // 168: blueapi.cover.v1.DeleteAllocatorRequest
	(*ProxyCreateCompletionRequest)(nil),                    // 169: blueapi.cover.v1.ProxyCreateCompletionRequest
	(*ProxyCreateCompletionResponse)(nil),                   // 170: blueapi.cover.v1.ProxyCreateCompletionResponse
	(*AccountUsageDetails)(nil),                             // 171: blueapi.cover.v1.AccountUsageDetails
	(*ListAccountUsageRequest)(nil),                         // 172: blueapi.cover.v1.ListAccountUsageRequest
	(*RestoreAccountUsageRequest)(nil),                      // 173: blueapi.cover.v1.RestoreAccountUsageRequest
	(*RestoreSavingsRequest)(nil),                           // 174: blueapi.cover.v1.RestoreSavingsRequest
	(*SavingsDetails)(nil),                                  // 175: blueapi.cover.v1.SavingsDetails
	(*GetCostGroupAllocationRequest)(nil),                   // 176: blueapi.cover.v1.GetCostGroupAllocationRequest
	(*AllocationItem)(nil),                                  // 177: blueapi.cover.v1.AllocationItem
	(*ProcessAuth0UserRequest)(nil),                         // 178: blueapi.cover.v1.ProcessAuth0UserRequest
	(*ProcessAuth0UserResponse)(nil),                        // 179: blueapi.cover.v1.ProcessAuth0UserResponse
	(*DataAccess)(nil),                                      // 180: blueapi.cover.v1.DataAccess
	(*RegisterDataAccessRequest)(nil),                       // 181: blueapi.cover.v1.RegisterDataAccessRequest
	(*UpdateDataAccessRequest)(nil),                         // 182: blueapi.cover.v1.UpdateDataAccessRequest
	(*ListDataAccessRequest)(nil),                           // 183: blueapi.cover.v1.ListDataAccessRequest
	(*BillingAccountRequest)(nil),                           // 184: blueapi.cover.v1.BillingAccountRequest
	(*GetAndDeleteDataAccessRequest)(nil),                   // 185: blueapi.cover.v1.GetAndDeleteDataAccessRequest
	(*AddPartnerCenterCredentialsRequest)(nil),              // 186: blueapi.cover.v1.AddPartnerCenterCredentialsRequest
	(*AddMpnSettingRequest)(nil),                            // 187: blueapi.cover.v1.AddMpnSettingRequest
	(*GetCostGroupAttributeRequest)(nil),                    // 188: blueapi.cover.v1.GetCostGroupAttributeRequest
	(*GetCostGroupAttributeResponse)(nil),                   // 189: blueapi.cover.v1.GetCostGroupAttributeResponse
	(*GetCategoriesRequest)(nil),                            // 190: blueapi.cover.v1.GetCategoriesRequest
	(*GetCategoriesResponse)(nil),                           // 191: blueapi.cover.v1.GetCategoriesResponse
	(*GetAlertsRequest)(nil),                                // 192: blueapi.cover.v1.GetAlertsRequest
	(*GetAlertsResponse)(nil),                               // 193: blueapi.cover.v1.GetAlertsResponse
	(*CreateAlertRequest)(nil),                              // 194: blueapi.cover.v1.CreateAlertRequest
	(*CreateAlertResponse)(nil),                             // 195: blueapi.cover.v1.CreateAlertResponse
	(*GetAlertDetailsRequest)(nil),                          // 196: blueapi.cover.v1.GetAlertDetailsRequest
	(*GetAlertDetailsResponse)(nil),                         // 197: blueapi.cover.v1.GetAlertDetailsResponse
	(*DeleteAlertRequest)(nil),                              // 198: blueapi.cover.v1.DeleteAlertRequest
	(*DeleteAlertResponse)(nil),                             // 199: blueapi.cover.v1.DeleteAlertResponse
	(*UpdateAlertDetailsRequest)(nil),                       // 200: blueapi.cover.v1.UpdateAlertDetailsRequest
	(*UpdateAlertDetailsResponse)(nil),                      // 201: blueapi.cover.v1.UpdateAlertDetailsResponse
	(*GetChannelsRequest)(nil),                              // 202: blueapi.cover.v1.GetChannelsRequest
	(*GetChannelsResponse)(nil),                             // 203: blueapi.cover.v1.GetChannelsResponse
	(*CreateChannelRequest)(nil),                            // 204: blueapi.cover.v1.CreateChannelRequest
	(*CreateChannelResponse)(nil),                           // 205: blueapi.cover.v1.CreateChannelResponse
	(*GetChannelDetailsRequest)(nil),                        // 206: blueapi.cover.v1.GetChannelDetailsRequest
	(*GetChannelDetailsResponse)(nil),                       // 207: blueapi.cover.v1.GetChannelDetailsResponse
	(*DeleteChannelRequest)(nil),                            // 208: blueapi.cover.v1.DeleteChannelRequest
	(*DeleteChannelResponse)(nil),                           // 209: blueapi.cover.v1.DeleteChannelResponse
	(*UpdateChannelDetailsRequest)(nil),                     // 210: blueapi.cover.v1.UpdateChannelDetailsRequest
	(*UpdateChannelDetailsResponse)(nil),                    // 211: blueapi.cover.v1.UpdateChannelDetailsResponse
	(*GetDiscountRecommendationsRequest)(nil),               // 212: blueapi.cover.v1.GetDiscountRecommendationsRequest
	(*GetDiscountRecommendationsResponse)(nil),              // 213: blueapi.cover.v1.GetDiscountRecommendationsResponse
	(*GetAnomalyinCostGroupRequest)(nil),                    // 214: blueapi.cover.v1.GetAnomalyinCostGroupRequest
	(*AnomalyData)(nil),                                     // 215: blueapi.cover.v1.AnomalyData
	(*CreateDiscountExpirationAlertRequest)(nil),            // 216: blueapi.cover.v1.CreateDiscountExpirationAlertRequest
	(*ManipulateDiscountExpirationAlertRequest)(nil),        // 217: blueapi.cover.v1.ManipulateDiscountExpirationAlertRequest
	(*UpdateDiscountExpirationAlertRequest)(nil),            // 218: blueapi.cover.v1.UpdateDiscountExpirationAlertRequest
	(*DiscountExpiryAlertData)(nil),                         // 219: blueapi.cover.v1.DiscountExpiryAlertData
	(*ListDiscountExpirationAlertRequest)(nil),              // 220: blueapi.cover.v1.ListDiscountExpirationAlertRequest
	(*CreateAnomalyAlertRequest)(nil),                       // 221: blueapi.cover.v1.CreateAnomalyAlertRequest
	(*ManipulateAnomalyAlertRequest)(nil),                   // 222: blueapi.cover.v1.ManipulateAnomalyAlertRequest
	(*AnomalyAlertData)(nil),                                // 223: blueapi.cover.v1.AnomalyAlertData
	(*ListAnomalyAlertRequest)(nil),                         // 224: blueapi.cover.v1.ListAnomalyAlertRequest
	(*UpdateAnomalyAlertRequest)(nil),                       // 225: blueapi.cover.v1.UpdateAnomalyAlertRequest
	(*RegisterNewUserRequest)(nil),                          // 226: blueapi.cover.v1.RegisterNewUserRequest
	(*RegisterNewUserResponse)(nil),                         // 227: blueapi.cover.v1.RegisterNewUserResponse
	(*GetUserProfileRequest)(nil),                           // 228: blueapi.cover.v1.GetUserProfileRequest
	(*GetUserProfileResponse)(nil),                          // 229: blueapi.cover.v1.GetUserProfileResponse
	(*ListBudgetsRequest)(nil),                              // 230: blueapi.cover.v1.ListBudgetsRequest
	(*ListBudgetsResponse)(nil),                             // 231: blueapi.cover.v1.ListBudgetsResponse
	(*GetBudgetRequest)(nil),                                // 232: blueapi.cover.v1.GetBudgetRequest
	(*GetBudgetResponse)(nil),                               // 233: blueapi.cover.v1.GetBudgetResponse
	(*CreateBudgetRequest)(nil),                             // 234: blueapi.cover.v1.CreateBudgetRequest
	(*CreateBudgetResponse)(nil),                            // 235: blueapi.cover.v1.CreateBudgetResponse
	(*DeleteBudgetRequest)(nil),                             // 236: blueapi.cover.v1.DeleteBudgetRequest
	(*DeleteBudgetResponse)(nil),                            // 237: blueapi.cover.v1.DeleteBudgetResponse
	(*UpdateBudgetRequest)(nil),                             // 238: blueapi.cover.v1.UpdateBudgetRequest
	(*UpdateBudgetResponse)(nil),                            // 239: blueapi.cover.v1.UpdateBudgetResponse
	(*ResolveAWSMarketplaceTokenForOnboardingRequest)(nil),  // 240: blueapi.cover.v1.ResolveAWSMarketplaceTokenForOnboardingRequest
	(*ResolveAWSMarketplaceTokenForOnboardingResponse)(nil), // 241: blueapi.cover.v1.ResolveAWSMarketplaceTokenForOnboardingResponse
	(*GetCustomerSubscriptionStatusRequest)(nil),            // 242: blueapi.cover.v1.GetCustomerSubscriptionStatusRequest
	(*GetCustomerSubscriptionStatusResponse)(nil),           // 243: blueapi.cover.v1.GetCustomerSubscriptionStatusResponse
	(*CreateProfilingRequest)(nil),                          // 244: blueapi.cover.v1.CreateProfilingRequest
	(*CreateProfilingResponse)(nil),                         // 245: blueapi.cover.v1.CreateProfilingResponse
	(*AddInfotoMarketplaceRequest)(nil),                     // 246: blueapi.cover.v1.AddInfotoMarketplaceRequest
	(*AddInfotoMarketplaceResponse)(nil),                    // 247: blueapi.cover.v1.AddInfotoMarketplaceResponse
	(*GetReportSummaryRequest)(nil),                         // 248: blueapi.cover.v1.GetReportSummaryRequest
	(*GetReportSummaryResponse)(nil),                        // 249: blueapi.cover.v1.GetReportSummaryResponse
	(*ListRecommendationRequest)(nil),                       // 250: blueapi.cover.v1.ListRecommendationRequest
	(*ListRecommendationResponse)(nil),                      // 251: blueapi.cover.v1.ListRecommendationResponse
	(*GetRecommendationRequest)(nil),                        // 252: blueapi.cover.v1.GetRecommendationRequest
	(*GetRecommendationResponse)(nil),                       // 253: blueapi.cover.v1.GetRecommendationResponse
	(*ExecuteOptimizationRequest)(nil),                      // 254: blueapi.cover.v1.ExecuteOptimizationRequest
	(*ExecuteOptimizationResponse)(nil),                     // 255: blueapi.cover.v1.ExecuteOptimizationResponse
	(*MarkAsExecutedRequest)(nil),                           // 256: blueapi.cover.v1.MarkAsExecutedRequest
	(*MarkAsExecutedResponse)(nil),                          // 257: blueapi.cover.v1.MarkAsExecutedResponse
	(*UndoExecutedRecommendationRequest)(nil),               // 258: blueapi.cover.v1.UndoExecutedRecommendationRequest
	(*UndoExecutedRecommendationResponse)(nil),              // 259: blueapi.cover.v1.UndoExecutedRecommendationResponse
	(*OptimizationHistoryRequest)(nil),                      // 260: blueapi.cover.v1.OptimizationHistoryRequest
	(*OptimizationHistoryResponse)(nil),                     // 261: blueapi.cover.v1.OptimizationHistoryResponse
	(*SetCostGroupEventIndicatorRequest)(nil),               // 262: blueapi.cover.v1.SetCostGroupEventIndicatorRequest
	(*SetCostGroupEventIndicatorResponse)(nil),              // 263: blueapi.cover.v1.SetCostGroupEventIndicatorResponse
	(*SetCostGroupAnomalyOptionsRequest)(nil),               // 264: blueapi.cover.v1.SetCostGroupAnomalyOptionsRequest
	(*SetCostGroupAnomalyOptionsResponse)(nil),              // 265: blueapi.cover.v1.SetCostGroupAnomalyOptionsResponse
	(*SetOrgFiscalMonthRequest)(nil),                        // 266: blueapi.cover.v1.SetOrgFiscalMonthRequest
	(*SetOrgFiscalMonthResponse)(nil),                       // 267: blueapi.cover.v1.SetOrgFiscalMonthResponse
	(*GetOrgFiscalMonthRequest)(nil),                        // 268: blueapi.cover.v1.GetOrgFiscalMonthRequest
	(*GetOrgFiscalMonthResponse)(nil),                       // 269: blueapi.cover.v1.GetOrgFiscalMonthResponse
	(*TransferOrganizationRequest)(nil),                     // 270: blueapi.cover.v1.TransferOrganizationRequest
	(*TransferOrganizationResponse)(nil),                    // 271: blueapi.cover.v1.TransferOrganizationResponse
	(*UpdateCostGroupCreationUIRequest)(nil),                // 272: blueapi.cover.v1.UpdateCostGroupCreationUIRequest
	(*UpdateCostGroupCreationUIResponse)(nil),               // 273: blueapi.cover.v1.UpdateCostGroupCreationUIResponse
	(*ListUnitTypesRequest)(nil),                            // 274: blueapi.cover.v1.ListUnitTypesRequest
	(*ListUnitTypesResponse)(nil),                           // 275: blueapi.cover.v1.ListUnitTypesResponse
	(*CreateUnitTypeRequest)(nil),                           // 276: blueapi.cover.v1.CreateUnitTypeRequest
	(*CreateUnitTypeResponse)(nil),                          // 277: blueapi.cover.v1.CreateUnitTypeResponse
	(*GetUnitTypeRequest)(nil),                              // 278: blueapi.cover.v1.GetUnitTypeRequest
	(*GetUnitTypeResponse)(nil),                             // 279: blueapi.cover.v1.GetUnitTypeResponse
	(*UpdateUnitTypeRequest)(nil),                           // 280: blueapi.cover.v1.UpdateUnitTypeRequest
	(*UpdateUnitTypeResponse)(nil),                          // 281: blueapi.cover.v1.UpdateUnitTypeResponse
	(*DeleteUnitTypeRequest)(nil),                           // 282: blueapi.cover.v1.DeleteUnitTypeRequest
	(*DeleteUnitTypeResponse)(nil),                          // 283: blueapi.cover.v1.DeleteUnitTypeResponse
	nil,                                                     // 284: blueapi.cover.v1.ListAssetsFilters.AndFiltersEntry
	nil,                                                     // 285: blueapi.cover.v1.ReadCostsRequestOptionsFilters.AndFiltersEntry
	nil,                                                     // 286: blueapi.cover.v1.Criteria.AndEntry
	(*ListRecommendationResponse_PurchaseOption)(nil),       // 287: blueapi.cover.v1.ListRecommendationResponse.PurchaseOption
	(*recommendation.RecommendationData)(nil),               // 288: blueapi.api.cover.recommendation.RecommendationData
	(*cover.UserData)(nil),                                  // 289: blueapi.api.cover.UserData
	(*cover.MemberCostGroup)(nil),                           // 290: blueapi.api.cover.MemberCostGroup
	(*cover.ViewData)(nil),                                  // 291: blueapi.api.cover.ViewData
	(*cover.ViewList)(nil),                                  // 292: blueapi.api.cover.ViewList
	(*cover.Favorites)(nil),                                 // 293: blueapi.api.cover.Favorites
	(*cover.WidgetData)(nil),                                // 294: blueapi.api.cover.WidgetData
	(*cover.ViewLayout)(nil),                                // 295: blueapi.api.cover.ViewLayout
	(*structpb.Struct)(nil),                                 // 296: google.protobuf.Struct
	(*cover.LayoutRequests)(nil),                            // 297: blueapi.api.cover.LayoutRequests
	(*cover.SideMenuState)(nil),                             // 298: blueapi.api.cover.SideMenuState
	(*cover.Combinations)(nil),                              // 299: blueapi.api.cover.Combinations
	(*cover.CostGroupData)(nil),                             // 300: blueapi.api.cover.CostGroupData
	(*cover.RegistrationStatus)(nil),                        // 301: blueapi.api.cover.RegistrationStatus
	(*cover.Account)(nil),                                   // 302: blueapi.api.cover.Account
	(*cover.AwsCostForecast)(nil),                           // 303: blueapi.api.cover.AwsCostForecast
	(*cover.ResourceData)(nil),                              // 304: blueapi.api.cover.ResourceData
	(*cover.TagData)(nil),                                   // 305: blueapi.api.cover.TagData
	(*cover.GcpOptions)(nil),                                // 306: blueapi.api.cover.GcpOptions
	(*cover.AzureOptions)(nil),                              // 307: blueapi.api.cover.AzureOptions
	(*cover.AwsOptions)(nil),                                // 308: blueapi.api.cover.AwsOptions
	(*cover.Result)(nil),                                    // 309: blueapi.api.cover.Result
	(*cover.Category)(nil),                                  // 310: blueapi.api.cover.Category
	(*cover.AlertData)(nil),                                 // 311: blueapi.api.cover.AlertData
	(*cover.ChannelData)(nil),                               // 312: blueapi.api.cover.ChannelData
	(*cover.AwsInputs)(nil),                                 // 313: blueapi.api.cover.AwsInputs
	(*cover.AzureInputs)(nil),                               // 314: blueapi.api.cover.AzureInputs
	(*cover.GcpInputs)(nil),                                 // 315: blueapi.api.cover.GcpInputs
	(*cover.AwsDiscountRecommendations)(nil),                // 316: blueapi.api.cover.AwsDiscountRecommendations
	(*cover.AzureDiscountRecommendations)(nil),              // 317: blueapi.api.cover.AzureDiscountRecommendations
	(*cover.GcpDiscountRecommendations)(nil),                // 318: blueapi.api.cover.GcpDiscountRecommendations
	(*cover.AlertCostGroup)(nil),                            // 319: blueapi.api.cover.AlertCostGroup
	(*cover.AlertChannels)(nil),                             // 320: blueapi.api.cover.AlertChannels
	(*cover.BudgetData)(nil),                                // 321: blueapi.api.cover.BudgetData
	(*cover.ExecutiveSummary)(nil),                          // 322: blueapi.api.cover.ExecutiveSummary
	(*cover.OptimizationRecommendationSummary)(nil),         // 323: blueapi.api.cover.OptimizationRecommendationSummary
	(*cover.SavingsSummary)(nil),                            // 324: blueapi.api.cover.SavingsSummary
	(*cover.AWSRecommendations)(nil),                        // 325: blueapi.api.cover.AWSRecommendations
	(*cover.ExecutedRecommendationDetails)(nil),             // 326: blueapi.api.cover.ExecutedRecommendationDetails
	(*cover.EventIndicator)(nil),                            // 327: blueapi.api.cover.EventIndicator
	(*cover.AnomalyOptions)(nil),                            // 328: blueapi.api.cover.AnomalyOptions
	(*cover.UnitCostData)(nil),                              // 329: blueapi.api.cover.UnitCostData
	(*cover.UnitItem)(nil),                                  // 330: blueapi.api.cover.UnitItem
	(*emptypb.Empty)(nil),                                   // 331: google.protobuf.Empty
	(*protos.Operation)(nil),                                // 332: protos.Operation
}
var file_cover_v1_cover_proto_depIdxs = []int32{
	288, // 0: blueapi.cover.v1.GetRecommendationV2Response.data:type_name -> blueapi.api.cover.recommendation.RecommendationData
	289, // 1: blueapi.cover.v1.OnboardOrgResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 2: blueapi.cover.v1.ActivateUserResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 3: blueapi.cover.v1.CreateMemberResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 4: blueapi.cover.v1.GetMembersResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 5: blueapi.cover.v1.GetMemberDetailsResponse.userData:type_name -> blueapi.api.cover.UserData
	290, // 6: blueapi.cover.v1.GetMemberCostGroupResponse.costGroups:type_name -> blueapi.api.cover.MemberCostGroup
	289, // 7: blueapi.cover.v1.UpdateMemberPermissionResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 8: blueapi.cover.v1.GetUserDetailsResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 9: blueapi.cover.v1.UpdateUserAvatarResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 10: blueapi.cover.v1.UpdateUserIconResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 11: blueapi.cover.v1.UpdateUserColorThemeResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 12: blueapi.cover.v1.UpdateUserNameResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 13: blueapi.cover.v1.UpdateUserEmailResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 14: blueapi.cover.v1.UpdateUserMainViewResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 15: blueapi.cover.v1.ResetUserPasswordResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 16: blueapi.cover.v1.UpdateUserLocaleResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 17: blueapi.cover.v1.UpdateUserAppThemeResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 18: blueapi.cover.v1.UpdateUserTimezoneResponse.userData:type_name -> blueapi.api.cover.UserData
	289, // 19: blueapi.cover.v1.UpdateUserAttributesResponse.userData:type_name -> blueapi.api.cover.UserData
	291, // 20: blueapi.cover.v1.CreateViewResponse.viewData:type_name -> blueapi.api.cover.ViewData
	292, // 21: blueapi.cover.v1.GetViewsResponse.viewList:type_name -> blueapi.api.cover.ViewList
	291, // 22: blueapi.cover.v1.GetCurrentViewResponse.viewData:type_name -> blueapi.api.cover.ViewData
	293, // 23: blueapi.cover.v1.GetFavoriteViewsResponse.favorites:type_name -> blueapi.api.cover.Favorites
	294, // 24: blueapi.cover.v1.UpdateViewLayoutRequest.layout:type_name -> blueapi.api.cover.WidgetData
	295, // 25: blueapi.cover.v1.UpdateViewLayoutResponse.layout:type_name -> blueapi.api.cover.ViewLayout
	296, // 26: blueapi.cover.v1.UpdateViewWidgetRequest.options:type_name -> google.protobuf.Struct
	297, // 27: blueapi.cover.v1.UpdateViewWidgetRequest.requests:type_name -> blueapi.api.cover.LayoutRequests
	294, // 28: blueapi.cover.v1.UpdateViewWidgetResponse.widgetData:type_name -> blueapi.api.cover.WidgetData
	291, // 29: blueapi.cover.v1.UpdateViewColorThemeResponse.viewData:type_name -> blueapi.api.cover.ViewData
	291, // 30: blueapi.cover.v1.UpdateViewCurrencyResponse.viewData:type_name -> blueapi.api.cover.ViewData
	77,  // 31: blueapi.cover.v1.ListExchangeRatesResponse.exchangeRates:type_name -> blueapi.cover.v1.ExchangeRates
	298, // 32: blueapi.cover.v1.UpdateSideMenuStateRequest.sidemenustate:type_name -> blueapi.api.cover.SideMenuState
	299, // 33: blueapi.cover.v1.CreateCostGroupRequest.combinations:type_name -> blueapi.api.cover.Combinations
	300, // 34: blueapi.cover.v1.CreateCostGroupResponse.costGroupData:type_name -> blueapi.api.cover.CostGroupData
	300, // 35: blueapi.cover.v1.GetCostGroupsResponse.costGroupData:type_name -> blueapi.api.cover.CostGroupData
	300, // 36: blueapi.cover.v1.GetCostGroupDetailsResponse.costGroupData:type_name -> blueapi.api.cover.CostGroupData
	299, // 37: blueapi.cover.v1.UpdateCostGroupCombinationsRequest.combinations:type_name -> blueapi.api.cover.Combinations
	299, // 38: blueapi.cover.v1.UpdateCostGroupCombinationsResponse.combinations:type_name -> blueapi.api.cover.Combinations
	301, // 39: blueapi.cover.v1.AccountAccess.registrationStatus:type_name -> blueapi.api.cover.RegistrationStatus
	122, // 40: blueapi.cover.v1.ListAssetsRequest.awsOptions:type_name -> blueapi.cover.v1.ListAssetsFilters
	122, // 41: blueapi.cover.v1.ListAssetsRequest.awsPropertiesOptions:type_name -> blueapi.cover.v1.ListAssetsFilters
	284, // 42: blueapi.cover.v1.ListAssetsFilters.andFilters:type_name -> blueapi.cover.v1.ListAssetsFilters.AndFiltersEntry
	122, // 43: blueapi.cover.v1.GetAssetsSummaryRequest.awsOptions:type_name -> blueapi.cover.v1.ListAssetsFilters
	122, // 44: blueapi.cover.v1.GetAssetsSummaryRequest.awsPropertiesOptions:type_name -> blueapi.cover.v1.ListAssetsFilters
	126, // 45: blueapi.cover.v1.GetAssetsSummaryResponse.summary:type_name -> blueapi.cover.v1.AssetsSummary
	302, // 46: blueapi.cover.v1.ResolveCostGroupCombinationsResponse.accounts:type_name -> blueapi.api.cover.Account
	130, // 47: blueapi.cover.v1.GetCostUsageRequest.awsOptions:type_name -> blueapi.cover.v1.GetCostUsageRequestAwsOptions
	131, // 48: blueapi.cover.v1.GetCostUsageRequest.azureOptions:type_name -> blueapi.cover.v1.GetCostUsageRequestAzureOptions
	132, // 49: blueapi.cover.v1.GetCostUsageRequest.gcpOptions:type_name -> blueapi.cover.v1.GetCostUsageRequestGcpOptions
	133, // 50: blueapi.cover.v1.GetCostUsageRequest.azurecspOptions:type_name -> blueapi.cover.v1.GetCostUsageRequestAzureCspOptions
	134, // 51: blueapi.cover.v1.GetCostUsageRequest.customOptions:type_name -> blueapi.cover.v1.GetCostUsageRequestCustomOptions
	135, // 52: blueapi.cover.v1.GetCostUsageRequestAwsOptions.filters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters
	135, // 53: blueapi.cover.v1.GetCostUsageRequestAwsOptions.tagFilters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters
	135, // 54: blueapi.cover.v1.GetCostUsageRequestAzureOptions.filters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters
	135, // 55: blueapi.cover.v1.GetCostUsageRequestAzureOptions.tagFilters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters
	135, // 56: blueapi.cover.v1.GetCostUsageRequestGcpOptions.filters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters
	135, // 57: blueapi.cover.v1.GetCostUsageRequestGcpOptions.tagFilters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters
	135, // 58: blueapi.cover.v1.GetCostUsageRequestGcpOptions.labelFilters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters
	135, // 59: blueapi.cover.v1.GetCostUsageRequestGcpOptions.projectLabelFilters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters
	135, // 60: blueapi.cover.v1.GetCostUsageRequestAzureCspOptions.filters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters
	135, // 61: blueapi.cover.v1.GetCostUsageRequestAzureCspOptions.tagFilters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters
	135, // 62: blueapi.cover.v1.GetCostUsageRequestCustomOptions.filters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters
	135, // 63: blueapi.cover.v1.GetCostUsageRequestCustomOptions.tagFilters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters
	135, // 64: blueapi.cover.v1.GetCostUsageRequestCustomOptions.labelFilters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters
	135, // 65: blueapi.cover.v1.GetCostUsageRequestCustomOptions.projectLabelFilters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters
	285, // 66: blueapi.cover.v1.ReadCostsRequestOptionsFilters.andFilters:type_name -> blueapi.cover.v1.ReadCostsRequestOptionsFilters.AndFiltersEntry
	303, // 67: blueapi.cover.v1.CostItem.forecast:type_name -> blueapi.api.cover.AwsCostForecast
	304, // 68: blueapi.cover.v1.GetRightSizingRecommendationResponse.resource:type_name -> blueapi.api.cover.ResourceData
	0,   // 69: blueapi.cover.v1.UploadChargeCodeResponse.status:type_name -> blueapi.cover.v1.Status
	305, // 70: blueapi.cover.v1.GetTagsResponse.tagData:type_name -> blueapi.api.cover.TagData
	286, // 71: blueapi.cover.v1.Criteria.and:type_name -> blueapi.cover.v1.Criteria.AndEntry
	163, // 72: blueapi.cover.v1.CostAllocatorDetails.criteria:type_name -> blueapi.cover.v1.Criteria
	162, // 73: blueapi.cover.v1.CostAllocatorDetails.allocator:type_name -> blueapi.cover.v1.Allocator
	163, // 74: blueapi.cover.v1.CostAllocatorRequest.criteria:type_name -> blueapi.cover.v1.Criteria
	162, // 75: blueapi.cover.v1.CostAllocatorRequest.allocator:type_name -> blueapi.cover.v1.Allocator
	163, // 76: blueapi.cover.v1.CreateAllocatorRequest.criteria:type_name -> blueapi.cover.v1.Criteria
	162, // 77: blueapi.cover.v1.CreateAllocatorRequest.allocator:type_name -> blueapi.cover.v1.Allocator
	296, // 78: blueapi.cover.v1.ProxyCreateCompletionRequest.params:type_name -> google.protobuf.Struct
	306, // 79: blueapi.cover.v1.DataAccess.gcpOptions:type_name -> blueapi.api.cover.GcpOptions
	307, // 80: blueapi.cover.v1.DataAccess.azureOptions:type_name -> blueapi.api.cover.AzureOptions
	308, // 81: blueapi.cover.v1.DataAccess.awsOptions:type_name -> blueapi.api.cover.AwsOptions
	306, // 82: blueapi.cover.v1.RegisterDataAccessRequest.gcpOptions:type_name -> blueapi.api.cover.GcpOptions
	307, // 83: blueapi.cover.v1.RegisterDataAccessRequest.azureOptions:type_name -> blueapi.api.cover.AzureOptions
	308, // 84: blueapi.cover.v1.RegisterDataAccessRequest.awsOptions:type_name -> blueapi.api.cover.AwsOptions
	306, // 85: blueapi.cover.v1.UpdateDataAccessRequest.gcpOptions:type_name -> blueapi.api.cover.GcpOptions
	307, // 86: blueapi.cover.v1.UpdateDataAccessRequest.azureOptions:type_name -> blueapi.api.cover.AzureOptions
	308, // 87: blueapi.cover.v1.UpdateDataAccessRequest.awsOptions:type_name -> blueapi.api.cover.AwsOptions
	309, // 88: blueapi.cover.v1.GetCostGroupAttributeResponse.result:type_name -> blueapi.api.cover.Result
	305, // 89: blueapi.cover.v1.GetCostGroupAttributeResponse.tagData:type_name -> blueapi.api.cover.TagData
	310, // 90: blueapi.cover.v1.GetCategoriesResponse.category:type_name -> blueapi.api.cover.Category
	311, // 91: blueapi.cover.v1.GetAlertsResponse.alertData:type_name -> blueapi.api.cover.AlertData
	311, // 92: blueapi.cover.v1.CreateAlertResponse.alertData:type_name -> blueapi.api.cover.AlertData
	311, // 93: blueapi.cover.v1.GetAlertDetailsResponse.alertData:type_name -> blueapi.api.cover.AlertData
	311, // 94: blueapi.cover.v1.UpdateAlertDetailsResponse.alertData:type_name -> blueapi.api.cover.AlertData
	312, // 95: blueapi.cover.v1.GetChannelsResponse.channelData:type_name -> blueapi.api.cover.ChannelData
	312, // 96: blueapi.cover.v1.CreateChannelResponse.channelData:type_name -> blueapi.api.cover.ChannelData
	312, // 97: blueapi.cover.v1.GetChannelDetailsResponse.channelData:type_name -> blueapi.api.cover.ChannelData
	312, // 98: blueapi.cover.v1.UpdateChannelDetailsResponse.channelData:type_name -> blueapi.api.cover.ChannelData
	313, // 99: blueapi.cover.v1.GetDiscountRecommendationsRequest.awsInputs:type_name -> blueapi.api.cover.AwsInputs
	314, // 100: blueapi.cover.v1.GetDiscountRecommendationsRequest.azureInputs:type_name -> blueapi.api.cover.AzureInputs
	315, // 101: blueapi.cover.v1.GetDiscountRecommendationsRequest.gcpInputs:type_name -> blueapi.api.cover.GcpInputs
	316, // 102: blueapi.cover.v1.GetDiscountRecommendationsResponse.awsRecommendations:type_name -> blueapi.api.cover.AwsDiscountRecommendations
	317, // 103: blueapi.cover.v1.GetDiscountRecommendationsResponse.azureRecommendations:type_name -> blueapi.api.cover.AzureDiscountRecommendations
	318, // 104: blueapi.cover.v1.GetDiscountRecommendationsResponse.gcpRecommendations:type_name -> blueapi.api.cover.GcpDiscountRecommendations
	319, // 105: blueapi.cover.v1.DiscountExpiryAlertData.costGroups:type_name -> blueapi.api.cover.AlertCostGroup
	320, // 106: blueapi.cover.v1.DiscountExpiryAlertData.channels:type_name -> blueapi.api.cover.AlertChannels
	319, // 107: blueapi.cover.v1.AnomalyAlertData.costGroupId:type_name -> blueapi.api.cover.AlertCostGroup
	320, // 108: blueapi.cover.v1.AnomalyAlertData.channels:type_name -> blueapi.api.cover.AlertChannels
	321, // 109: blueapi.cover.v1.ListBudgetsResponse.budgetData:type_name -> blueapi.api.cover.BudgetData
	321, // 110: blueapi.cover.v1.GetBudgetResponse.budgetData:type_name -> blueapi.api.cover.BudgetData
	321, // 111: blueapi.cover.v1.CreateBudgetRequest.budgetData:type_name -> blueapi.api.cover.BudgetData
	321, // 112: blueapi.cover.v1.CreateBudgetResponse.budgetData:type_name -> blueapi.api.cover.BudgetData
	321, // 113: blueapi.cover.v1.UpdateBudgetRequest.budgetData:type_name -> blueapi.api.cover.BudgetData
	321, // 114: blueapi.cover.v1.UpdateBudgetResponse.budgetData:type_name -> blueapi.api.cover.BudgetData
	322, // 115: blueapi.cover.v1.GetReportSummaryResponse.executiveSummary:type_name -> blueapi.api.cover.ExecutiveSummary
	323, // 116: blueapi.cover.v1.GetReportSummaryResponse.optimizationRecommendationSummary:type_name -> blueapi.api.cover.OptimizationRecommendationSummary
	324, // 117: blueapi.cover.v1.GetReportSummaryResponse.savingsSummary:type_name -> blueapi.api.cover.SavingsSummary
	287, // 118: blueapi.cover.v1.ListRecommendationResponse.purchaseOption:type_name -> blueapi.cover.v1.ListRecommendationResponse.PurchaseOption
	325, // 119: blueapi.cover.v1.GetRecommendationResponse.recommendationData:type_name -> blueapi.api.cover.AWSRecommendations
	326, // 120: blueapi.cover.v1.OptimizationHistoryResponse.executedRecommendationDetails:type_name -> blueapi.api.cover.ExecutedRecommendationDetails
	327, // 121: blueapi.cover.v1.SetCostGroupEventIndicatorResponse.eventIndicator:type_name -> blueapi.api.cover.EventIndicator
	328, // 122: blueapi.cover.v1.SetCostGroupAnomalyOptionsResponse.anomalyOptions:type_name -> blueapi.api.cover.AnomalyOptions
	289, // 123: blueapi.cover.v1.UpdateCostGroupCreationUIResponse.userData:type_name -> blueapi.api.cover.UserData
	329, // 124: blueapi.cover.v1.ListUnitTypesResponse.unitCostData:type_name -> blueapi.api.cover.UnitCostData
	330, // 125: blueapi.cover.v1.CreateUnitTypeRequest.unitItems:type_name -> blueapi.api.cover.UnitItem
	329, // 126: blueapi.cover.v1.CreateUnitTypeResponse.unitCostData:type_name -> blueapi.api.cover.UnitCostData
	329, // 127: blueapi.cover.v1.GetUnitTypeResponse.unitCostData:type_name -> blueapi.api.cover.UnitCostData
	330, // 128: blueapi.cover.v1.UpdateUnitTypeRequest.unitItems:type_name -> blueapi.api.cover.UnitItem
	329, // 129: blueapi.cover.v1.UpdateUnitTypeResponse.unitCostData:type_name -> blueapi.api.cover.UnitCostData
	3,   // 130: blueapi.cover.v1.Cover.OnboardOrg:input_type -> blueapi.cover.v1.OnboardOrgRequest
	5,   // 131: blueapi.cover.v1.Cover.InviteMember:input_type -> blueapi.cover.v1.InviteMemberRequest
	7,   // 132: blueapi.cover.v1.Cover.ActivateUser:input_type -> blueapi.cover.v1.ActivateUserRequest
	9,   // 133: blueapi.cover.v1.Cover.CreateMember:input_type -> blueapi.cover.v1.CreateMemberRequest
	11,  // 134: blueapi.cover.v1.Cover.GetMembers:input_type -> blueapi.cover.v1.GetMembersRequest
	13,  // 135: blueapi.cover.v1.Cover.GetMemberDetails:input_type -> blueapi.cover.v1.GetMemberDetailsRequest
	15,  // 136: blueapi.cover.v1.Cover.GetMemberCostGroup:input_type -> blueapi.cover.v1.GetMemberCostGroupRequest
	17,  // 137: blueapi.cover.v1.Cover.UpdateMemberPermission:input_type -> blueapi.cover.v1.UpdateMemberPermissionRequest
	19,  // 138: blueapi.cover.v1.Cover.GetUserDetails:input_type -> blueapi.cover.v1.GetUserDetailsRequest
	21,  // 139: blueapi.cover.v1.Cover.UpdateUserAvatar:input_type -> blueapi.cover.v1.UpdateUserAvatarRequest
	23,  // 140: blueapi.cover.v1.Cover.UpdateUserIcon:input_type -> blueapi.cover.v1.UpdateUserIconRequest
	25,  // 141: blueapi.cover.v1.Cover.UpdateUserColorTheme:input_type -> blueapi.cover.v1.UpdateUserColorThemeRequest
	27,  // 142: blueapi.cover.v1.Cover.UpdateUserName:input_type -> blueapi.cover.v1.UpdateUserNameRequest
	29,  // 143: blueapi.cover.v1.Cover.UpdateUserEmail:input_type -> blueapi.cover.v1.UpdateUserEmailRequest
	31,  // 144: blueapi.cover.v1.Cover.UpdateUserMainView:input_type -> blueapi.cover.v1.UpdateUserMainViewRequest
	33,  // 145: blueapi.cover.v1.Cover.ResetUserPassword:input_type -> blueapi.cover.v1.ResetUserPasswordRequest
	35,  // 146: blueapi.cover.v1.Cover.UpdateUserLocale:input_type -> blueapi.cover.v1.UpdateUserLocaleRequest
	37,  // 147: blueapi.cover.v1.Cover.UpdateUserAppTheme:input_type -> blueapi.cover.v1.UpdateUserAppThemeRequest
	39,  // 148: blueapi.cover.v1.Cover.UpdateUserTimezone:input_type -> blueapi.cover.v1.UpdateUserTimezoneRequest
	41,  // 149: blueapi.cover.v1.Cover.UpdateUserAttributes:input_type -> blueapi.cover.v1.UpdateUserAttributesRequest
	43,  // 150: blueapi.cover.v1.Cover.DeleteMember:input_type -> blueapi.cover.v1.DeleteMemberRequest
	45,  // 151: blueapi.cover.v1.Cover.ResetPassword:input_type -> blueapi.cover.v1.ResetPasswordRequest
	47,  // 152: blueapi.cover.v1.Cover.CreateView:input_type -> blueapi.cover.v1.CreateViewRequest
	49,  // 153: blueapi.cover.v1.Cover.GetViews:input_type -> blueapi.cover.v1.GetViewsRequest
	51,  // 154: blueapi.cover.v1.Cover.GetCurrentView:input_type -> blueapi.cover.v1.GetCurrentViewRequest
	53,  // 155: blueapi.cover.v1.Cover.GetFavoriteViews:input_type -> blueapi.cover.v1.GetFavoriteViewsRequest
	55,  // 156: blueapi.cover.v1.Cover.PublishView:input_type -> blueapi.cover.v1.PublishViewRequest
	57,  // 157: blueapi.cover.v1.Cover.AddFavorite:input_type -> blueapi.cover.v1.AddFavoriteRequest
	59,  // 158: blueapi.cover.v1.Cover.RemoveFavorite:input_type -> blueapi.cover.v1.RemoveFavoriteRequest
	61,  // 159: blueapi.cover.v1.Cover.UpdateView:input_type -> blueapi.cover.v1.UpdateViewRequest
	63,  // 160: blueapi.cover.v1.Cover.UpdateViewLayout:input_type -> blueapi.cover.v1.UpdateViewLayoutRequest
	65,  // 161: blueapi.cover.v1.Cover.UpdateViewWidget:input_type -> blueapi.cover.v1.UpdateViewWidgetRequest
	67,  // 162: blueapi.cover.v1.Cover.UpdateViewColorTheme:input_type -> blueapi.cover.v1.UpdateViewColorThemeRequest
	69,  // 163: blueapi.cover.v1.Cover.UpdateViewCurrency:input_type -> blueapi.cover.v1.UpdateViewCurrencyRequest
	71,  // 164: blueapi.cover.v1.Cover.SetOrgUpdateCurrency:input_type -> blueapi.cover.v1.SetOrgUpdateCurrencyRequest
	73,  // 165: blueapi.cover.v1.Cover.GetOrgUpdateCurrency:input_type -> blueapi.cover.v1.GetOrgUpdateCurrencyRequest
	75,  // 166: blueapi.cover.v1.Cover.ListExchangeRates:input_type -> blueapi.cover.v1.ListExchangeRatesRequest
	78,  // 167: blueapi.cover.v1.Cover.DeleteView:input_type -> blueapi.cover.v1.DeleteViewRequest
	80,  // 168: blueapi.cover.v1.Cover.UpdateSideMenuState:input_type -> blueapi.cover.v1.UpdateSideMenuStateRequest
	82,  // 169: blueapi.cover.v1.Cover.AddSideMenuFavorite:input_type -> blueapi.cover.v1.AddSideMenuFavoriteRequest
	84,  // 170: blueapi.cover.v1.Cover.RemoveSideMenuFavorite:input_type -> blueapi.cover.v1.RemoveSideMenuFavoriteRequest
	86,  // 171: blueapi.cover.v1.Cover.CreateCostGroup:input_type -> blueapi.cover.v1.CreateCostGroupRequest
	88,  // 172: blueapi.cover.v1.Cover.GetCostGroups:input_type -> blueapi.cover.v1.GetCostGroupsRequest
	190, // 173: blueapi.cover.v1.Cover.GetCategories:input_type -> blueapi.cover.v1.GetCategoriesRequest
	90,  // 174: blueapi.cover.v1.Cover.GetCostGroupDetails:input_type -> blueapi.cover.v1.GetCostGroupDetailsRequest
	92,  // 175: blueapi.cover.v1.Cover.UpdateCostGroupName:input_type -> blueapi.cover.v1.UpdateCostGroupNameRequest
	94,  // 176: blueapi.cover.v1.Cover.UpdateCostGroupDescription:input_type -> blueapi.cover.v1.UpdateCostGroupDescriptionRequest
	96,  // 177: blueapi.cover.v1.Cover.UpdateCostGroupImage:input_type -> blueapi.cover.v1.UpdateCostGroupImageRequest
	98,  // 178: blueapi.cover.v1.Cover.UpdateCostGroupIcon:input_type -> blueapi.cover.v1.UpdateCostGroupIconRequest
	100, // 179: blueapi.cover.v1.Cover.UpdateCostGroupColorTheme:input_type -> blueapi.cover.v1.UpdateCostGroupColorThemeRequest
	102, // 180: blueapi.cover.v1.Cover.UpdateCostGroupCombinations:input_type -> blueapi.cover.v1.UpdateCostGroupCombinationsRequest
	127, // 181: blueapi.cover.v1.Cover.ResolveCostGroupCombinations:input_type -> blueapi.cover.v1.ResolveCostGroupCombinationsRequest
	104, // 182: blueapi.cover.v1.Cover.AssignCostGroupMember:input_type -> blueapi.cover.v1.AssignCostGroupMemberRequest
	106, // 183: blueapi.cover.v1.Cover.RemoveCostGroupMember:input_type -> blueapi.cover.v1.RemoveCostGroupMemberRequest
	108, // 184: blueapi.cover.v1.Cover.DeleteCostGroup:input_type -> blueapi.cover.v1.DeleteCostGroupRequest
	110, // 185: blueapi.cover.v1.Cover.GetAccountAccessTemplateUrl:input_type -> blueapi.cover.v1.GetAccountAccessTemplateUrlRequest
	112, // 186: blueapi.cover.v1.Cover.ListAccountAccess:input_type -> blueapi.cover.v1.ListAccountAccessRequest
	113, // 187: blueapi.cover.v1.Cover.GetAccountAccess:input_type -> blueapi.cover.v1.GetAccountAccessRequest
	185, // 188: blueapi.cover.v1.Cover.GetDataAccess:input_type -> blueapi.cover.v1.GetAndDeleteDataAccessRequest
	185, // 189: blueapi.cover.v1.Cover.DeleteDataAccess:input_type -> blueapi.cover.v1.GetAndDeleteDataAccessRequest
	115, // 190: blueapi.cover.v1.Cover.CreateAccountAccess:input_type -> blueapi.cover.v1.CreateAccountAccessRequest
	116, // 191: blueapi.cover.v1.Cover.CreateAccountAccessStackset:input_type -> blueapi.cover.v1.CreateAccountAccessStacksetRequest
	115, // 192: blueapi.cover.v1.Cover.CreateAccountAccessCur:input_type -> blueapi.cover.v1.CreateAccountAccessRequest
	117, // 193: blueapi.cover.v1.Cover.UpdateAccountAccess:input_type -> blueapi.cover.v1.UpdateAccountAccessRequest
	118, // 194: blueapi.cover.v1.Cover.DeleteAccountAccess:input_type -> blueapi.cover.v1.DeleteAccountAccessRequest
	120, // 195: blueapi.cover.v1.Cover.RegisterAccount:input_type -> blueapi.cover.v1.RegisterAccountRequest
	181, // 196: blueapi.cover.v1.Cover.RegisterDataAccess:input_type -> blueapi.cover.v1.RegisterDataAccessRequest
	184, // 197: blueapi.cover.v1.Cover.AddBillingAccount:input_type -> blueapi.cover.v1.BillingAccountRequest
	183, // 198: blueapi.cover.v1.Cover.ListDataAccess:input_type -> blueapi.cover.v1.ListDataAccessRequest
	182, // 199: blueapi.cover.v1.Cover.UpdateDataAccess:input_type -> blueapi.cover.v1.UpdateDataAccessRequest
	121, // 200: blueapi.cover.v1.Cover.ListAssets:input_type -> blueapi.cover.v1.ListAssetsRequest
	124, // 201: blueapi.cover.v1.Cover.GetAssetsSummary:input_type -> blueapi.cover.v1.GetAssetsSummaryRequest
	129, // 202: blueapi.cover.v1.Cover.GetCostUsage:input_type -> blueapi.cover.v1.GetCostUsageRequest
	137, // 203: blueapi.cover.v1.Cover.GetRightSizingRecommendation:input_type -> blueapi.cover.v1.GetRightSizingRecommendationRequest
	139, // 204: blueapi.cover.v1.Cover.ModifyResourceType:input_type -> blueapi.cover.v1.ModifyResourceTypeRequest
	141, // 205: blueapi.cover.v1.Cover.TerminateResource:input_type -> blueapi.cover.v1.TerminateResourceRequest
	143, // 206: blueapi.cover.v1.Cover.UploadChargeCode:input_type -> blueapi.cover.v1.UploadChargeCodeRequest
	145, // 207: blueapi.cover.v1.Cover.AssignPayer:input_type -> blueapi.cover.v1.AssignPayerRequest
	147, // 208: blueapi.cover.v1.Cover.GetPayers:input_type -> blueapi.cover.v1.GetPayersRequest
	149, // 209: blueapi.cover.v1.Cover.GetAccounts:input_type -> blueapi.cover.v1.GetAccountsRequest
	151, // 210: blueapi.cover.v1.Cover.GetServices:input_type -> blueapi.cover.v1.GetServicesRequest
	153, // 211: blueapi.cover.v1.Cover.GetRegions:input_type -> blueapi.cover.v1.GetRegionsRequest
	155, // 212: blueapi.cover.v1.Cover.GetTags:input_type -> blueapi.cover.v1.GetTagsRequest
	157, // 213: blueapi.cover.v1.Cover.ListFees:input_type -> blueapi.cover.v1.ListFeesRequest
	159, // 214: blueapi.cover.v1.Cover.RestoreFee:input_type -> blueapi.cover.v1.RestoreFeeRequest
	160, // 215: blueapi.cover.v1.Cover.GetCostGroupFee:input_type -> blueapi.cover.v1.GetCostGroupFeeRequest
	166, // 216: blueapi.cover.v1.Cover.ListAllocators:input_type -> blueapi.cover.v1.ListAllocatorsRequest
	167, // 217: blueapi.cover.v1.Cover.CreateAllocator:input_type -> blueapi.cover.v1.CreateAllocatorRequest
	165, // 218: blueapi.cover.v1.Cover.UpdateAllocator:input_type -> blueapi.cover.v1.CostAllocatorRequest
	168, // 219: blueapi.cover.v1.Cover.DeleteAllocator:input_type -> blueapi.cover.v1.DeleteAllocatorRequest
	169, // 220: blueapi.cover.v1.Cover.ProxyCreateCompletion:input_type -> blueapi.cover.v1.ProxyCreateCompletionRequest
	167, // 221: blueapi.cover.v1.Cover.SimulateFeeAllocator:input_type -> blueapi.cover.v1.CreateAllocatorRequest
	172, // 222: blueapi.cover.v1.Cover.ListAccountUsage:input_type -> blueapi.cover.v1.ListAccountUsageRequest
	173, // 223: blueapi.cover.v1.Cover.RestoreAccountUsage:input_type -> blueapi.cover.v1.RestoreAccountUsageRequest
	167, // 224: blueapi.cover.v1.Cover.SimulateAccountUsage:input_type -> blueapi.cover.v1.CreateAllocatorRequest
	157, // 225: blueapi.cover.v1.Cover.ListSavings:input_type -> blueapi.cover.v1.ListFeesRequest
	174, // 226: blueapi.cover.v1.Cover.RestoreSavings:input_type -> blueapi.cover.v1.RestoreSavingsRequest
	167, // 227: blueapi.cover.v1.Cover.SimulateSavings:input_type -> blueapi.cover.v1.CreateAllocatorRequest
	176, // 228: blueapi.cover.v1.Cover.GetCostGroupAllocation:input_type -> blueapi.cover.v1.GetCostGroupAllocationRequest
	178, // 229: blueapi.cover.v1.Cover.ProcessAuth0User:input_type -> blueapi.cover.v1.ProcessAuth0UserRequest
	186, // 230: blueapi.cover.v1.Cover.AddPartnerCenterCredentials:input_type -> blueapi.cover.v1.AddPartnerCenterCredentialsRequest
	187, // 231: blueapi.cover.v1.Cover.AddMpnSetting:input_type -> blueapi.cover.v1.AddMpnSettingRequest
	188, // 232: blueapi.cover.v1.Cover.GetCostGroupAttribute:input_type -> blueapi.cover.v1.GetCostGroupAttributeRequest
	192, // 233: blueapi.cover.v1.Cover.GetAlerts:input_type -> blueapi.cover.v1.GetAlertsRequest
	194, // 234: blueapi.cover.v1.Cover.CreateAlert:input_type -> blueapi.cover.v1.CreateAlertRequest
	196, // 235: blueapi.cover.v1.Cover.GetAlertDetails:input_type -> blueapi.cover.v1.GetAlertDetailsRequest
	198, // 236: blueapi.cover.v1.Cover.DeleteAlert:input_type -> blueapi.cover.v1.DeleteAlertRequest
	200, // 237: blueapi.cover.v1.Cover.UpdateAlertDetails:input_type -> blueapi.cover.v1.UpdateAlertDetailsRequest
	202, // 238: blueapi.cover.v1.Cover.GetChannels:input_type -> blueapi.cover.v1.GetChannelsRequest
	204, // 239: blueapi.cover.v1.Cover.CreateChannel:input_type -> blueapi.cover.v1.CreateChannelRequest
	206, // 240: blueapi.cover.v1.Cover.GetChannelDetails:input_type -> blueapi.cover.v1.GetChannelDetailsRequest
	208, // 241: blueapi.cover.v1.Cover.DeleteChannel:input_type -> blueapi.cover.v1.DeleteChannelRequest
	210, // 242: blueapi.cover.v1.Cover.UpdateChannelDetails:input_type -> blueapi.cover.v1.UpdateChannelDetailsRequest
	212, // 243: blueapi.cover.v1.Cover.GetDiscountRecommendations:input_type -> blueapi.cover.v1.GetDiscountRecommendationsRequest
	214, // 244: blueapi.cover.v1.Cover.GetAnomalyinCostGroup:input_type -> blueapi.cover.v1.GetAnomalyinCostGroupRequest
	216, // 245: blueapi.cover.v1.Cover.CreateDiscountExpirationAlert:input_type -> blueapi.cover.v1.CreateDiscountExpirationAlertRequest
	218, // 246: blueapi.cover.v1.Cover.UpdateDiscountExpirationAlert:input_type -> blueapi.cover.v1.UpdateDiscountExpirationAlertRequest
	217, // 247: blueapi.cover.v1.Cover.GetDiscountExpirationAlert:input_type -> blueapi.cover.v1.ManipulateDiscountExpirationAlertRequest
	220, // 248: blueapi.cover.v1.Cover.ListDiscountExpirationAlert:input_type -> blueapi.cover.v1.ListDiscountExpirationAlertRequest
	217, // 249: blueapi.cover.v1.Cover.DeleteDiscountExpirationAlert:input_type -> blueapi.cover.v1.ManipulateDiscountExpirationAlertRequest
	221, // 250: blueapi.cover.v1.Cover.CreateAnomalyAlert:input_type -> blueapi.cover.v1.CreateAnomalyAlertRequest
	222, // 251: blueapi.cover.v1.Cover.DeleteAnomalyAlert:input_type -> blueapi.cover.v1.ManipulateAnomalyAlertRequest
	224, // 252: blueapi.cover.v1.Cover.ListAnomalyAlert:input_type -> blueapi.cover.v1.ListAnomalyAlertRequest
	222, // 253: blueapi.cover.v1.Cover.GetAnomalyAlert:input_type -> blueapi.cover.v1.ManipulateAnomalyAlertRequest
	225, // 254: blueapi.cover.v1.Cover.UpdateAnomalyAlert:input_type -> blueapi.cover.v1.UpdateAnomalyAlertRequest
	226, // 255: blueapi.cover.v1.Cover.RegisterNewUser:input_type -> blueapi.cover.v1.RegisterNewUserRequest
	228, // 256: blueapi.cover.v1.Cover.GetUserProfile:input_type -> blueapi.cover.v1.GetUserProfileRequest
	230, // 257: blueapi.cover.v1.Cover.ListBudgets:input_type -> blueapi.cover.v1.ListBudgetsRequest
	232, // 258: blueapi.cover.v1.Cover.GetBudget:input_type -> blueapi.cover.v1.GetBudgetRequest
	234, // 259: blueapi.cover.v1.Cover.CreateBudget:input_type -> blueapi.cover.v1.CreateBudgetRequest
	236, // 260: blueapi.cover.v1.Cover.DeleteBudget:input_type -> blueapi.cover.v1.DeleteBudgetRequest
	238, // 261: blueapi.cover.v1.Cover.UpdateBudget:input_type -> blueapi.cover.v1.UpdateBudgetRequest
	240, // 262: blueapi.cover.v1.Cover.ResolveAWSMarketplaceTokenForOnboarding:input_type -> blueapi.cover.v1.ResolveAWSMarketplaceTokenForOnboardingRequest
	242, // 263: blueapi.cover.v1.Cover.GetCustomerSubscriptionStatus:input_type -> blueapi.cover.v1.GetCustomerSubscriptionStatusRequest
	244, // 264: blueapi.cover.v1.Cover.CreateProfiling:input_type -> blueapi.cover.v1.CreateProfilingRequest
	246, // 265: blueapi.cover.v1.Cover.AddInfotoMarketplace:input_type -> blueapi.cover.v1.AddInfotoMarketplaceRequest
	248, // 266: blueapi.cover.v1.Cover.GetReportSummary:input_type -> blueapi.cover.v1.GetReportSummaryRequest
	250, // 267: blueapi.cover.v1.Cover.ListRecommendations:input_type -> blueapi.cover.v1.ListRecommendationRequest
	252, // 268: blueapi.cover.v1.Cover.GetRecommendation:input_type -> blueapi.cover.v1.GetRecommendationRequest
	1,   // 269: blueapi.cover.v1.Cover.GetRecommendationV2:input_type -> blueapi.cover.v1.GetRecommendationV2Request
	254, // 270: blueapi.cover.v1.Cover.ExecuteOptimization:input_type -> blueapi.cover.v1.ExecuteOptimizationRequest
	256, // 271: blueapi.cover.v1.Cover.MarkAsExecuted:input_type -> blueapi.cover.v1.MarkAsExecutedRequest
	258, // 272: blueapi.cover.v1.Cover.UndoExecutedRecommendation:input_type -> blueapi.cover.v1.UndoExecutedRecommendationRequest
	260, // 273: blueapi.cover.v1.Cover.OptimizationHistory:input_type -> blueapi.cover.v1.OptimizationHistoryRequest
	262, // 274: blueapi.cover.v1.Cover.SetCostGroupEventIndicator:input_type -> blueapi.cover.v1.SetCostGroupEventIndicatorRequest
	264, // 275: blueapi.cover.v1.Cover.SetCostGroupAnomalyOptions:input_type -> blueapi.cover.v1.SetCostGroupAnomalyOptionsRequest
	266, // 276: blueapi.cover.v1.Cover.SetOrgFiscalMonth:input_type -> blueapi.cover.v1.SetOrgFiscalMonthRequest
	268, // 277: blueapi.cover.v1.Cover.GetOrgFiscalMonth:input_type -> blueapi.cover.v1.GetOrgFiscalMonthRequest
	270, // 278: blueapi.cover.v1.Cover.TransferOrganization:input_type -> blueapi.cover.v1.TransferOrganizationRequest
	272, // 279: blueapi.cover.v1.Cover.UpdateCostGroupCreationUI:input_type -> blueapi.cover.v1.UpdateCostGroupCreationUIRequest
	274, // 280: blueapi.cover.v1.Cover.ListUnitTypes:input_type -> blueapi.cover.v1.ListUnitTypesRequest
	276, // 281: blueapi.cover.v1.Cover.CreateUnitType:input_type -> blueapi.cover.v1.CreateUnitTypeRequest
	278, // 282: blueapi.cover.v1.Cover.GetUnitType:input_type -> blueapi.cover.v1.GetUnitTypeRequest
	280, // 283: blueapi.cover.v1.Cover.UpdateUnitType:input_type -> blueapi.cover.v1.UpdateUnitTypeRequest
	282, // 284: blueapi.cover.v1.Cover.DeleteUnitType:input_type -> blueapi.cover.v1.DeleteUnitTypeRequest
	4,   // 285: blueapi.cover.v1.Cover.OnboardOrg:output_type -> blueapi.cover.v1.OnboardOrgResponse
	6,   // 286: blueapi.cover.v1.Cover.InviteMember:output_type -> blueapi.cover.v1.InviteMemberResponse
	8,   // 287: blueapi.cover.v1.Cover.ActivateUser:output_type -> blueapi.cover.v1.ActivateUserResponse
	10,  // 288: blueapi.cover.v1.Cover.CreateMember:output_type -> blueapi.cover.v1.CreateMemberResponse
	12,  // 289: blueapi.cover.v1.Cover.GetMembers:output_type -> blueapi.cover.v1.GetMembersResponse
	14,  // 290: blueapi.cover.v1.Cover.GetMemberDetails:output_type -> blueapi.cover.v1.GetMemberDetailsResponse
	16,  // 291: blueapi.cover.v1.Cover.GetMemberCostGroup:output_type -> blueapi.cover.v1.GetMemberCostGroupResponse
	18,  // 292: blueapi.cover.v1.Cover.UpdateMemberPermission:output_type -> blueapi.cover.v1.UpdateMemberPermissionResponse
	20,  // 293: blueapi.cover.v1.Cover.GetUserDetails:output_type -> blueapi.cover.v1.GetUserDetailsResponse
	22,  // 294: blueapi.cover.v1.Cover.UpdateUserAvatar:output_type -> blueapi.cover.v1.UpdateUserAvatarResponse
	24,  // 295: blueapi.cover.v1.Cover.UpdateUserIcon:output_type -> blueapi.cover.v1.UpdateUserIconResponse
	26,  // 296: blueapi.cover.v1.Cover.UpdateUserColorTheme:output_type -> blueapi.cover.v1.UpdateUserColorThemeResponse
	28,  // 297: blueapi.cover.v1.Cover.UpdateUserName:output_type -> blueapi.cover.v1.UpdateUserNameResponse
	30,  // 298: blueapi.cover.v1.Cover.UpdateUserEmail:output_type -> blueapi.cover.v1.UpdateUserEmailResponse
	32,  // 299: blueapi.cover.v1.Cover.UpdateUserMainView:output_type -> blueapi.cover.v1.UpdateUserMainViewResponse
	34,  // 300: blueapi.cover.v1.Cover.ResetUserPassword:output_type -> blueapi.cover.v1.ResetUserPasswordResponse
	36,  // 301: blueapi.cover.v1.Cover.UpdateUserLocale:output_type -> blueapi.cover.v1.UpdateUserLocaleResponse
	38,  // 302: blueapi.cover.v1.Cover.UpdateUserAppTheme:output_type -> blueapi.cover.v1.UpdateUserAppThemeResponse
	40,  // 303: blueapi.cover.v1.Cover.UpdateUserTimezone:output_type -> blueapi.cover.v1.UpdateUserTimezoneResponse
	42,  // 304: blueapi.cover.v1.Cover.UpdateUserAttributes:output_type -> blueapi.cover.v1.UpdateUserAttributesResponse
	44,  // 305: blueapi.cover.v1.Cover.DeleteMember:output_type -> blueapi.cover.v1.DeleteMemberResponse
	46,  // 306: blueapi.cover.v1.Cover.ResetPassword:output_type -> blueapi.cover.v1.ResetPasswordResponse
	48,  // 307: blueapi.cover.v1.Cover.CreateView:output_type -> blueapi.cover.v1.CreateViewResponse
	50,  // 308: blueapi.cover.v1.Cover.GetViews:output_type -> blueapi.cover.v1.GetViewsResponse
	52,  // 309: blueapi.cover.v1.Cover.GetCurrentView:output_type -> blueapi.cover.v1.GetCurrentViewResponse
	54,  // 310: blueapi.cover.v1.Cover.GetFavoriteViews:output_type -> blueapi.cover.v1.GetFavoriteViewsResponse
	56,  // 311: blueapi.cover.v1.Cover.PublishView:output_type -> blueapi.cover.v1.PublishViewResponse
	58,  // 312: blueapi.cover.v1.Cover.AddFavorite:output_type -> blueapi.cover.v1.AddFavoriteResponse
	60,  // 313: blueapi.cover.v1.Cover.RemoveFavorite:output_type -> blueapi.cover.v1.RemoveFavoriteResponse
	62,  // 314: blueapi.cover.v1.Cover.UpdateView:output_type -> blueapi.cover.v1.UpdateViewResponse
	64,  // 315: blueapi.cover.v1.Cover.UpdateViewLayout:output_type -> blueapi.cover.v1.UpdateViewLayoutResponse
	66,  // 316: blueapi.cover.v1.Cover.UpdateViewWidget:output_type -> blueapi.cover.v1.UpdateViewWidgetResponse
	68,  // 317: blueapi.cover.v1.Cover.UpdateViewColorTheme:output_type -> blueapi.cover.v1.UpdateViewColorThemeResponse
	70,  // 318: blueapi.cover.v1.Cover.UpdateViewCurrency:output_type -> blueapi.cover.v1.UpdateViewCurrencyResponse
	72,  // 319: blueapi.cover.v1.Cover.SetOrgUpdateCurrency:output_type -> blueapi.cover.v1.SetOrgUpdateCurrencyResponse
	74,  // 320: blueapi.cover.v1.Cover.GetOrgUpdateCurrency:output_type -> blueapi.cover.v1.GetOrgUpdateCurrencyResponse
	76,  // 321: blueapi.cover.v1.Cover.ListExchangeRates:output_type -> blueapi.cover.v1.ListExchangeRatesResponse
	79,  // 322: blueapi.cover.v1.Cover.DeleteView:output_type -> blueapi.cover.v1.DeleteViewResponse
	81,  // 323: blueapi.cover.v1.Cover.UpdateSideMenuState:output_type -> blueapi.cover.v1.UpdateSideMenuStateResponse
	83,  // 324: blueapi.cover.v1.Cover.AddSideMenuFavorite:output_type -> blueapi.cover.v1.AddSideMenuFavoriteResponse
	85,  // 325: blueapi.cover.v1.Cover.RemoveSideMenuFavorite:output_type -> blueapi.cover.v1.RemoveSideMenuFavoriteResponse
	87,  // 326: blueapi.cover.v1.Cover.CreateCostGroup:output_type -> blueapi.cover.v1.CreateCostGroupResponse
	89,  // 327: blueapi.cover.v1.Cover.GetCostGroups:output_type -> blueapi.cover.v1.GetCostGroupsResponse
	191, // 328: blueapi.cover.v1.Cover.GetCategories:output_type -> blueapi.cover.v1.GetCategoriesResponse
	91,  // 329: blueapi.cover.v1.Cover.GetCostGroupDetails:output_type -> blueapi.cover.v1.GetCostGroupDetailsResponse
	93,  // 330: blueapi.cover.v1.Cover.UpdateCostGroupName:output_type -> blueapi.cover.v1.UpdateCostGroupNameResponse
	95,  // 331: blueapi.cover.v1.Cover.UpdateCostGroupDescription:output_type -> blueapi.cover.v1.UpdateCostGroupDescriptionResponse
	97,  // 332: blueapi.cover.v1.Cover.UpdateCostGroupImage:output_type -> blueapi.cover.v1.UpdateCostGroupImageResponse
	99,  // 333: blueapi.cover.v1.Cover.UpdateCostGroupIcon:output_type -> blueapi.cover.v1.UpdateCostGroupIconResponse
	101, // 334: blueapi.cover.v1.Cover.UpdateCostGroupColorTheme:output_type -> blueapi.cover.v1.UpdateCostGroupColorThemeResponse
	103, // 335: blueapi.cover.v1.Cover.UpdateCostGroupCombinations:output_type -> blueapi.cover.v1.UpdateCostGroupCombinationsResponse
	128, // 336: blueapi.cover.v1.Cover.ResolveCostGroupCombinations:output_type -> blueapi.cover.v1.ResolveCostGroupCombinationsResponse
	105, // 337: blueapi.cover.v1.Cover.AssignCostGroupMember:output_type -> blueapi.cover.v1.AssignCostGroupMemberResponse
	107, // 338: blueapi.cover.v1.Cover.RemoveCostGroupMember:output_type -> blueapi.cover.v1.RemoveCostGroupMemberResponse
	109, // 339: blueapi.cover.v1.Cover.DeleteCostGroup:output_type -> blueapi.cover.v1.DeleteCostGroupResponse
	111, // 340: blueapi.cover.v1.Cover.GetAccountAccessTemplateUrl:output_type -> blueapi.cover.v1.GetAccountAccessTemplateUrlResponse
	114, // 341: blueapi.cover.v1.Cover.ListAccountAccess:output_type -> blueapi.cover.v1.AccountAccess
	114, // 342: blueapi.cover.v1.Cover.GetAccountAccess:output_type -> blueapi.cover.v1.AccountAccess
	180, // 343: blueapi.cover.v1.Cover.GetDataAccess:output_type -> blueapi.cover.v1.DataAccess
	331, // 344: blueapi.cover.v1.Cover.DeleteDataAccess:output_type -> google.protobuf.Empty
	114, // 345: blueapi.cover.v1.Cover.CreateAccountAccess:output_type -> blueapi.cover.v1.AccountAccess
	114, // 346: blueapi.cover.v1.Cover.CreateAccountAccessStackset:output_type -> blueapi.cover.v1.AccountAccess
	114, // 347: blueapi.cover.v1.Cover.CreateAccountAccessCur:output_type -> blueapi.cover.v1.AccountAccess
	332, // 348: blueapi.cover.v1.Cover.UpdateAccountAccess:output_type -> protos.Operation
	119, // 349: blueapi.cover.v1.Cover.DeleteAccountAccess:output_type -> blueapi.cover.v1.DeleteAccountAccessResponse
	331, // 350: blueapi.cover.v1.Cover.RegisterAccount:output_type -> google.protobuf.Empty
	331, // 351: blueapi.cover.v1.Cover.RegisterDataAccess:output_type -> google.protobuf.Empty
	331, // 352: blueapi.cover.v1.Cover.AddBillingAccount:output_type -> google.protobuf.Empty
	180, // 353: blueapi.cover.v1.Cover.ListDataAccess:output_type -> blueapi.cover.v1.DataAccess
	331, // 354: blueapi.cover.v1.Cover.UpdateDataAccess:output_type -> google.protobuf.Empty
	123, // 355: blueapi.cover.v1.Cover.ListAssets:output_type -> blueapi.cover.v1.Resource
	125, // 356: blueapi.cover.v1.Cover.GetAssetsSummary:output_type -> blueapi.cover.v1.GetAssetsSummaryResponse
	136, // 357: blueapi.cover.v1.Cover.GetCostUsage:output_type -> blueapi.cover.v1.CostItem
	138, // 358: blueapi.cover.v1.Cover.GetRightSizingRecommendation:output_type -> blueapi.cover.v1.GetRightSizingRecommendationResponse
	140, // 359: blueapi.cover.v1.Cover.ModifyResourceType:output_type -> blueapi.cover.v1.ModifyResourceTypeResponse
	142, // 360: blueapi.cover.v1.Cover.TerminateResource:output_type -> blueapi.cover.v1.TerminateResourceResponse
	144, // 361: blueapi.cover.v1.Cover.UploadChargeCode:output_type -> blueapi.cover.v1.UploadChargeCodeResponse
	146, // 362: blueapi.cover.v1.Cover.AssignPayer:output_type -> blueapi.cover.v1.AssignPayerResponse
	148, // 363: blueapi.cover.v1.Cover.GetPayers:output_type -> blueapi.cover.v1.GetPayersResponse
	150, // 364: blueapi.cover.v1.Cover.GetAccounts:output_type -> blueapi.cover.v1.GetAccountsResponse
	152, // 365: blueapi.cover.v1.Cover.GetServices:output_type -> blueapi.cover.v1.GetServicesResponse
	154, // 366: blueapi.cover.v1.Cover.GetRegions:output_type -> blueapi.cover.v1.GetRegionsResponse
	156, // 367: blueapi.cover.v1.Cover.GetTags:output_type -> blueapi.cover.v1.GetTagsResponse
	158, // 368: blueapi.cover.v1.Cover.ListFees:output_type -> blueapi.cover.v1.FeeDetails
	158, // 369: blueapi.cover.v1.Cover.RestoreFee:output_type -> blueapi.cover.v1.FeeDetails
	161, // 370: blueapi.cover.v1.Cover.GetCostGroupFee:output_type -> blueapi.cover.v1.FeeItem
	164, // 371: blueapi.cover.v1.Cover.ListAllocators:output_type -> blueapi.cover.v1.CostAllocatorDetails
	164, // 372: blueapi.cover.v1.Cover.CreateAllocator:output_type -> blueapi.cover.v1.CostAllocatorDetails
	164, // 373: blueapi.cover.v1.Cover.UpdateAllocator:output_type -> blueapi.cover.v1.CostAllocatorDetails
	331, // 374: blueapi.cover.v1.Cover.DeleteAllocator:output_type -> google.protobuf.Empty
	170, // 375: blueapi.cover.v1.Cover.ProxyCreateCompletion:output_type -> blueapi.cover.v1.ProxyCreateCompletionResponse
	158, // 376: blueapi.cover.v1.Cover.SimulateFeeAllocator:output_type -> blueapi.cover.v1.FeeDetails
	171, // 377: blueapi.cover.v1.Cover.ListAccountUsage:output_type -> blueapi.cover.v1.AccountUsageDetails
	171, // 378: blueapi.cover.v1.Cover.RestoreAccountUsage:output_type -> blueapi.cover.v1.AccountUsageDetails
	171, // 379: blueapi.cover.v1.Cover.SimulateAccountUsage:output_type -> blueapi.cover.v1.AccountUsageDetails
	175, // 380: blueapi.cover.v1.Cover.ListSavings:output_type -> blueapi.cover.v1.SavingsDetails
	175, // 381: blueapi.cover.v1.Cover.RestoreSavings:output_type -> blueapi.cover.v1.SavingsDetails
	175, // 382: blueapi.cover.v1.Cover.SimulateSavings:output_type -> blueapi.cover.v1.SavingsDetails
	177, // 383: blueapi.cover.v1.Cover.GetCostGroupAllocation:output_type -> blueapi.cover.v1.AllocationItem
	179, // 384: blueapi.cover.v1.Cover.ProcessAuth0User:output_type -> blueapi.cover.v1.ProcessAuth0UserResponse
	331, // 385: blueapi.cover.v1.Cover.AddPartnerCenterCredentials:output_type -> google.protobuf.Empty
	331, // 386: blueapi.cover.v1.Cover.AddMpnSetting:output_type -> google.protobuf.Empty
	189, // 387: blueapi.cover.v1.Cover.GetCostGroupAttribute:output_type -> blueapi.cover.v1.GetCostGroupAttributeResponse
	193, // 388: blueapi.cover.v1.Cover.GetAlerts:output_type -> blueapi.cover.v1.GetAlertsResponse
	195, // 389: blueapi.cover.v1.Cover.CreateAlert:output_type -> blueapi.cover.v1.CreateAlertResponse
	197, // 390: blueapi.cover.v1.Cover.GetAlertDetails:output_type -> blueapi.cover.v1.GetAlertDetailsResponse
	199, // 391: blueapi.cover.v1.Cover.DeleteAlert:output_type -> blueapi.cover.v1.DeleteAlertResponse
	201, // 392: blueapi.cover.v1.Cover.UpdateAlertDetails:output_type -> blueapi.cover.v1.UpdateAlertDetailsResponse
	203, // 393: blueapi.cover.v1.Cover.GetChannels:output_type -> blueapi.cover.v1.GetChannelsResponse
	205, // 394: blueapi.cover.v1.Cover.CreateChannel:output_type -> blueapi.cover.v1.CreateChannelResponse
	207, // 395: blueapi.cover.v1.Cover.GetChannelDetails:output_type -> blueapi.cover.v1.GetChannelDetailsResponse
	209, // 396: blueapi.cover.v1.Cover.DeleteChannel:output_type -> blueapi.cover.v1.DeleteChannelResponse
	211, // 397: blueapi.cover.v1.Cover.UpdateChannelDetails:output_type -> blueapi.cover.v1.UpdateChannelDetailsResponse
	213, // 398: blueapi.cover.v1.Cover.GetDiscountRecommendations:output_type -> blueapi.cover.v1.GetDiscountRecommendationsResponse
	215, // 399: blueapi.cover.v1.Cover.GetAnomalyinCostGroup:output_type -> blueapi.cover.v1.AnomalyData
	331, // 400: blueapi.cover.v1.Cover.CreateDiscountExpirationAlert:output_type -> google.protobuf.Empty
	331, // 401: blueapi.cover.v1.Cover.UpdateDiscountExpirationAlert:output_type -> google.protobuf.Empty
	219, // 402: blueapi.cover.v1.Cover.GetDiscountExpirationAlert:output_type -> blueapi.cover.v1.DiscountExpiryAlertData
	219, // 403: blueapi.cover.v1.Cover.ListDiscountExpirationAlert:output_type -> blueapi.cover.v1.DiscountExpiryAlertData
	331, // 404: blueapi.cover.v1.Cover.DeleteDiscountExpirationAlert:output_type -> google.protobuf.Empty
	331, // 405: blueapi.cover.v1.Cover.CreateAnomalyAlert:output_type -> google.protobuf.Empty
	331, // 406: blueapi.cover.v1.Cover.DeleteAnomalyAlert:output_type -> google.protobuf.Empty
	223, // 407: blueapi.cover.v1.Cover.ListAnomalyAlert:output_type -> blueapi.cover.v1.AnomalyAlertData
	223, // 408: blueapi.cover.v1.Cover.GetAnomalyAlert:output_type -> blueapi.cover.v1.AnomalyAlertData
	331, // 409: blueapi.cover.v1.Cover.UpdateAnomalyAlert:output_type -> google.protobuf.Empty
	227, // 410: blueapi.cover.v1.Cover.RegisterNewUser:output_type -> blueapi.cover.v1.RegisterNewUserResponse
	229, // 411: blueapi.cover.v1.Cover.GetUserProfile:output_type -> blueapi.cover.v1.GetUserProfileResponse
	231, // 412: blueapi.cover.v1.Cover.ListBudgets:output_type -> blueapi.cover.v1.ListBudgetsResponse
	233, // 413: blueapi.cover.v1.Cover.GetBudget:output_type -> blueapi.cover.v1.GetBudgetResponse
	235, // 414: blueapi.cover.v1.Cover.CreateBudget:output_type -> blueapi.cover.v1.CreateBudgetResponse
	237, // 415: blueapi.cover.v1.Cover.DeleteBudget:output_type -> blueapi.cover.v1.DeleteBudgetResponse
	239, // 416: blueapi.cover.v1.Cover.UpdateBudget:output_type -> blueapi.cover.v1.UpdateBudgetResponse
	241, // 417: blueapi.cover.v1.Cover.ResolveAWSMarketplaceTokenForOnboarding:output_type -> blueapi.cover.v1.ResolveAWSMarketplaceTokenForOnboardingResponse
	243, // 418: blueapi.cover.v1.Cover.GetCustomerSubscriptionStatus:output_type -> blueapi.cover.v1.GetCustomerSubscriptionStatusResponse
	245, // 419: blueapi.cover.v1.Cover.CreateProfiling:output_type -> blueapi.cover.v1.CreateProfilingResponse
	247, // 420: blueapi.cover.v1.Cover.AddInfotoMarketplace:output_type -> blueapi.cover.v1.AddInfotoMarketplaceResponse
	249, // 421: blueapi.cover.v1.Cover.GetReportSummary:output_type -> blueapi.cover.v1.GetReportSummaryResponse
	251, // 422: blueapi.cover.v1.Cover.ListRecommendations:output_type -> blueapi.cover.v1.ListRecommendationResponse
	253, // 423: blueapi.cover.v1.Cover.GetRecommendation:output_type -> blueapi.cover.v1.GetRecommendationResponse
	2,   // 424: blueapi.cover.v1.Cover.GetRecommendationV2:output_type -> blueapi.cover.v1.GetRecommendationV2Response
	255, // 425: blueapi.cover.v1.Cover.ExecuteOptimization:output_type -> blueapi.cover.v1.ExecuteOptimizationResponse
	257, // 426: blueapi.cover.v1.Cover.MarkAsExecuted:output_type -> blueapi.cover.v1.MarkAsExecutedResponse
	259, // 427: blueapi.cover.v1.Cover.UndoExecutedRecommendation:output_type -> blueapi.cover.v1.UndoExecutedRecommendationResponse
	261, // 428: blueapi.cover.v1.Cover.OptimizationHistory:output_type -> blueapi.cover.v1.OptimizationHistoryResponse
	263, // 429: blueapi.cover.v1.Cover.SetCostGroupEventIndicator:output_type -> blueapi.cover.v1.SetCostGroupEventIndicatorResponse
	265, // 430: blueapi.cover.v1.Cover.SetCostGroupAnomalyOptions:output_type -> blueapi.cover.v1.SetCostGroupAnomalyOptionsResponse
	267, // 431: blueapi.cover.v1.Cover.SetOrgFiscalMonth:output_type -> blueapi.cover.v1.SetOrgFiscalMonthResponse
	269, // 432: blueapi.cover.v1.Cover.GetOrgFiscalMonth:output_type -> blueapi.cover.v1.GetOrgFiscalMonthResponse
	271, // 433: blueapi.cover.v1.Cover.TransferOrganization:output_type -> blueapi.cover.v1.TransferOrganizationResponse
	273, // 434: blueapi.cover.v1.Cover.UpdateCostGroupCreationUI:output_type -> blueapi.cover.v1.UpdateCostGroupCreationUIResponse
	275, // 435: blueapi.cover.v1.Cover.ListUnitTypes:output_type -> blueapi.cover.v1.ListUnitTypesResponse
	277, // 436: blueapi.cover.v1.Cover.CreateUnitType:output_type -> blueapi.cover.v1.CreateUnitTypeResponse
	279, // 437: blueapi.cover.v1.Cover.GetUnitType:output_type -> blueapi.cover.v1.GetUnitTypeResponse
	281, // 438: blueapi.cover.v1.Cover.UpdateUnitType:output_type -> blueapi.cover.v1.UpdateUnitTypeResponse
	283, // 439: blueapi.cover.v1.Cover.DeleteUnitType:output_type -> blueapi.cover.v1.DeleteUnitTypeResponse
	285, // [285:440] is the sub-list for method output_type
	130, // [130:285] is the sub-list for method input_type
	130, // [130:130] is the sub-list for extension type_name
	130, // [130:130] is the sub-list for extension extendee
	0,   // [0:130] is the sub-list for field type_name
}

func init() { file_cover_v1_cover_proto_init() }
func file_cover_v1_cover_proto_init() {
	if File_cover_v1_cover_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cover_v1_cover_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetRecommendationV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetRecommendationV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*OnboardOrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*OnboardOrgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*InviteMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*InviteMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ActivateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ActivateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CreateMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CreateMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetMemberDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetMemberDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetMemberCostGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GetMemberCostGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateMemberPermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateMemberPermissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserAvatarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserAvatarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserIconRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserIconResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserColorThemeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserColorThemeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserMainViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserMainViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*ResetUserPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*ResetUserPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserLocaleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserLocaleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserAppThemeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserAppThemeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserTimezoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserTimezoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*ResetPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*ResetPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*CreateViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*CreateViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*GetViewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*GetViewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*GetCurrentViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*GetCurrentViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*GetFavoriteViewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*GetFavoriteViewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*PublishViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*PublishViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*AddFavoriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*AddFavoriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveFavoriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveFavoriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateViewLayoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateViewLayoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateViewWidgetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateViewWidgetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateViewColorThemeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateViewColorThemeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateViewCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateViewCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*SetOrgUpdateCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*SetOrgUpdateCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgUpdateCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgUpdateCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*ListExchangeRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*ListExchangeRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*ExchangeRates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSideMenuStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSideMenuStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*AddSideMenuFavoriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*AddSideMenuFavoriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveSideMenuFavoriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveSideMenuFavoriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*CreateCostGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*CreateCostGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*GetCostGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*GetCostGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*GetCostGroupDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*GetCostGroupDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCostGroupNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCostGroupNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCostGroupDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCostGroupDescriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCostGroupImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCostGroupImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCostGroupIconRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCostGroupIconResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCostGroupColorThemeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCostGroupColorThemeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCostGroupCombinationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCostGroupCombinationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*AssignCostGroupMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*AssignCostGroupMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveCostGroupMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveCostGroupMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteCostGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteCostGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*GetAccountAccessTemplateUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*GetAccountAccessTemplateUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*ListAccountAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*GetAccountAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*AccountAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAccountAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAccountAccessStacksetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAccountAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAccountAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAccountAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[120].Exporter = func(v any, i int) any {
			switch v := v.(*ListAssetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*ListAssetsFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[122].Exporter = func(v any, i int) any {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[123].Exporter = func(v any, i int) any {
			switch v := v.(*GetAssetsSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[124].Exporter = func(v any, i int) any {
			switch v := v.(*GetAssetsSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[125].Exporter = func(v any, i int) any {
			switch v := v.(*AssetsSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[126].Exporter = func(v any, i int) any {
			switch v := v.(*ResolveCostGroupCombinationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[127].Exporter = func(v any, i int) any {
			switch v := v.(*ResolveCostGroupCombinationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[128].Exporter = func(v any, i int) any {
			switch v := v.(*GetCostUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[129].Exporter = func(v any, i int) any {
			switch v := v.(*GetCostUsageRequestAwsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[130].Exporter = func(v any, i int) any {
			switch v := v.(*GetCostUsageRequestAzureOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[131].Exporter = func(v any, i int) any {
			switch v := v.(*GetCostUsageRequestGcpOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[132].Exporter = func(v any, i int) any {
			switch v := v.(*GetCostUsageRequestAzureCspOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[133].Exporter = func(v any, i int) any {
			switch v := v.(*GetCostUsageRequestCustomOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[134].Exporter = func(v any, i int) any {
			switch v := v.(*ReadCostsRequestOptionsFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[135].Exporter = func(v any, i int) any {
			switch v := v.(*CostItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[136].Exporter = func(v any, i int) any {
			switch v := v.(*GetRightSizingRecommendationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[137].Exporter = func(v any, i int) any {
			switch v := v.(*GetRightSizingRecommendationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[138].Exporter = func(v any, i int) any {
			switch v := v.(*ModifyResourceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[139].Exporter = func(v any, i int) any {
			switch v := v.(*ModifyResourceTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[140].Exporter = func(v any, i int) any {
			switch v := v.(*TerminateResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[141].Exporter = func(v any, i int) any {
			switch v := v.(*TerminateResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[142].Exporter = func(v any, i int) any {
			switch v := v.(*UploadChargeCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[143].Exporter = func(v any, i int) any {
			switch v := v.(*UploadChargeCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[144].Exporter = func(v any, i int) any {
			switch v := v.(*AssignPayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[145].Exporter = func(v any, i int) any {
			switch v := v.(*AssignPayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[146].Exporter = func(v any, i int) any {
			switch v := v.(*GetPayersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[147].Exporter = func(v any, i int) any {
			switch v := v.(*GetPayersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[148].Exporter = func(v any, i int) any {
			switch v := v.(*GetAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[149].Exporter = func(v any, i int) any {
			switch v := v.(*GetAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[150].Exporter = func(v any, i int) any {
			switch v := v.(*GetServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[151].Exporter = func(v any, i int) any {
			switch v := v.(*GetServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[152].Exporter = func(v any, i int) any {
			switch v := v.(*GetRegionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[153].Exporter = func(v any, i int) any {
			switch v := v.(*GetRegionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[154].Exporter = func(v any, i int) any {
			switch v := v.(*GetTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[155].Exporter = func(v any, i int) any {
			switch v := v.(*GetTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[156].Exporter = func(v any, i int) any {
			switch v := v.(*ListFeesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[157].Exporter = func(v any, i int) any {
			switch v := v.(*FeeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[158].Exporter = func(v any, i int) any {
			switch v := v.(*RestoreFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[159].Exporter = func(v any, i int) any {
			switch v := v.(*GetCostGroupFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[160].Exporter = func(v any, i int) any {
			switch v := v.(*FeeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[161].Exporter = func(v any, i int) any {
			switch v := v.(*Allocator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[162].Exporter = func(v any, i int) any {
			switch v := v.(*Criteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[163].Exporter = func(v any, i int) any {
			switch v := v.(*CostAllocatorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[164].Exporter = func(v any, i int) any {
			switch v := v.(*CostAllocatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[165].Exporter = func(v any, i int) any {
			switch v := v.(*ListAllocatorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[166].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAllocatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[167].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAllocatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[168].Exporter = func(v any, i int) any {
			switch v := v.(*ProxyCreateCompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[169].Exporter = func(v any, i int) any {
			switch v := v.(*ProxyCreateCompletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[170].Exporter = func(v any, i int) any {
			switch v := v.(*AccountUsageDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[171].Exporter = func(v any, i int) any {
			switch v := v.(*ListAccountUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[172].Exporter = func(v any, i int) any {
			switch v := v.(*RestoreAccountUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[173].Exporter = func(v any, i int) any {
			switch v := v.(*RestoreSavingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[174].Exporter = func(v any, i int) any {
			switch v := v.(*SavingsDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[175].Exporter = func(v any, i int) any {
			switch v := v.(*GetCostGroupAllocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[176].Exporter = func(v any, i int) any {
			switch v := v.(*AllocationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[177].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessAuth0UserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[178].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessAuth0UserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[179].Exporter = func(v any, i int) any {
			switch v := v.(*DataAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[180].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterDataAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[181].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDataAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[182].Exporter = func(v any, i int) any {
			switch v := v.(*ListDataAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[183].Exporter = func(v any, i int) any {
			switch v := v.(*BillingAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[184].Exporter = func(v any, i int) any {
			switch v := v.(*GetAndDeleteDataAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[185].Exporter = func(v any, i int) any {
			switch v := v.(*AddPartnerCenterCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[186].Exporter = func(v any, i int) any {
			switch v := v.(*AddMpnSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[187].Exporter = func(v any, i int) any {
			switch v := v.(*GetCostGroupAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[188].Exporter = func(v any, i int) any {
			switch v := v.(*GetCostGroupAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[189].Exporter = func(v any, i int) any {
			switch v := v.(*GetCategoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[190].Exporter = func(v any, i int) any {
			switch v := v.(*GetCategoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[191].Exporter = func(v any, i int) any {
			switch v := v.(*GetAlertsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[192].Exporter = func(v any, i int) any {
			switch v := v.(*GetAlertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[193].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[194].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[195].Exporter = func(v any, i int) any {
			switch v := v.(*GetAlertDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[196].Exporter = func(v any, i int) any {
			switch v := v.(*GetAlertDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[197].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[198].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[199].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAlertDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[200].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAlertDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[201].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[202].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[203].Exporter = func(v any, i int) any {
			switch v := v.(*CreateChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[204].Exporter = func(v any, i int) any {
			switch v := v.(*CreateChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[205].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[206].Exporter = func(v any, i int) any {
			switch v := v.(*GetChannelDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[207].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[208].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[209].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateChannelDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[210].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateChannelDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[211].Exporter = func(v any, i int) any {
			switch v := v.(*GetDiscountRecommendationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[212].Exporter = func(v any, i int) any {
			switch v := v.(*GetDiscountRecommendationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[213].Exporter = func(v any, i int) any {
			switch v := v.(*GetAnomalyinCostGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[214].Exporter = func(v any, i int) any {
			switch v := v.(*AnomalyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[215].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDiscountExpirationAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[216].Exporter = func(v any, i int) any {
			switch v := v.(*ManipulateDiscountExpirationAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[217].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDiscountExpirationAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[218].Exporter = func(v any, i int) any {
			switch v := v.(*DiscountExpiryAlertData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[219].Exporter = func(v any, i int) any {
			switch v := v.(*ListDiscountExpirationAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[220].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAnomalyAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[221].Exporter = func(v any, i int) any {
			switch v := v.(*ManipulateAnomalyAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[222].Exporter = func(v any, i int) any {
			switch v := v.(*AnomalyAlertData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[223].Exporter = func(v any, i int) any {
			switch v := v.(*ListAnomalyAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[224].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAnomalyAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[225].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterNewUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[226].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterNewUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[227].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[228].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[229].Exporter = func(v any, i int) any {
			switch v := v.(*ListBudgetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[230].Exporter = func(v any, i int) any {
			switch v := v.(*ListBudgetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[231].Exporter = func(v any, i int) any {
			switch v := v.(*GetBudgetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[232].Exporter = func(v any, i int) any {
			switch v := v.(*GetBudgetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[233].Exporter = func(v any, i int) any {
			switch v := v.(*CreateBudgetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[234].Exporter = func(v any, i int) any {
			switch v := v.(*CreateBudgetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[235].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteBudgetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[236].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteBudgetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[237].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBudgetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[238].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBudgetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[239].Exporter = func(v any, i int) any {
			switch v := v.(*ResolveAWSMarketplaceTokenForOnboardingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[240].Exporter = func(v any, i int) any {
			switch v := v.(*ResolveAWSMarketplaceTokenForOnboardingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[241].Exporter = func(v any, i int) any {
			switch v := v.(*GetCustomerSubscriptionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[242].Exporter = func(v any, i int) any {
			switch v := v.(*GetCustomerSubscriptionStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[243].Exporter = func(v any, i int) any {
			switch v := v.(*CreateProfilingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[244].Exporter = func(v any, i int) any {
			switch v := v.(*CreateProfilingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[245].Exporter = func(v any, i int) any {
			switch v := v.(*AddInfotoMarketplaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[246].Exporter = func(v any, i int) any {
			switch v := v.(*AddInfotoMarketplaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[247].Exporter = func(v any, i int) any {
			switch v := v.(*GetReportSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[248].Exporter = func(v any, i int) any {
			switch v := v.(*GetReportSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[249].Exporter = func(v any, i int) any {
			switch v := v.(*ListRecommendationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[250].Exporter = func(v any, i int) any {
			switch v := v.(*ListRecommendationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[251].Exporter = func(v any, i int) any {
			switch v := v.(*GetRecommendationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[252].Exporter = func(v any, i int) any {
			switch v := v.(*GetRecommendationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[253].Exporter = func(v any, i int) any {
			switch v := v.(*ExecuteOptimizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[254].Exporter = func(v any, i int) any {
			switch v := v.(*ExecuteOptimizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[255].Exporter = func(v any, i int) any {
			switch v := v.(*MarkAsExecutedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[256].Exporter = func(v any, i int) any {
			switch v := v.(*MarkAsExecutedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[257].Exporter = func(v any, i int) any {
			switch v := v.(*UndoExecutedRecommendationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[258].Exporter = func(v any, i int) any {
			switch v := v.(*UndoExecutedRecommendationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[259].Exporter = func(v any, i int) any {
			switch v := v.(*OptimizationHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[260].Exporter = func(v any, i int) any {
			switch v := v.(*OptimizationHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[261].Exporter = func(v any, i int) any {
			switch v := v.(*SetCostGroupEventIndicatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[262].Exporter = func(v any, i int) any {
			switch v := v.(*SetCostGroupEventIndicatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[263].Exporter = func(v any, i int) any {
			switch v := v.(*SetCostGroupAnomalyOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[264].Exporter = func(v any, i int) any {
			switch v := v.(*SetCostGroupAnomalyOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[265].Exporter = func(v any, i int) any {
			switch v := v.(*SetOrgFiscalMonthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[266].Exporter = func(v any, i int) any {
			switch v := v.(*SetOrgFiscalMonthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[267].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgFiscalMonthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[268].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrgFiscalMonthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[269].Exporter = func(v any, i int) any {
			switch v := v.(*TransferOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[270].Exporter = func(v any, i int) any {
			switch v := v.(*TransferOrganizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[271].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCostGroupCreationUIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[272].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCostGroupCreationUIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[273].Exporter = func(v any, i int) any {
			switch v := v.(*ListUnitTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[274].Exporter = func(v any, i int) any {
			switch v := v.(*ListUnitTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[275].Exporter = func(v any, i int) any {
			switch v := v.(*CreateUnitTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[276].Exporter = func(v any, i int) any {
			switch v := v.(*CreateUnitTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[277].Exporter = func(v any, i int) any {
			switch v := v.(*GetUnitTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[278].Exporter = func(v any, i int) any {
			switch v := v.(*GetUnitTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[279].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUnitTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[280].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUnitTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[281].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteUnitTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[282].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteUnitTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cover_v1_cover_proto_msgTypes[286].Exporter = func(v any, i int) any {
			switch v := v.(*ListRecommendationResponse_PurchaseOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cover_v1_cover_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   287,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cover_v1_cover_proto_goTypes,
		DependencyIndexes: file_cover_v1_cover_proto_depIdxs,
		EnumInfos:         file_cover_v1_cover_proto_enumTypes,
		MessageInfos:      file_cover_v1_cover_proto_msgTypes,
	}.Build()
	File_cover_v1_cover_proto = out.File
	file_cover_v1_cover_proto_rawDesc = nil
	file_cover_v1_cover_proto_goTypes = nil
	file_cover_v1_cover_proto_depIdxs = nil
}
