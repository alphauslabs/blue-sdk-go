// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: cover/v1/cover.proto

package cover

import (
	context "context"
	protos "github.com/alphauslabs/blue-sdk-go/protos"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Cover_OnboardOrg_FullMethodName                              = "/blueapi.cover.v1.Cover/OnboardOrg"
	Cover_InviteMember_FullMethodName                            = "/blueapi.cover.v1.Cover/InviteMember"
	Cover_ActivateUser_FullMethodName                            = "/blueapi.cover.v1.Cover/ActivateUser"
	Cover_CreateMember_FullMethodName                            = "/blueapi.cover.v1.Cover/CreateMember"
	Cover_GetMembers_FullMethodName                              = "/blueapi.cover.v1.Cover/GetMembers"
	Cover_GetMemberDetails_FullMethodName                        = "/blueapi.cover.v1.Cover/GetMemberDetails"
	Cover_GetMemberCostGroup_FullMethodName                      = "/blueapi.cover.v1.Cover/GetMemberCostGroup"
	Cover_UpdateMemberPermission_FullMethodName                  = "/blueapi.cover.v1.Cover/UpdateMemberPermission"
	Cover_GetUserDetails_FullMethodName                          = "/blueapi.cover.v1.Cover/GetUserDetails"
	Cover_UpdateUserAvatar_FullMethodName                        = "/blueapi.cover.v1.Cover/UpdateUserAvatar"
	Cover_UpdateUserIcon_FullMethodName                          = "/blueapi.cover.v1.Cover/UpdateUserIcon"
	Cover_UpdateUserColorTheme_FullMethodName                    = "/blueapi.cover.v1.Cover/UpdateUserColorTheme"
	Cover_UpdateUserName_FullMethodName                          = "/blueapi.cover.v1.Cover/UpdateUserName"
	Cover_UpdateUserEmail_FullMethodName                         = "/blueapi.cover.v1.Cover/UpdateUserEmail"
	Cover_UpdateUserMainView_FullMethodName                      = "/blueapi.cover.v1.Cover/UpdateUserMainView"
	Cover_ResetUserPassword_FullMethodName                       = "/blueapi.cover.v1.Cover/ResetUserPassword"
	Cover_UpdateUserLocale_FullMethodName                        = "/blueapi.cover.v1.Cover/UpdateUserLocale"
	Cover_UpdateUserAppTheme_FullMethodName                      = "/blueapi.cover.v1.Cover/UpdateUserAppTheme"
	Cover_UpdateUserTimezone_FullMethodName                      = "/blueapi.cover.v1.Cover/UpdateUserTimezone"
	Cover_UpdateUserAttributes_FullMethodName                    = "/blueapi.cover.v1.Cover/UpdateUserAttributes"
	Cover_DeleteMember_FullMethodName                            = "/blueapi.cover.v1.Cover/DeleteMember"
	Cover_ResetPassword_FullMethodName                           = "/blueapi.cover.v1.Cover/ResetPassword"
	Cover_CreateView_FullMethodName                              = "/blueapi.cover.v1.Cover/CreateView"
	Cover_GetViews_FullMethodName                                = "/blueapi.cover.v1.Cover/GetViews"
	Cover_GetCurrentView_FullMethodName                          = "/blueapi.cover.v1.Cover/GetCurrentView"
	Cover_GetFavoriteViews_FullMethodName                        = "/blueapi.cover.v1.Cover/GetFavoriteViews"
	Cover_PublishView_FullMethodName                             = "/blueapi.cover.v1.Cover/PublishView"
	Cover_AddFavorite_FullMethodName                             = "/blueapi.cover.v1.Cover/AddFavorite"
	Cover_RemoveFavorite_FullMethodName                          = "/blueapi.cover.v1.Cover/RemoveFavorite"
	Cover_UpdateView_FullMethodName                              = "/blueapi.cover.v1.Cover/UpdateView"
	Cover_UpdateViewLayout_FullMethodName                        = "/blueapi.cover.v1.Cover/UpdateViewLayout"
	Cover_UpdateViewWidget_FullMethodName                        = "/blueapi.cover.v1.Cover/UpdateViewWidget"
	Cover_UpdateViewColorTheme_FullMethodName                    = "/blueapi.cover.v1.Cover/UpdateViewColorTheme"
	Cover_UpdateViewCurrency_FullMethodName                      = "/blueapi.cover.v1.Cover/UpdateViewCurrency"
	Cover_SetOrgUpdateCurrency_FullMethodName                    = "/blueapi.cover.v1.Cover/SetOrgUpdateCurrency"
	Cover_GetOrgUpdateCurrency_FullMethodName                    = "/blueapi.cover.v1.Cover/GetOrgUpdateCurrency"
	Cover_ListExchangeRates_FullMethodName                       = "/blueapi.cover.v1.Cover/ListExchangeRates"
	Cover_DeleteView_FullMethodName                              = "/blueapi.cover.v1.Cover/DeleteView"
	Cover_UpdateSideMenuState_FullMethodName                     = "/blueapi.cover.v1.Cover/UpdateSideMenuState"
	Cover_AddSideMenuFavorite_FullMethodName                     = "/blueapi.cover.v1.Cover/AddSideMenuFavorite"
	Cover_RemoveSideMenuFavorite_FullMethodName                  = "/blueapi.cover.v1.Cover/RemoveSideMenuFavorite"
	Cover_CreateCostGroup_FullMethodName                         = "/blueapi.cover.v1.Cover/CreateCostGroup"
	Cover_GetCostGroups_FullMethodName                           = "/blueapi.cover.v1.Cover/GetCostGroups"
	Cover_GetCategories_FullMethodName                           = "/blueapi.cover.v1.Cover/GetCategories"
	Cover_GetCostGroupDetails_FullMethodName                     = "/blueapi.cover.v1.Cover/GetCostGroupDetails"
	Cover_UpdateCostGroupName_FullMethodName                     = "/blueapi.cover.v1.Cover/UpdateCostGroupName"
	Cover_UpdateCostGroupDescription_FullMethodName              = "/blueapi.cover.v1.Cover/UpdateCostGroupDescription"
	Cover_UpdateCostGroupImage_FullMethodName                    = "/blueapi.cover.v1.Cover/UpdateCostGroupImage"
	Cover_UpdateCostGroupIcon_FullMethodName                     = "/blueapi.cover.v1.Cover/UpdateCostGroupIcon"
	Cover_UpdateCostGroupColorTheme_FullMethodName               = "/blueapi.cover.v1.Cover/UpdateCostGroupColorTheme"
	Cover_UpdateCostGroupCombinations_FullMethodName             = "/blueapi.cover.v1.Cover/UpdateCostGroupCombinations"
	Cover_ResolveCostGroupCombinations_FullMethodName            = "/blueapi.cover.v1.Cover/ResolveCostGroupCombinations"
	Cover_AssignCostGroupMember_FullMethodName                   = "/blueapi.cover.v1.Cover/AssignCostGroupMember"
	Cover_RemoveCostGroupMember_FullMethodName                   = "/blueapi.cover.v1.Cover/RemoveCostGroupMember"
	Cover_DeleteCostGroup_FullMethodName                         = "/blueapi.cover.v1.Cover/DeleteCostGroup"
	Cover_GetAccountAccessTemplateUrl_FullMethodName             = "/blueapi.cover.v1.Cover/GetAccountAccessTemplateUrl"
	Cover_ListAccountAccess_FullMethodName                       = "/blueapi.cover.v1.Cover/ListAccountAccess"
	Cover_GetAccountAccess_FullMethodName                        = "/blueapi.cover.v1.Cover/GetAccountAccess"
	Cover_GetDataAccess_FullMethodName                           = "/blueapi.cover.v1.Cover/GetDataAccess"
	Cover_DeleteDataAccess_FullMethodName                        = "/blueapi.cover.v1.Cover/DeleteDataAccess"
	Cover_CreateAccountAccess_FullMethodName                     = "/blueapi.cover.v1.Cover/CreateAccountAccess"
	Cover_CreateAccountAccessStackset_FullMethodName             = "/blueapi.cover.v1.Cover/CreateAccountAccessStackset"
	Cover_CreateAccountAccessCur_FullMethodName                  = "/blueapi.cover.v1.Cover/CreateAccountAccessCur"
	Cover_UpdateAccountAccess_FullMethodName                     = "/blueapi.cover.v1.Cover/UpdateAccountAccess"
	Cover_DeleteAccountAccess_FullMethodName                     = "/blueapi.cover.v1.Cover/DeleteAccountAccess"
	Cover_RegisterAccount_FullMethodName                         = "/blueapi.cover.v1.Cover/RegisterAccount"
	Cover_RegisterDataAccess_FullMethodName                      = "/blueapi.cover.v1.Cover/RegisterDataAccess"
	Cover_AddBillingAccount_FullMethodName                       = "/blueapi.cover.v1.Cover/AddBillingAccount"
	Cover_ListDataAccess_FullMethodName                          = "/blueapi.cover.v1.Cover/ListDataAccess"
	Cover_ListUnregisteredAccounts_FullMethodName                = "/blueapi.cover.v1.Cover/ListUnregisteredAccounts"
	Cover_UpdateDataAccess_FullMethodName                        = "/blueapi.cover.v1.Cover/UpdateDataAccess"
	Cover_ListAssets_FullMethodName                              = "/blueapi.cover.v1.Cover/ListAssets"
	Cover_GetAssetsSummary_FullMethodName                        = "/blueapi.cover.v1.Cover/GetAssetsSummary"
	Cover_GetCostUsage_FullMethodName                            = "/blueapi.cover.v1.Cover/GetCostUsage"
	Cover_GetRightSizingRecommendation_FullMethodName            = "/blueapi.cover.v1.Cover/GetRightSizingRecommendation"
	Cover_ModifyResourceType_FullMethodName                      = "/blueapi.cover.v1.Cover/ModifyResourceType"
	Cover_TerminateResource_FullMethodName                       = "/blueapi.cover.v1.Cover/TerminateResource"
	Cover_UploadChargeCode_FullMethodName                        = "/blueapi.cover.v1.Cover/UploadChargeCode"
	Cover_AssignPayer_FullMethodName                             = "/blueapi.cover.v1.Cover/AssignPayer"
	Cover_GetPayers_FullMethodName                               = "/blueapi.cover.v1.Cover/GetPayers"
	Cover_GetAccounts_FullMethodName                             = "/blueapi.cover.v1.Cover/GetAccounts"
	Cover_GetServices_FullMethodName                             = "/blueapi.cover.v1.Cover/GetServices"
	Cover_GetRegions_FullMethodName                              = "/blueapi.cover.v1.Cover/GetRegions"
	Cover_GetTags_FullMethodName                                 = "/blueapi.cover.v1.Cover/GetTags"
	Cover_ListFees_FullMethodName                                = "/blueapi.cover.v1.Cover/ListFees"
	Cover_RestoreFee_FullMethodName                              = "/blueapi.cover.v1.Cover/RestoreFee"
	Cover_GetCostGroupFee_FullMethodName                         = "/blueapi.cover.v1.Cover/GetCostGroupFee"
	Cover_ListAllocators_FullMethodName                          = "/blueapi.cover.v1.Cover/ListAllocators"
	Cover_CreateAllocator_FullMethodName                         = "/blueapi.cover.v1.Cover/CreateAllocator"
	Cover_GetAllocationAttributes_FullMethodName                 = "/blueapi.cover.v1.Cover/GetAllocationAttributes"
	Cover_UpdateAllocator_FullMethodName                         = "/blueapi.cover.v1.Cover/UpdateAllocator"
	Cover_DeleteAllocator_FullMethodName                         = "/blueapi.cover.v1.Cover/DeleteAllocator"
	Cover_ProxyCreateCompletion_FullMethodName                   = "/blueapi.cover.v1.Cover/ProxyCreateCompletion"
	Cover_SimulateFeeAllocator_FullMethodName                    = "/blueapi.cover.v1.Cover/SimulateFeeAllocator"
	Cover_ListAccountUsage_FullMethodName                        = "/blueapi.cover.v1.Cover/ListAccountUsage"
	Cover_RestoreAccountUsage_FullMethodName                     = "/blueapi.cover.v1.Cover/RestoreAccountUsage"
	Cover_SimulateAccountUsage_FullMethodName                    = "/blueapi.cover.v1.Cover/SimulateAccountUsage"
	Cover_ListSavings_FullMethodName                             = "/blueapi.cover.v1.Cover/ListSavings"
	Cover_RestoreSavings_FullMethodName                          = "/blueapi.cover.v1.Cover/RestoreSavings"
	Cover_SimulateSavings_FullMethodName                         = "/blueapi.cover.v1.Cover/SimulateSavings"
	Cover_GetCostGroupAllocation_FullMethodName                  = "/blueapi.cover.v1.Cover/GetCostGroupAllocation"
	Cover_ProcessAuth0User_FullMethodName                        = "/blueapi.cover.v1.Cover/ProcessAuth0User"
	Cover_AddPartnerCenterCredentials_FullMethodName             = "/blueapi.cover.v1.Cover/AddPartnerCenterCredentials"
	Cover_AddMpnSetting_FullMethodName                           = "/blueapi.cover.v1.Cover/AddMpnSetting"
	Cover_GetCostGroupAttribute_FullMethodName                   = "/blueapi.cover.v1.Cover/GetCostGroupAttribute"
	Cover_GetAlerts_FullMethodName                               = "/blueapi.cover.v1.Cover/GetAlerts"
	Cover_CreateAlert_FullMethodName                             = "/blueapi.cover.v1.Cover/CreateAlert"
	Cover_GetAlertDetails_FullMethodName                         = "/blueapi.cover.v1.Cover/GetAlertDetails"
	Cover_DeleteAlert_FullMethodName                             = "/blueapi.cover.v1.Cover/DeleteAlert"
	Cover_UpdateAlertDetails_FullMethodName                      = "/blueapi.cover.v1.Cover/UpdateAlertDetails"
	Cover_GetChannels_FullMethodName                             = "/blueapi.cover.v1.Cover/GetChannels"
	Cover_CreateChannel_FullMethodName                           = "/blueapi.cover.v1.Cover/CreateChannel"
	Cover_GetChannelDetails_FullMethodName                       = "/blueapi.cover.v1.Cover/GetChannelDetails"
	Cover_DeleteChannel_FullMethodName                           = "/blueapi.cover.v1.Cover/DeleteChannel"
	Cover_UpdateChannelDetails_FullMethodName                    = "/blueapi.cover.v1.Cover/UpdateChannelDetails"
	Cover_GetDiscountRecommendations_FullMethodName              = "/blueapi.cover.v1.Cover/GetDiscountRecommendations"
	Cover_GetAnomalyinCostGroup_FullMethodName                   = "/blueapi.cover.v1.Cover/GetAnomalyinCostGroup"
	Cover_CreateDiscountExpirationAlert_FullMethodName           = "/blueapi.cover.v1.Cover/CreateDiscountExpirationAlert"
	Cover_UpdateDiscountExpirationAlert_FullMethodName           = "/blueapi.cover.v1.Cover/UpdateDiscountExpirationAlert"
	Cover_GetDiscountExpirationAlert_FullMethodName              = "/blueapi.cover.v1.Cover/GetDiscountExpirationAlert"
	Cover_ListDiscountExpirationAlert_FullMethodName             = "/blueapi.cover.v1.Cover/ListDiscountExpirationAlert"
	Cover_DeleteDiscountExpirationAlert_FullMethodName           = "/blueapi.cover.v1.Cover/DeleteDiscountExpirationAlert"
	Cover_CreateAnomalyAlert_FullMethodName                      = "/blueapi.cover.v1.Cover/CreateAnomalyAlert"
	Cover_DeleteAnomalyAlert_FullMethodName                      = "/blueapi.cover.v1.Cover/DeleteAnomalyAlert"
	Cover_ListAnomalyAlert_FullMethodName                        = "/blueapi.cover.v1.Cover/ListAnomalyAlert"
	Cover_GetAnomalyAlert_FullMethodName                         = "/blueapi.cover.v1.Cover/GetAnomalyAlert"
	Cover_UpdateAnomalyAlert_FullMethodName                      = "/blueapi.cover.v1.Cover/UpdateAnomalyAlert"
	Cover_RegisterNewUser_FullMethodName                         = "/blueapi.cover.v1.Cover/RegisterNewUser"
	Cover_GetUserProfile_FullMethodName                          = "/blueapi.cover.v1.Cover/GetUserProfile"
	Cover_UpdateUserProfile_FullMethodName                       = "/blueapi.cover.v1.Cover/UpdateUserProfile"
	Cover_ListBudgets_FullMethodName                             = "/blueapi.cover.v1.Cover/ListBudgets"
	Cover_GetBudget_FullMethodName                               = "/blueapi.cover.v1.Cover/GetBudget"
	Cover_CreateBudget_FullMethodName                            = "/blueapi.cover.v1.Cover/CreateBudget"
	Cover_DeleteBudget_FullMethodName                            = "/blueapi.cover.v1.Cover/DeleteBudget"
	Cover_UpdateBudget_FullMethodName                            = "/blueapi.cover.v1.Cover/UpdateBudget"
	Cover_ResolveAWSMarketplaceTokenForOnboarding_FullMethodName = "/blueapi.cover.v1.Cover/ResolveAWSMarketplaceTokenForOnboarding"
	Cover_GetCustomerSubscriptionStatus_FullMethodName           = "/blueapi.cover.v1.Cover/GetCustomerSubscriptionStatus"
	Cover_CreateProfiling_FullMethodName                         = "/blueapi.cover.v1.Cover/CreateProfiling"
	Cover_AddInfotoMarketplace_FullMethodName                    = "/blueapi.cover.v1.Cover/AddInfotoMarketplace"
	Cover_GetReportSummary_FullMethodName                        = "/blueapi.cover.v1.Cover/GetReportSummary"
	Cover_ListRecommendations_FullMethodName                     = "/blueapi.cover.v1.Cover/ListRecommendations"
	Cover_ListRecommendationsV2_FullMethodName                   = "/blueapi.cover.v1.Cover/ListRecommendationsV2"
	Cover_GetRecommendation_FullMethodName                       = "/blueapi.cover.v1.Cover/GetRecommendation"
	Cover_GetRecommendationV2_FullMethodName                     = "/blueapi.cover.v1.Cover/GetRecommendationV2"
	Cover_ExecuteOptimization_FullMethodName                     = "/blueapi.cover.v1.Cover/ExecuteOptimization"
	Cover_GetExecutionStatus_FullMethodName                      = "/blueapi.cover.v1.Cover/GetExecutionStatus"
	Cover_MarkAsExecuted_FullMethodName                          = "/blueapi.cover.v1.Cover/MarkAsExecuted"
	Cover_UndoExecutedRecommendation_FullMethodName              = "/blueapi.cover.v1.Cover/UndoExecutedRecommendation"
	Cover_OptimizationHistory_FullMethodName                     = "/blueapi.cover.v1.Cover/OptimizationHistory"
	Cover_SetCostGroupEventIndicator_FullMethodName              = "/blueapi.cover.v1.Cover/SetCostGroupEventIndicator"
	Cover_SetCostGroupAnomalyOptions_FullMethodName              = "/blueapi.cover.v1.Cover/SetCostGroupAnomalyOptions"
	Cover_SetOrgFiscalMonth_FullMethodName                       = "/blueapi.cover.v1.Cover/SetOrgFiscalMonth"
	Cover_GetOrgFiscalMonth_FullMethodName                       = "/blueapi.cover.v1.Cover/GetOrgFiscalMonth"
	Cover_TransferOrganization_FullMethodName                    = "/blueapi.cover.v1.Cover/TransferOrganization"
	Cover_UpdateCostGroupCreationUI_FullMethodName               = "/blueapi.cover.v1.Cover/UpdateCostGroupCreationUI"
	Cover_ListUnitTypes_FullMethodName                           = "/blueapi.cover.v1.Cover/ListUnitTypes"
	Cover_CreateUnitType_FullMethodName                          = "/blueapi.cover.v1.Cover/CreateUnitType"
	Cover_GetUnitType_FullMethodName                             = "/blueapi.cover.v1.Cover/GetUnitType"
	Cover_UpdateUnitType_FullMethodName                          = "/blueapi.cover.v1.Cover/UpdateUnitType"
	Cover_DeleteUnitType_FullMethodName                          = "/blueapi.cover.v1.Cover/DeleteUnitType"
	Cover_MergeUnits_FullMethodName                              = "/blueapi.cover.v1.Cover/MergeUnits"
	Cover_ListSuggestedUnits_FullMethodName                      = "/blueapi.cover.v1.Cover/ListSuggestedUnits"
	Cover_MergeSuggestedUnits_FullMethodName                     = "/blueapi.cover.v1.Cover/MergeSuggestedUnits"
	Cover_CreateUnitFromSuggested_FullMethodName                 = "/blueapi.cover.v1.Cover/CreateUnitFromSuggested"
	Cover_ListSharedResources_FullMethodName                     = "/blueapi.cover.v1.Cover/ListSharedResources"
	Cover_CreateSharedResource_FullMethodName                    = "/blueapi.cover.v1.Cover/CreateSharedResource"
	Cover_GetSharedResource_FullMethodName                       = "/blueapi.cover.v1.Cover/GetSharedResource"
	Cover_UpdateSharedResource_FullMethodName                    = "/blueapi.cover.v1.Cover/UpdateSharedResource"
	Cover_DeleteSharedResource_FullMethodName                    = "/blueapi.cover.v1.Cover/DeleteSharedResource"
	Cover_ListUnitMetrics_FullMethodName                         = "/blueapi.cover.v1.Cover/ListUnitMetrics"
	Cover_CreateUnitMetric_FullMethodName                        = "/blueapi.cover.v1.Cover/CreateUnitMetric"
	Cover_GetUnitMetric_FullMethodName                           = "/blueapi.cover.v1.Cover/GetUnitMetric"
	Cover_UpdateUnitMetric_FullMethodName                        = "/blueapi.cover.v1.Cover/UpdateUnitMetric"
	Cover_DeleteUnitMetric_FullMethodName                        = "/blueapi.cover.v1.Cover/DeleteUnitMetric"
	Cover_ConfirmGoogleSheetAccess_FullMethodName                = "/blueapi.cover.v1.Cover/ConfirmGoogleSheetAccess"
	Cover_PreviewGoogleSheet_FullMethodName                      = "/blueapi.cover.v1.Cover/PreviewGoogleSheet"
	Cover_VerifyAPIAccess_FullMethodName                         = "/blueapi.cover.v1.Cover/VerifyAPIAccess"
)

// CoverClient is the client API for Cover service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Cover service definition.
type CoverClient interface {
	// Onboard an organization with an admin account and default cost group
	OnboardOrg(ctx context.Context, in *OnboardOrgRequest, opts ...grpc.CallOption) (*OnboardOrgResponse, error)
	// Invite members to the system
	InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...grpc.CallOption) (*InviteMemberResponse, error)
	// Activate the added user
	ActivateUser(ctx context.Context, in *ActivateUserRequest, opts ...grpc.CallOption) (*ActivateUserResponse, error)
	// Create a member
	CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*CreateMemberResponse, error)
	// Get all the members/subusers of the company
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error)
	// Get the details of the user
	GetMemberDetails(ctx context.Context, in *GetMemberDetailsRequest, opts ...grpc.CallOption) (*GetMemberDetailsResponse, error)
	// Get the cost group to which the member is attached
	GetMemberCostGroup(ctx context.Context, in *GetMemberCostGroupRequest, opts ...grpc.CallOption) (*GetMemberCostGroupResponse, error)
	// Modify member's permission
	UpdateMemberPermission(ctx context.Context, in *UpdateMemberPermissionRequest, opts ...grpc.CallOption) (*UpdateMemberPermissionResponse, error)
	// Get the details of the logged-in user
	GetUserDetails(ctx context.Context, in *GetUserDetailsRequest, opts ...grpc.CallOption) (*GetUserDetailsResponse, error)
	// Modify user's avatar
	UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarRequest, opts ...grpc.CallOption) (*UpdateUserAvatarResponse, error)
	// Modify user's icon
	UpdateUserIcon(ctx context.Context, in *UpdateUserIconRequest, opts ...grpc.CallOption) (*UpdateUserIconResponse, error)
	// Modify user's color theme
	UpdateUserColorTheme(ctx context.Context, in *UpdateUserColorThemeRequest, opts ...grpc.CallOption) (*UpdateUserColorThemeResponse, error)
	// Modify user's name
	UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error)
	// Modify user's email
	UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error)
	// Modify user's main view
	UpdateUserMainView(ctx context.Context, in *UpdateUserMainViewRequest, opts ...grpc.CallOption) (*UpdateUserMainViewResponse, error)
	// Reset user's password
	ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...grpc.CallOption) (*ResetUserPasswordResponse, error)
	// Modify user's locale
	UpdateUserLocale(ctx context.Context, in *UpdateUserLocaleRequest, opts ...grpc.CallOption) (*UpdateUserLocaleResponse, error)
	// Modify user's app theme
	UpdateUserAppTheme(ctx context.Context, in *UpdateUserAppThemeRequest, opts ...grpc.CallOption) (*UpdateUserAppThemeResponse, error)
	// Modify user's timezone
	UpdateUserTimezone(ctx context.Context, in *UpdateUserTimezoneRequest, opts ...grpc.CallOption) (*UpdateUserTimezoneResponse, error)
	// Modify attributes
	UpdateUserAttributes(ctx context.Context, in *UpdateUserAttributesRequest, opts ...grpc.CallOption) (*UpdateUserAttributesResponse, error)
	// Deletes a user
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error)
	// Reset member's password
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	// Create a view
	CreateView(ctx context.Context, in *CreateViewRequest, opts ...grpc.CallOption) (*CreateViewResponse, error)
	// Get all the views
	GetViews(ctx context.Context, in *GetViewsRequest, opts ...grpc.CallOption) (*GetViewsResponse, error)
	// Get the details of the current view
	GetCurrentView(ctx context.Context, in *GetCurrentViewRequest, opts ...grpc.CallOption) (*GetCurrentViewResponse, error)
	// Get favorite views
	GetFavoriteViews(ctx context.Context, in *GetFavoriteViewsRequest, opts ...grpc.CallOption) (*GetFavoriteViewsResponse, error)
	// Publish current view
	PublishView(ctx context.Context, in *PublishViewRequest, opts ...grpc.CallOption) (*PublishViewResponse, error)
	// Add to favorites
	AddFavorite(ctx context.Context, in *AddFavoriteRequest, opts ...grpc.CallOption) (*AddFavoriteResponse, error)
	// Remove from favorites
	RemoveFavorite(ctx context.Context, in *RemoveFavoriteRequest, opts ...grpc.CallOption) (*RemoveFavoriteResponse, error)
	// Updates the view details
	UpdateView(ctx context.Context, in *UpdateViewRequest, opts ...grpc.CallOption) (*UpdateViewResponse, error)
	// Updates the view's layout
	UpdateViewLayout(ctx context.Context, in *UpdateViewLayoutRequest, opts ...grpc.CallOption) (*UpdateViewLayoutResponse, error)
	// Updates the view's widget
	UpdateViewWidget(ctx context.Context, in *UpdateViewWidgetRequest, opts ...grpc.CallOption) (*UpdateViewWidgetResponse, error)
	// Update view's color theme
	UpdateViewColorTheme(ctx context.Context, in *UpdateViewColorThemeRequest, opts ...grpc.CallOption) (*UpdateViewColorThemeResponse, error)
	// Update report's currency settings
	UpdateViewCurrency(ctx context.Context, in *UpdateViewCurrencyRequest, opts ...grpc.CallOption) (*UpdateViewCurrencyResponse, error)
	// Sets Org's reference of currency exchange rate
	SetOrgUpdateCurrency(ctx context.Context, in *SetOrgUpdateCurrencyRequest, opts ...grpc.CallOption) (*SetOrgUpdateCurrencyResponse, error)
	// Get Org's reference of currency exchange rate
	GetOrgUpdateCurrency(ctx context.Context, in *GetOrgUpdateCurrencyRequest, opts ...grpc.CallOption) (*GetOrgUpdateCurrencyResponse, error)
	// Get list of exchange rates for a fixed report
	ListExchangeRates(ctx context.Context, in *ListExchangeRatesRequest, opts ...grpc.CallOption) (*ListExchangeRatesResponse, error)
	// Deletes a view
	DeleteView(ctx context.Context, in *DeleteViewRequest, opts ...grpc.CallOption) (*DeleteViewResponse, error)
	// Updates the side menu state
	UpdateSideMenuState(ctx context.Context, in *UpdateSideMenuStateRequest, opts ...grpc.CallOption) (*UpdateSideMenuStateResponse, error)
	// Add as side menu favorite
	AddSideMenuFavorite(ctx context.Context, in *AddSideMenuFavoriteRequest, opts ...grpc.CallOption) (*AddSideMenuFavoriteResponse, error)
	// Remove from side menu favorite
	RemoveSideMenuFavorite(ctx context.Context, in *RemoveSideMenuFavoriteRequest, opts ...grpc.CallOption) (*RemoveSideMenuFavoriteResponse, error)
	// Create a cost group
	CreateCostGroup(ctx context.Context, in *CreateCostGroupRequest, opts ...grpc.CallOption) (*CreateCostGroupResponse, error)
	// Get all the cost groups
	GetCostGroups(ctx context.Context, in *GetCostGroupsRequest, opts ...grpc.CallOption) (*GetCostGroupsResponse, error)
	// Retrieve the categories to be utilized in the creation of the cost group.
	GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error)
	// Get the details of the cost group
	GetCostGroupDetails(ctx context.Context, in *GetCostGroupDetailsRequest, opts ...grpc.CallOption) (*GetCostGroupDetailsResponse, error)
	// Update cost group's name
	UpdateCostGroupName(ctx context.Context, in *UpdateCostGroupNameRequest, opts ...grpc.CallOption) (*UpdateCostGroupNameResponse, error)
	// Update cost group's description
	UpdateCostGroupDescription(ctx context.Context, in *UpdateCostGroupDescriptionRequest, opts ...grpc.CallOption) (*UpdateCostGroupDescriptionResponse, error)
	// Update cost group's image
	UpdateCostGroupImage(ctx context.Context, in *UpdateCostGroupImageRequest, opts ...grpc.CallOption) (*UpdateCostGroupImageResponse, error)
	// Update cost group's icon
	UpdateCostGroupIcon(ctx context.Context, in *UpdateCostGroupIconRequest, opts ...grpc.CallOption) (*UpdateCostGroupIconResponse, error)
	// Update cost group's color theme
	UpdateCostGroupColorTheme(ctx context.Context, in *UpdateCostGroupColorThemeRequest, opts ...grpc.CallOption) (*UpdateCostGroupColorThemeResponse, error)
	// Update cost group's combinations
	UpdateCostGroupCombinations(ctx context.Context, in *UpdateCostGroupCombinationsRequest, opts ...grpc.CallOption) (*UpdateCostGroupCombinationsResponse, error)
	ResolveCostGroupCombinations(ctx context.Context, in *ResolveCostGroupCombinationsRequest, opts ...grpc.CallOption) (*ResolveCostGroupCombinationsResponse, error)
	// Assign a member to a cost group
	AssignCostGroupMember(ctx context.Context, in *AssignCostGroupMemberRequest, opts ...grpc.CallOption) (*AssignCostGroupMemberResponse, error)
	// Remove a member from a cost group
	RemoveCostGroupMember(ctx context.Context, in *RemoveCostGroupMemberRequest, opts ...grpc.CallOption) (*RemoveCostGroupMemberResponse, error)
	// Deletes a cost group
	DeleteCostGroup(ctx context.Context, in *DeleteCostGroupRequest, opts ...grpc.CallOption) (*DeleteCostGroupResponse, error)
	// Gets a CloudFormation launch URL for enabling the account access.
	GetAccountAccessTemplateUrl(ctx context.Context, in *GetAccountAccessTemplateUrlRequest, opts ...grpc.CallOption) (*GetAccountAccessTemplateUrlResponse, error)
	// Lists the account access role(s) attached to accounts under caller.
	ListAccountAccess(ctx context.Context, in *ListAccountAccessRequest, opts ...grpc.CallOption) (Cover_ListAccountAccessClient, error)
	// Gets the current account role attached to the input target.
	GetAccountAccess(ctx context.Context, in *GetAccountAccessRequest, opts ...grpc.CallOption) (*AccountAccess, error)
	// Gets the current account. For GCP and Azure.
	GetDataAccess(ctx context.Context, in *GetAndDeleteDataAccessRequest, opts ...grpc.CallOption) (*DataAccess, error)
	// Deletes GCP or Azure accounts based on the provided request.
	DeleteDataAccess(ctx context.Context, in *GetAndDeleteDataAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Starts validation of the account access stack deployment. If successful, the IAM role created from the CloudFormation stack will be registered to the target.
	CreateAccountAccess(ctx context.Context, in *CreateAccountAccessRequest, opts ...grpc.CallOption) (*AccountAccess, error)
	// Starts validation of the account access stackset deployment. If successful, the IAM role created from the CloudFormation stackset will be registered to the linked accounts.
	CreateAccountAccessStackset(ctx context.Context, in *CreateAccountAccessStacksetRequest, opts ...grpc.CallOption) (*AccountAccess, error)
	// Starts validation of the account access cur stack deployment. If successful, the IAM role created from the CloudFormation stack will be registered to the target.
	CreateAccountAccessCur(ctx context.Context, in *CreateAccountAccessRequest, opts ...grpc.CallOption) (*AccountAccess, error)
	// Starts an update to an existing account access CloudFormation stack for template changes, if any. Only call this API if the status of your account access is 'outdated'.
	UpdateAccountAccess(ctx context.Context, in *UpdateAccountAccessRequest, opts ...grpc.CallOption) (*protos.Operation, error)
	// Deletes the current account access role attached to this target account. This does not delete the CloudFormation deployment in your account.
	DeleteAccountAccess(ctx context.Context, in *DeleteAccountAccessRequest, opts ...grpc.CallOption) (*DeleteAccountAccessResponse, error)
	// Registers an account
	RegisterAccount(ctx context.Context, in *RegisterAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Registers GCP/Azure account.
	RegisterDataAccess(ctx context.Context, in *RegisterDataAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Add Billing Account ID for GCP.
	AddBillingAccount(ctx context.Context, in *BillingAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists Azure and GCP accounts.
	ListDataAccess(ctx context.Context, in *ListDataAccessRequest, opts ...grpc.CallOption) (Cover_ListDataAccessClient, error)
	// Lists unregistered linked accounts
	ListUnregisteredAccounts(ctx context.Context, in *ListUnregisteredAccountsRequest, opts ...grpc.CallOption) (*ListUnregisteredAccountsResponse, error)
	// Update GCP/Azure account info
	UpdateDataAccess(ctx context.Context, in *UpdateDataAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Lists assets for costgroup
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (Cover_ListAssetsClient, error)
	// WORK-IN-PROGRESS: Assets summary for costgroup
	GetAssetsSummary(ctx context.Context, in *GetAssetsSummaryRequest, opts ...grpc.CallOption) (*GetAssetsSummaryResponse, error)
	// WORK-IN-PROGRESS: Get usage and usage-based costs for the specified costgroup
	GetCostUsage(ctx context.Context, in *GetCostUsageRequest, opts ...grpc.CallOption) (Cover_GetCostUsageClient, error)
	// Gets the right sizing recommendation of all the accounts in the costgroup
	GetRightSizingRecommendation(ctx context.Context, in *GetRightSizingRecommendationRequest, opts ...grpc.CallOption) (*GetRightSizingRecommendationResponse, error)
	// Modify resource type from right sizing recommendation
	ModifyResourceType(ctx context.Context, in *ModifyResourceTypeRequest, opts ...grpc.CallOption) (*ModifyResourceTypeResponse, error)
	// Terminate a resource from right sizing recommendation
	TerminateResource(ctx context.Context, in *TerminateResourceRequest, opts ...grpc.CallOption) (*TerminateResourceResponse, error)
	// Upload charge code
	UploadChargeCode(ctx context.Context, opts ...grpc.CallOption) (Cover_UploadChargeCodeClient, error)
	// Assign payer to a linked account
	AssignPayer(ctx context.Context, in *AssignPayerRequest, opts ...grpc.CallOption) (*AssignPayerResponse, error)
	// Get list of all payers
	GetPayers(ctx context.Context, in *GetPayersRequest, opts ...grpc.CallOption) (*GetPayersResponse, error)
	// Get list of registered accounts
	GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
	// Get list of supported services
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error)
	// Get list of available regions
	GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error)
	// Get list of available tags
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error)
	// Lists the fees
	ListFees(ctx context.Context, in *ListFeesRequest, opts ...grpc.CallOption) (Cover_ListFeesClient, error)
	// Restore distributed fees
	RestoreFee(ctx context.Context, in *RestoreFeeRequest, opts ...grpc.CallOption) (Cover_RestoreFeeClient, error)
	// Get all available fees for the specified cost group
	GetCostGroupFee(ctx context.Context, in *GetCostGroupFeeRequest, opts ...grpc.CallOption) (Cover_GetCostGroupFeeClient, error)
	// WORK-IN-PROGRESS: Lists all the allocators
	ListAllocators(ctx context.Context, in *ListAllocatorsRequest, opts ...grpc.CallOption) (Cover_ListAllocatorsClient, error)
	// WORK-IN-PROGRESS: Creates cost allocator item
	CreateAllocator(ctx context.Context, in *CreateAllocatorRequest, opts ...grpc.CallOption) (*CostAllocatorDetails, error)
	// Get all available attributes for the charges
	GetAllocationAttributes(ctx context.Context, in *GetAllocationAttributesRequest, opts ...grpc.CallOption) (*GetAllocationAttributesResponse, error)
	// WORK-IN-PROGRESS: Updates a cost allocator item
	UpdateAllocator(ctx context.Context, in *CostAllocatorRequest, opts ...grpc.CallOption) (*CostAllocatorDetails, error)
	// WORK-IN-PROGRESS: Deletes a cost allocator
	DeleteAllocator(ctx context.Context, in *DeleteAllocatorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Do not use.
	ProxyCreateCompletion(ctx context.Context, in *ProxyCreateCompletionRequest, opts ...grpc.CallOption) (Cover_ProxyCreateCompletionClient, error)
	// WORK-IN-PROGRESS: Simulate fee allocator
	SimulateFeeAllocator(ctx context.Context, in *CreateAllocatorRequest, opts ...grpc.CallOption) (Cover_SimulateFeeAllocatorClient, error)
	// WORK-IN-PROGRESS: Lists the allocated account usages
	ListAccountUsage(ctx context.Context, in *ListAccountUsageRequest, opts ...grpc.CallOption) (Cover_ListAccountUsageClient, error)
	// WORK-IN-PROGRESS: Restore the allocated account usages
	RestoreAccountUsage(ctx context.Context, in *RestoreAccountUsageRequest, opts ...grpc.CallOption) (Cover_RestoreAccountUsageClient, error)
	// WORK-IN-PROGRESS: Simulate the output of the account usage allocation
	SimulateAccountUsage(ctx context.Context, in *CreateAllocatorRequest, opts ...grpc.CallOption) (Cover_SimulateAccountUsageClient, error)
	// WORK-IN-PROGRESS: Lists the allocated ri and sp savings
	ListSavings(ctx context.Context, in *ListFeesRequest, opts ...grpc.CallOption) (Cover_ListSavingsClient, error)
	// WORK-IN-PROGRESS: Restore the allocated ri and sp savings
	RestoreSavings(ctx context.Context, in *RestoreSavingsRequest, opts ...grpc.CallOption) (Cover_RestoreSavingsClient, error)
	// WORK-IN-PROGRESS: Simulate the output of the ri and sp savings allocation
	SimulateSavings(ctx context.Context, in *CreateAllocatorRequest, opts ...grpc.CallOption) (Cover_SimulateSavingsClient, error)
	// WORK-IN-PROGRESS: Get all available allocation items for the specified cost group
	GetCostGroupAllocation(ctx context.Context, in *GetCostGroupAllocationRequest, opts ...grpc.CallOption) (Cover_GetCostGroupAllocationClient, error)
	// WORK-IN-PROGRESS: Add or read user from Auth0
	ProcessAuth0User(ctx context.Context, in *ProcessAuth0UserRequest, opts ...grpc.CallOption) (*ProcessAuth0UserResponse, error)
	// WORK-IN-PROGRESS: PartnerCenterCredentials for Azure
	AddPartnerCenterCredentials(ctx context.Context, in *AddPartnerCenterCredentialsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Adding MpnSetting for Azure
	AddMpnSetting(ctx context.Context, in *AddMpnSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Get Cost Group by Attribute Type
	GetCostGroupAttribute(ctx context.Context, in *GetCostGroupAttributeRequest, opts ...grpc.CallOption) (*GetCostGroupAttributeResponse, error)
	// Get Alerts under organization
	GetAlerts(ctx context.Context, in *GetAlertsRequest, opts ...grpc.CallOption) (Cover_GetAlertsClient, error)
	// Create Alerts under organization
	CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error)
	// Get Specific Alert under organization
	GetAlertDetails(ctx context.Context, in *GetAlertDetailsRequest, opts ...grpc.CallOption) (*GetAlertDetailsResponse, error)
	// Delete Specific Alert under organization
	DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error)
	// Update Specific Alert under organization
	UpdateAlertDetails(ctx context.Context, in *UpdateAlertDetailsRequest, opts ...grpc.CallOption) (*UpdateAlertDetailsResponse, error)
	// WORK-IN-PROGRESS: Get Channels under organization
	GetChannels(ctx context.Context, in *GetChannelsRequest, opts ...grpc.CallOption) (Cover_GetChannelsClient, error)
	// WORK-IN-PROGRESS: Create Channel under organization
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error)
	// WORK-IN-PROGRESS: Get Specific Channel under organization
	GetChannelDetails(ctx context.Context, in *GetChannelDetailsRequest, opts ...grpc.CallOption) (*GetChannelDetailsResponse, error)
	// WORK-IN-PROGRESS: Delete Specific Channel under organization
	DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error)
	// WORK-IN-PROGRESS: Update Specific Channel under organization
	UpdateChannelDetails(ctx context.Context, in *UpdateChannelDetailsRequest, opts ...grpc.CallOption) (*UpdateChannelDetailsResponse, error)
	// Get the discount recommendations for every account in a cost group
	GetDiscountRecommendations(ctx context.Context, in *GetDiscountRecommendationsRequest, opts ...grpc.CallOption) (*GetDiscountRecommendationsResponse, error)
	// Get the data of a cost group containing anomaly values
	GetAnomalyinCostGroup(ctx context.Context, in *GetAnomalyinCostGroupRequest, opts ...grpc.CallOption) (Cover_GetAnomalyinCostGroupClient, error)
	// Create discount Expiration Alert.
	CreateDiscountExpirationAlert(ctx context.Context, in *CreateDiscountExpirationAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update discount Expiration Alert
	UpdateDiscountExpirationAlert(ctx context.Context, in *UpdateDiscountExpirationAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get discount Expiration Alert Data
	GetDiscountExpirationAlert(ctx context.Context, in *ManipulateDiscountExpirationAlertRequest, opts ...grpc.CallOption) (*DiscountExpiryAlertData, error)
	// List all discount Expiration Alert Data
	ListDiscountExpirationAlert(ctx context.Context, in *ListDiscountExpirationAlertRequest, opts ...grpc.CallOption) (Cover_ListDiscountExpirationAlertClient, error)
	// Delete selected discount Expiration Alert Data
	DeleteDiscountExpirationAlert(ctx context.Context, in *ManipulateDiscountExpirationAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Create Anomaly Alert
	CreateAnomalyAlert(ctx context.Context, in *CreateAnomalyAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete Anomaly Alert
	DeleteAnomalyAlert(ctx context.Context, in *ManipulateAnomalyAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List all the Anomaly Alert Data
	ListAnomalyAlert(ctx context.Context, in *ListAnomalyAlertRequest, opts ...grpc.CallOption) (Cover_ListAnomalyAlertClient, error)
	// Get Anomaly Alert Data
	GetAnomalyAlert(ctx context.Context, in *ManipulateAnomalyAlertRequest, opts ...grpc.CallOption) (*AnomalyAlertData, error)
	// Update Anomaly Alert
	UpdateAnomalyAlert(ctx context.Context, in *UpdateAnomalyAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Octo new user registration
	RegisterNewUser(ctx context.Context, in *RegisterNewUserRequest, opts ...grpc.CallOption) (*RegisterNewUserResponse, error)
	// Octo getting user profile
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	// Update user profile
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	// WORK-IN-PROGRESS: List all Budgets in an organization or Budgets under specific cost group
	ListBudgets(ctx context.Context, in *ListBudgetsRequest, opts ...grpc.CallOption) (Cover_ListBudgetsClient, error)
	// WORK-IN-PROGRESS: Get specific Budget data for a cost group in an organization
	GetBudget(ctx context.Context, in *GetBudgetRequest, opts ...grpc.CallOption) (*GetBudgetResponse, error)
	// WORK-IN-PROGRESS: Create Budget for specific cost group in an organization
	CreateBudget(ctx context.Context, in *CreateBudgetRequest, opts ...grpc.CallOption) (*CreateBudgetResponse, error)
	// WORK-IN-PROGRESS: Delete Budget for specific cost group in an organization
	DeleteBudget(ctx context.Context, in *DeleteBudgetRequest, opts ...grpc.CallOption) (*DeleteBudgetResponse, error)
	// WORK-IN-PROGRESS: Update Budget for specific cost group in an organization
	UpdateBudget(ctx context.Context, in *UpdateBudgetRequest, opts ...grpc.CallOption) (*UpdateBudgetResponse, error)
	// WORK-IN-PROGRESS:Resolve user for aws marketplace subscription integration
	ResolveAWSMarketplaceTokenForOnboarding(ctx context.Context, in *ResolveAWSMarketplaceTokenForOnboardingRequest, opts ...grpc.CallOption) (*ResolveAWSMarketplaceTokenForOnboardingResponse, error)
	// Get the Customer Subscription status from marketplace
	GetCustomerSubscriptionStatus(ctx context.Context, in *GetCustomerSubscriptionStatusRequest, opts ...grpc.CallOption) (*GetCustomerSubscriptionStatusResponse, error)
	// Profiling for new users.
	CreateProfiling(ctx context.Context, in *CreateProfilingRequest, opts ...grpc.CallOption) (*CreateProfilingResponse, error)
	// Adding orgId to marketplace customers
	AddInfotoMarketplace(ctx context.Context, in *AddInfotoMarketplaceRequest, opts ...grpc.CallOption) (*AddInfotoMarketplaceResponse, error)
	// Get data for insights reports summary
	GetReportSummary(ctx context.Context, in *GetReportSummaryRequest, opts ...grpc.CallOption) (*GetReportSummaryResponse, error)
	// Lists recommendations based on specified criteria.
	ListRecommendations(ctx context.Context, in *ListRecommendationRequest, opts ...grpc.CallOption) (Cover_ListRecommendationsClient, error)
	// Lists recommendations based on specified criteria.
	ListRecommendationsV2(ctx context.Context, in *ListRecommendationV2Request, opts ...grpc.CallOption) (Cover_ListRecommendationsV2Client, error)
	// Retrieves a specific recommendation by its ID.
	GetRecommendation(ctx context.Context, in *GetRecommendationRequest, opts ...grpc.CallOption) (*GetRecommendationResponse, error)
	// Retrieves a specific recommendation by its ID. (Version 2)
	GetRecommendationV2(ctx context.Context, in *GetRecommendationV2Request, opts ...grpc.CallOption) (*GetRecommendationV2Response, error)
	// Executes optimization based on a recommendation.
	ExecuteOptimization(ctx context.Context, in *ExecuteOptimizationRequest, opts ...grpc.CallOption) (*ExecuteOptimizationResponse, error)
	// Get Execution status of a recommendation.
	GetExecutionStatus(ctx context.Context, in *GetExecutionStatusRequest, opts ...grpc.CallOption) (Cover_GetExecutionStatusClient, error)
	// Mark a recommendation executed.
	MarkAsExecuted(ctx context.Context, in *MarkAsExecutedRequest, opts ...grpc.CallOption) (*MarkAsExecutedResponse, error)
	// Undo a executed recommendation (For recommendation).
	UndoExecutedRecommendation(ctx context.Context, in *UndoExecutedRecommendationRequest, opts ...grpc.CallOption) (*UndoExecutedRecommendationResponse, error)
	// Lists recommendations based on specified criteria.
	OptimizationHistory(ctx context.Context, in *OptimizationHistoryRequest, opts ...grpc.CallOption) (*OptimizationHistoryResponse, error)
	// Sets Cost group's event indicator
	SetCostGroupEventIndicator(ctx context.Context, in *SetCostGroupEventIndicatorRequest, opts ...grpc.CallOption) (*SetCostGroupEventIndicatorResponse, error)
	// Sets Cost group's anomaly options
	SetCostGroupAnomalyOptions(ctx context.Context, in *SetCostGroupAnomalyOptionsRequest, opts ...grpc.CallOption) (*SetCostGroupAnomalyOptionsResponse, error)
	// Sets Org's starting month/ fiscal month
	SetOrgFiscalMonth(ctx context.Context, in *SetOrgFiscalMonthRequest, opts ...grpc.CallOption) (*SetOrgFiscalMonthResponse, error)
	// Get Org's starting month/ fiscal month
	GetOrgFiscalMonth(ctx context.Context, in *GetOrgFiscalMonthRequest, opts ...grpc.CallOption) (*GetOrgFiscalMonthResponse, error)
	// WORK-IN-PROGRESS: Transfer the account from the original organization to Alphaus payer account
	TransferOrganization(ctx context.Context, in *TransferOrganizationRequest, opts ...grpc.CallOption) (*TransferOrganizationResponse, error)
	// WORK-IN-PROGRESS: Set user preference in cost group creation UI
	UpdateCostGroupCreationUI(ctx context.Context, in *UpdateCostGroupCreationUIRequest, opts ...grpc.CallOption) (*UpdateCostGroupCreationUIResponse, error)
	// Lists Unit Types
	ListUnitTypes(ctx context.Context, in *ListUnitTypesRequest, opts ...grpc.CallOption) (*ListUnitTypesResponse, error)
	// Create Unit Type
	CreateUnitType(ctx context.Context, in *CreateUnitTypeRequest, opts ...grpc.CallOption) (*CreateUnitTypeResponse, error)
	// Get Specific Unit Type
	GetUnitType(ctx context.Context, in *GetUnitTypeRequest, opts ...grpc.CallOption) (*GetUnitTypeResponse, error)
	// Update Specific Unit Type
	UpdateUnitType(ctx context.Context, in *UpdateUnitTypeRequest, opts ...grpc.CallOption) (*UpdateUnitTypeResponse, error)
	// Delete Specific Unit Type
	DeleteUnitType(ctx context.Context, in *DeleteUnitTypeRequest, opts ...grpc.CallOption) (*DeleteUnitTypeResponse, error)
	// Merge Existing Unit Types
	MergeUnits(ctx context.Context, in *MergeUnitsRequest, opts ...grpc.CallOption) (*MergeUnitsResponse, error)
	// List Suggested Unit Types
	ListSuggestedUnits(ctx context.Context, in *ListSuggestedUnitsRequest, opts ...grpc.CallOption) (*ListSuggestedUnitsResponse, error)
	// Merge Suggested Units
	MergeSuggestedUnits(ctx context.Context, in *MergeSuggestedUnitsRequest, opts ...grpc.CallOption) (*MergeSuggestedUnitsResponse, error)
	// Create Unit from Suggested Units
	CreateUnitFromSuggested(ctx context.Context, in *CreateUnitFromSuggestedRequest, opts ...grpc.CallOption) (*CreateUnitFromSuggestedResponse, error)
	// List all Shared Resources
	ListSharedResources(ctx context.Context, in *ListSharedResourcesRequest, opts ...grpc.CallOption) (*ListSharedResourcesResponse, error)
	// Create Shared Resource
	CreateSharedResource(ctx context.Context, in *CreateSharedResourcesRequest, opts ...grpc.CallOption) (*CreateSharedResourcesResponse, error)
	// Get Specific Shared Resource
	GetSharedResource(ctx context.Context, in *GetSharedResourcesRequest, opts ...grpc.CallOption) (*GetSharedResourcesResponse, error)
	// Update Specific Shared Resource
	UpdateSharedResource(ctx context.Context, in *UpdateSharedResourcesRequest, opts ...grpc.CallOption) (*UpdateSharedResourcesResponse, error)
	// Delete Specific Shared Resource
	DeleteSharedResource(ctx context.Context, in *DeleteSharedResourcesRequest, opts ...grpc.CallOption) (*DeleteSharedResourcesResponse, error)
	// List all Unit Metrics
	ListUnitMetrics(ctx context.Context, in *ListUnitMetricsRequest, opts ...grpc.CallOption) (*ListUnitMetricsResponse, error)
	// Create Unit Metric
	CreateUnitMetric(ctx context.Context, in *CreateUnitMetricRequest, opts ...grpc.CallOption) (*CreateUnitMetricResponse, error)
	// Get Specific Unit Metric
	GetUnitMetric(ctx context.Context, in *GetUnitMetricRequest, opts ...grpc.CallOption) (*GetUnitMetricResponse, error)
	// Update Specific Unit Metric
	UpdateUnitMetric(ctx context.Context, in *UpdateUnitMetricRequest, opts ...grpc.CallOption) (*UpdateUnitMetricResponse, error)
	// Delete Specific Unit Metric
	DeleteUnitMetric(ctx context.Context, in *DeleteUnitMetricRequest, opts ...grpc.CallOption) (*DeleteUnitMetricResponse, error)
	// Confirm Google Sheet Access
	ConfirmGoogleSheetAccess(ctx context.Context, in *ConfirmGoogleSheetAccessRequest, opts ...grpc.CallOption) (*ConfirmGoogleSheetAccessResponse, error)
	// Preview Google Sheet Data
	PreviewGoogleSheet(ctx context.Context, in *PreviewGoogleSheetRequest, opts ...grpc.CallOption) (*PreviewGoogleSheetResponse, error)
	VerifyAPIAccess(ctx context.Context, in *VerifyAPIAccessRequest, opts ...grpc.CallOption) (*VerifyAPIAccessResponse, error)
}

type coverClient struct {
	cc grpc.ClientConnInterface
}

func NewCoverClient(cc grpc.ClientConnInterface) CoverClient {
	return &coverClient{cc}
}

func (c *coverClient) OnboardOrg(ctx context.Context, in *OnboardOrgRequest, opts ...grpc.CallOption) (*OnboardOrgResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnboardOrgResponse)
	err := c.cc.Invoke(ctx, Cover_OnboardOrg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...grpc.CallOption) (*InviteMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteMemberResponse)
	err := c.cc.Invoke(ctx, Cover_InviteMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ActivateUser(ctx context.Context, in *ActivateUserRequest, opts ...grpc.CallOption) (*ActivateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateUserResponse)
	err := c.cc.Invoke(ctx, Cover_ActivateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*CreateMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMemberResponse)
	err := c.cc.Invoke(ctx, Cover_CreateMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMembersResponse)
	err := c.cc.Invoke(ctx, Cover_GetMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetMemberDetails(ctx context.Context, in *GetMemberDetailsRequest, opts ...grpc.CallOption) (*GetMemberDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemberDetailsResponse)
	err := c.cc.Invoke(ctx, Cover_GetMemberDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetMemberCostGroup(ctx context.Context, in *GetMemberCostGroupRequest, opts ...grpc.CallOption) (*GetMemberCostGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemberCostGroupResponse)
	err := c.cc.Invoke(ctx, Cover_GetMemberCostGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateMemberPermission(ctx context.Context, in *UpdateMemberPermissionRequest, opts ...grpc.CallOption) (*UpdateMemberPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMemberPermissionResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateMemberPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetUserDetails(ctx context.Context, in *GetUserDetailsRequest, opts ...grpc.CallOption) (*GetUserDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserDetailsResponse)
	err := c.cc.Invoke(ctx, Cover_GetUserDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarRequest, opts ...grpc.CallOption) (*UpdateUserAvatarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserAvatarResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserAvatar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserIcon(ctx context.Context, in *UpdateUserIconRequest, opts ...grpc.CallOption) (*UpdateUserIconResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserIconResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserIcon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserColorTheme(ctx context.Context, in *UpdateUserColorThemeRequest, opts ...grpc.CallOption) (*UpdateUserColorThemeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserColorThemeResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserColorTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserNameResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserEmailResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserMainView(ctx context.Context, in *UpdateUserMainViewRequest, opts ...grpc.CallOption) (*UpdateUserMainViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserMainViewResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserMainView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...grpc.CallOption) (*ResetUserPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetUserPasswordResponse)
	err := c.cc.Invoke(ctx, Cover_ResetUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserLocale(ctx context.Context, in *UpdateUserLocaleRequest, opts ...grpc.CallOption) (*UpdateUserLocaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserLocaleResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserLocale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserAppTheme(ctx context.Context, in *UpdateUserAppThemeRequest, opts ...grpc.CallOption) (*UpdateUserAppThemeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserAppThemeResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserAppTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserTimezone(ctx context.Context, in *UpdateUserTimezoneRequest, opts ...grpc.CallOption) (*UpdateUserTimezoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserTimezoneResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserTimezone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserAttributes(ctx context.Context, in *UpdateUserAttributesRequest, opts ...grpc.CallOption) (*UpdateUserAttributesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserAttributesResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMemberResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, Cover_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateView(ctx context.Context, in *CreateViewRequest, opts ...grpc.CallOption) (*CreateViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateViewResponse)
	err := c.cc.Invoke(ctx, Cover_CreateView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetViews(ctx context.Context, in *GetViewsRequest, opts ...grpc.CallOption) (*GetViewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetViewsResponse)
	err := c.cc.Invoke(ctx, Cover_GetViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetCurrentView(ctx context.Context, in *GetCurrentViewRequest, opts ...grpc.CallOption) (*GetCurrentViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentViewResponse)
	err := c.cc.Invoke(ctx, Cover_GetCurrentView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetFavoriteViews(ctx context.Context, in *GetFavoriteViewsRequest, opts ...grpc.CallOption) (*GetFavoriteViewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFavoriteViewsResponse)
	err := c.cc.Invoke(ctx, Cover_GetFavoriteViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) PublishView(ctx context.Context, in *PublishViewRequest, opts ...grpc.CallOption) (*PublishViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishViewResponse)
	err := c.cc.Invoke(ctx, Cover_PublishView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) AddFavorite(ctx context.Context, in *AddFavoriteRequest, opts ...grpc.CallOption) (*AddFavoriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFavoriteResponse)
	err := c.cc.Invoke(ctx, Cover_AddFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) RemoveFavorite(ctx context.Context, in *RemoveFavoriteRequest, opts ...grpc.CallOption) (*RemoveFavoriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFavoriteResponse)
	err := c.cc.Invoke(ctx, Cover_RemoveFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateView(ctx context.Context, in *UpdateViewRequest, opts ...grpc.CallOption) (*UpdateViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateViewResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateViewLayout(ctx context.Context, in *UpdateViewLayoutRequest, opts ...grpc.CallOption) (*UpdateViewLayoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateViewLayoutResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateViewLayout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateViewWidget(ctx context.Context, in *UpdateViewWidgetRequest, opts ...grpc.CallOption) (*UpdateViewWidgetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateViewWidgetResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateViewWidget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateViewColorTheme(ctx context.Context, in *UpdateViewColorThemeRequest, opts ...grpc.CallOption) (*UpdateViewColorThemeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateViewColorThemeResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateViewColorTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateViewCurrency(ctx context.Context, in *UpdateViewCurrencyRequest, opts ...grpc.CallOption) (*UpdateViewCurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateViewCurrencyResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateViewCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) SetOrgUpdateCurrency(ctx context.Context, in *SetOrgUpdateCurrencyRequest, opts ...grpc.CallOption) (*SetOrgUpdateCurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOrgUpdateCurrencyResponse)
	err := c.cc.Invoke(ctx, Cover_SetOrgUpdateCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetOrgUpdateCurrency(ctx context.Context, in *GetOrgUpdateCurrencyRequest, opts ...grpc.CallOption) (*GetOrgUpdateCurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrgUpdateCurrencyResponse)
	err := c.cc.Invoke(ctx, Cover_GetOrgUpdateCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListExchangeRates(ctx context.Context, in *ListExchangeRatesRequest, opts ...grpc.CallOption) (*ListExchangeRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExchangeRatesResponse)
	err := c.cc.Invoke(ctx, Cover_ListExchangeRates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteView(ctx context.Context, in *DeleteViewRequest, opts ...grpc.CallOption) (*DeleteViewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteViewResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateSideMenuState(ctx context.Context, in *UpdateSideMenuStateRequest, opts ...grpc.CallOption) (*UpdateSideMenuStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSideMenuStateResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateSideMenuState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) AddSideMenuFavorite(ctx context.Context, in *AddSideMenuFavoriteRequest, opts ...grpc.CallOption) (*AddSideMenuFavoriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSideMenuFavoriteResponse)
	err := c.cc.Invoke(ctx, Cover_AddSideMenuFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) RemoveSideMenuFavorite(ctx context.Context, in *RemoveSideMenuFavoriteRequest, opts ...grpc.CallOption) (*RemoveSideMenuFavoriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSideMenuFavoriteResponse)
	err := c.cc.Invoke(ctx, Cover_RemoveSideMenuFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateCostGroup(ctx context.Context, in *CreateCostGroupRequest, opts ...grpc.CallOption) (*CreateCostGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCostGroupResponse)
	err := c.cc.Invoke(ctx, Cover_CreateCostGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetCostGroups(ctx context.Context, in *GetCostGroupsRequest, opts ...grpc.CallOption) (*GetCostGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCostGroupsResponse)
	err := c.cc.Invoke(ctx, Cover_GetCostGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoriesResponse)
	err := c.cc.Invoke(ctx, Cover_GetCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetCostGroupDetails(ctx context.Context, in *GetCostGroupDetailsRequest, opts ...grpc.CallOption) (*GetCostGroupDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCostGroupDetailsResponse)
	err := c.cc.Invoke(ctx, Cover_GetCostGroupDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupName(ctx context.Context, in *UpdateCostGroupNameRequest, opts ...grpc.CallOption) (*UpdateCostGroupNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCostGroupNameResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateCostGroupName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupDescription(ctx context.Context, in *UpdateCostGroupDescriptionRequest, opts ...grpc.CallOption) (*UpdateCostGroupDescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCostGroupDescriptionResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateCostGroupDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupImage(ctx context.Context, in *UpdateCostGroupImageRequest, opts ...grpc.CallOption) (*UpdateCostGroupImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCostGroupImageResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateCostGroupImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupIcon(ctx context.Context, in *UpdateCostGroupIconRequest, opts ...grpc.CallOption) (*UpdateCostGroupIconResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCostGroupIconResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateCostGroupIcon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupColorTheme(ctx context.Context, in *UpdateCostGroupColorThemeRequest, opts ...grpc.CallOption) (*UpdateCostGroupColorThemeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCostGroupColorThemeResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateCostGroupColorTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupCombinations(ctx context.Context, in *UpdateCostGroupCombinationsRequest, opts ...grpc.CallOption) (*UpdateCostGroupCombinationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCostGroupCombinationsResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateCostGroupCombinations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ResolveCostGroupCombinations(ctx context.Context, in *ResolveCostGroupCombinationsRequest, opts ...grpc.CallOption) (*ResolveCostGroupCombinationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveCostGroupCombinationsResponse)
	err := c.cc.Invoke(ctx, Cover_ResolveCostGroupCombinations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) AssignCostGroupMember(ctx context.Context, in *AssignCostGroupMemberRequest, opts ...grpc.CallOption) (*AssignCostGroupMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignCostGroupMemberResponse)
	err := c.cc.Invoke(ctx, Cover_AssignCostGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) RemoveCostGroupMember(ctx context.Context, in *RemoveCostGroupMemberRequest, opts ...grpc.CallOption) (*RemoveCostGroupMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveCostGroupMemberResponse)
	err := c.cc.Invoke(ctx, Cover_RemoveCostGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteCostGroup(ctx context.Context, in *DeleteCostGroupRequest, opts ...grpc.CallOption) (*DeleteCostGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCostGroupResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteCostGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetAccountAccessTemplateUrl(ctx context.Context, in *GetAccountAccessTemplateUrlRequest, opts ...grpc.CallOption) (*GetAccountAccessTemplateUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountAccessTemplateUrlResponse)
	err := c.cc.Invoke(ctx, Cover_GetAccountAccessTemplateUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListAccountAccess(ctx context.Context, in *ListAccountAccessRequest, opts ...grpc.CallOption) (Cover_ListAccountAccessClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[0], Cover_ListAccountAccess_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverListAccountAccessClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListAccountAccessClient interface {
	Recv() (*AccountAccess, error)
	grpc.ClientStream
}

type coverListAccountAccessClient struct {
	grpc.ClientStream
}

func (x *coverListAccountAccessClient) Recv() (*AccountAccess, error) {
	m := new(AccountAccess)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) GetAccountAccess(ctx context.Context, in *GetAccountAccessRequest, opts ...grpc.CallOption) (*AccountAccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountAccess)
	err := c.cc.Invoke(ctx, Cover_GetAccountAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetDataAccess(ctx context.Context, in *GetAndDeleteDataAccessRequest, opts ...grpc.CallOption) (*DataAccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataAccess)
	err := c.cc.Invoke(ctx, Cover_GetDataAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteDataAccess(ctx context.Context, in *GetAndDeleteDataAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_DeleteDataAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateAccountAccess(ctx context.Context, in *CreateAccountAccessRequest, opts ...grpc.CallOption) (*AccountAccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountAccess)
	err := c.cc.Invoke(ctx, Cover_CreateAccountAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateAccountAccessStackset(ctx context.Context, in *CreateAccountAccessStacksetRequest, opts ...grpc.CallOption) (*AccountAccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountAccess)
	err := c.cc.Invoke(ctx, Cover_CreateAccountAccessStackset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateAccountAccessCur(ctx context.Context, in *CreateAccountAccessRequest, opts ...grpc.CallOption) (*AccountAccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountAccess)
	err := c.cc.Invoke(ctx, Cover_CreateAccountAccessCur_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateAccountAccess(ctx context.Context, in *UpdateAccountAccessRequest, opts ...grpc.CallOption) (*protos.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(protos.Operation)
	err := c.cc.Invoke(ctx, Cover_UpdateAccountAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteAccountAccess(ctx context.Context, in *DeleteAccountAccessRequest, opts ...grpc.CallOption) (*DeleteAccountAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountAccessResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteAccountAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) RegisterAccount(ctx context.Context, in *RegisterAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_RegisterAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) RegisterDataAccess(ctx context.Context, in *RegisterDataAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_RegisterDataAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) AddBillingAccount(ctx context.Context, in *BillingAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_AddBillingAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListDataAccess(ctx context.Context, in *ListDataAccessRequest, opts ...grpc.CallOption) (Cover_ListDataAccessClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[1], Cover_ListDataAccess_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverListDataAccessClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListDataAccessClient interface {
	Recv() (*DataAccess, error)
	grpc.ClientStream
}

type coverListDataAccessClient struct {
	grpc.ClientStream
}

func (x *coverListDataAccessClient) Recv() (*DataAccess, error) {
	m := new(DataAccess)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) ListUnregisteredAccounts(ctx context.Context, in *ListUnregisteredAccountsRequest, opts ...grpc.CallOption) (*ListUnregisteredAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUnregisteredAccountsResponse)
	err := c.cc.Invoke(ctx, Cover_ListUnregisteredAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateDataAccess(ctx context.Context, in *UpdateDataAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_UpdateDataAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (Cover_ListAssetsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[2], Cover_ListAssets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverListAssetsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListAssetsClient interface {
	Recv() (*Resource, error)
	grpc.ClientStream
}

type coverListAssetsClient struct {
	grpc.ClientStream
}

func (x *coverListAssetsClient) Recv() (*Resource, error) {
	m := new(Resource)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) GetAssetsSummary(ctx context.Context, in *GetAssetsSummaryRequest, opts ...grpc.CallOption) (*GetAssetsSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssetsSummaryResponse)
	err := c.cc.Invoke(ctx, Cover_GetAssetsSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetCostUsage(ctx context.Context, in *GetCostUsageRequest, opts ...grpc.CallOption) (Cover_GetCostUsageClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[3], Cover_GetCostUsage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverGetCostUsageClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_GetCostUsageClient interface {
	Recv() (*CostItem, error)
	grpc.ClientStream
}

type coverGetCostUsageClient struct {
	grpc.ClientStream
}

func (x *coverGetCostUsageClient) Recv() (*CostItem, error) {
	m := new(CostItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) GetRightSizingRecommendation(ctx context.Context, in *GetRightSizingRecommendationRequest, opts ...grpc.CallOption) (*GetRightSizingRecommendationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRightSizingRecommendationResponse)
	err := c.cc.Invoke(ctx, Cover_GetRightSizingRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ModifyResourceType(ctx context.Context, in *ModifyResourceTypeRequest, opts ...grpc.CallOption) (*ModifyResourceTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifyResourceTypeResponse)
	err := c.cc.Invoke(ctx, Cover_ModifyResourceType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) TerminateResource(ctx context.Context, in *TerminateResourceRequest, opts ...grpc.CallOption) (*TerminateResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminateResourceResponse)
	err := c.cc.Invoke(ctx, Cover_TerminateResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UploadChargeCode(ctx context.Context, opts ...grpc.CallOption) (Cover_UploadChargeCodeClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[4], Cover_UploadChargeCode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverUploadChargeCodeClient{ClientStream: stream}
	return x, nil
}

type Cover_UploadChargeCodeClient interface {
	Send(*UploadChargeCodeRequest) error
	CloseAndRecv() (*UploadChargeCodeResponse, error)
	grpc.ClientStream
}

type coverUploadChargeCodeClient struct {
	grpc.ClientStream
}

func (x *coverUploadChargeCodeClient) Send(m *UploadChargeCodeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coverUploadChargeCodeClient) CloseAndRecv() (*UploadChargeCodeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadChargeCodeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) AssignPayer(ctx context.Context, in *AssignPayerRequest, opts ...grpc.CallOption) (*AssignPayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignPayerResponse)
	err := c.cc.Invoke(ctx, Cover_AssignPayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetPayers(ctx context.Context, in *GetPayersRequest, opts ...grpc.CallOption) (*GetPayersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPayersResponse)
	err := c.cc.Invoke(ctx, Cover_GetPayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, Cover_GetAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServicesResponse)
	err := c.cc.Invoke(ctx, Cover_GetServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegionsResponse)
	err := c.cc.Invoke(ctx, Cover_GetRegions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagsResponse)
	err := c.cc.Invoke(ctx, Cover_GetTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListFees(ctx context.Context, in *ListFeesRequest, opts ...grpc.CallOption) (Cover_ListFeesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[5], Cover_ListFees_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverListFeesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListFeesClient interface {
	Recv() (*FeeDetails, error)
	grpc.ClientStream
}

type coverListFeesClient struct {
	grpc.ClientStream
}

func (x *coverListFeesClient) Recv() (*FeeDetails, error) {
	m := new(FeeDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) RestoreFee(ctx context.Context, in *RestoreFeeRequest, opts ...grpc.CallOption) (Cover_RestoreFeeClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[6], Cover_RestoreFee_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverRestoreFeeClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_RestoreFeeClient interface {
	Recv() (*FeeDetails, error)
	grpc.ClientStream
}

type coverRestoreFeeClient struct {
	grpc.ClientStream
}

func (x *coverRestoreFeeClient) Recv() (*FeeDetails, error) {
	m := new(FeeDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) GetCostGroupFee(ctx context.Context, in *GetCostGroupFeeRequest, opts ...grpc.CallOption) (Cover_GetCostGroupFeeClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[7], Cover_GetCostGroupFee_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverGetCostGroupFeeClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_GetCostGroupFeeClient interface {
	Recv() (*FeeItem, error)
	grpc.ClientStream
}

type coverGetCostGroupFeeClient struct {
	grpc.ClientStream
}

func (x *coverGetCostGroupFeeClient) Recv() (*FeeItem, error) {
	m := new(FeeItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) ListAllocators(ctx context.Context, in *ListAllocatorsRequest, opts ...grpc.CallOption) (Cover_ListAllocatorsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[8], Cover_ListAllocators_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverListAllocatorsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListAllocatorsClient interface {
	Recv() (*CostAllocatorDetails, error)
	grpc.ClientStream
}

type coverListAllocatorsClient struct {
	grpc.ClientStream
}

func (x *coverListAllocatorsClient) Recv() (*CostAllocatorDetails, error) {
	m := new(CostAllocatorDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) CreateAllocator(ctx context.Context, in *CreateAllocatorRequest, opts ...grpc.CallOption) (*CostAllocatorDetails, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CostAllocatorDetails)
	err := c.cc.Invoke(ctx, Cover_CreateAllocator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetAllocationAttributes(ctx context.Context, in *GetAllocationAttributesRequest, opts ...grpc.CallOption) (*GetAllocationAttributesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllocationAttributesResponse)
	err := c.cc.Invoke(ctx, Cover_GetAllocationAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateAllocator(ctx context.Context, in *CostAllocatorRequest, opts ...grpc.CallOption) (*CostAllocatorDetails, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CostAllocatorDetails)
	err := c.cc.Invoke(ctx, Cover_UpdateAllocator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteAllocator(ctx context.Context, in *DeleteAllocatorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_DeleteAllocator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ProxyCreateCompletion(ctx context.Context, in *ProxyCreateCompletionRequest, opts ...grpc.CallOption) (Cover_ProxyCreateCompletionClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[9], Cover_ProxyCreateCompletion_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverProxyCreateCompletionClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ProxyCreateCompletionClient interface {
	Recv() (*ProxyCreateCompletionResponse, error)
	grpc.ClientStream
}

type coverProxyCreateCompletionClient struct {
	grpc.ClientStream
}

func (x *coverProxyCreateCompletionClient) Recv() (*ProxyCreateCompletionResponse, error) {
	m := new(ProxyCreateCompletionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) SimulateFeeAllocator(ctx context.Context, in *CreateAllocatorRequest, opts ...grpc.CallOption) (Cover_SimulateFeeAllocatorClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[10], Cover_SimulateFeeAllocator_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverSimulateFeeAllocatorClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_SimulateFeeAllocatorClient interface {
	Recv() (*FeeDetails, error)
	grpc.ClientStream
}

type coverSimulateFeeAllocatorClient struct {
	grpc.ClientStream
}

func (x *coverSimulateFeeAllocatorClient) Recv() (*FeeDetails, error) {
	m := new(FeeDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) ListAccountUsage(ctx context.Context, in *ListAccountUsageRequest, opts ...grpc.CallOption) (Cover_ListAccountUsageClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[11], Cover_ListAccountUsage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverListAccountUsageClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListAccountUsageClient interface {
	Recv() (*AccountUsageDetails, error)
	grpc.ClientStream
}

type coverListAccountUsageClient struct {
	grpc.ClientStream
}

func (x *coverListAccountUsageClient) Recv() (*AccountUsageDetails, error) {
	m := new(AccountUsageDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) RestoreAccountUsage(ctx context.Context, in *RestoreAccountUsageRequest, opts ...grpc.CallOption) (Cover_RestoreAccountUsageClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[12], Cover_RestoreAccountUsage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverRestoreAccountUsageClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_RestoreAccountUsageClient interface {
	Recv() (*AccountUsageDetails, error)
	grpc.ClientStream
}

type coverRestoreAccountUsageClient struct {
	grpc.ClientStream
}

func (x *coverRestoreAccountUsageClient) Recv() (*AccountUsageDetails, error) {
	m := new(AccountUsageDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) SimulateAccountUsage(ctx context.Context, in *CreateAllocatorRequest, opts ...grpc.CallOption) (Cover_SimulateAccountUsageClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[13], Cover_SimulateAccountUsage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverSimulateAccountUsageClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_SimulateAccountUsageClient interface {
	Recv() (*AccountUsageDetails, error)
	grpc.ClientStream
}

type coverSimulateAccountUsageClient struct {
	grpc.ClientStream
}

func (x *coverSimulateAccountUsageClient) Recv() (*AccountUsageDetails, error) {
	m := new(AccountUsageDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) ListSavings(ctx context.Context, in *ListFeesRequest, opts ...grpc.CallOption) (Cover_ListSavingsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[14], Cover_ListSavings_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverListSavingsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListSavingsClient interface {
	Recv() (*SavingsDetails, error)
	grpc.ClientStream
}

type coverListSavingsClient struct {
	grpc.ClientStream
}

func (x *coverListSavingsClient) Recv() (*SavingsDetails, error) {
	m := new(SavingsDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) RestoreSavings(ctx context.Context, in *RestoreSavingsRequest, opts ...grpc.CallOption) (Cover_RestoreSavingsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[15], Cover_RestoreSavings_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverRestoreSavingsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_RestoreSavingsClient interface {
	Recv() (*SavingsDetails, error)
	grpc.ClientStream
}

type coverRestoreSavingsClient struct {
	grpc.ClientStream
}

func (x *coverRestoreSavingsClient) Recv() (*SavingsDetails, error) {
	m := new(SavingsDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) SimulateSavings(ctx context.Context, in *CreateAllocatorRequest, opts ...grpc.CallOption) (Cover_SimulateSavingsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[16], Cover_SimulateSavings_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverSimulateSavingsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_SimulateSavingsClient interface {
	Recv() (*SavingsDetails, error)
	grpc.ClientStream
}

type coverSimulateSavingsClient struct {
	grpc.ClientStream
}

func (x *coverSimulateSavingsClient) Recv() (*SavingsDetails, error) {
	m := new(SavingsDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) GetCostGroupAllocation(ctx context.Context, in *GetCostGroupAllocationRequest, opts ...grpc.CallOption) (Cover_GetCostGroupAllocationClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[17], Cover_GetCostGroupAllocation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverGetCostGroupAllocationClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_GetCostGroupAllocationClient interface {
	Recv() (*AllocationItem, error)
	grpc.ClientStream
}

type coverGetCostGroupAllocationClient struct {
	grpc.ClientStream
}

func (x *coverGetCostGroupAllocationClient) Recv() (*AllocationItem, error) {
	m := new(AllocationItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) ProcessAuth0User(ctx context.Context, in *ProcessAuth0UserRequest, opts ...grpc.CallOption) (*ProcessAuth0UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessAuth0UserResponse)
	err := c.cc.Invoke(ctx, Cover_ProcessAuth0User_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) AddPartnerCenterCredentials(ctx context.Context, in *AddPartnerCenterCredentialsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_AddPartnerCenterCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) AddMpnSetting(ctx context.Context, in *AddMpnSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_AddMpnSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetCostGroupAttribute(ctx context.Context, in *GetCostGroupAttributeRequest, opts ...grpc.CallOption) (*GetCostGroupAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCostGroupAttributeResponse)
	err := c.cc.Invoke(ctx, Cover_GetCostGroupAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetAlerts(ctx context.Context, in *GetAlertsRequest, opts ...grpc.CallOption) (Cover_GetAlertsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[18], Cover_GetAlerts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverGetAlertsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_GetAlertsClient interface {
	Recv() (*GetAlertsResponse, error)
	grpc.ClientStream
}

type coverGetAlertsClient struct {
	grpc.ClientStream
}

func (x *coverGetAlertsClient) Recv() (*GetAlertsResponse, error) {
	m := new(GetAlertsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAlertResponse)
	err := c.cc.Invoke(ctx, Cover_CreateAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetAlertDetails(ctx context.Context, in *GetAlertDetailsRequest, opts ...grpc.CallOption) (*GetAlertDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAlertDetailsResponse)
	err := c.cc.Invoke(ctx, Cover_GetAlertDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAlertResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateAlertDetails(ctx context.Context, in *UpdateAlertDetailsRequest, opts ...grpc.CallOption) (*UpdateAlertDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAlertDetailsResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateAlertDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetChannels(ctx context.Context, in *GetChannelsRequest, opts ...grpc.CallOption) (Cover_GetChannelsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[19], Cover_GetChannels_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverGetChannelsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_GetChannelsClient interface {
	Recv() (*GetChannelsResponse, error)
	grpc.ClientStream
}

type coverGetChannelsClient struct {
	grpc.ClientStream
}

func (x *coverGetChannelsClient) Recv() (*GetChannelsResponse, error) {
	m := new(GetChannelsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChannelResponse)
	err := c.cc.Invoke(ctx, Cover_CreateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetChannelDetails(ctx context.Context, in *GetChannelDetailsRequest, opts ...grpc.CallOption) (*GetChannelDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelDetailsResponse)
	err := c.cc.Invoke(ctx, Cover_GetChannelDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChannelResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateChannelDetails(ctx context.Context, in *UpdateChannelDetailsRequest, opts ...grpc.CallOption) (*UpdateChannelDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateChannelDetailsResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateChannelDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetDiscountRecommendations(ctx context.Context, in *GetDiscountRecommendationsRequest, opts ...grpc.CallOption) (*GetDiscountRecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiscountRecommendationsResponse)
	err := c.cc.Invoke(ctx, Cover_GetDiscountRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetAnomalyinCostGroup(ctx context.Context, in *GetAnomalyinCostGroupRequest, opts ...grpc.CallOption) (Cover_GetAnomalyinCostGroupClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[20], Cover_GetAnomalyinCostGroup_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverGetAnomalyinCostGroupClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_GetAnomalyinCostGroupClient interface {
	Recv() (*AnomalyData, error)
	grpc.ClientStream
}

type coverGetAnomalyinCostGroupClient struct {
	grpc.ClientStream
}

func (x *coverGetAnomalyinCostGroupClient) Recv() (*AnomalyData, error) {
	m := new(AnomalyData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) CreateDiscountExpirationAlert(ctx context.Context, in *CreateDiscountExpirationAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_CreateDiscountExpirationAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateDiscountExpirationAlert(ctx context.Context, in *UpdateDiscountExpirationAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_UpdateDiscountExpirationAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetDiscountExpirationAlert(ctx context.Context, in *ManipulateDiscountExpirationAlertRequest, opts ...grpc.CallOption) (*DiscountExpiryAlertData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscountExpiryAlertData)
	err := c.cc.Invoke(ctx, Cover_GetDiscountExpirationAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListDiscountExpirationAlert(ctx context.Context, in *ListDiscountExpirationAlertRequest, opts ...grpc.CallOption) (Cover_ListDiscountExpirationAlertClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[21], Cover_ListDiscountExpirationAlert_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverListDiscountExpirationAlertClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListDiscountExpirationAlertClient interface {
	Recv() (*DiscountExpiryAlertData, error)
	grpc.ClientStream
}

type coverListDiscountExpirationAlertClient struct {
	grpc.ClientStream
}

func (x *coverListDiscountExpirationAlertClient) Recv() (*DiscountExpiryAlertData, error) {
	m := new(DiscountExpiryAlertData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) DeleteDiscountExpirationAlert(ctx context.Context, in *ManipulateDiscountExpirationAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_DeleteDiscountExpirationAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateAnomalyAlert(ctx context.Context, in *CreateAnomalyAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_CreateAnomalyAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteAnomalyAlert(ctx context.Context, in *ManipulateAnomalyAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_DeleteAnomalyAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListAnomalyAlert(ctx context.Context, in *ListAnomalyAlertRequest, opts ...grpc.CallOption) (Cover_ListAnomalyAlertClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[22], Cover_ListAnomalyAlert_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverListAnomalyAlertClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListAnomalyAlertClient interface {
	Recv() (*AnomalyAlertData, error)
	grpc.ClientStream
}

type coverListAnomalyAlertClient struct {
	grpc.ClientStream
}

func (x *coverListAnomalyAlertClient) Recv() (*AnomalyAlertData, error) {
	m := new(AnomalyAlertData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) GetAnomalyAlert(ctx context.Context, in *ManipulateAnomalyAlertRequest, opts ...grpc.CallOption) (*AnomalyAlertData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnomalyAlertData)
	err := c.cc.Invoke(ctx, Cover_GetAnomalyAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateAnomalyAlert(ctx context.Context, in *UpdateAnomalyAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_UpdateAnomalyAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) RegisterNewUser(ctx context.Context, in *RegisterNewUserRequest, opts ...grpc.CallOption) (*RegisterNewUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterNewUserResponse)
	err := c.cc.Invoke(ctx, Cover_RegisterNewUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, Cover_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListBudgets(ctx context.Context, in *ListBudgetsRequest, opts ...grpc.CallOption) (Cover_ListBudgetsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[23], Cover_ListBudgets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverListBudgetsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListBudgetsClient interface {
	Recv() (*ListBudgetsResponse, error)
	grpc.ClientStream
}

type coverListBudgetsClient struct {
	grpc.ClientStream
}

func (x *coverListBudgetsClient) Recv() (*ListBudgetsResponse, error) {
	m := new(ListBudgetsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) GetBudget(ctx context.Context, in *GetBudgetRequest, opts ...grpc.CallOption) (*GetBudgetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBudgetResponse)
	err := c.cc.Invoke(ctx, Cover_GetBudget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateBudget(ctx context.Context, in *CreateBudgetRequest, opts ...grpc.CallOption) (*CreateBudgetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBudgetResponse)
	err := c.cc.Invoke(ctx, Cover_CreateBudget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteBudget(ctx context.Context, in *DeleteBudgetRequest, opts ...grpc.CallOption) (*DeleteBudgetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBudgetResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteBudget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateBudget(ctx context.Context, in *UpdateBudgetRequest, opts ...grpc.CallOption) (*UpdateBudgetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBudgetResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateBudget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ResolveAWSMarketplaceTokenForOnboarding(ctx context.Context, in *ResolveAWSMarketplaceTokenForOnboardingRequest, opts ...grpc.CallOption) (*ResolveAWSMarketplaceTokenForOnboardingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveAWSMarketplaceTokenForOnboardingResponse)
	err := c.cc.Invoke(ctx, Cover_ResolveAWSMarketplaceTokenForOnboarding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetCustomerSubscriptionStatus(ctx context.Context, in *GetCustomerSubscriptionStatusRequest, opts ...grpc.CallOption) (*GetCustomerSubscriptionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCustomerSubscriptionStatusResponse)
	err := c.cc.Invoke(ctx, Cover_GetCustomerSubscriptionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateProfiling(ctx context.Context, in *CreateProfilingRequest, opts ...grpc.CallOption) (*CreateProfilingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProfilingResponse)
	err := c.cc.Invoke(ctx, Cover_CreateProfiling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) AddInfotoMarketplace(ctx context.Context, in *AddInfotoMarketplaceRequest, opts ...grpc.CallOption) (*AddInfotoMarketplaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddInfotoMarketplaceResponse)
	err := c.cc.Invoke(ctx, Cover_AddInfotoMarketplace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetReportSummary(ctx context.Context, in *GetReportSummaryRequest, opts ...grpc.CallOption) (*GetReportSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReportSummaryResponse)
	err := c.cc.Invoke(ctx, Cover_GetReportSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListRecommendations(ctx context.Context, in *ListRecommendationRequest, opts ...grpc.CallOption) (Cover_ListRecommendationsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[24], Cover_ListRecommendations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverListRecommendationsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListRecommendationsClient interface {
	Recv() (*ListRecommendationResponse, error)
	grpc.ClientStream
}

type coverListRecommendationsClient struct {
	grpc.ClientStream
}

func (x *coverListRecommendationsClient) Recv() (*ListRecommendationResponse, error) {
	m := new(ListRecommendationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) ListRecommendationsV2(ctx context.Context, in *ListRecommendationV2Request, opts ...grpc.CallOption) (Cover_ListRecommendationsV2Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[25], Cover_ListRecommendationsV2_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverListRecommendationsV2Client{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListRecommendationsV2Client interface {
	Recv() (*ListRecommendationResponse, error)
	grpc.ClientStream
}

type coverListRecommendationsV2Client struct {
	grpc.ClientStream
}

func (x *coverListRecommendationsV2Client) Recv() (*ListRecommendationResponse, error) {
	m := new(ListRecommendationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) GetRecommendation(ctx context.Context, in *GetRecommendationRequest, opts ...grpc.CallOption) (*GetRecommendationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendationResponse)
	err := c.cc.Invoke(ctx, Cover_GetRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetRecommendationV2(ctx context.Context, in *GetRecommendationV2Request, opts ...grpc.CallOption) (*GetRecommendationV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendationV2Response)
	err := c.cc.Invoke(ctx, Cover_GetRecommendationV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ExecuteOptimization(ctx context.Context, in *ExecuteOptimizationRequest, opts ...grpc.CallOption) (*ExecuteOptimizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteOptimizationResponse)
	err := c.cc.Invoke(ctx, Cover_ExecuteOptimization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetExecutionStatus(ctx context.Context, in *GetExecutionStatusRequest, opts ...grpc.CallOption) (Cover_GetExecutionStatusClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[26], Cover_GetExecutionStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &coverGetExecutionStatusClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_GetExecutionStatusClient interface {
	Recv() (*GetExecutionStatusResponse, error)
	grpc.ClientStream
}

type coverGetExecutionStatusClient struct {
	grpc.ClientStream
}

func (x *coverGetExecutionStatusClient) Recv() (*GetExecutionStatusResponse, error) {
	m := new(GetExecutionStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) MarkAsExecuted(ctx context.Context, in *MarkAsExecutedRequest, opts ...grpc.CallOption) (*MarkAsExecutedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkAsExecutedResponse)
	err := c.cc.Invoke(ctx, Cover_MarkAsExecuted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UndoExecutedRecommendation(ctx context.Context, in *UndoExecutedRecommendationRequest, opts ...grpc.CallOption) (*UndoExecutedRecommendationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UndoExecutedRecommendationResponse)
	err := c.cc.Invoke(ctx, Cover_UndoExecutedRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) OptimizationHistory(ctx context.Context, in *OptimizationHistoryRequest, opts ...grpc.CallOption) (*OptimizationHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptimizationHistoryResponse)
	err := c.cc.Invoke(ctx, Cover_OptimizationHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) SetCostGroupEventIndicator(ctx context.Context, in *SetCostGroupEventIndicatorRequest, opts ...grpc.CallOption) (*SetCostGroupEventIndicatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCostGroupEventIndicatorResponse)
	err := c.cc.Invoke(ctx, Cover_SetCostGroupEventIndicator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) SetCostGroupAnomalyOptions(ctx context.Context, in *SetCostGroupAnomalyOptionsRequest, opts ...grpc.CallOption) (*SetCostGroupAnomalyOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCostGroupAnomalyOptionsResponse)
	err := c.cc.Invoke(ctx, Cover_SetCostGroupAnomalyOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) SetOrgFiscalMonth(ctx context.Context, in *SetOrgFiscalMonthRequest, opts ...grpc.CallOption) (*SetOrgFiscalMonthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOrgFiscalMonthResponse)
	err := c.cc.Invoke(ctx, Cover_SetOrgFiscalMonth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetOrgFiscalMonth(ctx context.Context, in *GetOrgFiscalMonthRequest, opts ...grpc.CallOption) (*GetOrgFiscalMonthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrgFiscalMonthResponse)
	err := c.cc.Invoke(ctx, Cover_GetOrgFiscalMonth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) TransferOrganization(ctx context.Context, in *TransferOrganizationRequest, opts ...grpc.CallOption) (*TransferOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferOrganizationResponse)
	err := c.cc.Invoke(ctx, Cover_TransferOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupCreationUI(ctx context.Context, in *UpdateCostGroupCreationUIRequest, opts ...grpc.CallOption) (*UpdateCostGroupCreationUIResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCostGroupCreationUIResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateCostGroupCreationUI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListUnitTypes(ctx context.Context, in *ListUnitTypesRequest, opts ...grpc.CallOption) (*ListUnitTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUnitTypesResponse)
	err := c.cc.Invoke(ctx, Cover_ListUnitTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateUnitType(ctx context.Context, in *CreateUnitTypeRequest, opts ...grpc.CallOption) (*CreateUnitTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUnitTypeResponse)
	err := c.cc.Invoke(ctx, Cover_CreateUnitType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetUnitType(ctx context.Context, in *GetUnitTypeRequest, opts ...grpc.CallOption) (*GetUnitTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnitTypeResponse)
	err := c.cc.Invoke(ctx, Cover_GetUnitType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUnitType(ctx context.Context, in *UpdateUnitTypeRequest, opts ...grpc.CallOption) (*UpdateUnitTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUnitTypeResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUnitType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteUnitType(ctx context.Context, in *DeleteUnitTypeRequest, opts ...grpc.CallOption) (*DeleteUnitTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUnitTypeResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteUnitType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) MergeUnits(ctx context.Context, in *MergeUnitsRequest, opts ...grpc.CallOption) (*MergeUnitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergeUnitsResponse)
	err := c.cc.Invoke(ctx, Cover_MergeUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListSuggestedUnits(ctx context.Context, in *ListSuggestedUnitsRequest, opts ...grpc.CallOption) (*ListSuggestedUnitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSuggestedUnitsResponse)
	err := c.cc.Invoke(ctx, Cover_ListSuggestedUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) MergeSuggestedUnits(ctx context.Context, in *MergeSuggestedUnitsRequest, opts ...grpc.CallOption) (*MergeSuggestedUnitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergeSuggestedUnitsResponse)
	err := c.cc.Invoke(ctx, Cover_MergeSuggestedUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateUnitFromSuggested(ctx context.Context, in *CreateUnitFromSuggestedRequest, opts ...grpc.CallOption) (*CreateUnitFromSuggestedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUnitFromSuggestedResponse)
	err := c.cc.Invoke(ctx, Cover_CreateUnitFromSuggested_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListSharedResources(ctx context.Context, in *ListSharedResourcesRequest, opts ...grpc.CallOption) (*ListSharedResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSharedResourcesResponse)
	err := c.cc.Invoke(ctx, Cover_ListSharedResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateSharedResource(ctx context.Context, in *CreateSharedResourcesRequest, opts ...grpc.CallOption) (*CreateSharedResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSharedResourcesResponse)
	err := c.cc.Invoke(ctx, Cover_CreateSharedResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetSharedResource(ctx context.Context, in *GetSharedResourcesRequest, opts ...grpc.CallOption) (*GetSharedResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSharedResourcesResponse)
	err := c.cc.Invoke(ctx, Cover_GetSharedResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateSharedResource(ctx context.Context, in *UpdateSharedResourcesRequest, opts ...grpc.CallOption) (*UpdateSharedResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSharedResourcesResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateSharedResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteSharedResource(ctx context.Context, in *DeleteSharedResourcesRequest, opts ...grpc.CallOption) (*DeleteSharedResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSharedResourcesResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteSharedResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListUnitMetrics(ctx context.Context, in *ListUnitMetricsRequest, opts ...grpc.CallOption) (*ListUnitMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUnitMetricsResponse)
	err := c.cc.Invoke(ctx, Cover_ListUnitMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateUnitMetric(ctx context.Context, in *CreateUnitMetricRequest, opts ...grpc.CallOption) (*CreateUnitMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUnitMetricResponse)
	err := c.cc.Invoke(ctx, Cover_CreateUnitMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetUnitMetric(ctx context.Context, in *GetUnitMetricRequest, opts ...grpc.CallOption) (*GetUnitMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnitMetricResponse)
	err := c.cc.Invoke(ctx, Cover_GetUnitMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUnitMetric(ctx context.Context, in *UpdateUnitMetricRequest, opts ...grpc.CallOption) (*UpdateUnitMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUnitMetricResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUnitMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteUnitMetric(ctx context.Context, in *DeleteUnitMetricRequest, opts ...grpc.CallOption) (*DeleteUnitMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUnitMetricResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteUnitMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ConfirmGoogleSheetAccess(ctx context.Context, in *ConfirmGoogleSheetAccessRequest, opts ...grpc.CallOption) (*ConfirmGoogleSheetAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmGoogleSheetAccessResponse)
	err := c.cc.Invoke(ctx, Cover_ConfirmGoogleSheetAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) PreviewGoogleSheet(ctx context.Context, in *PreviewGoogleSheetRequest, opts ...grpc.CallOption) (*PreviewGoogleSheetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreviewGoogleSheetResponse)
	err := c.cc.Invoke(ctx, Cover_PreviewGoogleSheet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) VerifyAPIAccess(ctx context.Context, in *VerifyAPIAccessRequest, opts ...grpc.CallOption) (*VerifyAPIAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyAPIAccessResponse)
	err := c.cc.Invoke(ctx, Cover_VerifyAPIAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoverServer is the server API for Cover service.
// All implementations must embed UnimplementedCoverServer
// for forward compatibility
//
// Cover service definition.
type CoverServer interface {
	// Onboard an organization with an admin account and default cost group
	OnboardOrg(context.Context, *OnboardOrgRequest) (*OnboardOrgResponse, error)
	// Invite members to the system
	InviteMember(context.Context, *InviteMemberRequest) (*InviteMemberResponse, error)
	// Activate the added user
	ActivateUser(context.Context, *ActivateUserRequest) (*ActivateUserResponse, error)
	// Create a member
	CreateMember(context.Context, *CreateMemberRequest) (*CreateMemberResponse, error)
	// Get all the members/subusers of the company
	GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error)
	// Get the details of the user
	GetMemberDetails(context.Context, *GetMemberDetailsRequest) (*GetMemberDetailsResponse, error)
	// Get the cost group to which the member is attached
	GetMemberCostGroup(context.Context, *GetMemberCostGroupRequest) (*GetMemberCostGroupResponse, error)
	// Modify member's permission
	UpdateMemberPermission(context.Context, *UpdateMemberPermissionRequest) (*UpdateMemberPermissionResponse, error)
	// Get the details of the logged-in user
	GetUserDetails(context.Context, *GetUserDetailsRequest) (*GetUserDetailsResponse, error)
	// Modify user's avatar
	UpdateUserAvatar(context.Context, *UpdateUserAvatarRequest) (*UpdateUserAvatarResponse, error)
	// Modify user's icon
	UpdateUserIcon(context.Context, *UpdateUserIconRequest) (*UpdateUserIconResponse, error)
	// Modify user's color theme
	UpdateUserColorTheme(context.Context, *UpdateUserColorThemeRequest) (*UpdateUserColorThemeResponse, error)
	// Modify user's name
	UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error)
	// Modify user's email
	UpdateUserEmail(context.Context, *UpdateUserEmailRequest) (*UpdateUserEmailResponse, error)
	// Modify user's main view
	UpdateUserMainView(context.Context, *UpdateUserMainViewRequest) (*UpdateUserMainViewResponse, error)
	// Reset user's password
	ResetUserPassword(context.Context, *ResetUserPasswordRequest) (*ResetUserPasswordResponse, error)
	// Modify user's locale
	UpdateUserLocale(context.Context, *UpdateUserLocaleRequest) (*UpdateUserLocaleResponse, error)
	// Modify user's app theme
	UpdateUserAppTheme(context.Context, *UpdateUserAppThemeRequest) (*UpdateUserAppThemeResponse, error)
	// Modify user's timezone
	UpdateUserTimezone(context.Context, *UpdateUserTimezoneRequest) (*UpdateUserTimezoneResponse, error)
	// Modify attributes
	UpdateUserAttributes(context.Context, *UpdateUserAttributesRequest) (*UpdateUserAttributesResponse, error)
	// Deletes a user
	DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error)
	// Reset member's password
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	// Create a view
	CreateView(context.Context, *CreateViewRequest) (*CreateViewResponse, error)
	// Get all the views
	GetViews(context.Context, *GetViewsRequest) (*GetViewsResponse, error)
	// Get the details of the current view
	GetCurrentView(context.Context, *GetCurrentViewRequest) (*GetCurrentViewResponse, error)
	// Get favorite views
	GetFavoriteViews(context.Context, *GetFavoriteViewsRequest) (*GetFavoriteViewsResponse, error)
	// Publish current view
	PublishView(context.Context, *PublishViewRequest) (*PublishViewResponse, error)
	// Add to favorites
	AddFavorite(context.Context, *AddFavoriteRequest) (*AddFavoriteResponse, error)
	// Remove from favorites
	RemoveFavorite(context.Context, *RemoveFavoriteRequest) (*RemoveFavoriteResponse, error)
	// Updates the view details
	UpdateView(context.Context, *UpdateViewRequest) (*UpdateViewResponse, error)
	// Updates the view's layout
	UpdateViewLayout(context.Context, *UpdateViewLayoutRequest) (*UpdateViewLayoutResponse, error)
	// Updates the view's widget
	UpdateViewWidget(context.Context, *UpdateViewWidgetRequest) (*UpdateViewWidgetResponse, error)
	// Update view's color theme
	UpdateViewColorTheme(context.Context, *UpdateViewColorThemeRequest) (*UpdateViewColorThemeResponse, error)
	// Update report's currency settings
	UpdateViewCurrency(context.Context, *UpdateViewCurrencyRequest) (*UpdateViewCurrencyResponse, error)
	// Sets Org's reference of currency exchange rate
	SetOrgUpdateCurrency(context.Context, *SetOrgUpdateCurrencyRequest) (*SetOrgUpdateCurrencyResponse, error)
	// Get Org's reference of currency exchange rate
	GetOrgUpdateCurrency(context.Context, *GetOrgUpdateCurrencyRequest) (*GetOrgUpdateCurrencyResponse, error)
	// Get list of exchange rates for a fixed report
	ListExchangeRates(context.Context, *ListExchangeRatesRequest) (*ListExchangeRatesResponse, error)
	// Deletes a view
	DeleteView(context.Context, *DeleteViewRequest) (*DeleteViewResponse, error)
	// Updates the side menu state
	UpdateSideMenuState(context.Context, *UpdateSideMenuStateRequest) (*UpdateSideMenuStateResponse, error)
	// Add as side menu favorite
	AddSideMenuFavorite(context.Context, *AddSideMenuFavoriteRequest) (*AddSideMenuFavoriteResponse, error)
	// Remove from side menu favorite
	RemoveSideMenuFavorite(context.Context, *RemoveSideMenuFavoriteRequest) (*RemoveSideMenuFavoriteResponse, error)
	// Create a cost group
	CreateCostGroup(context.Context, *CreateCostGroupRequest) (*CreateCostGroupResponse, error)
	// Get all the cost groups
	GetCostGroups(context.Context, *GetCostGroupsRequest) (*GetCostGroupsResponse, error)
	// Retrieve the categories to be utilized in the creation of the cost group.
	GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error)
	// Get the details of the cost group
	GetCostGroupDetails(context.Context, *GetCostGroupDetailsRequest) (*GetCostGroupDetailsResponse, error)
	// Update cost group's name
	UpdateCostGroupName(context.Context, *UpdateCostGroupNameRequest) (*UpdateCostGroupNameResponse, error)
	// Update cost group's description
	UpdateCostGroupDescription(context.Context, *UpdateCostGroupDescriptionRequest) (*UpdateCostGroupDescriptionResponse, error)
	// Update cost group's image
	UpdateCostGroupImage(context.Context, *UpdateCostGroupImageRequest) (*UpdateCostGroupImageResponse, error)
	// Update cost group's icon
	UpdateCostGroupIcon(context.Context, *UpdateCostGroupIconRequest) (*UpdateCostGroupIconResponse, error)
	// Update cost group's color theme
	UpdateCostGroupColorTheme(context.Context, *UpdateCostGroupColorThemeRequest) (*UpdateCostGroupColorThemeResponse, error)
	// Update cost group's combinations
	UpdateCostGroupCombinations(context.Context, *UpdateCostGroupCombinationsRequest) (*UpdateCostGroupCombinationsResponse, error)
	ResolveCostGroupCombinations(context.Context, *ResolveCostGroupCombinationsRequest) (*ResolveCostGroupCombinationsResponse, error)
	// Assign a member to a cost group
	AssignCostGroupMember(context.Context, *AssignCostGroupMemberRequest) (*AssignCostGroupMemberResponse, error)
	// Remove a member from a cost group
	RemoveCostGroupMember(context.Context, *RemoveCostGroupMemberRequest) (*RemoveCostGroupMemberResponse, error)
	// Deletes a cost group
	DeleteCostGroup(context.Context, *DeleteCostGroupRequest) (*DeleteCostGroupResponse, error)
	// Gets a CloudFormation launch URL for enabling the account access.
	GetAccountAccessTemplateUrl(context.Context, *GetAccountAccessTemplateUrlRequest) (*GetAccountAccessTemplateUrlResponse, error)
	// Lists the account access role(s) attached to accounts under caller.
	ListAccountAccess(*ListAccountAccessRequest, Cover_ListAccountAccessServer) error
	// Gets the current account role attached to the input target.
	GetAccountAccess(context.Context, *GetAccountAccessRequest) (*AccountAccess, error)
	// Gets the current account. For GCP and Azure.
	GetDataAccess(context.Context, *GetAndDeleteDataAccessRequest) (*DataAccess, error)
	// Deletes GCP or Azure accounts based on the provided request.
	DeleteDataAccess(context.Context, *GetAndDeleteDataAccessRequest) (*emptypb.Empty, error)
	// Starts validation of the account access stack deployment. If successful, the IAM role created from the CloudFormation stack will be registered to the target.
	CreateAccountAccess(context.Context, *CreateAccountAccessRequest) (*AccountAccess, error)
	// Starts validation of the account access stackset deployment. If successful, the IAM role created from the CloudFormation stackset will be registered to the linked accounts.
	CreateAccountAccessStackset(context.Context, *CreateAccountAccessStacksetRequest) (*AccountAccess, error)
	// Starts validation of the account access cur stack deployment. If successful, the IAM role created from the CloudFormation stack will be registered to the target.
	CreateAccountAccessCur(context.Context, *CreateAccountAccessRequest) (*AccountAccess, error)
	// Starts an update to an existing account access CloudFormation stack for template changes, if any. Only call this API if the status of your account access is 'outdated'.
	UpdateAccountAccess(context.Context, *UpdateAccountAccessRequest) (*protos.Operation, error)
	// Deletes the current account access role attached to this target account. This does not delete the CloudFormation deployment in your account.
	DeleteAccountAccess(context.Context, *DeleteAccountAccessRequest) (*DeleteAccountAccessResponse, error)
	// Registers an account
	RegisterAccount(context.Context, *RegisterAccountRequest) (*emptypb.Empty, error)
	// Registers GCP/Azure account.
	RegisterDataAccess(context.Context, *RegisterDataAccessRequest) (*emptypb.Empty, error)
	// Add Billing Account ID for GCP.
	AddBillingAccount(context.Context, *BillingAccountRequest) (*emptypb.Empty, error)
	// Lists Azure and GCP accounts.
	ListDataAccess(*ListDataAccessRequest, Cover_ListDataAccessServer) error
	// Lists unregistered linked accounts
	ListUnregisteredAccounts(context.Context, *ListUnregisteredAccountsRequest) (*ListUnregisteredAccountsResponse, error)
	// Update GCP/Azure account info
	UpdateDataAccess(context.Context, *UpdateDataAccessRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Lists assets for costgroup
	ListAssets(*ListAssetsRequest, Cover_ListAssetsServer) error
	// WORK-IN-PROGRESS: Assets summary for costgroup
	GetAssetsSummary(context.Context, *GetAssetsSummaryRequest) (*GetAssetsSummaryResponse, error)
	// WORK-IN-PROGRESS: Get usage and usage-based costs for the specified costgroup
	GetCostUsage(*GetCostUsageRequest, Cover_GetCostUsageServer) error
	// Gets the right sizing recommendation of all the accounts in the costgroup
	GetRightSizingRecommendation(context.Context, *GetRightSizingRecommendationRequest) (*GetRightSizingRecommendationResponse, error)
	// Modify resource type from right sizing recommendation
	ModifyResourceType(context.Context, *ModifyResourceTypeRequest) (*ModifyResourceTypeResponse, error)
	// Terminate a resource from right sizing recommendation
	TerminateResource(context.Context, *TerminateResourceRequest) (*TerminateResourceResponse, error)
	// Upload charge code
	UploadChargeCode(Cover_UploadChargeCodeServer) error
	// Assign payer to a linked account
	AssignPayer(context.Context, *AssignPayerRequest) (*AssignPayerResponse, error)
	// Get list of all payers
	GetPayers(context.Context, *GetPayersRequest) (*GetPayersResponse, error)
	// Get list of registered accounts
	GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
	// Get list of supported services
	GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error)
	// Get list of available regions
	GetRegions(context.Context, *GetRegionsRequest) (*GetRegionsResponse, error)
	// Get list of available tags
	GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error)
	// Lists the fees
	ListFees(*ListFeesRequest, Cover_ListFeesServer) error
	// Restore distributed fees
	RestoreFee(*RestoreFeeRequest, Cover_RestoreFeeServer) error
	// Get all available fees for the specified cost group
	GetCostGroupFee(*GetCostGroupFeeRequest, Cover_GetCostGroupFeeServer) error
	// WORK-IN-PROGRESS: Lists all the allocators
	ListAllocators(*ListAllocatorsRequest, Cover_ListAllocatorsServer) error
	// WORK-IN-PROGRESS: Creates cost allocator item
	CreateAllocator(context.Context, *CreateAllocatorRequest) (*CostAllocatorDetails, error)
	// Get all available attributes for the charges
	GetAllocationAttributes(context.Context, *GetAllocationAttributesRequest) (*GetAllocationAttributesResponse, error)
	// WORK-IN-PROGRESS: Updates a cost allocator item
	UpdateAllocator(context.Context, *CostAllocatorRequest) (*CostAllocatorDetails, error)
	// WORK-IN-PROGRESS: Deletes a cost allocator
	DeleteAllocator(context.Context, *DeleteAllocatorRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Do not use.
	ProxyCreateCompletion(*ProxyCreateCompletionRequest, Cover_ProxyCreateCompletionServer) error
	// WORK-IN-PROGRESS: Simulate fee allocator
	SimulateFeeAllocator(*CreateAllocatorRequest, Cover_SimulateFeeAllocatorServer) error
	// WORK-IN-PROGRESS: Lists the allocated account usages
	ListAccountUsage(*ListAccountUsageRequest, Cover_ListAccountUsageServer) error
	// WORK-IN-PROGRESS: Restore the allocated account usages
	RestoreAccountUsage(*RestoreAccountUsageRequest, Cover_RestoreAccountUsageServer) error
	// WORK-IN-PROGRESS: Simulate the output of the account usage allocation
	SimulateAccountUsage(*CreateAllocatorRequest, Cover_SimulateAccountUsageServer) error
	// WORK-IN-PROGRESS: Lists the allocated ri and sp savings
	ListSavings(*ListFeesRequest, Cover_ListSavingsServer) error
	// WORK-IN-PROGRESS: Restore the allocated ri and sp savings
	RestoreSavings(*RestoreSavingsRequest, Cover_RestoreSavingsServer) error
	// WORK-IN-PROGRESS: Simulate the output of the ri and sp savings allocation
	SimulateSavings(*CreateAllocatorRequest, Cover_SimulateSavingsServer) error
	// WORK-IN-PROGRESS: Get all available allocation items for the specified cost group
	GetCostGroupAllocation(*GetCostGroupAllocationRequest, Cover_GetCostGroupAllocationServer) error
	// WORK-IN-PROGRESS: Add or read user from Auth0
	ProcessAuth0User(context.Context, *ProcessAuth0UserRequest) (*ProcessAuth0UserResponse, error)
	// WORK-IN-PROGRESS: PartnerCenterCredentials for Azure
	AddPartnerCenterCredentials(context.Context, *AddPartnerCenterCredentialsRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Adding MpnSetting for Azure
	AddMpnSetting(context.Context, *AddMpnSettingRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Get Cost Group by Attribute Type
	GetCostGroupAttribute(context.Context, *GetCostGroupAttributeRequest) (*GetCostGroupAttributeResponse, error)
	// Get Alerts under organization
	GetAlerts(*GetAlertsRequest, Cover_GetAlertsServer) error
	// Create Alerts under organization
	CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error)
	// Get Specific Alert under organization
	GetAlertDetails(context.Context, *GetAlertDetailsRequest) (*GetAlertDetailsResponse, error)
	// Delete Specific Alert under organization
	DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error)
	// Update Specific Alert under organization
	UpdateAlertDetails(context.Context, *UpdateAlertDetailsRequest) (*UpdateAlertDetailsResponse, error)
	// WORK-IN-PROGRESS: Get Channels under organization
	GetChannels(*GetChannelsRequest, Cover_GetChannelsServer) error
	// WORK-IN-PROGRESS: Create Channel under organization
	CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error)
	// WORK-IN-PROGRESS: Get Specific Channel under organization
	GetChannelDetails(context.Context, *GetChannelDetailsRequest) (*GetChannelDetailsResponse, error)
	// WORK-IN-PROGRESS: Delete Specific Channel under organization
	DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error)
	// WORK-IN-PROGRESS: Update Specific Channel under organization
	UpdateChannelDetails(context.Context, *UpdateChannelDetailsRequest) (*UpdateChannelDetailsResponse, error)
	// Get the discount recommendations for every account in a cost group
	GetDiscountRecommendations(context.Context, *GetDiscountRecommendationsRequest) (*GetDiscountRecommendationsResponse, error)
	// Get the data of a cost group containing anomaly values
	GetAnomalyinCostGroup(*GetAnomalyinCostGroupRequest, Cover_GetAnomalyinCostGroupServer) error
	// Create discount Expiration Alert.
	CreateDiscountExpirationAlert(context.Context, *CreateDiscountExpirationAlertRequest) (*emptypb.Empty, error)
	// Update discount Expiration Alert
	UpdateDiscountExpirationAlert(context.Context, *UpdateDiscountExpirationAlertRequest) (*emptypb.Empty, error)
	// Get discount Expiration Alert Data
	GetDiscountExpirationAlert(context.Context, *ManipulateDiscountExpirationAlertRequest) (*DiscountExpiryAlertData, error)
	// List all discount Expiration Alert Data
	ListDiscountExpirationAlert(*ListDiscountExpirationAlertRequest, Cover_ListDiscountExpirationAlertServer) error
	// Delete selected discount Expiration Alert Data
	DeleteDiscountExpirationAlert(context.Context, *ManipulateDiscountExpirationAlertRequest) (*emptypb.Empty, error)
	// Create Anomaly Alert
	CreateAnomalyAlert(context.Context, *CreateAnomalyAlertRequest) (*emptypb.Empty, error)
	// Delete Anomaly Alert
	DeleteAnomalyAlert(context.Context, *ManipulateAnomalyAlertRequest) (*emptypb.Empty, error)
	// List all the Anomaly Alert Data
	ListAnomalyAlert(*ListAnomalyAlertRequest, Cover_ListAnomalyAlertServer) error
	// Get Anomaly Alert Data
	GetAnomalyAlert(context.Context, *ManipulateAnomalyAlertRequest) (*AnomalyAlertData, error)
	// Update Anomaly Alert
	UpdateAnomalyAlert(context.Context, *UpdateAnomalyAlertRequest) (*emptypb.Empty, error)
	// Octo new user registration
	RegisterNewUser(context.Context, *RegisterNewUserRequest) (*RegisterNewUserResponse, error)
	// Octo getting user profile
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	// Update user profile
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	// WORK-IN-PROGRESS: List all Budgets in an organization or Budgets under specific cost group
	ListBudgets(*ListBudgetsRequest, Cover_ListBudgetsServer) error
	// WORK-IN-PROGRESS: Get specific Budget data for a cost group in an organization
	GetBudget(context.Context, *GetBudgetRequest) (*GetBudgetResponse, error)
	// WORK-IN-PROGRESS: Create Budget for specific cost group in an organization
	CreateBudget(context.Context, *CreateBudgetRequest) (*CreateBudgetResponse, error)
	// WORK-IN-PROGRESS: Delete Budget for specific cost group in an organization
	DeleteBudget(context.Context, *DeleteBudgetRequest) (*DeleteBudgetResponse, error)
	// WORK-IN-PROGRESS: Update Budget for specific cost group in an organization
	UpdateBudget(context.Context, *UpdateBudgetRequest) (*UpdateBudgetResponse, error)
	// WORK-IN-PROGRESS:Resolve user for aws marketplace subscription integration
	ResolveAWSMarketplaceTokenForOnboarding(context.Context, *ResolveAWSMarketplaceTokenForOnboardingRequest) (*ResolveAWSMarketplaceTokenForOnboardingResponse, error)
	// Get the Customer Subscription status from marketplace
	GetCustomerSubscriptionStatus(context.Context, *GetCustomerSubscriptionStatusRequest) (*GetCustomerSubscriptionStatusResponse, error)
	// Profiling for new users.
	CreateProfiling(context.Context, *CreateProfilingRequest) (*CreateProfilingResponse, error)
	// Adding orgId to marketplace customers
	AddInfotoMarketplace(context.Context, *AddInfotoMarketplaceRequest) (*AddInfotoMarketplaceResponse, error)
	// Get data for insights reports summary
	GetReportSummary(context.Context, *GetReportSummaryRequest) (*GetReportSummaryResponse, error)
	// Lists recommendations based on specified criteria.
	ListRecommendations(*ListRecommendationRequest, Cover_ListRecommendationsServer) error
	// Lists recommendations based on specified criteria.
	ListRecommendationsV2(*ListRecommendationV2Request, Cover_ListRecommendationsV2Server) error
	// Retrieves a specific recommendation by its ID.
	GetRecommendation(context.Context, *GetRecommendationRequest) (*GetRecommendationResponse, error)
	// Retrieves a specific recommendation by its ID. (Version 2)
	GetRecommendationV2(context.Context, *GetRecommendationV2Request) (*GetRecommendationV2Response, error)
	// Executes optimization based on a recommendation.
	ExecuteOptimization(context.Context, *ExecuteOptimizationRequest) (*ExecuteOptimizationResponse, error)
	// Get Execution status of a recommendation.
	GetExecutionStatus(*GetExecutionStatusRequest, Cover_GetExecutionStatusServer) error
	// Mark a recommendation executed.
	MarkAsExecuted(context.Context, *MarkAsExecutedRequest) (*MarkAsExecutedResponse, error)
	// Undo a executed recommendation (For recommendation).
	UndoExecutedRecommendation(context.Context, *UndoExecutedRecommendationRequest) (*UndoExecutedRecommendationResponse, error)
	// Lists recommendations based on specified criteria.
	OptimizationHistory(context.Context, *OptimizationHistoryRequest) (*OptimizationHistoryResponse, error)
	// Sets Cost group's event indicator
	SetCostGroupEventIndicator(context.Context, *SetCostGroupEventIndicatorRequest) (*SetCostGroupEventIndicatorResponse, error)
	// Sets Cost group's anomaly options
	SetCostGroupAnomalyOptions(context.Context, *SetCostGroupAnomalyOptionsRequest) (*SetCostGroupAnomalyOptionsResponse, error)
	// Sets Org's starting month/ fiscal month
	SetOrgFiscalMonth(context.Context, *SetOrgFiscalMonthRequest) (*SetOrgFiscalMonthResponse, error)
	// Get Org's starting month/ fiscal month
	GetOrgFiscalMonth(context.Context, *GetOrgFiscalMonthRequest) (*GetOrgFiscalMonthResponse, error)
	// WORK-IN-PROGRESS: Transfer the account from the original organization to Alphaus payer account
	TransferOrganization(context.Context, *TransferOrganizationRequest) (*TransferOrganizationResponse, error)
	// WORK-IN-PROGRESS: Set user preference in cost group creation UI
	UpdateCostGroupCreationUI(context.Context, *UpdateCostGroupCreationUIRequest) (*UpdateCostGroupCreationUIResponse, error)
	// Lists Unit Types
	ListUnitTypes(context.Context, *ListUnitTypesRequest) (*ListUnitTypesResponse, error)
	// Create Unit Type
	CreateUnitType(context.Context, *CreateUnitTypeRequest) (*CreateUnitTypeResponse, error)
	// Get Specific Unit Type
	GetUnitType(context.Context, *GetUnitTypeRequest) (*GetUnitTypeResponse, error)
	// Update Specific Unit Type
	UpdateUnitType(context.Context, *UpdateUnitTypeRequest) (*UpdateUnitTypeResponse, error)
	// Delete Specific Unit Type
	DeleteUnitType(context.Context, *DeleteUnitTypeRequest) (*DeleteUnitTypeResponse, error)
	// Merge Existing Unit Types
	MergeUnits(context.Context, *MergeUnitsRequest) (*MergeUnitsResponse, error)
	// List Suggested Unit Types
	ListSuggestedUnits(context.Context, *ListSuggestedUnitsRequest) (*ListSuggestedUnitsResponse, error)
	// Merge Suggested Units
	MergeSuggestedUnits(context.Context, *MergeSuggestedUnitsRequest) (*MergeSuggestedUnitsResponse, error)
	// Create Unit from Suggested Units
	CreateUnitFromSuggested(context.Context, *CreateUnitFromSuggestedRequest) (*CreateUnitFromSuggestedResponse, error)
	// List all Shared Resources
	ListSharedResources(context.Context, *ListSharedResourcesRequest) (*ListSharedResourcesResponse, error)
	// Create Shared Resource
	CreateSharedResource(context.Context, *CreateSharedResourcesRequest) (*CreateSharedResourcesResponse, error)
	// Get Specific Shared Resource
	GetSharedResource(context.Context, *GetSharedResourcesRequest) (*GetSharedResourcesResponse, error)
	// Update Specific Shared Resource
	UpdateSharedResource(context.Context, *UpdateSharedResourcesRequest) (*UpdateSharedResourcesResponse, error)
	// Delete Specific Shared Resource
	DeleteSharedResource(context.Context, *DeleteSharedResourcesRequest) (*DeleteSharedResourcesResponse, error)
	// List all Unit Metrics
	ListUnitMetrics(context.Context, *ListUnitMetricsRequest) (*ListUnitMetricsResponse, error)
	// Create Unit Metric
	CreateUnitMetric(context.Context, *CreateUnitMetricRequest) (*CreateUnitMetricResponse, error)
	// Get Specific Unit Metric
	GetUnitMetric(context.Context, *GetUnitMetricRequest) (*GetUnitMetricResponse, error)
	// Update Specific Unit Metric
	UpdateUnitMetric(context.Context, *UpdateUnitMetricRequest) (*UpdateUnitMetricResponse, error)
	// Delete Specific Unit Metric
	DeleteUnitMetric(context.Context, *DeleteUnitMetricRequest) (*DeleteUnitMetricResponse, error)
	// Confirm Google Sheet Access
	ConfirmGoogleSheetAccess(context.Context, *ConfirmGoogleSheetAccessRequest) (*ConfirmGoogleSheetAccessResponse, error)
	// Preview Google Sheet Data
	PreviewGoogleSheet(context.Context, *PreviewGoogleSheetRequest) (*PreviewGoogleSheetResponse, error)
	VerifyAPIAccess(context.Context, *VerifyAPIAccessRequest) (*VerifyAPIAccessResponse, error)
	mustEmbedUnimplementedCoverServer()
}

// UnimplementedCoverServer must be embedded to have forward compatible implementations.
type UnimplementedCoverServer struct {
}

func (UnimplementedCoverServer) OnboardOrg(context.Context, *OnboardOrgRequest) (*OnboardOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnboardOrg not implemented")
}
func (UnimplementedCoverServer) InviteMember(context.Context, *InviteMemberRequest) (*InviteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMember not implemented")
}
func (UnimplementedCoverServer) ActivateUser(context.Context, *ActivateUserRequest) (*ActivateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateUser not implemented")
}
func (UnimplementedCoverServer) CreateMember(context.Context, *CreateMemberRequest) (*CreateMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (UnimplementedCoverServer) GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedCoverServer) GetMemberDetails(context.Context, *GetMemberDetailsRequest) (*GetMemberDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberDetails not implemented")
}
func (UnimplementedCoverServer) GetMemberCostGroup(context.Context, *GetMemberCostGroupRequest) (*GetMemberCostGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberCostGroup not implemented")
}
func (UnimplementedCoverServer) UpdateMemberPermission(context.Context, *UpdateMemberPermissionRequest) (*UpdateMemberPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberPermission not implemented")
}
func (UnimplementedCoverServer) GetUserDetails(context.Context, *GetUserDetailsRequest) (*GetUserDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetails not implemented")
}
func (UnimplementedCoverServer) UpdateUserAvatar(context.Context, *UpdateUserAvatarRequest) (*UpdateUserAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAvatar not implemented")
}
func (UnimplementedCoverServer) UpdateUserIcon(context.Context, *UpdateUserIconRequest) (*UpdateUserIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserIcon not implemented")
}
func (UnimplementedCoverServer) UpdateUserColorTheme(context.Context, *UpdateUserColorThemeRequest) (*UpdateUserColorThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserColorTheme not implemented")
}
func (UnimplementedCoverServer) UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (UnimplementedCoverServer) UpdateUserEmail(context.Context, *UpdateUserEmailRequest) (*UpdateUserEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserEmail not implemented")
}
func (UnimplementedCoverServer) UpdateUserMainView(context.Context, *UpdateUserMainViewRequest) (*UpdateUserMainViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserMainView not implemented")
}
func (UnimplementedCoverServer) ResetUserPassword(context.Context, *ResetUserPasswordRequest) (*ResetUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserPassword not implemented")
}
func (UnimplementedCoverServer) UpdateUserLocale(context.Context, *UpdateUserLocaleRequest) (*UpdateUserLocaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLocale not implemented")
}
func (UnimplementedCoverServer) UpdateUserAppTheme(context.Context, *UpdateUserAppThemeRequest) (*UpdateUserAppThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAppTheme not implemented")
}
func (UnimplementedCoverServer) UpdateUserTimezone(context.Context, *UpdateUserTimezoneRequest) (*UpdateUserTimezoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserTimezone not implemented")
}
func (UnimplementedCoverServer) UpdateUserAttributes(context.Context, *UpdateUserAttributesRequest) (*UpdateUserAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAttributes not implemented")
}
func (UnimplementedCoverServer) DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedCoverServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedCoverServer) CreateView(context.Context, *CreateViewRequest) (*CreateViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateView not implemented")
}
func (UnimplementedCoverServer) GetViews(context.Context, *GetViewsRequest) (*GetViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViews not implemented")
}
func (UnimplementedCoverServer) GetCurrentView(context.Context, *GetCurrentViewRequest) (*GetCurrentViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentView not implemented")
}
func (UnimplementedCoverServer) GetFavoriteViews(context.Context, *GetFavoriteViewsRequest) (*GetFavoriteViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteViews not implemented")
}
func (UnimplementedCoverServer) PublishView(context.Context, *PublishViewRequest) (*PublishViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishView not implemented")
}
func (UnimplementedCoverServer) AddFavorite(context.Context, *AddFavoriteRequest) (*AddFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFavorite not implemented")
}
func (UnimplementedCoverServer) RemoveFavorite(context.Context, *RemoveFavoriteRequest) (*RemoveFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFavorite not implemented")
}
func (UnimplementedCoverServer) UpdateView(context.Context, *UpdateViewRequest) (*UpdateViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateView not implemented")
}
func (UnimplementedCoverServer) UpdateViewLayout(context.Context, *UpdateViewLayoutRequest) (*UpdateViewLayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateViewLayout not implemented")
}
func (UnimplementedCoverServer) UpdateViewWidget(context.Context, *UpdateViewWidgetRequest) (*UpdateViewWidgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateViewWidget not implemented")
}
func (UnimplementedCoverServer) UpdateViewColorTheme(context.Context, *UpdateViewColorThemeRequest) (*UpdateViewColorThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateViewColorTheme not implemented")
}
func (UnimplementedCoverServer) UpdateViewCurrency(context.Context, *UpdateViewCurrencyRequest) (*UpdateViewCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateViewCurrency not implemented")
}
func (UnimplementedCoverServer) SetOrgUpdateCurrency(context.Context, *SetOrgUpdateCurrencyRequest) (*SetOrgUpdateCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrgUpdateCurrency not implemented")
}
func (UnimplementedCoverServer) GetOrgUpdateCurrency(context.Context, *GetOrgUpdateCurrencyRequest) (*GetOrgUpdateCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgUpdateCurrency not implemented")
}
func (UnimplementedCoverServer) ListExchangeRates(context.Context, *ListExchangeRatesRequest) (*ListExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExchangeRates not implemented")
}
func (UnimplementedCoverServer) DeleteView(context.Context, *DeleteViewRequest) (*DeleteViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteView not implemented")
}
func (UnimplementedCoverServer) UpdateSideMenuState(context.Context, *UpdateSideMenuStateRequest) (*UpdateSideMenuStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSideMenuState not implemented")
}
func (UnimplementedCoverServer) AddSideMenuFavorite(context.Context, *AddSideMenuFavoriteRequest) (*AddSideMenuFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSideMenuFavorite not implemented")
}
func (UnimplementedCoverServer) RemoveSideMenuFavorite(context.Context, *RemoveSideMenuFavoriteRequest) (*RemoveSideMenuFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSideMenuFavorite not implemented")
}
func (UnimplementedCoverServer) CreateCostGroup(context.Context, *CreateCostGroupRequest) (*CreateCostGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCostGroup not implemented")
}
func (UnimplementedCoverServer) GetCostGroups(context.Context, *GetCostGroupsRequest) (*GetCostGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostGroups not implemented")
}
func (UnimplementedCoverServer) GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedCoverServer) GetCostGroupDetails(context.Context, *GetCostGroupDetailsRequest) (*GetCostGroupDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostGroupDetails not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupName(context.Context, *UpdateCostGroupNameRequest) (*UpdateCostGroupNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupName not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupDescription(context.Context, *UpdateCostGroupDescriptionRequest) (*UpdateCostGroupDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupDescription not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupImage(context.Context, *UpdateCostGroupImageRequest) (*UpdateCostGroupImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupImage not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupIcon(context.Context, *UpdateCostGroupIconRequest) (*UpdateCostGroupIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupIcon not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupColorTheme(context.Context, *UpdateCostGroupColorThemeRequest) (*UpdateCostGroupColorThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupColorTheme not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupCombinations(context.Context, *UpdateCostGroupCombinationsRequest) (*UpdateCostGroupCombinationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupCombinations not implemented")
}
func (UnimplementedCoverServer) ResolveCostGroupCombinations(context.Context, *ResolveCostGroupCombinationsRequest) (*ResolveCostGroupCombinationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveCostGroupCombinations not implemented")
}
func (UnimplementedCoverServer) AssignCostGroupMember(context.Context, *AssignCostGroupMemberRequest) (*AssignCostGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignCostGroupMember not implemented")
}
func (UnimplementedCoverServer) RemoveCostGroupMember(context.Context, *RemoveCostGroupMemberRequest) (*RemoveCostGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCostGroupMember not implemented")
}
func (UnimplementedCoverServer) DeleteCostGroup(context.Context, *DeleteCostGroupRequest) (*DeleteCostGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCostGroup not implemented")
}
func (UnimplementedCoverServer) GetAccountAccessTemplateUrl(context.Context, *GetAccountAccessTemplateUrlRequest) (*GetAccountAccessTemplateUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountAccessTemplateUrl not implemented")
}
func (UnimplementedCoverServer) ListAccountAccess(*ListAccountAccessRequest, Cover_ListAccountAccessServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAccountAccess not implemented")
}
func (UnimplementedCoverServer) GetAccountAccess(context.Context, *GetAccountAccessRequest) (*AccountAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountAccess not implemented")
}
func (UnimplementedCoverServer) GetDataAccess(context.Context, *GetAndDeleteDataAccessRequest) (*DataAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataAccess not implemented")
}
func (UnimplementedCoverServer) DeleteDataAccess(context.Context, *GetAndDeleteDataAccessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataAccess not implemented")
}
func (UnimplementedCoverServer) CreateAccountAccess(context.Context, *CreateAccountAccessRequest) (*AccountAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountAccess not implemented")
}
func (UnimplementedCoverServer) CreateAccountAccessStackset(context.Context, *CreateAccountAccessStacksetRequest) (*AccountAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountAccessStackset not implemented")
}
func (UnimplementedCoverServer) CreateAccountAccessCur(context.Context, *CreateAccountAccessRequest) (*AccountAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountAccessCur not implemented")
}
func (UnimplementedCoverServer) UpdateAccountAccess(context.Context, *UpdateAccountAccessRequest) (*protos.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountAccess not implemented")
}
func (UnimplementedCoverServer) DeleteAccountAccess(context.Context, *DeleteAccountAccessRequest) (*DeleteAccountAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountAccess not implemented")
}
func (UnimplementedCoverServer) RegisterAccount(context.Context, *RegisterAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccount not implemented")
}
func (UnimplementedCoverServer) RegisterDataAccess(context.Context, *RegisterDataAccessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDataAccess not implemented")
}
func (UnimplementedCoverServer) AddBillingAccount(context.Context, *BillingAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBillingAccount not implemented")
}
func (UnimplementedCoverServer) ListDataAccess(*ListDataAccessRequest, Cover_ListDataAccessServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDataAccess not implemented")
}
func (UnimplementedCoverServer) ListUnregisteredAccounts(context.Context, *ListUnregisteredAccountsRequest) (*ListUnregisteredAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnregisteredAccounts not implemented")
}
func (UnimplementedCoverServer) UpdateDataAccess(context.Context, *UpdateDataAccessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataAccess not implemented")
}
func (UnimplementedCoverServer) ListAssets(*ListAssetsRequest, Cover_ListAssetsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedCoverServer) GetAssetsSummary(context.Context, *GetAssetsSummaryRequest) (*GetAssetsSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetsSummary not implemented")
}
func (UnimplementedCoverServer) GetCostUsage(*GetCostUsageRequest, Cover_GetCostUsageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCostUsage not implemented")
}
func (UnimplementedCoverServer) GetRightSizingRecommendation(context.Context, *GetRightSizingRecommendationRequest) (*GetRightSizingRecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRightSizingRecommendation not implemented")
}
func (UnimplementedCoverServer) ModifyResourceType(context.Context, *ModifyResourceTypeRequest) (*ModifyResourceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyResourceType not implemented")
}
func (UnimplementedCoverServer) TerminateResource(context.Context, *TerminateResourceRequest) (*TerminateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateResource not implemented")
}
func (UnimplementedCoverServer) UploadChargeCode(Cover_UploadChargeCodeServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadChargeCode not implemented")
}
func (UnimplementedCoverServer) AssignPayer(context.Context, *AssignPayerRequest) (*AssignPayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPayer not implemented")
}
func (UnimplementedCoverServer) GetPayers(context.Context, *GetPayersRequest) (*GetPayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayers not implemented")
}
func (UnimplementedCoverServer) GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedCoverServer) GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedCoverServer) GetRegions(context.Context, *GetRegionsRequest) (*GetRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegions not implemented")
}
func (UnimplementedCoverServer) GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedCoverServer) ListFees(*ListFeesRequest, Cover_ListFeesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFees not implemented")
}
func (UnimplementedCoverServer) RestoreFee(*RestoreFeeRequest, Cover_RestoreFeeServer) error {
	return status.Errorf(codes.Unimplemented, "method RestoreFee not implemented")
}
func (UnimplementedCoverServer) GetCostGroupFee(*GetCostGroupFeeRequest, Cover_GetCostGroupFeeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCostGroupFee not implemented")
}
func (UnimplementedCoverServer) ListAllocators(*ListAllocatorsRequest, Cover_ListAllocatorsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAllocators not implemented")
}
func (UnimplementedCoverServer) CreateAllocator(context.Context, *CreateAllocatorRequest) (*CostAllocatorDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAllocator not implemented")
}
func (UnimplementedCoverServer) GetAllocationAttributes(context.Context, *GetAllocationAttributesRequest) (*GetAllocationAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocationAttributes not implemented")
}
func (UnimplementedCoverServer) UpdateAllocator(context.Context, *CostAllocatorRequest) (*CostAllocatorDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllocator not implemented")
}
func (UnimplementedCoverServer) DeleteAllocator(context.Context, *DeleteAllocatorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllocator not implemented")
}
func (UnimplementedCoverServer) ProxyCreateCompletion(*ProxyCreateCompletionRequest, Cover_ProxyCreateCompletionServer) error {
	return status.Errorf(codes.Unimplemented, "method ProxyCreateCompletion not implemented")
}
func (UnimplementedCoverServer) SimulateFeeAllocator(*CreateAllocatorRequest, Cover_SimulateFeeAllocatorServer) error {
	return status.Errorf(codes.Unimplemented, "method SimulateFeeAllocator not implemented")
}
func (UnimplementedCoverServer) ListAccountUsage(*ListAccountUsageRequest, Cover_ListAccountUsageServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAccountUsage not implemented")
}
func (UnimplementedCoverServer) RestoreAccountUsage(*RestoreAccountUsageRequest, Cover_RestoreAccountUsageServer) error {
	return status.Errorf(codes.Unimplemented, "method RestoreAccountUsage not implemented")
}
func (UnimplementedCoverServer) SimulateAccountUsage(*CreateAllocatorRequest, Cover_SimulateAccountUsageServer) error {
	return status.Errorf(codes.Unimplemented, "method SimulateAccountUsage not implemented")
}
func (UnimplementedCoverServer) ListSavings(*ListFeesRequest, Cover_ListSavingsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSavings not implemented")
}
func (UnimplementedCoverServer) RestoreSavings(*RestoreSavingsRequest, Cover_RestoreSavingsServer) error {
	return status.Errorf(codes.Unimplemented, "method RestoreSavings not implemented")
}
func (UnimplementedCoverServer) SimulateSavings(*CreateAllocatorRequest, Cover_SimulateSavingsServer) error {
	return status.Errorf(codes.Unimplemented, "method SimulateSavings not implemented")
}
func (UnimplementedCoverServer) GetCostGroupAllocation(*GetCostGroupAllocationRequest, Cover_GetCostGroupAllocationServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCostGroupAllocation not implemented")
}
func (UnimplementedCoverServer) ProcessAuth0User(context.Context, *ProcessAuth0UserRequest) (*ProcessAuth0UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessAuth0User not implemented")
}
func (UnimplementedCoverServer) AddPartnerCenterCredentials(context.Context, *AddPartnerCenterCredentialsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPartnerCenterCredentials not implemented")
}
func (UnimplementedCoverServer) AddMpnSetting(context.Context, *AddMpnSettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMpnSetting not implemented")
}
func (UnimplementedCoverServer) GetCostGroupAttribute(context.Context, *GetCostGroupAttributeRequest) (*GetCostGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostGroupAttribute not implemented")
}
func (UnimplementedCoverServer) GetAlerts(*GetAlertsRequest, Cover_GetAlertsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAlerts not implemented")
}
func (UnimplementedCoverServer) CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlert not implemented")
}
func (UnimplementedCoverServer) GetAlertDetails(context.Context, *GetAlertDetailsRequest) (*GetAlertDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertDetails not implemented")
}
func (UnimplementedCoverServer) DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlert not implemented")
}
func (UnimplementedCoverServer) UpdateAlertDetails(context.Context, *UpdateAlertDetailsRequest) (*UpdateAlertDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertDetails not implemented")
}
func (UnimplementedCoverServer) GetChannels(*GetChannelsRequest, Cover_GetChannelsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChannels not implemented")
}
func (UnimplementedCoverServer) CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedCoverServer) GetChannelDetails(context.Context, *GetChannelDetailsRequest) (*GetChannelDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelDetails not implemented")
}
func (UnimplementedCoverServer) DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedCoverServer) UpdateChannelDetails(context.Context, *UpdateChannelDetailsRequest) (*UpdateChannelDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelDetails not implemented")
}
func (UnimplementedCoverServer) GetDiscountRecommendations(context.Context, *GetDiscountRecommendationsRequest) (*GetDiscountRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscountRecommendations not implemented")
}
func (UnimplementedCoverServer) GetAnomalyinCostGroup(*GetAnomalyinCostGroupRequest, Cover_GetAnomalyinCostGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAnomalyinCostGroup not implemented")
}
func (UnimplementedCoverServer) CreateDiscountExpirationAlert(context.Context, *CreateDiscountExpirationAlertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiscountExpirationAlert not implemented")
}
func (UnimplementedCoverServer) UpdateDiscountExpirationAlert(context.Context, *UpdateDiscountExpirationAlertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiscountExpirationAlert not implemented")
}
func (UnimplementedCoverServer) GetDiscountExpirationAlert(context.Context, *ManipulateDiscountExpirationAlertRequest) (*DiscountExpiryAlertData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscountExpirationAlert not implemented")
}
func (UnimplementedCoverServer) ListDiscountExpirationAlert(*ListDiscountExpirationAlertRequest, Cover_ListDiscountExpirationAlertServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDiscountExpirationAlert not implemented")
}
func (UnimplementedCoverServer) DeleteDiscountExpirationAlert(context.Context, *ManipulateDiscountExpirationAlertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiscountExpirationAlert not implemented")
}
func (UnimplementedCoverServer) CreateAnomalyAlert(context.Context, *CreateAnomalyAlertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnomalyAlert not implemented")
}
func (UnimplementedCoverServer) DeleteAnomalyAlert(context.Context, *ManipulateAnomalyAlertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnomalyAlert not implemented")
}
func (UnimplementedCoverServer) ListAnomalyAlert(*ListAnomalyAlertRequest, Cover_ListAnomalyAlertServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAnomalyAlert not implemented")
}
func (UnimplementedCoverServer) GetAnomalyAlert(context.Context, *ManipulateAnomalyAlertRequest) (*AnomalyAlertData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnomalyAlert not implemented")
}
func (UnimplementedCoverServer) UpdateAnomalyAlert(context.Context, *UpdateAnomalyAlertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnomalyAlert not implemented")
}
func (UnimplementedCoverServer) RegisterNewUser(context.Context, *RegisterNewUserRequest) (*RegisterNewUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewUser not implemented")
}
func (UnimplementedCoverServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedCoverServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedCoverServer) ListBudgets(*ListBudgetsRequest, Cover_ListBudgetsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBudgets not implemented")
}
func (UnimplementedCoverServer) GetBudget(context.Context, *GetBudgetRequest) (*GetBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBudget not implemented")
}
func (UnimplementedCoverServer) CreateBudget(context.Context, *CreateBudgetRequest) (*CreateBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBudget not implemented")
}
func (UnimplementedCoverServer) DeleteBudget(context.Context, *DeleteBudgetRequest) (*DeleteBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBudget not implemented")
}
func (UnimplementedCoverServer) UpdateBudget(context.Context, *UpdateBudgetRequest) (*UpdateBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBudget not implemented")
}
func (UnimplementedCoverServer) ResolveAWSMarketplaceTokenForOnboarding(context.Context, *ResolveAWSMarketplaceTokenForOnboardingRequest) (*ResolveAWSMarketplaceTokenForOnboardingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveAWSMarketplaceTokenForOnboarding not implemented")
}
func (UnimplementedCoverServer) GetCustomerSubscriptionStatus(context.Context, *GetCustomerSubscriptionStatusRequest) (*GetCustomerSubscriptionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerSubscriptionStatus not implemented")
}
func (UnimplementedCoverServer) CreateProfiling(context.Context, *CreateProfilingRequest) (*CreateProfilingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfiling not implemented")
}
func (UnimplementedCoverServer) AddInfotoMarketplace(context.Context, *AddInfotoMarketplaceRequest) (*AddInfotoMarketplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInfotoMarketplace not implemented")
}
func (UnimplementedCoverServer) GetReportSummary(context.Context, *GetReportSummaryRequest) (*GetReportSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportSummary not implemented")
}
func (UnimplementedCoverServer) ListRecommendations(*ListRecommendationRequest, Cover_ListRecommendationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRecommendations not implemented")
}
func (UnimplementedCoverServer) ListRecommendationsV2(*ListRecommendationV2Request, Cover_ListRecommendationsV2Server) error {
	return status.Errorf(codes.Unimplemented, "method ListRecommendationsV2 not implemented")
}
func (UnimplementedCoverServer) GetRecommendation(context.Context, *GetRecommendationRequest) (*GetRecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendation not implemented")
}
func (UnimplementedCoverServer) GetRecommendationV2(context.Context, *GetRecommendationV2Request) (*GetRecommendationV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationV2 not implemented")
}
func (UnimplementedCoverServer) ExecuteOptimization(context.Context, *ExecuteOptimizationRequest) (*ExecuteOptimizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteOptimization not implemented")
}
func (UnimplementedCoverServer) GetExecutionStatus(*GetExecutionStatusRequest, Cover_GetExecutionStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetExecutionStatus not implemented")
}
func (UnimplementedCoverServer) MarkAsExecuted(context.Context, *MarkAsExecutedRequest) (*MarkAsExecutedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsExecuted not implemented")
}
func (UnimplementedCoverServer) UndoExecutedRecommendation(context.Context, *UndoExecutedRecommendationRequest) (*UndoExecutedRecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoExecutedRecommendation not implemented")
}
func (UnimplementedCoverServer) OptimizationHistory(context.Context, *OptimizationHistoryRequest) (*OptimizationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimizationHistory not implemented")
}
func (UnimplementedCoverServer) SetCostGroupEventIndicator(context.Context, *SetCostGroupEventIndicatorRequest) (*SetCostGroupEventIndicatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCostGroupEventIndicator not implemented")
}
func (UnimplementedCoverServer) SetCostGroupAnomalyOptions(context.Context, *SetCostGroupAnomalyOptionsRequest) (*SetCostGroupAnomalyOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCostGroupAnomalyOptions not implemented")
}
func (UnimplementedCoverServer) SetOrgFiscalMonth(context.Context, *SetOrgFiscalMonthRequest) (*SetOrgFiscalMonthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrgFiscalMonth not implemented")
}
func (UnimplementedCoverServer) GetOrgFiscalMonth(context.Context, *GetOrgFiscalMonthRequest) (*GetOrgFiscalMonthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgFiscalMonth not implemented")
}
func (UnimplementedCoverServer) TransferOrganization(context.Context, *TransferOrganizationRequest) (*TransferOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOrganization not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupCreationUI(context.Context, *UpdateCostGroupCreationUIRequest) (*UpdateCostGroupCreationUIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupCreationUI not implemented")
}
func (UnimplementedCoverServer) ListUnitTypes(context.Context, *ListUnitTypesRequest) (*ListUnitTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnitTypes not implemented")
}
func (UnimplementedCoverServer) CreateUnitType(context.Context, *CreateUnitTypeRequest) (*CreateUnitTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnitType not implemented")
}
func (UnimplementedCoverServer) GetUnitType(context.Context, *GetUnitTypeRequest) (*GetUnitTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitType not implemented")
}
func (UnimplementedCoverServer) UpdateUnitType(context.Context, *UpdateUnitTypeRequest) (*UpdateUnitTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnitType not implemented")
}
func (UnimplementedCoverServer) DeleteUnitType(context.Context, *DeleteUnitTypeRequest) (*DeleteUnitTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnitType not implemented")
}
func (UnimplementedCoverServer) MergeUnits(context.Context, *MergeUnitsRequest) (*MergeUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeUnits not implemented")
}
func (UnimplementedCoverServer) ListSuggestedUnits(context.Context, *ListSuggestedUnitsRequest) (*ListSuggestedUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuggestedUnits not implemented")
}
func (UnimplementedCoverServer) MergeSuggestedUnits(context.Context, *MergeSuggestedUnitsRequest) (*MergeSuggestedUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeSuggestedUnits not implemented")
}
func (UnimplementedCoverServer) CreateUnitFromSuggested(context.Context, *CreateUnitFromSuggestedRequest) (*CreateUnitFromSuggestedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnitFromSuggested not implemented")
}
func (UnimplementedCoverServer) ListSharedResources(context.Context, *ListSharedResourcesRequest) (*ListSharedResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSharedResources not implemented")
}
func (UnimplementedCoverServer) CreateSharedResource(context.Context, *CreateSharedResourcesRequest) (*CreateSharedResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSharedResource not implemented")
}
func (UnimplementedCoverServer) GetSharedResource(context.Context, *GetSharedResourcesRequest) (*GetSharedResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSharedResource not implemented")
}
func (UnimplementedCoverServer) UpdateSharedResource(context.Context, *UpdateSharedResourcesRequest) (*UpdateSharedResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSharedResource not implemented")
}
func (UnimplementedCoverServer) DeleteSharedResource(context.Context, *DeleteSharedResourcesRequest) (*DeleteSharedResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSharedResource not implemented")
}
func (UnimplementedCoverServer) ListUnitMetrics(context.Context, *ListUnitMetricsRequest) (*ListUnitMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnitMetrics not implemented")
}
func (UnimplementedCoverServer) CreateUnitMetric(context.Context, *CreateUnitMetricRequest) (*CreateUnitMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnitMetric not implemented")
}
func (UnimplementedCoverServer) GetUnitMetric(context.Context, *GetUnitMetricRequest) (*GetUnitMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitMetric not implemented")
}
func (UnimplementedCoverServer) UpdateUnitMetric(context.Context, *UpdateUnitMetricRequest) (*UpdateUnitMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnitMetric not implemented")
}
func (UnimplementedCoverServer) DeleteUnitMetric(context.Context, *DeleteUnitMetricRequest) (*DeleteUnitMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnitMetric not implemented")
}
func (UnimplementedCoverServer) ConfirmGoogleSheetAccess(context.Context, *ConfirmGoogleSheetAccessRequest) (*ConfirmGoogleSheetAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmGoogleSheetAccess not implemented")
}
func (UnimplementedCoverServer) PreviewGoogleSheet(context.Context, *PreviewGoogleSheetRequest) (*PreviewGoogleSheetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewGoogleSheet not implemented")
}
func (UnimplementedCoverServer) VerifyAPIAccess(context.Context, *VerifyAPIAccessRequest) (*VerifyAPIAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAPIAccess not implemented")
}
func (UnimplementedCoverServer) mustEmbedUnimplementedCoverServer() {}

// UnsafeCoverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoverServer will
// result in compilation errors.
type UnsafeCoverServer interface {
	mustEmbedUnimplementedCoverServer()
}

func RegisterCoverServer(s grpc.ServiceRegistrar, srv CoverServer) {
	s.RegisterService(&Cover_ServiceDesc, srv)
}

func _Cover_OnboardOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).OnboardOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_OnboardOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).OnboardOrg(ctx, req.(*OnboardOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_InviteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).InviteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_InviteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).InviteMember(ctx, req.(*InviteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ActivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ActivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ActivateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ActivateUser(ctx, req.(*ActivateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateMember(ctx, req.(*CreateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetMemberDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetMemberDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetMemberDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetMemberDetails(ctx, req.(*GetMemberDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetMemberCostGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberCostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetMemberCostGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetMemberCostGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetMemberCostGroup(ctx, req.(*GetMemberCostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateMemberPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateMemberPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateMemberPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateMemberPermission(ctx, req.(*UpdateMemberPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetUserDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetUserDetails(ctx, req.(*GetUserDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserAvatar(ctx, req.(*UpdateUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserIcon(ctx, req.(*UpdateUserIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserColorTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserColorThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserColorTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserColorTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserColorTheme(ctx, req.(*UpdateUserColorThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserName(ctx, req.(*UpdateUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserEmail(ctx, req.(*UpdateUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserMainView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserMainViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserMainView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserMainView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserMainView(ctx, req.(*UpdateUserMainViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ResetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ResetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ResetUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ResetUserPassword(ctx, req.(*ResetUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserLocale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLocaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserLocale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserLocale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserLocale(ctx, req.(*UpdateUserLocaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserAppTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAppThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserAppTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserAppTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserAppTheme(ctx, req.(*UpdateUserAppThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserTimezone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserTimezone(ctx, req.(*UpdateUserTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserAttributes(ctx, req.(*UpdateUserAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateView(ctx, req.(*CreateViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetViews(ctx, req.(*GetViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetCurrentView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetCurrentView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetCurrentView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetCurrentView(ctx, req.(*GetCurrentViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetFavoriteViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetFavoriteViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetFavoriteViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetFavoriteViews(ctx, req.(*GetFavoriteViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_PublishView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).PublishView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_PublishView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).PublishView(ctx, req.(*PublishViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_AddFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).AddFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_AddFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).AddFavorite(ctx, req.(*AddFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_RemoveFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).RemoveFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_RemoveFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).RemoveFavorite(ctx, req.(*RemoveFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateView(ctx, req.(*UpdateViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateViewLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateViewLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateViewLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateViewLayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateViewLayout(ctx, req.(*UpdateViewLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateViewWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateViewWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateViewWidget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateViewWidget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateViewWidget(ctx, req.(*UpdateViewWidgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateViewColorTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateViewColorThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateViewColorTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateViewColorTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateViewColorTheme(ctx, req.(*UpdateViewColorThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateViewCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateViewCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateViewCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateViewCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateViewCurrency(ctx, req.(*UpdateViewCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_SetOrgUpdateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrgUpdateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).SetOrgUpdateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_SetOrgUpdateCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).SetOrgUpdateCurrency(ctx, req.(*SetOrgUpdateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetOrgUpdateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgUpdateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetOrgUpdateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetOrgUpdateCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetOrgUpdateCurrency(ctx, req.(*GetOrgUpdateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ListExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ListExchangeRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ListExchangeRates(ctx, req.(*ListExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteView(ctx, req.(*DeleteViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateSideMenuState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSideMenuStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateSideMenuState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateSideMenuState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateSideMenuState(ctx, req.(*UpdateSideMenuStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_AddSideMenuFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSideMenuFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).AddSideMenuFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_AddSideMenuFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).AddSideMenuFavorite(ctx, req.(*AddSideMenuFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_RemoveSideMenuFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSideMenuFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).RemoveSideMenuFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_RemoveSideMenuFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).RemoveSideMenuFavorite(ctx, req.(*RemoveSideMenuFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateCostGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateCostGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateCostGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateCostGroup(ctx, req.(*CreateCostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetCostGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetCostGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetCostGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetCostGroups(ctx, req.(*GetCostGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetCategories(ctx, req.(*GetCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetCostGroupDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostGroupDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetCostGroupDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetCostGroupDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetCostGroupDetails(ctx, req.(*GetCostGroupDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateCostGroupName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupName(ctx, req.(*UpdateCostGroupNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateCostGroupDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupDescription(ctx, req.(*UpdateCostGroupDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateCostGroupImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupImage(ctx, req.(*UpdateCostGroupImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateCostGroupIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupIcon(ctx, req.(*UpdateCostGroupIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupColorTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupColorThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupColorTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateCostGroupColorTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupColorTheme(ctx, req.(*UpdateCostGroupColorThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupCombinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupCombinationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupCombinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateCostGroupCombinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupCombinations(ctx, req.(*UpdateCostGroupCombinationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ResolveCostGroupCombinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveCostGroupCombinationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ResolveCostGroupCombinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ResolveCostGroupCombinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ResolveCostGroupCombinations(ctx, req.(*ResolveCostGroupCombinationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_AssignCostGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignCostGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).AssignCostGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_AssignCostGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).AssignCostGroupMember(ctx, req.(*AssignCostGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_RemoveCostGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCostGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).RemoveCostGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_RemoveCostGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).RemoveCostGroupMember(ctx, req.(*RemoveCostGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteCostGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteCostGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteCostGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteCostGroup(ctx, req.(*DeleteCostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetAccountAccessTemplateUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountAccessTemplateUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetAccountAccessTemplateUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetAccountAccessTemplateUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetAccountAccessTemplateUrl(ctx, req.(*GetAccountAccessTemplateUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListAccountAccess_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAccountAccessRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListAccountAccess(m, &coverListAccountAccessServer{ServerStream: stream})
}

type Cover_ListAccountAccessServer interface {
	Send(*AccountAccess) error
	grpc.ServerStream
}

type coverListAccountAccessServer struct {
	grpc.ServerStream
}

func (x *coverListAccountAccessServer) Send(m *AccountAccess) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_GetAccountAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetAccountAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetAccountAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetAccountAccess(ctx, req.(*GetAccountAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetDataAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAndDeleteDataAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetDataAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetDataAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetDataAccess(ctx, req.(*GetAndDeleteDataAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteDataAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAndDeleteDataAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteDataAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteDataAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteDataAccess(ctx, req.(*GetAndDeleteDataAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateAccountAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateAccountAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateAccountAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateAccountAccess(ctx, req.(*CreateAccountAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateAccountAccessStackset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountAccessStacksetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateAccountAccessStackset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateAccountAccessStackset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateAccountAccessStackset(ctx, req.(*CreateAccountAccessStacksetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateAccountAccessCur_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateAccountAccessCur(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateAccountAccessCur_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateAccountAccessCur(ctx, req.(*CreateAccountAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateAccountAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateAccountAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateAccountAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateAccountAccess(ctx, req.(*UpdateAccountAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteAccountAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteAccountAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteAccountAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteAccountAccess(ctx, req.(*DeleteAccountAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).RegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_RegisterAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).RegisterAccount(ctx, req.(*RegisterAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_RegisterDataAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDataAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).RegisterDataAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_RegisterDataAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).RegisterDataAccess(ctx, req.(*RegisterDataAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_AddBillingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).AddBillingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_AddBillingAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).AddBillingAccount(ctx, req.(*BillingAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListDataAccess_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDataAccessRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListDataAccess(m, &coverListDataAccessServer{ServerStream: stream})
}

type Cover_ListDataAccessServer interface {
	Send(*DataAccess) error
	grpc.ServerStream
}

type coverListDataAccessServer struct {
	grpc.ServerStream
}

func (x *coverListDataAccessServer) Send(m *DataAccess) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_ListUnregisteredAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnregisteredAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ListUnregisteredAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ListUnregisteredAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ListUnregisteredAccounts(ctx, req.(*ListUnregisteredAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateDataAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateDataAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateDataAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateDataAccess(ctx, req.(*UpdateDataAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListAssets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAssetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListAssets(m, &coverListAssetsServer{ServerStream: stream})
}

type Cover_ListAssetsServer interface {
	Send(*Resource) error
	grpc.ServerStream
}

type coverListAssetsServer struct {
	grpc.ServerStream
}

func (x *coverListAssetsServer) Send(m *Resource) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_GetAssetsSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetsSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetAssetsSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetAssetsSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetAssetsSummary(ctx, req.(*GetAssetsSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetCostUsage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCostUsageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).GetCostUsage(m, &coverGetCostUsageServer{ServerStream: stream})
}

type Cover_GetCostUsageServer interface {
	Send(*CostItem) error
	grpc.ServerStream
}

type coverGetCostUsageServer struct {
	grpc.ServerStream
}

func (x *coverGetCostUsageServer) Send(m *CostItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_GetRightSizingRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRightSizingRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetRightSizingRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetRightSizingRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetRightSizingRecommendation(ctx, req.(*GetRightSizingRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ModifyResourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyResourceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ModifyResourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ModifyResourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ModifyResourceType(ctx, req.(*ModifyResourceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_TerminateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).TerminateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_TerminateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).TerminateResource(ctx, req.(*TerminateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UploadChargeCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoverServer).UploadChargeCode(&coverUploadChargeCodeServer{ServerStream: stream})
}

type Cover_UploadChargeCodeServer interface {
	SendAndClose(*UploadChargeCodeResponse) error
	Recv() (*UploadChargeCodeRequest, error)
	grpc.ServerStream
}

type coverUploadChargeCodeServer struct {
	grpc.ServerStream
}

func (x *coverUploadChargeCodeServer) SendAndClose(m *UploadChargeCodeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coverUploadChargeCodeServer) Recv() (*UploadChargeCodeRequest, error) {
	m := new(UploadChargeCodeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cover_AssignPayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).AssignPayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_AssignPayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).AssignPayer(ctx, req.(*AssignPayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetPayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetPayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetPayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetPayers(ctx, req.(*GetPayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetServices(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetRegions(ctx, req.(*GetRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetTags(ctx, req.(*GetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListFees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListFeesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListFees(m, &coverListFeesServer{ServerStream: stream})
}

type Cover_ListFeesServer interface {
	Send(*FeeDetails) error
	grpc.ServerStream
}

type coverListFeesServer struct {
	grpc.ServerStream
}

func (x *coverListFeesServer) Send(m *FeeDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_RestoreFee_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RestoreFeeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).RestoreFee(m, &coverRestoreFeeServer{ServerStream: stream})
}

type Cover_RestoreFeeServer interface {
	Send(*FeeDetails) error
	grpc.ServerStream
}

type coverRestoreFeeServer struct {
	grpc.ServerStream
}

func (x *coverRestoreFeeServer) Send(m *FeeDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_GetCostGroupFee_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCostGroupFeeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).GetCostGroupFee(m, &coverGetCostGroupFeeServer{ServerStream: stream})
}

type Cover_GetCostGroupFeeServer interface {
	Send(*FeeItem) error
	grpc.ServerStream
}

type coverGetCostGroupFeeServer struct {
	grpc.ServerStream
}

func (x *coverGetCostGroupFeeServer) Send(m *FeeItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_ListAllocators_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAllocatorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListAllocators(m, &coverListAllocatorsServer{ServerStream: stream})
}

type Cover_ListAllocatorsServer interface {
	Send(*CostAllocatorDetails) error
	grpc.ServerStream
}

type coverListAllocatorsServer struct {
	grpc.ServerStream
}

func (x *coverListAllocatorsServer) Send(m *CostAllocatorDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_CreateAllocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAllocatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateAllocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateAllocator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateAllocator(ctx, req.(*CreateAllocatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetAllocationAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllocationAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetAllocationAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetAllocationAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetAllocationAttributes(ctx, req.(*GetAllocationAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateAllocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CostAllocatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateAllocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateAllocator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateAllocator(ctx, req.(*CostAllocatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteAllocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllocatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteAllocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteAllocator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteAllocator(ctx, req.(*DeleteAllocatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ProxyCreateCompletion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProxyCreateCompletionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ProxyCreateCompletion(m, &coverProxyCreateCompletionServer{ServerStream: stream})
}

type Cover_ProxyCreateCompletionServer interface {
	Send(*ProxyCreateCompletionResponse) error
	grpc.ServerStream
}

type coverProxyCreateCompletionServer struct {
	grpc.ServerStream
}

func (x *coverProxyCreateCompletionServer) Send(m *ProxyCreateCompletionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_SimulateFeeAllocator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateAllocatorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).SimulateFeeAllocator(m, &coverSimulateFeeAllocatorServer{ServerStream: stream})
}

type Cover_SimulateFeeAllocatorServer interface {
	Send(*FeeDetails) error
	grpc.ServerStream
}

type coverSimulateFeeAllocatorServer struct {
	grpc.ServerStream
}

func (x *coverSimulateFeeAllocatorServer) Send(m *FeeDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_ListAccountUsage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAccountUsageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListAccountUsage(m, &coverListAccountUsageServer{ServerStream: stream})
}

type Cover_ListAccountUsageServer interface {
	Send(*AccountUsageDetails) error
	grpc.ServerStream
}

type coverListAccountUsageServer struct {
	grpc.ServerStream
}

func (x *coverListAccountUsageServer) Send(m *AccountUsageDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_RestoreAccountUsage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RestoreAccountUsageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).RestoreAccountUsage(m, &coverRestoreAccountUsageServer{ServerStream: stream})
}

type Cover_RestoreAccountUsageServer interface {
	Send(*AccountUsageDetails) error
	grpc.ServerStream
}

type coverRestoreAccountUsageServer struct {
	grpc.ServerStream
}

func (x *coverRestoreAccountUsageServer) Send(m *AccountUsageDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_SimulateAccountUsage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateAllocatorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).SimulateAccountUsage(m, &coverSimulateAccountUsageServer{ServerStream: stream})
}

type Cover_SimulateAccountUsageServer interface {
	Send(*AccountUsageDetails) error
	grpc.ServerStream
}

type coverSimulateAccountUsageServer struct {
	grpc.ServerStream
}

func (x *coverSimulateAccountUsageServer) Send(m *AccountUsageDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_ListSavings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListFeesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListSavings(m, &coverListSavingsServer{ServerStream: stream})
}

type Cover_ListSavingsServer interface {
	Send(*SavingsDetails) error
	grpc.ServerStream
}

type coverListSavingsServer struct {
	grpc.ServerStream
}

func (x *coverListSavingsServer) Send(m *SavingsDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_RestoreSavings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RestoreSavingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).RestoreSavings(m, &coverRestoreSavingsServer{ServerStream: stream})
}

type Cover_RestoreSavingsServer interface {
	Send(*SavingsDetails) error
	grpc.ServerStream
}

type coverRestoreSavingsServer struct {
	grpc.ServerStream
}

func (x *coverRestoreSavingsServer) Send(m *SavingsDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_SimulateSavings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateAllocatorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).SimulateSavings(m, &coverSimulateSavingsServer{ServerStream: stream})
}

type Cover_SimulateSavingsServer interface {
	Send(*SavingsDetails) error
	grpc.ServerStream
}

type coverSimulateSavingsServer struct {
	grpc.ServerStream
}

func (x *coverSimulateSavingsServer) Send(m *SavingsDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_GetCostGroupAllocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCostGroupAllocationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).GetCostGroupAllocation(m, &coverGetCostGroupAllocationServer{ServerStream: stream})
}

type Cover_GetCostGroupAllocationServer interface {
	Send(*AllocationItem) error
	grpc.ServerStream
}

type coverGetCostGroupAllocationServer struct {
	grpc.ServerStream
}

func (x *coverGetCostGroupAllocationServer) Send(m *AllocationItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_ProcessAuth0User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessAuth0UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ProcessAuth0User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ProcessAuth0User_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ProcessAuth0User(ctx, req.(*ProcessAuth0UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_AddPartnerCenterCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPartnerCenterCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).AddPartnerCenterCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_AddPartnerCenterCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).AddPartnerCenterCredentials(ctx, req.(*AddPartnerCenterCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_AddMpnSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMpnSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).AddMpnSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_AddMpnSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).AddMpnSetting(ctx, req.(*AddMpnSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetCostGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetCostGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetCostGroupAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetCostGroupAttribute(ctx, req.(*GetCostGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetAlerts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAlertsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).GetAlerts(m, &coverGetAlertsServer{ServerStream: stream})
}

type Cover_GetAlertsServer interface {
	Send(*GetAlertsResponse) error
	grpc.ServerStream
}

type coverGetAlertsServer struct {
	grpc.ServerStream
}

func (x *coverGetAlertsServer) Send(m *GetAlertsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_CreateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateAlert(ctx, req.(*CreateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetAlertDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetAlertDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetAlertDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetAlertDetails(ctx, req.(*GetAlertDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteAlert(ctx, req.(*DeleteAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateAlertDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateAlertDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateAlertDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateAlertDetails(ctx, req.(*UpdateAlertDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetChannels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetChannelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).GetChannels(m, &coverGetChannelsServer{ServerStream: stream})
}

type Cover_GetChannelsServer interface {
	Send(*GetChannelsResponse) error
	grpc.ServerStream
}

type coverGetChannelsServer struct {
	grpc.ServerStream
}

func (x *coverGetChannelsServer) Send(m *GetChannelsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetChannelDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetChannelDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetChannelDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetChannelDetails(ctx, req.(*GetChannelDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteChannel(ctx, req.(*DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateChannelDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateChannelDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateChannelDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateChannelDetails(ctx, req.(*UpdateChannelDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetDiscountRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscountRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetDiscountRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetDiscountRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetDiscountRecommendations(ctx, req.(*GetDiscountRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetAnomalyinCostGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAnomalyinCostGroupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).GetAnomalyinCostGroup(m, &coverGetAnomalyinCostGroupServer{ServerStream: stream})
}

type Cover_GetAnomalyinCostGroupServer interface {
	Send(*AnomalyData) error
	grpc.ServerStream
}

type coverGetAnomalyinCostGroupServer struct {
	grpc.ServerStream
}

func (x *coverGetAnomalyinCostGroupServer) Send(m *AnomalyData) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_CreateDiscountExpirationAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiscountExpirationAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateDiscountExpirationAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateDiscountExpirationAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateDiscountExpirationAlert(ctx, req.(*CreateDiscountExpirationAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateDiscountExpirationAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiscountExpirationAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateDiscountExpirationAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateDiscountExpirationAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateDiscountExpirationAlert(ctx, req.(*UpdateDiscountExpirationAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetDiscountExpirationAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManipulateDiscountExpirationAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetDiscountExpirationAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetDiscountExpirationAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetDiscountExpirationAlert(ctx, req.(*ManipulateDiscountExpirationAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListDiscountExpirationAlert_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDiscountExpirationAlertRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListDiscountExpirationAlert(m, &coverListDiscountExpirationAlertServer{ServerStream: stream})
}

type Cover_ListDiscountExpirationAlertServer interface {
	Send(*DiscountExpiryAlertData) error
	grpc.ServerStream
}

type coverListDiscountExpirationAlertServer struct {
	grpc.ServerStream
}

func (x *coverListDiscountExpirationAlertServer) Send(m *DiscountExpiryAlertData) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_DeleteDiscountExpirationAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManipulateDiscountExpirationAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteDiscountExpirationAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteDiscountExpirationAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteDiscountExpirationAlert(ctx, req.(*ManipulateDiscountExpirationAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateAnomalyAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnomalyAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateAnomalyAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateAnomalyAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateAnomalyAlert(ctx, req.(*CreateAnomalyAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteAnomalyAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManipulateAnomalyAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteAnomalyAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteAnomalyAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteAnomalyAlert(ctx, req.(*ManipulateAnomalyAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListAnomalyAlert_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAnomalyAlertRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListAnomalyAlert(m, &coverListAnomalyAlertServer{ServerStream: stream})
}

type Cover_ListAnomalyAlertServer interface {
	Send(*AnomalyAlertData) error
	grpc.ServerStream
}

type coverListAnomalyAlertServer struct {
	grpc.ServerStream
}

func (x *coverListAnomalyAlertServer) Send(m *AnomalyAlertData) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_GetAnomalyAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManipulateAnomalyAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetAnomalyAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetAnomalyAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetAnomalyAlert(ctx, req.(*ManipulateAnomalyAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateAnomalyAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnomalyAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateAnomalyAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateAnomalyAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateAnomalyAlert(ctx, req.(*UpdateAnomalyAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_RegisterNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).RegisterNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_RegisterNewUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).RegisterNewUser(ctx, req.(*RegisterNewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListBudgets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBudgetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListBudgets(m, &coverListBudgetsServer{ServerStream: stream})
}

type Cover_ListBudgetsServer interface {
	Send(*ListBudgetsResponse) error
	grpc.ServerStream
}

type coverListBudgetsServer struct {
	grpc.ServerStream
}

func (x *coverListBudgetsServer) Send(m *ListBudgetsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_GetBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetBudget(ctx, req.(*GetBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateBudget(ctx, req.(*CreateBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteBudget(ctx, req.(*DeleteBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateBudget(ctx, req.(*UpdateBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ResolveAWSMarketplaceTokenForOnboarding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveAWSMarketplaceTokenForOnboardingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ResolveAWSMarketplaceTokenForOnboarding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ResolveAWSMarketplaceTokenForOnboarding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ResolveAWSMarketplaceTokenForOnboarding(ctx, req.(*ResolveAWSMarketplaceTokenForOnboardingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetCustomerSubscriptionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerSubscriptionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetCustomerSubscriptionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetCustomerSubscriptionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetCustomerSubscriptionStatus(ctx, req.(*GetCustomerSubscriptionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateProfiling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfilingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateProfiling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateProfiling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateProfiling(ctx, req.(*CreateProfilingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_AddInfotoMarketplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInfotoMarketplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).AddInfotoMarketplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_AddInfotoMarketplace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).AddInfotoMarketplace(ctx, req.(*AddInfotoMarketplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetReportSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetReportSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetReportSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetReportSummary(ctx, req.(*GetReportSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListRecommendations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRecommendationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListRecommendations(m, &coverListRecommendationsServer{ServerStream: stream})
}

type Cover_ListRecommendationsServer interface {
	Send(*ListRecommendationResponse) error
	grpc.ServerStream
}

type coverListRecommendationsServer struct {
	grpc.ServerStream
}

func (x *coverListRecommendationsServer) Send(m *ListRecommendationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_ListRecommendationsV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRecommendationV2Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListRecommendationsV2(m, &coverListRecommendationsV2Server{ServerStream: stream})
}

type Cover_ListRecommendationsV2Server interface {
	Send(*ListRecommendationResponse) error
	grpc.ServerStream
}

type coverListRecommendationsV2Server struct {
	grpc.ServerStream
}

func (x *coverListRecommendationsV2Server) Send(m *ListRecommendationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_GetRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetRecommendation(ctx, req.(*GetRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetRecommendationV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetRecommendationV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetRecommendationV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetRecommendationV2(ctx, req.(*GetRecommendationV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ExecuteOptimization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteOptimizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ExecuteOptimization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ExecuteOptimization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ExecuteOptimization(ctx, req.(*ExecuteOptimizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetExecutionStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetExecutionStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).GetExecutionStatus(m, &coverGetExecutionStatusServer{ServerStream: stream})
}

type Cover_GetExecutionStatusServer interface {
	Send(*GetExecutionStatusResponse) error
	grpc.ServerStream
}

type coverGetExecutionStatusServer struct {
	grpc.ServerStream
}

func (x *coverGetExecutionStatusServer) Send(m *GetExecutionStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_MarkAsExecuted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsExecutedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).MarkAsExecuted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_MarkAsExecuted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).MarkAsExecuted(ctx, req.(*MarkAsExecutedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UndoExecutedRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndoExecutedRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UndoExecutedRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UndoExecutedRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UndoExecutedRecommendation(ctx, req.(*UndoExecutedRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_OptimizationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).OptimizationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_OptimizationHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).OptimizationHistory(ctx, req.(*OptimizationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_SetCostGroupEventIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCostGroupEventIndicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).SetCostGroupEventIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_SetCostGroupEventIndicator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).SetCostGroupEventIndicator(ctx, req.(*SetCostGroupEventIndicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_SetCostGroupAnomalyOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCostGroupAnomalyOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).SetCostGroupAnomalyOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_SetCostGroupAnomalyOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).SetCostGroupAnomalyOptions(ctx, req.(*SetCostGroupAnomalyOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_SetOrgFiscalMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrgFiscalMonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).SetOrgFiscalMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_SetOrgFiscalMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).SetOrgFiscalMonth(ctx, req.(*SetOrgFiscalMonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetOrgFiscalMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgFiscalMonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetOrgFiscalMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetOrgFiscalMonth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetOrgFiscalMonth(ctx, req.(*GetOrgFiscalMonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_TransferOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).TransferOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_TransferOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).TransferOrganization(ctx, req.(*TransferOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupCreationUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupCreationUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupCreationUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateCostGroupCreationUI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupCreationUI(ctx, req.(*UpdateCostGroupCreationUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListUnitTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnitTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ListUnitTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ListUnitTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ListUnitTypes(ctx, req.(*ListUnitTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateUnitType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnitTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateUnitType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateUnitType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateUnitType(ctx, req.(*CreateUnitTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetUnitType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnitTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetUnitType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetUnitType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetUnitType(ctx, req.(*GetUnitTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUnitType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUnitTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUnitType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUnitType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUnitType(ctx, req.(*UpdateUnitTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteUnitType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUnitTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteUnitType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteUnitType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteUnitType(ctx, req.(*DeleteUnitTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_MergeUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).MergeUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_MergeUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).MergeUnits(ctx, req.(*MergeUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListSuggestedUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSuggestedUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ListSuggestedUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ListSuggestedUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ListSuggestedUnits(ctx, req.(*ListSuggestedUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_MergeSuggestedUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeSuggestedUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).MergeSuggestedUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_MergeSuggestedUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).MergeSuggestedUnits(ctx, req.(*MergeSuggestedUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateUnitFromSuggested_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnitFromSuggestedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateUnitFromSuggested(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateUnitFromSuggested_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateUnitFromSuggested(ctx, req.(*CreateUnitFromSuggestedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListSharedResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSharedResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ListSharedResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ListSharedResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ListSharedResources(ctx, req.(*ListSharedResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateSharedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSharedResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateSharedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateSharedResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateSharedResource(ctx, req.(*CreateSharedResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetSharedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSharedResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetSharedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetSharedResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetSharedResource(ctx, req.(*GetSharedResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateSharedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSharedResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateSharedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateSharedResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateSharedResource(ctx, req.(*UpdateSharedResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteSharedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSharedResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteSharedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteSharedResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteSharedResource(ctx, req.(*DeleteSharedResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListUnitMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnitMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ListUnitMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ListUnitMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ListUnitMetrics(ctx, req.(*ListUnitMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateUnitMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnitMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateUnitMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateUnitMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateUnitMetric(ctx, req.(*CreateUnitMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetUnitMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnitMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetUnitMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetUnitMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetUnitMetric(ctx, req.(*GetUnitMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUnitMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUnitMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUnitMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUnitMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUnitMetric(ctx, req.(*UpdateUnitMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteUnitMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUnitMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteUnitMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteUnitMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteUnitMetric(ctx, req.(*DeleteUnitMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ConfirmGoogleSheetAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmGoogleSheetAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ConfirmGoogleSheetAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ConfirmGoogleSheetAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ConfirmGoogleSheetAccess(ctx, req.(*ConfirmGoogleSheetAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_PreviewGoogleSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewGoogleSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).PreviewGoogleSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_PreviewGoogleSheet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).PreviewGoogleSheet(ctx, req.(*PreviewGoogleSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_VerifyAPIAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAPIAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).VerifyAPIAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_VerifyAPIAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).VerifyAPIAccess(ctx, req.(*VerifyAPIAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cover_ServiceDesc is the grpc.ServiceDesc for Cover service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cover_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.cover.v1.Cover",
	HandlerType: (*CoverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnboardOrg",
			Handler:    _Cover_OnboardOrg_Handler,
		},
		{
			MethodName: "InviteMember",
			Handler:    _Cover_InviteMember_Handler,
		},
		{
			MethodName: "ActivateUser",
			Handler:    _Cover_ActivateUser_Handler,
		},
		{
			MethodName: "CreateMember",
			Handler:    _Cover_CreateMember_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _Cover_GetMembers_Handler,
		},
		{
			MethodName: "GetMemberDetails",
			Handler:    _Cover_GetMemberDetails_Handler,
		},
		{
			MethodName: "GetMemberCostGroup",
			Handler:    _Cover_GetMemberCostGroup_Handler,
		},
		{
			MethodName: "UpdateMemberPermission",
			Handler:    _Cover_UpdateMemberPermission_Handler,
		},
		{
			MethodName: "GetUserDetails",
			Handler:    _Cover_GetUserDetails_Handler,
		},
		{
			MethodName: "UpdateUserAvatar",
			Handler:    _Cover_UpdateUserAvatar_Handler,
		},
		{
			MethodName: "UpdateUserIcon",
			Handler:    _Cover_UpdateUserIcon_Handler,
		},
		{
			MethodName: "UpdateUserColorTheme",
			Handler:    _Cover_UpdateUserColorTheme_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _Cover_UpdateUserName_Handler,
		},
		{
			MethodName: "UpdateUserEmail",
			Handler:    _Cover_UpdateUserEmail_Handler,
		},
		{
			MethodName: "UpdateUserMainView",
			Handler:    _Cover_UpdateUserMainView_Handler,
		},
		{
			MethodName: "ResetUserPassword",
			Handler:    _Cover_ResetUserPassword_Handler,
		},
		{
			MethodName: "UpdateUserLocale",
			Handler:    _Cover_UpdateUserLocale_Handler,
		},
		{
			MethodName: "UpdateUserAppTheme",
			Handler:    _Cover_UpdateUserAppTheme_Handler,
		},
		{
			MethodName: "UpdateUserTimezone",
			Handler:    _Cover_UpdateUserTimezone_Handler,
		},
		{
			MethodName: "UpdateUserAttributes",
			Handler:    _Cover_UpdateUserAttributes_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _Cover_DeleteMember_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Cover_ResetPassword_Handler,
		},
		{
			MethodName: "CreateView",
			Handler:    _Cover_CreateView_Handler,
		},
		{
			MethodName: "GetViews",
			Handler:    _Cover_GetViews_Handler,
		},
		{
			MethodName: "GetCurrentView",
			Handler:    _Cover_GetCurrentView_Handler,
		},
		{
			MethodName: "GetFavoriteViews",
			Handler:    _Cover_GetFavoriteViews_Handler,
		},
		{
			MethodName: "PublishView",
			Handler:    _Cover_PublishView_Handler,
		},
		{
			MethodName: "AddFavorite",
			Handler:    _Cover_AddFavorite_Handler,
		},
		{
			MethodName: "RemoveFavorite",
			Handler:    _Cover_RemoveFavorite_Handler,
		},
		{
			MethodName: "UpdateView",
			Handler:    _Cover_UpdateView_Handler,
		},
		{
			MethodName: "UpdateViewLayout",
			Handler:    _Cover_UpdateViewLayout_Handler,
		},
		{
			MethodName: "UpdateViewWidget",
			Handler:    _Cover_UpdateViewWidget_Handler,
		},
		{
			MethodName: "UpdateViewColorTheme",
			Handler:    _Cover_UpdateViewColorTheme_Handler,
		},
		{
			MethodName: "UpdateViewCurrency",
			Handler:    _Cover_UpdateViewCurrency_Handler,
		},
		{
			MethodName: "SetOrgUpdateCurrency",
			Handler:    _Cover_SetOrgUpdateCurrency_Handler,
		},
		{
			MethodName: "GetOrgUpdateCurrency",
			Handler:    _Cover_GetOrgUpdateCurrency_Handler,
		},
		{
			MethodName: "ListExchangeRates",
			Handler:    _Cover_ListExchangeRates_Handler,
		},
		{
			MethodName: "DeleteView",
			Handler:    _Cover_DeleteView_Handler,
		},
		{
			MethodName: "UpdateSideMenuState",
			Handler:    _Cover_UpdateSideMenuState_Handler,
		},
		{
			MethodName: "AddSideMenuFavorite",
			Handler:    _Cover_AddSideMenuFavorite_Handler,
		},
		{
			MethodName: "RemoveSideMenuFavorite",
			Handler:    _Cover_RemoveSideMenuFavorite_Handler,
		},
		{
			MethodName: "CreateCostGroup",
			Handler:    _Cover_CreateCostGroup_Handler,
		},
		{
			MethodName: "GetCostGroups",
			Handler:    _Cover_GetCostGroups_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _Cover_GetCategories_Handler,
		},
		{
			MethodName: "GetCostGroupDetails",
			Handler:    _Cover_GetCostGroupDetails_Handler,
		},
		{
			MethodName: "UpdateCostGroupName",
			Handler:    _Cover_UpdateCostGroupName_Handler,
		},
		{
			MethodName: "UpdateCostGroupDescription",
			Handler:    _Cover_UpdateCostGroupDescription_Handler,
		},
		{
			MethodName: "UpdateCostGroupImage",
			Handler:    _Cover_UpdateCostGroupImage_Handler,
		},
		{
			MethodName: "UpdateCostGroupIcon",
			Handler:    _Cover_UpdateCostGroupIcon_Handler,
		},
		{
			MethodName: "UpdateCostGroupColorTheme",
			Handler:    _Cover_UpdateCostGroupColorTheme_Handler,
		},
		{
			MethodName: "UpdateCostGroupCombinations",
			Handler:    _Cover_UpdateCostGroupCombinations_Handler,
		},
		{
			MethodName: "ResolveCostGroupCombinations",
			Handler:    _Cover_ResolveCostGroupCombinations_Handler,
		},
		{
			MethodName: "AssignCostGroupMember",
			Handler:    _Cover_AssignCostGroupMember_Handler,
		},
		{
			MethodName: "RemoveCostGroupMember",
			Handler:    _Cover_RemoveCostGroupMember_Handler,
		},
		{
			MethodName: "DeleteCostGroup",
			Handler:    _Cover_DeleteCostGroup_Handler,
		},
		{
			MethodName: "GetAccountAccessTemplateUrl",
			Handler:    _Cover_GetAccountAccessTemplateUrl_Handler,
		},
		{
			MethodName: "GetAccountAccess",
			Handler:    _Cover_GetAccountAccess_Handler,
		},
		{
			MethodName: "GetDataAccess",
			Handler:    _Cover_GetDataAccess_Handler,
		},
		{
			MethodName: "DeleteDataAccess",
			Handler:    _Cover_DeleteDataAccess_Handler,
		},
		{
			MethodName: "CreateAccountAccess",
			Handler:    _Cover_CreateAccountAccess_Handler,
		},
		{
			MethodName: "CreateAccountAccessStackset",
			Handler:    _Cover_CreateAccountAccessStackset_Handler,
		},
		{
			MethodName: "CreateAccountAccessCur",
			Handler:    _Cover_CreateAccountAccessCur_Handler,
		},
		{
			MethodName: "UpdateAccountAccess",
			Handler:    _Cover_UpdateAccountAccess_Handler,
		},
		{
			MethodName: "DeleteAccountAccess",
			Handler:    _Cover_DeleteAccountAccess_Handler,
		},
		{
			MethodName: "RegisterAccount",
			Handler:    _Cover_RegisterAccount_Handler,
		},
		{
			MethodName: "RegisterDataAccess",
			Handler:    _Cover_RegisterDataAccess_Handler,
		},
		{
			MethodName: "AddBillingAccount",
			Handler:    _Cover_AddBillingAccount_Handler,
		},
		{
			MethodName: "ListUnregisteredAccounts",
			Handler:    _Cover_ListUnregisteredAccounts_Handler,
		},
		{
			MethodName: "UpdateDataAccess",
			Handler:    _Cover_UpdateDataAccess_Handler,
		},
		{
			MethodName: "GetAssetsSummary",
			Handler:    _Cover_GetAssetsSummary_Handler,
		},
		{
			MethodName: "GetRightSizingRecommendation",
			Handler:    _Cover_GetRightSizingRecommendation_Handler,
		},
		{
			MethodName: "ModifyResourceType",
			Handler:    _Cover_ModifyResourceType_Handler,
		},
		{
			MethodName: "TerminateResource",
			Handler:    _Cover_TerminateResource_Handler,
		},
		{
			MethodName: "AssignPayer",
			Handler:    _Cover_AssignPayer_Handler,
		},
		{
			MethodName: "GetPayers",
			Handler:    _Cover_GetPayers_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _Cover_GetAccounts_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _Cover_GetServices_Handler,
		},
		{
			MethodName: "GetRegions",
			Handler:    _Cover_GetRegions_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _Cover_GetTags_Handler,
		},
		{
			MethodName: "CreateAllocator",
			Handler:    _Cover_CreateAllocator_Handler,
		},
		{
			MethodName: "GetAllocationAttributes",
			Handler:    _Cover_GetAllocationAttributes_Handler,
		},
		{
			MethodName: "UpdateAllocator",
			Handler:    _Cover_UpdateAllocator_Handler,
		},
		{
			MethodName: "DeleteAllocator",
			Handler:    _Cover_DeleteAllocator_Handler,
		},
		{
			MethodName: "ProcessAuth0User",
			Handler:    _Cover_ProcessAuth0User_Handler,
		},
		{
			MethodName: "AddPartnerCenterCredentials",
			Handler:    _Cover_AddPartnerCenterCredentials_Handler,
		},
		{
			MethodName: "AddMpnSetting",
			Handler:    _Cover_AddMpnSetting_Handler,
		},
		{
			MethodName: "GetCostGroupAttribute",
			Handler:    _Cover_GetCostGroupAttribute_Handler,
		},
		{
			MethodName: "CreateAlert",
			Handler:    _Cover_CreateAlert_Handler,
		},
		{
			MethodName: "GetAlertDetails",
			Handler:    _Cover_GetAlertDetails_Handler,
		},
		{
			MethodName: "DeleteAlert",
			Handler:    _Cover_DeleteAlert_Handler,
		},
		{
			MethodName: "UpdateAlertDetails",
			Handler:    _Cover_UpdateAlertDetails_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _Cover_CreateChannel_Handler,
		},
		{
			MethodName: "GetChannelDetails",
			Handler:    _Cover_GetChannelDetails_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _Cover_DeleteChannel_Handler,
		},
		{
			MethodName: "UpdateChannelDetails",
			Handler:    _Cover_UpdateChannelDetails_Handler,
		},
		{
			MethodName: "GetDiscountRecommendations",
			Handler:    _Cover_GetDiscountRecommendations_Handler,
		},
		{
			MethodName: "CreateDiscountExpirationAlert",
			Handler:    _Cover_CreateDiscountExpirationAlert_Handler,
		},
		{
			MethodName: "UpdateDiscountExpirationAlert",
			Handler:    _Cover_UpdateDiscountExpirationAlert_Handler,
		},
		{
			MethodName: "GetDiscountExpirationAlert",
			Handler:    _Cover_GetDiscountExpirationAlert_Handler,
		},
		{
			MethodName: "DeleteDiscountExpirationAlert",
			Handler:    _Cover_DeleteDiscountExpirationAlert_Handler,
		},
		{
			MethodName: "CreateAnomalyAlert",
			Handler:    _Cover_CreateAnomalyAlert_Handler,
		},
		{
			MethodName: "DeleteAnomalyAlert",
			Handler:    _Cover_DeleteAnomalyAlert_Handler,
		},
		{
			MethodName: "GetAnomalyAlert",
			Handler:    _Cover_GetAnomalyAlert_Handler,
		},
		{
			MethodName: "UpdateAnomalyAlert",
			Handler:    _Cover_UpdateAnomalyAlert_Handler,
		},
		{
			MethodName: "RegisterNewUser",
			Handler:    _Cover_RegisterNewUser_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _Cover_GetUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _Cover_UpdateUserProfile_Handler,
		},
		{
			MethodName: "GetBudget",
			Handler:    _Cover_GetBudget_Handler,
		},
		{
			MethodName: "CreateBudget",
			Handler:    _Cover_CreateBudget_Handler,
		},
		{
			MethodName: "DeleteBudget",
			Handler:    _Cover_DeleteBudget_Handler,
		},
		{
			MethodName: "UpdateBudget",
			Handler:    _Cover_UpdateBudget_Handler,
		},
		{
			MethodName: "ResolveAWSMarketplaceTokenForOnboarding",
			Handler:    _Cover_ResolveAWSMarketplaceTokenForOnboarding_Handler,
		},
		{
			MethodName: "GetCustomerSubscriptionStatus",
			Handler:    _Cover_GetCustomerSubscriptionStatus_Handler,
		},
		{
			MethodName: "CreateProfiling",
			Handler:    _Cover_CreateProfiling_Handler,
		},
		{
			MethodName: "AddInfotoMarketplace",
			Handler:    _Cover_AddInfotoMarketplace_Handler,
		},
		{
			MethodName: "GetReportSummary",
			Handler:    _Cover_GetReportSummary_Handler,
		},
		{
			MethodName: "GetRecommendation",
			Handler:    _Cover_GetRecommendation_Handler,
		},
		{
			MethodName: "GetRecommendationV2",
			Handler:    _Cover_GetRecommendationV2_Handler,
		},
		{
			MethodName: "ExecuteOptimization",
			Handler:    _Cover_ExecuteOptimization_Handler,
		},
		{
			MethodName: "MarkAsExecuted",
			Handler:    _Cover_MarkAsExecuted_Handler,
		},
		{
			MethodName: "UndoExecutedRecommendation",
			Handler:    _Cover_UndoExecutedRecommendation_Handler,
		},
		{
			MethodName: "OptimizationHistory",
			Handler:    _Cover_OptimizationHistory_Handler,
		},
		{
			MethodName: "SetCostGroupEventIndicator",
			Handler:    _Cover_SetCostGroupEventIndicator_Handler,
		},
		{
			MethodName: "SetCostGroupAnomalyOptions",
			Handler:    _Cover_SetCostGroupAnomalyOptions_Handler,
		},
		{
			MethodName: "SetOrgFiscalMonth",
			Handler:    _Cover_SetOrgFiscalMonth_Handler,
		},
		{
			MethodName: "GetOrgFiscalMonth",
			Handler:    _Cover_GetOrgFiscalMonth_Handler,
		},
		{
			MethodName: "TransferOrganization",
			Handler:    _Cover_TransferOrganization_Handler,
		},
		{
			MethodName: "UpdateCostGroupCreationUI",
			Handler:    _Cover_UpdateCostGroupCreationUI_Handler,
		},
		{
			MethodName: "ListUnitTypes",
			Handler:    _Cover_ListUnitTypes_Handler,
		},
		{
			MethodName: "CreateUnitType",
			Handler:    _Cover_CreateUnitType_Handler,
		},
		{
			MethodName: "GetUnitType",
			Handler:    _Cover_GetUnitType_Handler,
		},
		{
			MethodName: "UpdateUnitType",
			Handler:    _Cover_UpdateUnitType_Handler,
		},
		{
			MethodName: "DeleteUnitType",
			Handler:    _Cover_DeleteUnitType_Handler,
		},
		{
			MethodName: "MergeUnits",
			Handler:    _Cover_MergeUnits_Handler,
		},
		{
			MethodName: "ListSuggestedUnits",
			Handler:    _Cover_ListSuggestedUnits_Handler,
		},
		{
			MethodName: "MergeSuggestedUnits",
			Handler:    _Cover_MergeSuggestedUnits_Handler,
		},
		{
			MethodName: "CreateUnitFromSuggested",
			Handler:    _Cover_CreateUnitFromSuggested_Handler,
		},
		{
			MethodName: "ListSharedResources",
			Handler:    _Cover_ListSharedResources_Handler,
		},
		{
			MethodName: "CreateSharedResource",
			Handler:    _Cover_CreateSharedResource_Handler,
		},
		{
			MethodName: "GetSharedResource",
			Handler:    _Cover_GetSharedResource_Handler,
		},
		{
			MethodName: "UpdateSharedResource",
			Handler:    _Cover_UpdateSharedResource_Handler,
		},
		{
			MethodName: "DeleteSharedResource",
			Handler:    _Cover_DeleteSharedResource_Handler,
		},
		{
			MethodName: "ListUnitMetrics",
			Handler:    _Cover_ListUnitMetrics_Handler,
		},
		{
			MethodName: "CreateUnitMetric",
			Handler:    _Cover_CreateUnitMetric_Handler,
		},
		{
			MethodName: "GetUnitMetric",
			Handler:    _Cover_GetUnitMetric_Handler,
		},
		{
			MethodName: "UpdateUnitMetric",
			Handler:    _Cover_UpdateUnitMetric_Handler,
		},
		{
			MethodName: "DeleteUnitMetric",
			Handler:    _Cover_DeleteUnitMetric_Handler,
		},
		{
			MethodName: "ConfirmGoogleSheetAccess",
			Handler:    _Cover_ConfirmGoogleSheetAccess_Handler,
		},
		{
			MethodName: "PreviewGoogleSheet",
			Handler:    _Cover_PreviewGoogleSheet_Handler,
		},
		{
			MethodName: "VerifyAPIAccess",
			Handler:    _Cover_VerifyAPIAccess_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAccountAccess",
			Handler:       _Cover_ListAccountAccess_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListDataAccess",
			Handler:       _Cover_ListDataAccess_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAssets",
			Handler:       _Cover_ListAssets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCostUsage",
			Handler:       _Cover_GetCostUsage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadChargeCode",
			Handler:       _Cover_UploadChargeCode_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListFees",
			Handler:       _Cover_ListFees_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RestoreFee",
			Handler:       _Cover_RestoreFee_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCostGroupFee",
			Handler:       _Cover_GetCostGroupFee_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAllocators",
			Handler:       _Cover_ListAllocators_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProxyCreateCompletion",
			Handler:       _Cover_ProxyCreateCompletion_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SimulateFeeAllocator",
			Handler:       _Cover_SimulateFeeAllocator_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAccountUsage",
			Handler:       _Cover_ListAccountUsage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RestoreAccountUsage",
			Handler:       _Cover_RestoreAccountUsage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SimulateAccountUsage",
			Handler:       _Cover_SimulateAccountUsage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSavings",
			Handler:       _Cover_ListSavings_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RestoreSavings",
			Handler:       _Cover_RestoreSavings_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SimulateSavings",
			Handler:       _Cover_SimulateSavings_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCostGroupAllocation",
			Handler:       _Cover_GetCostGroupAllocation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAlerts",
			Handler:       _Cover_GetAlerts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChannels",
			Handler:       _Cover_GetChannels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAnomalyinCostGroup",
			Handler:       _Cover_GetAnomalyinCostGroup_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListDiscountExpirationAlert",
			Handler:       _Cover_ListDiscountExpirationAlert_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAnomalyAlert",
			Handler:       _Cover_ListAnomalyAlert_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListBudgets",
			Handler:       _Cover_ListBudgets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRecommendations",
			Handler:       _Cover_ListRecommendations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRecommendationsV2",
			Handler:       _Cover_ListRecommendationsV2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetExecutionStatus",
			Handler:       _Cover_GetExecutionStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cover/v1/cover.proto",
}
