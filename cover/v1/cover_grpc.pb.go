// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: cover/v1/cover.proto

package cover

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoverClient is the client API for Cover service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoverClient interface {
	// Invite members to the system
	InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...grpc.CallOption) (*InviteMemberResponse, error)
	// Create a member
	CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*CreateMemberResponse, error)
	// Get all the members/subusers of the company
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error)
	// Get the details of the user
	GetMemberDetails(ctx context.Context, in *GetMemberDetailsRequest, opts ...grpc.CallOption) (*GetMemberDetailsResponse, error)
	// Get the cost group to which the member is attached
	GetMemberCostGroup(ctx context.Context, in *GetMemberCostGroupRequest, opts ...grpc.CallOption) (*GetMemberCostGroupResponse, error)
	// Get the details of the logged-in user
	GetUserDetails(ctx context.Context, in *GetUserDetailsRequest, opts ...grpc.CallOption) (*GetUserDetailsResponse, error)
	// Modify user's avatar
	UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarRequest, opts ...grpc.CallOption) (*UpdateUserAvatarResponse, error)
	// Modify user's icon
	UpdateUserIcon(ctx context.Context, in *UpdateUserIconRequest, opts ...grpc.CallOption) (*UpdateUserIconResponse, error)
	// Modify user's color theme
	UpdateUserColorTheme(ctx context.Context, in *UpdateUserColorThemeRequest, opts ...grpc.CallOption) (*UpdateUserColorThemeResponse, error)
	// Modify user's name
	UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error)
	// Modify user's email
	UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error)
	// Modify user's main view
	UpdateUserMainView(ctx context.Context, in *UpdateUserMainViewRequest, opts ...grpc.CallOption) (*UpdateUserMainViewResponse, error)
	// Reset user's password
	ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...grpc.CallOption) (*ResetUserPasswordResponse, error)
	// Modify user's locale
	UpdateUserLocale(ctx context.Context, in *UpdateUserLocaleRequest, opts ...grpc.CallOption) (*UpdateUserLocaleResponse, error)
	// Modify user's app theme
	UpdateUserAppTheme(ctx context.Context, in *UpdateUserAppThemeRequest, opts ...grpc.CallOption) (*UpdateUserAppThemeResponse, error)
	// Modify user's timezone
	UpdateUserTimezone(ctx context.Context, in *UpdateUserTimezoneRequest, opts ...grpc.CallOption) (*UpdateUserTimezoneResponse, error)
	// Modify attributes
	UpdateUserAttributes(ctx context.Context, in *UpdateUserAttributesRequest, opts ...grpc.CallOption) (*UpdateUserAttributesResponse, error)
	// Deletes a user
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error)
	// Reset member's password
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	// Create a view
	CreateView(ctx context.Context, in *CreateViewRequest, opts ...grpc.CallOption) (*CreateViewResponse, error)
	// Get all the views
	GetViews(ctx context.Context, in *GetViewsRequest, opts ...grpc.CallOption) (*GetViewsResponse, error)
	// Get the details of the current view
	GetCurrentView(ctx context.Context, in *GetCurrentViewRequest, opts ...grpc.CallOption) (*GetCurrentViewResponse, error)
	// Get favorite views
	GetFavoriteViews(ctx context.Context, in *GetFavoriteViewsRequest, opts ...grpc.CallOption) (*GetFavoriteViewsResponse, error)
	// Publish current view
	PublishView(ctx context.Context, in *PublishViewRequest, opts ...grpc.CallOption) (*PublishViewResponse, error)
	// Add to favorites
	AddFavorite(ctx context.Context, in *AddFavoriteRequest, opts ...grpc.CallOption) (*AddFavoriteResponse, error)
	// Remove from favorites
	RemoveFavorite(ctx context.Context, in *RemoveFavoriteRequest, opts ...grpc.CallOption) (*RemoveFavoriteResponse, error)
	// Updates the view details
	UpdateView(ctx context.Context, in *UpdateViewRequest, opts ...grpc.CallOption) (*UpdateViewResponse, error)
	// Deletes a view
	DeleteView(ctx context.Context, in *DeleteViewRequest, opts ...grpc.CallOption) (*DeleteViewResponse, error)
	// Create a cost group
	CreateCostGroup(ctx context.Context, in *CreateCostGroupRequest, opts ...grpc.CallOption) (*CreateCostGroupResponse, error)
	// Get all the cost groups
	GetCostGroups(ctx context.Context, in *GetCostGroupsRequest, opts ...grpc.CallOption) (*GetCostGroupsResponse, error)
	// Get the details of the cost group
	GetCostGroupDetails(ctx context.Context, in *GetCostGroupDetailsRequest, opts ...grpc.CallOption) (*GetCostGroupDetailsResponse, error)
	// Update cost group's name
	UpdateCostGroupName(ctx context.Context, in *UpdateCostGroupNameRequest, opts ...grpc.CallOption) (*UpdateCostGroupNameResponse, error)
	// Update cost group's description
	UpdateCostGroupDescription(ctx context.Context, in *UpdateCostGroupDescriptionRequest, opts ...grpc.CallOption) (*UpdateCostGroupDescriptionResponse, error)
	// Update cost group's image
	UpdateCostGroupImage(ctx context.Context, in *UpdateCostGroupImageRequest, opts ...grpc.CallOption) (*UpdateCostGroupImageResponse, error)
	// Update cost group's icon
	UpdateCostGroupIcon(ctx context.Context, in *UpdateCostGroupIconRequest, opts ...grpc.CallOption) (*UpdateCostGroupIconResponse, error)
	// Update cost group's color theme
	UpdateCostGroupColorTheme(ctx context.Context, in *UpdateCostGroupColorThemeRequest, opts ...grpc.CallOption) (*UpdateCostGroupColorThemeResponse, error)
	// Update cost group's combinations
	UpdateCostGroupCombinations(ctx context.Context, in *UpdateCostGroupCombinationsRequest, opts ...grpc.CallOption) (*UpdateCostGroupCombinationsResponse, error)
	// Assign a member to a cost group
	AssignCostGroupMember(ctx context.Context, in *AssignCostGroupMemberRequest, opts ...grpc.CallOption) (*AssignCostGroupMemberResponse, error)
	// Remove a member from a cost group
	RemoveCostGroupMember(ctx context.Context, in *RemoveCostGroupMemberRequest, opts ...grpc.CallOption) (*RemoveCostGroupMemberResponse, error)
	// Deletes a cost group
	DeleteCostGroup(ctx context.Context, in *DeleteCostGroupRequest, opts ...grpc.CallOption) (*DeleteCostGroupResponse, error)
}

type coverClient struct {
	cc grpc.ClientConnInterface
}

func NewCoverClient(cc grpc.ClientConnInterface) CoverClient {
	return &coverClient{cc}
}

func (c *coverClient) InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...grpc.CallOption) (*InviteMemberResponse, error) {
	out := new(InviteMemberResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/InviteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*CreateMemberResponse, error) {
	out := new(CreateMemberResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/CreateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	out := new(GetMembersResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/GetMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetMemberDetails(ctx context.Context, in *GetMemberDetailsRequest, opts ...grpc.CallOption) (*GetMemberDetailsResponse, error) {
	out := new(GetMemberDetailsResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/GetMemberDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetMemberCostGroup(ctx context.Context, in *GetMemberCostGroupRequest, opts ...grpc.CallOption) (*GetMemberCostGroupResponse, error) {
	out := new(GetMemberCostGroupResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/GetMemberCostGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetUserDetails(ctx context.Context, in *GetUserDetailsRequest, opts ...grpc.CallOption) (*GetUserDetailsResponse, error) {
	out := new(GetUserDetailsResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/GetUserDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarRequest, opts ...grpc.CallOption) (*UpdateUserAvatarResponse, error) {
	out := new(UpdateUserAvatarResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateUserAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserIcon(ctx context.Context, in *UpdateUserIconRequest, opts ...grpc.CallOption) (*UpdateUserIconResponse, error) {
	out := new(UpdateUserIconResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateUserIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserColorTheme(ctx context.Context, in *UpdateUserColorThemeRequest, opts ...grpc.CallOption) (*UpdateUserColorThemeResponse, error) {
	out := new(UpdateUserColorThemeResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateUserColorTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error) {
	out := new(UpdateUserNameResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error) {
	out := new(UpdateUserEmailResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateUserEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserMainView(ctx context.Context, in *UpdateUserMainViewRequest, opts ...grpc.CallOption) (*UpdateUserMainViewResponse, error) {
	out := new(UpdateUserMainViewResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateUserMainView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...grpc.CallOption) (*ResetUserPasswordResponse, error) {
	out := new(ResetUserPasswordResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/ResetUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserLocale(ctx context.Context, in *UpdateUserLocaleRequest, opts ...grpc.CallOption) (*UpdateUserLocaleResponse, error) {
	out := new(UpdateUserLocaleResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateUserLocale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserAppTheme(ctx context.Context, in *UpdateUserAppThemeRequest, opts ...grpc.CallOption) (*UpdateUserAppThemeResponse, error) {
	out := new(UpdateUserAppThemeResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateUserAppTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserTimezone(ctx context.Context, in *UpdateUserTimezoneRequest, opts ...grpc.CallOption) (*UpdateUserTimezoneResponse, error) {
	out := new(UpdateUserTimezoneResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateUserTimezone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserAttributes(ctx context.Context, in *UpdateUserAttributesRequest, opts ...grpc.CallOption) (*UpdateUserAttributesResponse, error) {
	out := new(UpdateUserAttributesResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateUserAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error) {
	out := new(DeleteMemberResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/DeleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateView(ctx context.Context, in *CreateViewRequest, opts ...grpc.CallOption) (*CreateViewResponse, error) {
	out := new(CreateViewResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/CreateView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetViews(ctx context.Context, in *GetViewsRequest, opts ...grpc.CallOption) (*GetViewsResponse, error) {
	out := new(GetViewsResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/GetViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetCurrentView(ctx context.Context, in *GetCurrentViewRequest, opts ...grpc.CallOption) (*GetCurrentViewResponse, error) {
	out := new(GetCurrentViewResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/GetCurrentView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetFavoriteViews(ctx context.Context, in *GetFavoriteViewsRequest, opts ...grpc.CallOption) (*GetFavoriteViewsResponse, error) {
	out := new(GetFavoriteViewsResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/GetFavoriteViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) PublishView(ctx context.Context, in *PublishViewRequest, opts ...grpc.CallOption) (*PublishViewResponse, error) {
	out := new(PublishViewResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/PublishView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) AddFavorite(ctx context.Context, in *AddFavoriteRequest, opts ...grpc.CallOption) (*AddFavoriteResponse, error) {
	out := new(AddFavoriteResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/AddFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) RemoveFavorite(ctx context.Context, in *RemoveFavoriteRequest, opts ...grpc.CallOption) (*RemoveFavoriteResponse, error) {
	out := new(RemoveFavoriteResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/RemoveFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateView(ctx context.Context, in *UpdateViewRequest, opts ...grpc.CallOption) (*UpdateViewResponse, error) {
	out := new(UpdateViewResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteView(ctx context.Context, in *DeleteViewRequest, opts ...grpc.CallOption) (*DeleteViewResponse, error) {
	out := new(DeleteViewResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/DeleteView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateCostGroup(ctx context.Context, in *CreateCostGroupRequest, opts ...grpc.CallOption) (*CreateCostGroupResponse, error) {
	out := new(CreateCostGroupResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/CreateCostGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetCostGroups(ctx context.Context, in *GetCostGroupsRequest, opts ...grpc.CallOption) (*GetCostGroupsResponse, error) {
	out := new(GetCostGroupsResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/GetCostGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetCostGroupDetails(ctx context.Context, in *GetCostGroupDetailsRequest, opts ...grpc.CallOption) (*GetCostGroupDetailsResponse, error) {
	out := new(GetCostGroupDetailsResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/GetCostGroupDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupName(ctx context.Context, in *UpdateCostGroupNameRequest, opts ...grpc.CallOption) (*UpdateCostGroupNameResponse, error) {
	out := new(UpdateCostGroupNameResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateCostGroupName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupDescription(ctx context.Context, in *UpdateCostGroupDescriptionRequest, opts ...grpc.CallOption) (*UpdateCostGroupDescriptionResponse, error) {
	out := new(UpdateCostGroupDescriptionResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateCostGroupDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupImage(ctx context.Context, in *UpdateCostGroupImageRequest, opts ...grpc.CallOption) (*UpdateCostGroupImageResponse, error) {
	out := new(UpdateCostGroupImageResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateCostGroupImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupIcon(ctx context.Context, in *UpdateCostGroupIconRequest, opts ...grpc.CallOption) (*UpdateCostGroupIconResponse, error) {
	out := new(UpdateCostGroupIconResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateCostGroupIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupColorTheme(ctx context.Context, in *UpdateCostGroupColorThemeRequest, opts ...grpc.CallOption) (*UpdateCostGroupColorThemeResponse, error) {
	out := new(UpdateCostGroupColorThemeResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateCostGroupColorTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupCombinations(ctx context.Context, in *UpdateCostGroupCombinationsRequest, opts ...grpc.CallOption) (*UpdateCostGroupCombinationsResponse, error) {
	out := new(UpdateCostGroupCombinationsResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/UpdateCostGroupCombinations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) AssignCostGroupMember(ctx context.Context, in *AssignCostGroupMemberRequest, opts ...grpc.CallOption) (*AssignCostGroupMemberResponse, error) {
	out := new(AssignCostGroupMemberResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/AssignCostGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) RemoveCostGroupMember(ctx context.Context, in *RemoveCostGroupMemberRequest, opts ...grpc.CallOption) (*RemoveCostGroupMemberResponse, error) {
	out := new(RemoveCostGroupMemberResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/RemoveCostGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteCostGroup(ctx context.Context, in *DeleteCostGroupRequest, opts ...grpc.CallOption) (*DeleteCostGroupResponse, error) {
	out := new(DeleteCostGroupResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cover.v1.Cover/DeleteCostGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoverServer is the server API for Cover service.
// All implementations must embed UnimplementedCoverServer
// for forward compatibility
type CoverServer interface {
	// Invite members to the system
	InviteMember(context.Context, *InviteMemberRequest) (*InviteMemberResponse, error)
	// Create a member
	CreateMember(context.Context, *CreateMemberRequest) (*CreateMemberResponse, error)
	// Get all the members/subusers of the company
	GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error)
	// Get the details of the user
	GetMemberDetails(context.Context, *GetMemberDetailsRequest) (*GetMemberDetailsResponse, error)
	// Get the cost group to which the member is attached
	GetMemberCostGroup(context.Context, *GetMemberCostGroupRequest) (*GetMemberCostGroupResponse, error)
	// Get the details of the logged-in user
	GetUserDetails(context.Context, *GetUserDetailsRequest) (*GetUserDetailsResponse, error)
	// Modify user's avatar
	UpdateUserAvatar(context.Context, *UpdateUserAvatarRequest) (*UpdateUserAvatarResponse, error)
	// Modify user's icon
	UpdateUserIcon(context.Context, *UpdateUserIconRequest) (*UpdateUserIconResponse, error)
	// Modify user's color theme
	UpdateUserColorTheme(context.Context, *UpdateUserColorThemeRequest) (*UpdateUserColorThemeResponse, error)
	// Modify user's name
	UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error)
	// Modify user's email
	UpdateUserEmail(context.Context, *UpdateUserEmailRequest) (*UpdateUserEmailResponse, error)
	// Modify user's main view
	UpdateUserMainView(context.Context, *UpdateUserMainViewRequest) (*UpdateUserMainViewResponse, error)
	// Reset user's password
	ResetUserPassword(context.Context, *ResetUserPasswordRequest) (*ResetUserPasswordResponse, error)
	// Modify user's locale
	UpdateUserLocale(context.Context, *UpdateUserLocaleRequest) (*UpdateUserLocaleResponse, error)
	// Modify user's app theme
	UpdateUserAppTheme(context.Context, *UpdateUserAppThemeRequest) (*UpdateUserAppThemeResponse, error)
	// Modify user's timezone
	UpdateUserTimezone(context.Context, *UpdateUserTimezoneRequest) (*UpdateUserTimezoneResponse, error)
	// Modify attributes
	UpdateUserAttributes(context.Context, *UpdateUserAttributesRequest) (*UpdateUserAttributesResponse, error)
	// Deletes a user
	DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error)
	// Reset member's password
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	// Create a view
	CreateView(context.Context, *CreateViewRequest) (*CreateViewResponse, error)
	// Get all the views
	GetViews(context.Context, *GetViewsRequest) (*GetViewsResponse, error)
	// Get the details of the current view
	GetCurrentView(context.Context, *GetCurrentViewRequest) (*GetCurrentViewResponse, error)
	// Get favorite views
	GetFavoriteViews(context.Context, *GetFavoriteViewsRequest) (*GetFavoriteViewsResponse, error)
	// Publish current view
	PublishView(context.Context, *PublishViewRequest) (*PublishViewResponse, error)
	// Add to favorites
	AddFavorite(context.Context, *AddFavoriteRequest) (*AddFavoriteResponse, error)
	// Remove from favorites
	RemoveFavorite(context.Context, *RemoveFavoriteRequest) (*RemoveFavoriteResponse, error)
	// Updates the view details
	UpdateView(context.Context, *UpdateViewRequest) (*UpdateViewResponse, error)
	// Deletes a view
	DeleteView(context.Context, *DeleteViewRequest) (*DeleteViewResponse, error)
	// Create a cost group
	CreateCostGroup(context.Context, *CreateCostGroupRequest) (*CreateCostGroupResponse, error)
	// Get all the cost groups
	GetCostGroups(context.Context, *GetCostGroupsRequest) (*GetCostGroupsResponse, error)
	// Get the details of the cost group
	GetCostGroupDetails(context.Context, *GetCostGroupDetailsRequest) (*GetCostGroupDetailsResponse, error)
	// Update cost group's name
	UpdateCostGroupName(context.Context, *UpdateCostGroupNameRequest) (*UpdateCostGroupNameResponse, error)
	// Update cost group's description
	UpdateCostGroupDescription(context.Context, *UpdateCostGroupDescriptionRequest) (*UpdateCostGroupDescriptionResponse, error)
	// Update cost group's image
	UpdateCostGroupImage(context.Context, *UpdateCostGroupImageRequest) (*UpdateCostGroupImageResponse, error)
	// Update cost group's icon
	UpdateCostGroupIcon(context.Context, *UpdateCostGroupIconRequest) (*UpdateCostGroupIconResponse, error)
	// Update cost group's color theme
	UpdateCostGroupColorTheme(context.Context, *UpdateCostGroupColorThemeRequest) (*UpdateCostGroupColorThemeResponse, error)
	// Update cost group's combinations
	UpdateCostGroupCombinations(context.Context, *UpdateCostGroupCombinationsRequest) (*UpdateCostGroupCombinationsResponse, error)
	// Assign a member to a cost group
	AssignCostGroupMember(context.Context, *AssignCostGroupMemberRequest) (*AssignCostGroupMemberResponse, error)
	// Remove a member from a cost group
	RemoveCostGroupMember(context.Context, *RemoveCostGroupMemberRequest) (*RemoveCostGroupMemberResponse, error)
	// Deletes a cost group
	DeleteCostGroup(context.Context, *DeleteCostGroupRequest) (*DeleteCostGroupResponse, error)
	mustEmbedUnimplementedCoverServer()
}

// UnimplementedCoverServer must be embedded to have forward compatible implementations.
type UnimplementedCoverServer struct {
}

func (UnimplementedCoverServer) InviteMember(context.Context, *InviteMemberRequest) (*InviteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMember not implemented")
}
func (UnimplementedCoverServer) CreateMember(context.Context, *CreateMemberRequest) (*CreateMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (UnimplementedCoverServer) GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedCoverServer) GetMemberDetails(context.Context, *GetMemberDetailsRequest) (*GetMemberDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberDetails not implemented")
}
func (UnimplementedCoverServer) GetMemberCostGroup(context.Context, *GetMemberCostGroupRequest) (*GetMemberCostGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberCostGroup not implemented")
}
func (UnimplementedCoverServer) GetUserDetails(context.Context, *GetUserDetailsRequest) (*GetUserDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetails not implemented")
}
func (UnimplementedCoverServer) UpdateUserAvatar(context.Context, *UpdateUserAvatarRequest) (*UpdateUserAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAvatar not implemented")
}
func (UnimplementedCoverServer) UpdateUserIcon(context.Context, *UpdateUserIconRequest) (*UpdateUserIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserIcon not implemented")
}
func (UnimplementedCoverServer) UpdateUserColorTheme(context.Context, *UpdateUserColorThemeRequest) (*UpdateUserColorThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserColorTheme not implemented")
}
func (UnimplementedCoverServer) UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (UnimplementedCoverServer) UpdateUserEmail(context.Context, *UpdateUserEmailRequest) (*UpdateUserEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserEmail not implemented")
}
func (UnimplementedCoverServer) UpdateUserMainView(context.Context, *UpdateUserMainViewRequest) (*UpdateUserMainViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserMainView not implemented")
}
func (UnimplementedCoverServer) ResetUserPassword(context.Context, *ResetUserPasswordRequest) (*ResetUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserPassword not implemented")
}
func (UnimplementedCoverServer) UpdateUserLocale(context.Context, *UpdateUserLocaleRequest) (*UpdateUserLocaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLocale not implemented")
}
func (UnimplementedCoverServer) UpdateUserAppTheme(context.Context, *UpdateUserAppThemeRequest) (*UpdateUserAppThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAppTheme not implemented")
}
func (UnimplementedCoverServer) UpdateUserTimezone(context.Context, *UpdateUserTimezoneRequest) (*UpdateUserTimezoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserTimezone not implemented")
}
func (UnimplementedCoverServer) UpdateUserAttributes(context.Context, *UpdateUserAttributesRequest) (*UpdateUserAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAttributes not implemented")
}
func (UnimplementedCoverServer) DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedCoverServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedCoverServer) CreateView(context.Context, *CreateViewRequest) (*CreateViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateView not implemented")
}
func (UnimplementedCoverServer) GetViews(context.Context, *GetViewsRequest) (*GetViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViews not implemented")
}
func (UnimplementedCoverServer) GetCurrentView(context.Context, *GetCurrentViewRequest) (*GetCurrentViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentView not implemented")
}
func (UnimplementedCoverServer) GetFavoriteViews(context.Context, *GetFavoriteViewsRequest) (*GetFavoriteViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteViews not implemented")
}
func (UnimplementedCoverServer) PublishView(context.Context, *PublishViewRequest) (*PublishViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishView not implemented")
}
func (UnimplementedCoverServer) AddFavorite(context.Context, *AddFavoriteRequest) (*AddFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFavorite not implemented")
}
func (UnimplementedCoverServer) RemoveFavorite(context.Context, *RemoveFavoriteRequest) (*RemoveFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFavorite not implemented")
}
func (UnimplementedCoverServer) UpdateView(context.Context, *UpdateViewRequest) (*UpdateViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateView not implemented")
}
func (UnimplementedCoverServer) DeleteView(context.Context, *DeleteViewRequest) (*DeleteViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteView not implemented")
}
func (UnimplementedCoverServer) CreateCostGroup(context.Context, *CreateCostGroupRequest) (*CreateCostGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCostGroup not implemented")
}
func (UnimplementedCoverServer) GetCostGroups(context.Context, *GetCostGroupsRequest) (*GetCostGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostGroups not implemented")
}
func (UnimplementedCoverServer) GetCostGroupDetails(context.Context, *GetCostGroupDetailsRequest) (*GetCostGroupDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostGroupDetails not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupName(context.Context, *UpdateCostGroupNameRequest) (*UpdateCostGroupNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupName not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupDescription(context.Context, *UpdateCostGroupDescriptionRequest) (*UpdateCostGroupDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupDescription not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupImage(context.Context, *UpdateCostGroupImageRequest) (*UpdateCostGroupImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupImage not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupIcon(context.Context, *UpdateCostGroupIconRequest) (*UpdateCostGroupIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupIcon not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupColorTheme(context.Context, *UpdateCostGroupColorThemeRequest) (*UpdateCostGroupColorThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupColorTheme not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupCombinations(context.Context, *UpdateCostGroupCombinationsRequest) (*UpdateCostGroupCombinationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupCombinations not implemented")
}
func (UnimplementedCoverServer) AssignCostGroupMember(context.Context, *AssignCostGroupMemberRequest) (*AssignCostGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignCostGroupMember not implemented")
}
func (UnimplementedCoverServer) RemoveCostGroupMember(context.Context, *RemoveCostGroupMemberRequest) (*RemoveCostGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCostGroupMember not implemented")
}
func (UnimplementedCoverServer) DeleteCostGroup(context.Context, *DeleteCostGroupRequest) (*DeleteCostGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCostGroup not implemented")
}
func (UnimplementedCoverServer) mustEmbedUnimplementedCoverServer() {}

// UnsafeCoverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoverServer will
// result in compilation errors.
type UnsafeCoverServer interface {
	mustEmbedUnimplementedCoverServer()
}

func RegisterCoverServer(s grpc.ServiceRegistrar, srv CoverServer) {
	s.RegisterService(&Cover_ServiceDesc, srv)
}

func _Cover_InviteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).InviteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/InviteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).InviteMember(ctx, req.(*InviteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/CreateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateMember(ctx, req.(*CreateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/GetMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetMemberDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetMemberDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/GetMemberDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetMemberDetails(ctx, req.(*GetMemberDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetMemberCostGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberCostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetMemberCostGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/GetMemberCostGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetMemberCostGroup(ctx, req.(*GetMemberCostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/GetUserDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetUserDetails(ctx, req.(*GetUserDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateUserAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserAvatar(ctx, req.(*UpdateUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateUserIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserIcon(ctx, req.(*UpdateUserIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserColorTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserColorThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserColorTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateUserColorTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserColorTheme(ctx, req.(*UpdateUserColorThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserName(ctx, req.(*UpdateUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserEmail(ctx, req.(*UpdateUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserMainView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserMainViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserMainView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateUserMainView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserMainView(ctx, req.(*UpdateUserMainViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ResetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ResetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/ResetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ResetUserPassword(ctx, req.(*ResetUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserLocale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLocaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserLocale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateUserLocale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserLocale(ctx, req.(*UpdateUserLocaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserAppTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAppThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserAppTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateUserAppTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserAppTheme(ctx, req.(*UpdateUserAppThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateUserTimezone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserTimezone(ctx, req.(*UpdateUserTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateUserAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserAttributes(ctx, req.(*UpdateUserAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/DeleteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/CreateView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateView(ctx, req.(*CreateViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/GetViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetViews(ctx, req.(*GetViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetCurrentView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetCurrentView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/GetCurrentView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetCurrentView(ctx, req.(*GetCurrentViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetFavoriteViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetFavoriteViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/GetFavoriteViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetFavoriteViews(ctx, req.(*GetFavoriteViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_PublishView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).PublishView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/PublishView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).PublishView(ctx, req.(*PublishViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_AddFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).AddFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/AddFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).AddFavorite(ctx, req.(*AddFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_RemoveFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).RemoveFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/RemoveFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).RemoveFavorite(ctx, req.(*RemoveFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateView(ctx, req.(*UpdateViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/DeleteView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteView(ctx, req.(*DeleteViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateCostGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateCostGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/CreateCostGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateCostGroup(ctx, req.(*CreateCostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetCostGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetCostGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/GetCostGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetCostGroups(ctx, req.(*GetCostGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetCostGroupDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostGroupDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetCostGroupDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/GetCostGroupDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetCostGroupDetails(ctx, req.(*GetCostGroupDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateCostGroupName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupName(ctx, req.(*UpdateCostGroupNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateCostGroupDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupDescription(ctx, req.(*UpdateCostGroupDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateCostGroupImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupImage(ctx, req.(*UpdateCostGroupImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateCostGroupIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupIcon(ctx, req.(*UpdateCostGroupIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupColorTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupColorThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupColorTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateCostGroupColorTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupColorTheme(ctx, req.(*UpdateCostGroupColorThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupCombinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupCombinationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupCombinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/UpdateCostGroupCombinations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupCombinations(ctx, req.(*UpdateCostGroupCombinationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_AssignCostGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignCostGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).AssignCostGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/AssignCostGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).AssignCostGroupMember(ctx, req.(*AssignCostGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_RemoveCostGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCostGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).RemoveCostGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/RemoveCostGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).RemoveCostGroupMember(ctx, req.(*RemoveCostGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteCostGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteCostGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cover.v1.Cover/DeleteCostGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteCostGroup(ctx, req.(*DeleteCostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cover_ServiceDesc is the grpc.ServiceDesc for Cover service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cover_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.cover.v1.Cover",
	HandlerType: (*CoverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InviteMember",
			Handler:    _Cover_InviteMember_Handler,
		},
		{
			MethodName: "CreateMember",
			Handler:    _Cover_CreateMember_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _Cover_GetMembers_Handler,
		},
		{
			MethodName: "GetMemberDetails",
			Handler:    _Cover_GetMemberDetails_Handler,
		},
		{
			MethodName: "GetMemberCostGroup",
			Handler:    _Cover_GetMemberCostGroup_Handler,
		},
		{
			MethodName: "GetUserDetails",
			Handler:    _Cover_GetUserDetails_Handler,
		},
		{
			MethodName: "UpdateUserAvatar",
			Handler:    _Cover_UpdateUserAvatar_Handler,
		},
		{
			MethodName: "UpdateUserIcon",
			Handler:    _Cover_UpdateUserIcon_Handler,
		},
		{
			MethodName: "UpdateUserColorTheme",
			Handler:    _Cover_UpdateUserColorTheme_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _Cover_UpdateUserName_Handler,
		},
		{
			MethodName: "UpdateUserEmail",
			Handler:    _Cover_UpdateUserEmail_Handler,
		},
		{
			MethodName: "UpdateUserMainView",
			Handler:    _Cover_UpdateUserMainView_Handler,
		},
		{
			MethodName: "ResetUserPassword",
			Handler:    _Cover_ResetUserPassword_Handler,
		},
		{
			MethodName: "UpdateUserLocale",
			Handler:    _Cover_UpdateUserLocale_Handler,
		},
		{
			MethodName: "UpdateUserAppTheme",
			Handler:    _Cover_UpdateUserAppTheme_Handler,
		},
		{
			MethodName: "UpdateUserTimezone",
			Handler:    _Cover_UpdateUserTimezone_Handler,
		},
		{
			MethodName: "UpdateUserAttributes",
			Handler:    _Cover_UpdateUserAttributes_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _Cover_DeleteMember_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Cover_ResetPassword_Handler,
		},
		{
			MethodName: "CreateView",
			Handler:    _Cover_CreateView_Handler,
		},
		{
			MethodName: "GetViews",
			Handler:    _Cover_GetViews_Handler,
		},
		{
			MethodName: "GetCurrentView",
			Handler:    _Cover_GetCurrentView_Handler,
		},
		{
			MethodName: "GetFavoriteViews",
			Handler:    _Cover_GetFavoriteViews_Handler,
		},
		{
			MethodName: "PublishView",
			Handler:    _Cover_PublishView_Handler,
		},
		{
			MethodName: "AddFavorite",
			Handler:    _Cover_AddFavorite_Handler,
		},
		{
			MethodName: "RemoveFavorite",
			Handler:    _Cover_RemoveFavorite_Handler,
		},
		{
			MethodName: "UpdateView",
			Handler:    _Cover_UpdateView_Handler,
		},
		{
			MethodName: "DeleteView",
			Handler:    _Cover_DeleteView_Handler,
		},
		{
			MethodName: "CreateCostGroup",
			Handler:    _Cover_CreateCostGroup_Handler,
		},
		{
			MethodName: "GetCostGroups",
			Handler:    _Cover_GetCostGroups_Handler,
		},
		{
			MethodName: "GetCostGroupDetails",
			Handler:    _Cover_GetCostGroupDetails_Handler,
		},
		{
			MethodName: "UpdateCostGroupName",
			Handler:    _Cover_UpdateCostGroupName_Handler,
		},
		{
			MethodName: "UpdateCostGroupDescription",
			Handler:    _Cover_UpdateCostGroupDescription_Handler,
		},
		{
			MethodName: "UpdateCostGroupImage",
			Handler:    _Cover_UpdateCostGroupImage_Handler,
		},
		{
			MethodName: "UpdateCostGroupIcon",
			Handler:    _Cover_UpdateCostGroupIcon_Handler,
		},
		{
			MethodName: "UpdateCostGroupColorTheme",
			Handler:    _Cover_UpdateCostGroupColorTheme_Handler,
		},
		{
			MethodName: "UpdateCostGroupCombinations",
			Handler:    _Cover_UpdateCostGroupCombinations_Handler,
		},
		{
			MethodName: "AssignCostGroupMember",
			Handler:    _Cover_AssignCostGroupMember_Handler,
		},
		{
			MethodName: "RemoveCostGroupMember",
			Handler:    _Cover_RemoveCostGroupMember_Handler,
		},
		{
			MethodName: "DeleteCostGroup",
			Handler:    _Cover_DeleteCostGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cover/v1/cover.proto",
}
