// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: cover/v1/cover.proto

package cover

import (
	context "context"
	api "github.com/alphauslabs/blue-sdk-go/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cover_OnboardOrg_FullMethodName                   = "/blueapi.cover.v1.Cover/OnboardOrg"
	Cover_InviteMember_FullMethodName                 = "/blueapi.cover.v1.Cover/InviteMember"
	Cover_ActivateUser_FullMethodName                 = "/blueapi.cover.v1.Cover/ActivateUser"
	Cover_CreateMember_FullMethodName                 = "/blueapi.cover.v1.Cover/CreateMember"
	Cover_GetMembers_FullMethodName                   = "/blueapi.cover.v1.Cover/GetMembers"
	Cover_GetMemberDetails_FullMethodName             = "/blueapi.cover.v1.Cover/GetMemberDetails"
	Cover_GetMemberCostGroup_FullMethodName           = "/blueapi.cover.v1.Cover/GetMemberCostGroup"
	Cover_UpdateMemberPermission_FullMethodName       = "/blueapi.cover.v1.Cover/UpdateMemberPermission"
	Cover_GetUserDetails_FullMethodName               = "/blueapi.cover.v1.Cover/GetUserDetails"
	Cover_UpdateUserAvatar_FullMethodName             = "/blueapi.cover.v1.Cover/UpdateUserAvatar"
	Cover_UpdateUserIcon_FullMethodName               = "/blueapi.cover.v1.Cover/UpdateUserIcon"
	Cover_UpdateUserColorTheme_FullMethodName         = "/blueapi.cover.v1.Cover/UpdateUserColorTheme"
	Cover_UpdateUserName_FullMethodName               = "/blueapi.cover.v1.Cover/UpdateUserName"
	Cover_UpdateUserEmail_FullMethodName              = "/blueapi.cover.v1.Cover/UpdateUserEmail"
	Cover_UpdateUserMainView_FullMethodName           = "/blueapi.cover.v1.Cover/UpdateUserMainView"
	Cover_ResetUserPassword_FullMethodName            = "/blueapi.cover.v1.Cover/ResetUserPassword"
	Cover_UpdateUserLocale_FullMethodName             = "/blueapi.cover.v1.Cover/UpdateUserLocale"
	Cover_UpdateUserAppTheme_FullMethodName           = "/blueapi.cover.v1.Cover/UpdateUserAppTheme"
	Cover_UpdateUserTimezone_FullMethodName           = "/blueapi.cover.v1.Cover/UpdateUserTimezone"
	Cover_UpdateUserAttributes_FullMethodName         = "/blueapi.cover.v1.Cover/UpdateUserAttributes"
	Cover_DeleteMember_FullMethodName                 = "/blueapi.cover.v1.Cover/DeleteMember"
	Cover_ResetPassword_FullMethodName                = "/blueapi.cover.v1.Cover/ResetPassword"
	Cover_CreateView_FullMethodName                   = "/blueapi.cover.v1.Cover/CreateView"
	Cover_GetViews_FullMethodName                     = "/blueapi.cover.v1.Cover/GetViews"
	Cover_GetCurrentView_FullMethodName               = "/blueapi.cover.v1.Cover/GetCurrentView"
	Cover_GetFavoriteViews_FullMethodName             = "/blueapi.cover.v1.Cover/GetFavoriteViews"
	Cover_PublishView_FullMethodName                  = "/blueapi.cover.v1.Cover/PublishView"
	Cover_AddFavorite_FullMethodName                  = "/blueapi.cover.v1.Cover/AddFavorite"
	Cover_RemoveFavorite_FullMethodName               = "/blueapi.cover.v1.Cover/RemoveFavorite"
	Cover_UpdateView_FullMethodName                   = "/blueapi.cover.v1.Cover/UpdateView"
	Cover_UpdateViewLayout_FullMethodName             = "/blueapi.cover.v1.Cover/UpdateViewLayout"
	Cover_UpdateViewWidget_FullMethodName             = "/blueapi.cover.v1.Cover/UpdateViewWidget"
	Cover_DeleteView_FullMethodName                   = "/blueapi.cover.v1.Cover/DeleteView"
	Cover_UpdateSideMenuState_FullMethodName          = "/blueapi.cover.v1.Cover/UpdateSideMenuState"
	Cover_AddSideMenuFavorite_FullMethodName          = "/blueapi.cover.v1.Cover/AddSideMenuFavorite"
	Cover_RemoveSideMenuFavorite_FullMethodName       = "/blueapi.cover.v1.Cover/RemoveSideMenuFavorite"
	Cover_CreateCostGroup_FullMethodName              = "/blueapi.cover.v1.Cover/CreateCostGroup"
	Cover_GetCostGroups_FullMethodName                = "/blueapi.cover.v1.Cover/GetCostGroups"
	Cover_GetCostGroupDetails_FullMethodName          = "/blueapi.cover.v1.Cover/GetCostGroupDetails"
	Cover_UpdateCostGroupName_FullMethodName          = "/blueapi.cover.v1.Cover/UpdateCostGroupName"
	Cover_UpdateCostGroupDescription_FullMethodName   = "/blueapi.cover.v1.Cover/UpdateCostGroupDescription"
	Cover_UpdateCostGroupImage_FullMethodName         = "/blueapi.cover.v1.Cover/UpdateCostGroupImage"
	Cover_UpdateCostGroupIcon_FullMethodName          = "/blueapi.cover.v1.Cover/UpdateCostGroupIcon"
	Cover_UpdateCostGroupColorTheme_FullMethodName    = "/blueapi.cover.v1.Cover/UpdateCostGroupColorTheme"
	Cover_UpdateCostGroupCombinations_FullMethodName  = "/blueapi.cover.v1.Cover/UpdateCostGroupCombinations"
	Cover_ResolveCostGroupCombinations_FullMethodName = "/blueapi.cover.v1.Cover/ResolveCostGroupCombinations"
	Cover_AssignCostGroupMember_FullMethodName        = "/blueapi.cover.v1.Cover/AssignCostGroupMember"
	Cover_RemoveCostGroupMember_FullMethodName        = "/blueapi.cover.v1.Cover/RemoveCostGroupMember"
	Cover_DeleteCostGroup_FullMethodName              = "/blueapi.cover.v1.Cover/DeleteCostGroup"
	Cover_GetAccountAccessTemplateUrl_FullMethodName  = "/blueapi.cover.v1.Cover/GetAccountAccessTemplateUrl"
	Cover_ListAccountAccess_FullMethodName            = "/blueapi.cover.v1.Cover/ListAccountAccess"
	Cover_GetAccountAccess_FullMethodName             = "/blueapi.cover.v1.Cover/GetAccountAccess"
	Cover_CreateAccountAccess_FullMethodName          = "/blueapi.cover.v1.Cover/CreateAccountAccess"
	Cover_UpdateAccountAccess_FullMethodName          = "/blueapi.cover.v1.Cover/UpdateAccountAccess"
	Cover_DeleteAccountAccess_FullMethodName          = "/blueapi.cover.v1.Cover/DeleteAccountAccess"
	Cover_RegisterAccount_FullMethodName              = "/blueapi.cover.v1.Cover/RegisterAccount"
	Cover_ListAssets_FullMethodName                   = "/blueapi.cover.v1.Cover/ListAssets"
	Cover_GetAssetsSummary_FullMethodName             = "/blueapi.cover.v1.Cover/GetAssetsSummary"
	Cover_GetCostUsage_FullMethodName                 = "/blueapi.cover.v1.Cover/GetCostUsage"
	Cover_GetRightSizingRecommendation_FullMethodName = "/blueapi.cover.v1.Cover/GetRightSizingRecommendation"
	Cover_ModifyResourceType_FullMethodName           = "/blueapi.cover.v1.Cover/ModifyResourceType"
	Cover_TerminateResource_FullMethodName            = "/blueapi.cover.v1.Cover/TerminateResource"
	Cover_UploadChargeCode_FullMethodName             = "/blueapi.cover.v1.Cover/UploadChargeCode"
	Cover_AssignPayer_FullMethodName                  = "/blueapi.cover.v1.Cover/AssignPayer"
	Cover_GetPayers_FullMethodName                    = "/blueapi.cover.v1.Cover/GetPayers"
	Cover_GetAccounts_FullMethodName                  = "/blueapi.cover.v1.Cover/GetAccounts"
	Cover_GetServices_FullMethodName                  = "/blueapi.cover.v1.Cover/GetServices"
	Cover_GetRegions_FullMethodName                   = "/blueapi.cover.v1.Cover/GetRegions"
	Cover_GetTags_FullMethodName                      = "/blueapi.cover.v1.Cover/GetTags"
	Cover_ListFees_FullMethodName                     = "/blueapi.cover.v1.Cover/ListFees"
	Cover_GetFeeDetails_FullMethodName                = "/blueapi.cover.v1.Cover/GetFeeDetails"
	Cover_CreateFeeReallocation_FullMethodName        = "/blueapi.cover.v1.Cover/CreateFeeReallocation"
	Cover_UpdateFeeDetails_FullMethodName             = "/blueapi.cover.v1.Cover/UpdateFeeDetails"
	Cover_DeleteFeeDetails_FullMethodName             = "/blueapi.cover.v1.Cover/DeleteFeeDetails"
)

// CoverClient is the client API for Cover service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoverClient interface {
	// Onboard an organization with an admin account and default cost group
	OnboardOrg(ctx context.Context, in *OnboardOrgRequest, opts ...grpc.CallOption) (*OnboardOrgResponse, error)
	// Invite members to the system
	InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...grpc.CallOption) (*InviteMemberResponse, error)
	// Activate the added user
	ActivateUser(ctx context.Context, in *ActivateUserRequest, opts ...grpc.CallOption) (*ActivateUserResponse, error)
	// Create a member
	CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*CreateMemberResponse, error)
	// Get all the members/subusers of the company
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error)
	// Get the details of the user
	GetMemberDetails(ctx context.Context, in *GetMemberDetailsRequest, opts ...grpc.CallOption) (*GetMemberDetailsResponse, error)
	// Get the cost group to which the member is attached
	GetMemberCostGroup(ctx context.Context, in *GetMemberCostGroupRequest, opts ...grpc.CallOption) (*GetMemberCostGroupResponse, error)
	// Modify member's permission
	UpdateMemberPermission(ctx context.Context, in *UpdateMemberPermissionRequest, opts ...grpc.CallOption) (*UpdateMemberPermissionResponse, error)
	// Get the details of the logged-in user
	GetUserDetails(ctx context.Context, in *GetUserDetailsRequest, opts ...grpc.CallOption) (*GetUserDetailsResponse, error)
	// Modify user's avatar
	UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarRequest, opts ...grpc.CallOption) (*UpdateUserAvatarResponse, error)
	// Modify user's icon
	UpdateUserIcon(ctx context.Context, in *UpdateUserIconRequest, opts ...grpc.CallOption) (*UpdateUserIconResponse, error)
	// Modify user's color theme
	UpdateUserColorTheme(ctx context.Context, in *UpdateUserColorThemeRequest, opts ...grpc.CallOption) (*UpdateUserColorThemeResponse, error)
	// Modify user's name
	UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error)
	// Modify user's email
	UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error)
	// Modify user's main view
	UpdateUserMainView(ctx context.Context, in *UpdateUserMainViewRequest, opts ...grpc.CallOption) (*UpdateUserMainViewResponse, error)
	// Reset user's password
	ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...grpc.CallOption) (*ResetUserPasswordResponse, error)
	// Modify user's locale
	UpdateUserLocale(ctx context.Context, in *UpdateUserLocaleRequest, opts ...grpc.CallOption) (*UpdateUserLocaleResponse, error)
	// Modify user's app theme
	UpdateUserAppTheme(ctx context.Context, in *UpdateUserAppThemeRequest, opts ...grpc.CallOption) (*UpdateUserAppThemeResponse, error)
	// Modify user's timezone
	UpdateUserTimezone(ctx context.Context, in *UpdateUserTimezoneRequest, opts ...grpc.CallOption) (*UpdateUserTimezoneResponse, error)
	// Modify attributes
	UpdateUserAttributes(ctx context.Context, in *UpdateUserAttributesRequest, opts ...grpc.CallOption) (*UpdateUserAttributesResponse, error)
	// Deletes a user
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error)
	// Reset member's password
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	// Create a view
	CreateView(ctx context.Context, in *CreateViewRequest, opts ...grpc.CallOption) (*CreateViewResponse, error)
	// Get all the views
	GetViews(ctx context.Context, in *GetViewsRequest, opts ...grpc.CallOption) (*GetViewsResponse, error)
	// Get the details of the current view
	GetCurrentView(ctx context.Context, in *GetCurrentViewRequest, opts ...grpc.CallOption) (*GetCurrentViewResponse, error)
	// Get favorite views
	GetFavoriteViews(ctx context.Context, in *GetFavoriteViewsRequest, opts ...grpc.CallOption) (*GetFavoriteViewsResponse, error)
	// Publish current view
	PublishView(ctx context.Context, in *PublishViewRequest, opts ...grpc.CallOption) (*PublishViewResponse, error)
	// Add to favorites
	AddFavorite(ctx context.Context, in *AddFavoriteRequest, opts ...grpc.CallOption) (*AddFavoriteResponse, error)
	// Remove from favorites
	RemoveFavorite(ctx context.Context, in *RemoveFavoriteRequest, opts ...grpc.CallOption) (*RemoveFavoriteResponse, error)
	// Updates the view details
	UpdateView(ctx context.Context, in *UpdateViewRequest, opts ...grpc.CallOption) (*UpdateViewResponse, error)
	// Updates the view's layout
	UpdateViewLayout(ctx context.Context, in *UpdateViewLayoutRequest, opts ...grpc.CallOption) (*UpdateViewLayoutResponse, error)
	// Updates the view's widget
	UpdateViewWidget(ctx context.Context, in *UpdateViewWidgetRequest, opts ...grpc.CallOption) (*UpdateViewWidgetResponse, error)
	// Deletes a view
	DeleteView(ctx context.Context, in *DeleteViewRequest, opts ...grpc.CallOption) (*DeleteViewResponse, error)
	// Updates the side menu state
	UpdateSideMenuState(ctx context.Context, in *UpdateSideMenuStateRequest, opts ...grpc.CallOption) (*UpdateSideMenuStateResponse, error)
	// Add as side menu favorite
	AddSideMenuFavorite(ctx context.Context, in *AddSideMenuFavoriteRequest, opts ...grpc.CallOption) (*AddSideMenuFavoriteResponse, error)
	// Remove from side menu favorite
	RemoveSideMenuFavorite(ctx context.Context, in *RemoveSideMenuFavoriteRequest, opts ...grpc.CallOption) (*RemoveSideMenuFavoriteResponse, error)
	// Create a cost group
	CreateCostGroup(ctx context.Context, in *CreateCostGroupRequest, opts ...grpc.CallOption) (*CreateCostGroupResponse, error)
	// Get all the cost groups
	GetCostGroups(ctx context.Context, in *GetCostGroupsRequest, opts ...grpc.CallOption) (*GetCostGroupsResponse, error)
	// Get the details of the cost group
	GetCostGroupDetails(ctx context.Context, in *GetCostGroupDetailsRequest, opts ...grpc.CallOption) (*GetCostGroupDetailsResponse, error)
	// Update cost group's name
	UpdateCostGroupName(ctx context.Context, in *UpdateCostGroupNameRequest, opts ...grpc.CallOption) (*UpdateCostGroupNameResponse, error)
	// Update cost group's description
	UpdateCostGroupDescription(ctx context.Context, in *UpdateCostGroupDescriptionRequest, opts ...grpc.CallOption) (*UpdateCostGroupDescriptionResponse, error)
	// Update cost group's image
	UpdateCostGroupImage(ctx context.Context, in *UpdateCostGroupImageRequest, opts ...grpc.CallOption) (*UpdateCostGroupImageResponse, error)
	// Update cost group's icon
	UpdateCostGroupIcon(ctx context.Context, in *UpdateCostGroupIconRequest, opts ...grpc.CallOption) (*UpdateCostGroupIconResponse, error)
	// Update cost group's color theme
	UpdateCostGroupColorTheme(ctx context.Context, in *UpdateCostGroupColorThemeRequest, opts ...grpc.CallOption) (*UpdateCostGroupColorThemeResponse, error)
	// Update cost group's combinations
	UpdateCostGroupCombinations(ctx context.Context, in *UpdateCostGroupCombinationsRequest, opts ...grpc.CallOption) (*UpdateCostGroupCombinationsResponse, error)
	ResolveCostGroupCombinations(ctx context.Context, in *ResolveCostGroupCombinationsRequest, opts ...grpc.CallOption) (*ResolveCostGroupCombinationsResponse, error)
	// Assign a member to a cost group
	AssignCostGroupMember(ctx context.Context, in *AssignCostGroupMemberRequest, opts ...grpc.CallOption) (*AssignCostGroupMemberResponse, error)
	// Remove a member from a cost group
	RemoveCostGroupMember(ctx context.Context, in *RemoveCostGroupMemberRequest, opts ...grpc.CallOption) (*RemoveCostGroupMemberResponse, error)
	// Deletes a cost group
	DeleteCostGroup(ctx context.Context, in *DeleteCostGroupRequest, opts ...grpc.CallOption) (*DeleteCostGroupResponse, error)
	// Gets a CloudFormation launch URL for enabling the account access.
	GetAccountAccessTemplateUrl(ctx context.Context, in *GetAccountAccessTemplateUrlRequest, opts ...grpc.CallOption) (*GetAccountAccessTemplateUrlResponse, error)
	// Lists the account access role(s) attached to accounts under caller.
	ListAccountAccess(ctx context.Context, in *ListAccountAccessRequest, opts ...grpc.CallOption) (Cover_ListAccountAccessClient, error)
	// Gets the current account role attached to the input target.
	GetAccountAccess(ctx context.Context, in *GetAccountAccessRequest, opts ...grpc.CallOption) (*AccountAccess, error)
	// Starts validation of the account access stack deployment. If successful, the IAM role created from the CloudFormation stack will be registered to the target.
	CreateAccountAccess(ctx context.Context, in *CreateAccountAccessRequest, opts ...grpc.CallOption) (*AccountAccess, error)
	// Starts an update to an existing account access CloudFormation stack for template changes, if any. Only call this API if the status of your account access is 'outdated'.
	UpdateAccountAccess(ctx context.Context, in *UpdateAccountAccessRequest, opts ...grpc.CallOption) (*api.Operation, error)
	// Deletes the current account access role attached to this target account. This does not delete the CloudFormation deployment in your account.
	DeleteAccountAccess(ctx context.Context, in *DeleteAccountAccessRequest, opts ...grpc.CallOption) (*DeleteAccountAccessResponse, error)
	// Registers an account
	RegisterAccount(ctx context.Context, in *RegisterAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Lists assets for costgroup
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (Cover_ListAssetsClient, error)
	// WORK-IN-PROGRESS: Assets summary for costgroup
	GetAssetsSummary(ctx context.Context, in *GetAssetsSummaryRequest, opts ...grpc.CallOption) (*GetAssetsSummaryResponse, error)
	// WORK-IN-PROGRESS: Get usage and usage-based costs for the specified costgroup
	GetCostUsage(ctx context.Context, in *GetCostUsageRequest, opts ...grpc.CallOption) (Cover_GetCostUsageClient, error)
	// Gets the right sizing recommendation of all the accounts in the costgroup
	GetRightSizingRecommendation(ctx context.Context, in *GetRightSizingRecommendationRequest, opts ...grpc.CallOption) (*GetRightSizingRecommendationResponse, error)
	// Modify resource type from right sizing recommendation
	ModifyResourceType(ctx context.Context, in *ModifyResourceTypeRequest, opts ...grpc.CallOption) (*ModifyResourceTypeResponse, error)
	// Terminate a resource from right sizing recommendation
	TerminateResource(ctx context.Context, in *TerminateResourceRequest, opts ...grpc.CallOption) (*TerminateResourceResponse, error)
	// Upload charge code
	UploadChargeCode(ctx context.Context, opts ...grpc.CallOption) (Cover_UploadChargeCodeClient, error)
	// Assign payer to a linked account
	AssignPayer(ctx context.Context, in *AssignPayerRequest, opts ...grpc.CallOption) (*AssignPayerResponse, error)
	// Get list of all payers
	GetPayers(ctx context.Context, in *GetPayersRequest, opts ...grpc.CallOption) (*GetPayersResponse, error)
	// Get list of registered accounts
	GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
	// Get list of supported services
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error)
	// Get list of available regions
	GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error)
	// Get list of available tags
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error)
	// Lists the fees
	ListFees(ctx context.Context, in *ListFeesRequest, opts ...grpc.CallOption) (Cover_ListFeesClient, error)
	// Gets the fee details
	GetFeeDetails(ctx context.Context, in *GetFeeDetailsRequest, opts ...grpc.CallOption) (*FeeDetails, error)
	// Create assignments for fee reallocation
	CreateFeeReallocation(ctx context.Context, in *CreateFeeReallocationRequest, opts ...grpc.CallOption) (Cover_CreateFeeReallocationClient, error)
	// Update fee details
	UpdateFeeDetails(ctx context.Context, in *UpdateFeeDetailsRequest, opts ...grpc.CallOption) (*api.Operation, error)
	// Deletes fee details
	DeleteFeeDetails(ctx context.Context, in *DeleteFeeDetailsRequest, opts ...grpc.CallOption) (*DeleteFeeDetailsResponse, error)
}

type coverClient struct {
	cc grpc.ClientConnInterface
}

func NewCoverClient(cc grpc.ClientConnInterface) CoverClient {
	return &coverClient{cc}
}

func (c *coverClient) OnboardOrg(ctx context.Context, in *OnboardOrgRequest, opts ...grpc.CallOption) (*OnboardOrgResponse, error) {
	out := new(OnboardOrgResponse)
	err := c.cc.Invoke(ctx, Cover_OnboardOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...grpc.CallOption) (*InviteMemberResponse, error) {
	out := new(InviteMemberResponse)
	err := c.cc.Invoke(ctx, Cover_InviteMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ActivateUser(ctx context.Context, in *ActivateUserRequest, opts ...grpc.CallOption) (*ActivateUserResponse, error) {
	out := new(ActivateUserResponse)
	err := c.cc.Invoke(ctx, Cover_ActivateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*CreateMemberResponse, error) {
	out := new(CreateMemberResponse)
	err := c.cc.Invoke(ctx, Cover_CreateMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	out := new(GetMembersResponse)
	err := c.cc.Invoke(ctx, Cover_GetMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetMemberDetails(ctx context.Context, in *GetMemberDetailsRequest, opts ...grpc.CallOption) (*GetMemberDetailsResponse, error) {
	out := new(GetMemberDetailsResponse)
	err := c.cc.Invoke(ctx, Cover_GetMemberDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetMemberCostGroup(ctx context.Context, in *GetMemberCostGroupRequest, opts ...grpc.CallOption) (*GetMemberCostGroupResponse, error) {
	out := new(GetMemberCostGroupResponse)
	err := c.cc.Invoke(ctx, Cover_GetMemberCostGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateMemberPermission(ctx context.Context, in *UpdateMemberPermissionRequest, opts ...grpc.CallOption) (*UpdateMemberPermissionResponse, error) {
	out := new(UpdateMemberPermissionResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateMemberPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetUserDetails(ctx context.Context, in *GetUserDetailsRequest, opts ...grpc.CallOption) (*GetUserDetailsResponse, error) {
	out := new(GetUserDetailsResponse)
	err := c.cc.Invoke(ctx, Cover_GetUserDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarRequest, opts ...grpc.CallOption) (*UpdateUserAvatarResponse, error) {
	out := new(UpdateUserAvatarResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserIcon(ctx context.Context, in *UpdateUserIconRequest, opts ...grpc.CallOption) (*UpdateUserIconResponse, error) {
	out := new(UpdateUserIconResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserIcon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserColorTheme(ctx context.Context, in *UpdateUserColorThemeRequest, opts ...grpc.CallOption) (*UpdateUserColorThemeResponse, error) {
	out := new(UpdateUserColorThemeResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserColorTheme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error) {
	out := new(UpdateUserNameResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error) {
	out := new(UpdateUserEmailResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserMainView(ctx context.Context, in *UpdateUserMainViewRequest, opts ...grpc.CallOption) (*UpdateUserMainViewResponse, error) {
	out := new(UpdateUserMainViewResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserMainView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...grpc.CallOption) (*ResetUserPasswordResponse, error) {
	out := new(ResetUserPasswordResponse)
	err := c.cc.Invoke(ctx, Cover_ResetUserPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserLocale(ctx context.Context, in *UpdateUserLocaleRequest, opts ...grpc.CallOption) (*UpdateUserLocaleResponse, error) {
	out := new(UpdateUserLocaleResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserLocale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserAppTheme(ctx context.Context, in *UpdateUserAppThemeRequest, opts ...grpc.CallOption) (*UpdateUserAppThemeResponse, error) {
	out := new(UpdateUserAppThemeResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserAppTheme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserTimezone(ctx context.Context, in *UpdateUserTimezoneRequest, opts ...grpc.CallOption) (*UpdateUserTimezoneResponse, error) {
	out := new(UpdateUserTimezoneResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserTimezone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateUserAttributes(ctx context.Context, in *UpdateUserAttributesRequest, opts ...grpc.CallOption) (*UpdateUserAttributesResponse, error) {
	out := new(UpdateUserAttributesResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateUserAttributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error) {
	out := new(DeleteMemberResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, Cover_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateView(ctx context.Context, in *CreateViewRequest, opts ...grpc.CallOption) (*CreateViewResponse, error) {
	out := new(CreateViewResponse)
	err := c.cc.Invoke(ctx, Cover_CreateView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetViews(ctx context.Context, in *GetViewsRequest, opts ...grpc.CallOption) (*GetViewsResponse, error) {
	out := new(GetViewsResponse)
	err := c.cc.Invoke(ctx, Cover_GetViews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetCurrentView(ctx context.Context, in *GetCurrentViewRequest, opts ...grpc.CallOption) (*GetCurrentViewResponse, error) {
	out := new(GetCurrentViewResponse)
	err := c.cc.Invoke(ctx, Cover_GetCurrentView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetFavoriteViews(ctx context.Context, in *GetFavoriteViewsRequest, opts ...grpc.CallOption) (*GetFavoriteViewsResponse, error) {
	out := new(GetFavoriteViewsResponse)
	err := c.cc.Invoke(ctx, Cover_GetFavoriteViews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) PublishView(ctx context.Context, in *PublishViewRequest, opts ...grpc.CallOption) (*PublishViewResponse, error) {
	out := new(PublishViewResponse)
	err := c.cc.Invoke(ctx, Cover_PublishView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) AddFavorite(ctx context.Context, in *AddFavoriteRequest, opts ...grpc.CallOption) (*AddFavoriteResponse, error) {
	out := new(AddFavoriteResponse)
	err := c.cc.Invoke(ctx, Cover_AddFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) RemoveFavorite(ctx context.Context, in *RemoveFavoriteRequest, opts ...grpc.CallOption) (*RemoveFavoriteResponse, error) {
	out := new(RemoveFavoriteResponse)
	err := c.cc.Invoke(ctx, Cover_RemoveFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateView(ctx context.Context, in *UpdateViewRequest, opts ...grpc.CallOption) (*UpdateViewResponse, error) {
	out := new(UpdateViewResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateViewLayout(ctx context.Context, in *UpdateViewLayoutRequest, opts ...grpc.CallOption) (*UpdateViewLayoutResponse, error) {
	out := new(UpdateViewLayoutResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateViewLayout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateViewWidget(ctx context.Context, in *UpdateViewWidgetRequest, opts ...grpc.CallOption) (*UpdateViewWidgetResponse, error) {
	out := new(UpdateViewWidgetResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateViewWidget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteView(ctx context.Context, in *DeleteViewRequest, opts ...grpc.CallOption) (*DeleteViewResponse, error) {
	out := new(DeleteViewResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateSideMenuState(ctx context.Context, in *UpdateSideMenuStateRequest, opts ...grpc.CallOption) (*UpdateSideMenuStateResponse, error) {
	out := new(UpdateSideMenuStateResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateSideMenuState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) AddSideMenuFavorite(ctx context.Context, in *AddSideMenuFavoriteRequest, opts ...grpc.CallOption) (*AddSideMenuFavoriteResponse, error) {
	out := new(AddSideMenuFavoriteResponse)
	err := c.cc.Invoke(ctx, Cover_AddSideMenuFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) RemoveSideMenuFavorite(ctx context.Context, in *RemoveSideMenuFavoriteRequest, opts ...grpc.CallOption) (*RemoveSideMenuFavoriteResponse, error) {
	out := new(RemoveSideMenuFavoriteResponse)
	err := c.cc.Invoke(ctx, Cover_RemoveSideMenuFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateCostGroup(ctx context.Context, in *CreateCostGroupRequest, opts ...grpc.CallOption) (*CreateCostGroupResponse, error) {
	out := new(CreateCostGroupResponse)
	err := c.cc.Invoke(ctx, Cover_CreateCostGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetCostGroups(ctx context.Context, in *GetCostGroupsRequest, opts ...grpc.CallOption) (*GetCostGroupsResponse, error) {
	out := new(GetCostGroupsResponse)
	err := c.cc.Invoke(ctx, Cover_GetCostGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetCostGroupDetails(ctx context.Context, in *GetCostGroupDetailsRequest, opts ...grpc.CallOption) (*GetCostGroupDetailsResponse, error) {
	out := new(GetCostGroupDetailsResponse)
	err := c.cc.Invoke(ctx, Cover_GetCostGroupDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupName(ctx context.Context, in *UpdateCostGroupNameRequest, opts ...grpc.CallOption) (*UpdateCostGroupNameResponse, error) {
	out := new(UpdateCostGroupNameResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateCostGroupName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupDescription(ctx context.Context, in *UpdateCostGroupDescriptionRequest, opts ...grpc.CallOption) (*UpdateCostGroupDescriptionResponse, error) {
	out := new(UpdateCostGroupDescriptionResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateCostGroupDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupImage(ctx context.Context, in *UpdateCostGroupImageRequest, opts ...grpc.CallOption) (*UpdateCostGroupImageResponse, error) {
	out := new(UpdateCostGroupImageResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateCostGroupImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupIcon(ctx context.Context, in *UpdateCostGroupIconRequest, opts ...grpc.CallOption) (*UpdateCostGroupIconResponse, error) {
	out := new(UpdateCostGroupIconResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateCostGroupIcon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupColorTheme(ctx context.Context, in *UpdateCostGroupColorThemeRequest, opts ...grpc.CallOption) (*UpdateCostGroupColorThemeResponse, error) {
	out := new(UpdateCostGroupColorThemeResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateCostGroupColorTheme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateCostGroupCombinations(ctx context.Context, in *UpdateCostGroupCombinationsRequest, opts ...grpc.CallOption) (*UpdateCostGroupCombinationsResponse, error) {
	out := new(UpdateCostGroupCombinationsResponse)
	err := c.cc.Invoke(ctx, Cover_UpdateCostGroupCombinations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ResolveCostGroupCombinations(ctx context.Context, in *ResolveCostGroupCombinationsRequest, opts ...grpc.CallOption) (*ResolveCostGroupCombinationsResponse, error) {
	out := new(ResolveCostGroupCombinationsResponse)
	err := c.cc.Invoke(ctx, Cover_ResolveCostGroupCombinations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) AssignCostGroupMember(ctx context.Context, in *AssignCostGroupMemberRequest, opts ...grpc.CallOption) (*AssignCostGroupMemberResponse, error) {
	out := new(AssignCostGroupMemberResponse)
	err := c.cc.Invoke(ctx, Cover_AssignCostGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) RemoveCostGroupMember(ctx context.Context, in *RemoveCostGroupMemberRequest, opts ...grpc.CallOption) (*RemoveCostGroupMemberResponse, error) {
	out := new(RemoveCostGroupMemberResponse)
	err := c.cc.Invoke(ctx, Cover_RemoveCostGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteCostGroup(ctx context.Context, in *DeleteCostGroupRequest, opts ...grpc.CallOption) (*DeleteCostGroupResponse, error) {
	out := new(DeleteCostGroupResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteCostGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetAccountAccessTemplateUrl(ctx context.Context, in *GetAccountAccessTemplateUrlRequest, opts ...grpc.CallOption) (*GetAccountAccessTemplateUrlResponse, error) {
	out := new(GetAccountAccessTemplateUrlResponse)
	err := c.cc.Invoke(ctx, Cover_GetAccountAccessTemplateUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListAccountAccess(ctx context.Context, in *ListAccountAccessRequest, opts ...grpc.CallOption) (Cover_ListAccountAccessClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[0], Cover_ListAccountAccess_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &coverListAccountAccessClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListAccountAccessClient interface {
	Recv() (*AccountAccess, error)
	grpc.ClientStream
}

type coverListAccountAccessClient struct {
	grpc.ClientStream
}

func (x *coverListAccountAccessClient) Recv() (*AccountAccess, error) {
	m := new(AccountAccess)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) GetAccountAccess(ctx context.Context, in *GetAccountAccessRequest, opts ...grpc.CallOption) (*AccountAccess, error) {
	out := new(AccountAccess)
	err := c.cc.Invoke(ctx, Cover_GetAccountAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateAccountAccess(ctx context.Context, in *CreateAccountAccessRequest, opts ...grpc.CallOption) (*AccountAccess, error) {
	out := new(AccountAccess)
	err := c.cc.Invoke(ctx, Cover_CreateAccountAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UpdateAccountAccess(ctx context.Context, in *UpdateAccountAccessRequest, opts ...grpc.CallOption) (*api.Operation, error) {
	out := new(api.Operation)
	err := c.cc.Invoke(ctx, Cover_UpdateAccountAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteAccountAccess(ctx context.Context, in *DeleteAccountAccessRequest, opts ...grpc.CallOption) (*DeleteAccountAccessResponse, error) {
	out := new(DeleteAccountAccessResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteAccountAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) RegisterAccount(ctx context.Context, in *RegisterAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cover_RegisterAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (Cover_ListAssetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[1], Cover_ListAssets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &coverListAssetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListAssetsClient interface {
	Recv() (*Resource, error)
	grpc.ClientStream
}

type coverListAssetsClient struct {
	grpc.ClientStream
}

func (x *coverListAssetsClient) Recv() (*Resource, error) {
	m := new(Resource)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) GetAssetsSummary(ctx context.Context, in *GetAssetsSummaryRequest, opts ...grpc.CallOption) (*GetAssetsSummaryResponse, error) {
	out := new(GetAssetsSummaryResponse)
	err := c.cc.Invoke(ctx, Cover_GetAssetsSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetCostUsage(ctx context.Context, in *GetCostUsageRequest, opts ...grpc.CallOption) (Cover_GetCostUsageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[2], Cover_GetCostUsage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &coverGetCostUsageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_GetCostUsageClient interface {
	Recv() (*CostItem, error)
	grpc.ClientStream
}

type coverGetCostUsageClient struct {
	grpc.ClientStream
}

func (x *coverGetCostUsageClient) Recv() (*CostItem, error) {
	m := new(CostItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) GetRightSizingRecommendation(ctx context.Context, in *GetRightSizingRecommendationRequest, opts ...grpc.CallOption) (*GetRightSizingRecommendationResponse, error) {
	out := new(GetRightSizingRecommendationResponse)
	err := c.cc.Invoke(ctx, Cover_GetRightSizingRecommendation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ModifyResourceType(ctx context.Context, in *ModifyResourceTypeRequest, opts ...grpc.CallOption) (*ModifyResourceTypeResponse, error) {
	out := new(ModifyResourceTypeResponse)
	err := c.cc.Invoke(ctx, Cover_ModifyResourceType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) TerminateResource(ctx context.Context, in *TerminateResourceRequest, opts ...grpc.CallOption) (*TerminateResourceResponse, error) {
	out := new(TerminateResourceResponse)
	err := c.cc.Invoke(ctx, Cover_TerminateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) UploadChargeCode(ctx context.Context, opts ...grpc.CallOption) (Cover_UploadChargeCodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[3], Cover_UploadChargeCode_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &coverUploadChargeCodeClient{stream}
	return x, nil
}

type Cover_UploadChargeCodeClient interface {
	Send(*UploadChargeCodeRequest) error
	CloseAndRecv() (*UploadChargeCodeResponse, error)
	grpc.ClientStream
}

type coverUploadChargeCodeClient struct {
	grpc.ClientStream
}

func (x *coverUploadChargeCodeClient) Send(m *UploadChargeCodeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coverUploadChargeCodeClient) CloseAndRecv() (*UploadChargeCodeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadChargeCodeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) AssignPayer(ctx context.Context, in *AssignPayerRequest, opts ...grpc.CallOption) (*AssignPayerResponse, error) {
	out := new(AssignPayerResponse)
	err := c.cc.Invoke(ctx, Cover_AssignPayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetPayers(ctx context.Context, in *GetPayersRequest, opts ...grpc.CallOption) (*GetPayersResponse, error) {
	out := new(GetPayersResponse)
	err := c.cc.Invoke(ctx, Cover_GetPayers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, Cover_GetAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	out := new(GetServicesResponse)
	err := c.cc.Invoke(ctx, Cover_GetServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error) {
	out := new(GetRegionsResponse)
	err := c.cc.Invoke(ctx, Cover_GetRegions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error) {
	out := new(GetTagsResponse)
	err := c.cc.Invoke(ctx, Cover_GetTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) ListFees(ctx context.Context, in *ListFeesRequest, opts ...grpc.CallOption) (Cover_ListFeesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[4], Cover_ListFees_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &coverListFeesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_ListFeesClient interface {
	Recv() (*FeeDetails, error)
	grpc.ClientStream
}

type coverListFeesClient struct {
	grpc.ClientStream
}

func (x *coverListFeesClient) Recv() (*FeeDetails, error) {
	m := new(FeeDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) GetFeeDetails(ctx context.Context, in *GetFeeDetailsRequest, opts ...grpc.CallOption) (*FeeDetails, error) {
	out := new(FeeDetails)
	err := c.cc.Invoke(ctx, Cover_GetFeeDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) CreateFeeReallocation(ctx context.Context, in *CreateFeeReallocationRequest, opts ...grpc.CallOption) (Cover_CreateFeeReallocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cover_ServiceDesc.Streams[5], Cover_CreateFeeReallocation_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &coverCreateFeeReallocationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cover_CreateFeeReallocationClient interface {
	Recv() (*FeeDetails, error)
	grpc.ClientStream
}

type coverCreateFeeReallocationClient struct {
	grpc.ClientStream
}

func (x *coverCreateFeeReallocationClient) Recv() (*FeeDetails, error) {
	m := new(FeeDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coverClient) UpdateFeeDetails(ctx context.Context, in *UpdateFeeDetailsRequest, opts ...grpc.CallOption) (*api.Operation, error) {
	out := new(api.Operation)
	err := c.cc.Invoke(ctx, Cover_UpdateFeeDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverClient) DeleteFeeDetails(ctx context.Context, in *DeleteFeeDetailsRequest, opts ...grpc.CallOption) (*DeleteFeeDetailsResponse, error) {
	out := new(DeleteFeeDetailsResponse)
	err := c.cc.Invoke(ctx, Cover_DeleteFeeDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoverServer is the server API for Cover service.
// All implementations must embed UnimplementedCoverServer
// for forward compatibility
type CoverServer interface {
	// Onboard an organization with an admin account and default cost group
	OnboardOrg(context.Context, *OnboardOrgRequest) (*OnboardOrgResponse, error)
	// Invite members to the system
	InviteMember(context.Context, *InviteMemberRequest) (*InviteMemberResponse, error)
	// Activate the added user
	ActivateUser(context.Context, *ActivateUserRequest) (*ActivateUserResponse, error)
	// Create a member
	CreateMember(context.Context, *CreateMemberRequest) (*CreateMemberResponse, error)
	// Get all the members/subusers of the company
	GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error)
	// Get the details of the user
	GetMemberDetails(context.Context, *GetMemberDetailsRequest) (*GetMemberDetailsResponse, error)
	// Get the cost group to which the member is attached
	GetMemberCostGroup(context.Context, *GetMemberCostGroupRequest) (*GetMemberCostGroupResponse, error)
	// Modify member's permission
	UpdateMemberPermission(context.Context, *UpdateMemberPermissionRequest) (*UpdateMemberPermissionResponse, error)
	// Get the details of the logged-in user
	GetUserDetails(context.Context, *GetUserDetailsRequest) (*GetUserDetailsResponse, error)
	// Modify user's avatar
	UpdateUserAvatar(context.Context, *UpdateUserAvatarRequest) (*UpdateUserAvatarResponse, error)
	// Modify user's icon
	UpdateUserIcon(context.Context, *UpdateUserIconRequest) (*UpdateUserIconResponse, error)
	// Modify user's color theme
	UpdateUserColorTheme(context.Context, *UpdateUserColorThemeRequest) (*UpdateUserColorThemeResponse, error)
	// Modify user's name
	UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error)
	// Modify user's email
	UpdateUserEmail(context.Context, *UpdateUserEmailRequest) (*UpdateUserEmailResponse, error)
	// Modify user's main view
	UpdateUserMainView(context.Context, *UpdateUserMainViewRequest) (*UpdateUserMainViewResponse, error)
	// Reset user's password
	ResetUserPassword(context.Context, *ResetUserPasswordRequest) (*ResetUserPasswordResponse, error)
	// Modify user's locale
	UpdateUserLocale(context.Context, *UpdateUserLocaleRequest) (*UpdateUserLocaleResponse, error)
	// Modify user's app theme
	UpdateUserAppTheme(context.Context, *UpdateUserAppThemeRequest) (*UpdateUserAppThemeResponse, error)
	// Modify user's timezone
	UpdateUserTimezone(context.Context, *UpdateUserTimezoneRequest) (*UpdateUserTimezoneResponse, error)
	// Modify attributes
	UpdateUserAttributes(context.Context, *UpdateUserAttributesRequest) (*UpdateUserAttributesResponse, error)
	// Deletes a user
	DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error)
	// Reset member's password
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	// Create a view
	CreateView(context.Context, *CreateViewRequest) (*CreateViewResponse, error)
	// Get all the views
	GetViews(context.Context, *GetViewsRequest) (*GetViewsResponse, error)
	// Get the details of the current view
	GetCurrentView(context.Context, *GetCurrentViewRequest) (*GetCurrentViewResponse, error)
	// Get favorite views
	GetFavoriteViews(context.Context, *GetFavoriteViewsRequest) (*GetFavoriteViewsResponse, error)
	// Publish current view
	PublishView(context.Context, *PublishViewRequest) (*PublishViewResponse, error)
	// Add to favorites
	AddFavorite(context.Context, *AddFavoriteRequest) (*AddFavoriteResponse, error)
	// Remove from favorites
	RemoveFavorite(context.Context, *RemoveFavoriteRequest) (*RemoveFavoriteResponse, error)
	// Updates the view details
	UpdateView(context.Context, *UpdateViewRequest) (*UpdateViewResponse, error)
	// Updates the view's layout
	UpdateViewLayout(context.Context, *UpdateViewLayoutRequest) (*UpdateViewLayoutResponse, error)
	// Updates the view's widget
	UpdateViewWidget(context.Context, *UpdateViewWidgetRequest) (*UpdateViewWidgetResponse, error)
	// Deletes a view
	DeleteView(context.Context, *DeleteViewRequest) (*DeleteViewResponse, error)
	// Updates the side menu state
	UpdateSideMenuState(context.Context, *UpdateSideMenuStateRequest) (*UpdateSideMenuStateResponse, error)
	// Add as side menu favorite
	AddSideMenuFavorite(context.Context, *AddSideMenuFavoriteRequest) (*AddSideMenuFavoriteResponse, error)
	// Remove from side menu favorite
	RemoveSideMenuFavorite(context.Context, *RemoveSideMenuFavoriteRequest) (*RemoveSideMenuFavoriteResponse, error)
	// Create a cost group
	CreateCostGroup(context.Context, *CreateCostGroupRequest) (*CreateCostGroupResponse, error)
	// Get all the cost groups
	GetCostGroups(context.Context, *GetCostGroupsRequest) (*GetCostGroupsResponse, error)
	// Get the details of the cost group
	GetCostGroupDetails(context.Context, *GetCostGroupDetailsRequest) (*GetCostGroupDetailsResponse, error)
	// Update cost group's name
	UpdateCostGroupName(context.Context, *UpdateCostGroupNameRequest) (*UpdateCostGroupNameResponse, error)
	// Update cost group's description
	UpdateCostGroupDescription(context.Context, *UpdateCostGroupDescriptionRequest) (*UpdateCostGroupDescriptionResponse, error)
	// Update cost group's image
	UpdateCostGroupImage(context.Context, *UpdateCostGroupImageRequest) (*UpdateCostGroupImageResponse, error)
	// Update cost group's icon
	UpdateCostGroupIcon(context.Context, *UpdateCostGroupIconRequest) (*UpdateCostGroupIconResponse, error)
	// Update cost group's color theme
	UpdateCostGroupColorTheme(context.Context, *UpdateCostGroupColorThemeRequest) (*UpdateCostGroupColorThemeResponse, error)
	// Update cost group's combinations
	UpdateCostGroupCombinations(context.Context, *UpdateCostGroupCombinationsRequest) (*UpdateCostGroupCombinationsResponse, error)
	ResolveCostGroupCombinations(context.Context, *ResolveCostGroupCombinationsRequest) (*ResolveCostGroupCombinationsResponse, error)
	// Assign a member to a cost group
	AssignCostGroupMember(context.Context, *AssignCostGroupMemberRequest) (*AssignCostGroupMemberResponse, error)
	// Remove a member from a cost group
	RemoveCostGroupMember(context.Context, *RemoveCostGroupMemberRequest) (*RemoveCostGroupMemberResponse, error)
	// Deletes a cost group
	DeleteCostGroup(context.Context, *DeleteCostGroupRequest) (*DeleteCostGroupResponse, error)
	// Gets a CloudFormation launch URL for enabling the account access.
	GetAccountAccessTemplateUrl(context.Context, *GetAccountAccessTemplateUrlRequest) (*GetAccountAccessTemplateUrlResponse, error)
	// Lists the account access role(s) attached to accounts under caller.
	ListAccountAccess(*ListAccountAccessRequest, Cover_ListAccountAccessServer) error
	// Gets the current account role attached to the input target.
	GetAccountAccess(context.Context, *GetAccountAccessRequest) (*AccountAccess, error)
	// Starts validation of the account access stack deployment. If successful, the IAM role created from the CloudFormation stack will be registered to the target.
	CreateAccountAccess(context.Context, *CreateAccountAccessRequest) (*AccountAccess, error)
	// Starts an update to an existing account access CloudFormation stack for template changes, if any. Only call this API if the status of your account access is 'outdated'.
	UpdateAccountAccess(context.Context, *UpdateAccountAccessRequest) (*api.Operation, error)
	// Deletes the current account access role attached to this target account. This does not delete the CloudFormation deployment in your account.
	DeleteAccountAccess(context.Context, *DeleteAccountAccessRequest) (*DeleteAccountAccessResponse, error)
	// Registers an account
	RegisterAccount(context.Context, *RegisterAccountRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Lists assets for costgroup
	ListAssets(*ListAssetsRequest, Cover_ListAssetsServer) error
	// WORK-IN-PROGRESS: Assets summary for costgroup
	GetAssetsSummary(context.Context, *GetAssetsSummaryRequest) (*GetAssetsSummaryResponse, error)
	// WORK-IN-PROGRESS: Get usage and usage-based costs for the specified costgroup
	GetCostUsage(*GetCostUsageRequest, Cover_GetCostUsageServer) error
	// Gets the right sizing recommendation of all the accounts in the costgroup
	GetRightSizingRecommendation(context.Context, *GetRightSizingRecommendationRequest) (*GetRightSizingRecommendationResponse, error)
	// Modify resource type from right sizing recommendation
	ModifyResourceType(context.Context, *ModifyResourceTypeRequest) (*ModifyResourceTypeResponse, error)
	// Terminate a resource from right sizing recommendation
	TerminateResource(context.Context, *TerminateResourceRequest) (*TerminateResourceResponse, error)
	// Upload charge code
	UploadChargeCode(Cover_UploadChargeCodeServer) error
	// Assign payer to a linked account
	AssignPayer(context.Context, *AssignPayerRequest) (*AssignPayerResponse, error)
	// Get list of all payers
	GetPayers(context.Context, *GetPayersRequest) (*GetPayersResponse, error)
	// Get list of registered accounts
	GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
	// Get list of supported services
	GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error)
	// Get list of available regions
	GetRegions(context.Context, *GetRegionsRequest) (*GetRegionsResponse, error)
	// Get list of available tags
	GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error)
	// Lists the fees
	ListFees(*ListFeesRequest, Cover_ListFeesServer) error
	// Gets the fee details
	GetFeeDetails(context.Context, *GetFeeDetailsRequest) (*FeeDetails, error)
	// Create assignments for fee reallocation
	CreateFeeReallocation(*CreateFeeReallocationRequest, Cover_CreateFeeReallocationServer) error
	// Update fee details
	UpdateFeeDetails(context.Context, *UpdateFeeDetailsRequest) (*api.Operation, error)
	// Deletes fee details
	DeleteFeeDetails(context.Context, *DeleteFeeDetailsRequest) (*DeleteFeeDetailsResponse, error)
	mustEmbedUnimplementedCoverServer()
}

// UnimplementedCoverServer must be embedded to have forward compatible implementations.
type UnimplementedCoverServer struct {
}

func (UnimplementedCoverServer) OnboardOrg(context.Context, *OnboardOrgRequest) (*OnboardOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnboardOrg not implemented")
}
func (UnimplementedCoverServer) InviteMember(context.Context, *InviteMemberRequest) (*InviteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMember not implemented")
}
func (UnimplementedCoverServer) ActivateUser(context.Context, *ActivateUserRequest) (*ActivateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateUser not implemented")
}
func (UnimplementedCoverServer) CreateMember(context.Context, *CreateMemberRequest) (*CreateMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (UnimplementedCoverServer) GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedCoverServer) GetMemberDetails(context.Context, *GetMemberDetailsRequest) (*GetMemberDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberDetails not implemented")
}
func (UnimplementedCoverServer) GetMemberCostGroup(context.Context, *GetMemberCostGroupRequest) (*GetMemberCostGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberCostGroup not implemented")
}
func (UnimplementedCoverServer) UpdateMemberPermission(context.Context, *UpdateMemberPermissionRequest) (*UpdateMemberPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberPermission not implemented")
}
func (UnimplementedCoverServer) GetUserDetails(context.Context, *GetUserDetailsRequest) (*GetUserDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetails not implemented")
}
func (UnimplementedCoverServer) UpdateUserAvatar(context.Context, *UpdateUserAvatarRequest) (*UpdateUserAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAvatar not implemented")
}
func (UnimplementedCoverServer) UpdateUserIcon(context.Context, *UpdateUserIconRequest) (*UpdateUserIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserIcon not implemented")
}
func (UnimplementedCoverServer) UpdateUserColorTheme(context.Context, *UpdateUserColorThemeRequest) (*UpdateUserColorThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserColorTheme not implemented")
}
func (UnimplementedCoverServer) UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (UnimplementedCoverServer) UpdateUserEmail(context.Context, *UpdateUserEmailRequest) (*UpdateUserEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserEmail not implemented")
}
func (UnimplementedCoverServer) UpdateUserMainView(context.Context, *UpdateUserMainViewRequest) (*UpdateUserMainViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserMainView not implemented")
}
func (UnimplementedCoverServer) ResetUserPassword(context.Context, *ResetUserPasswordRequest) (*ResetUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserPassword not implemented")
}
func (UnimplementedCoverServer) UpdateUserLocale(context.Context, *UpdateUserLocaleRequest) (*UpdateUserLocaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLocale not implemented")
}
func (UnimplementedCoverServer) UpdateUserAppTheme(context.Context, *UpdateUserAppThemeRequest) (*UpdateUserAppThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAppTheme not implemented")
}
func (UnimplementedCoverServer) UpdateUserTimezone(context.Context, *UpdateUserTimezoneRequest) (*UpdateUserTimezoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserTimezone not implemented")
}
func (UnimplementedCoverServer) UpdateUserAttributes(context.Context, *UpdateUserAttributesRequest) (*UpdateUserAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAttributes not implemented")
}
func (UnimplementedCoverServer) DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedCoverServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedCoverServer) CreateView(context.Context, *CreateViewRequest) (*CreateViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateView not implemented")
}
func (UnimplementedCoverServer) GetViews(context.Context, *GetViewsRequest) (*GetViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViews not implemented")
}
func (UnimplementedCoverServer) GetCurrentView(context.Context, *GetCurrentViewRequest) (*GetCurrentViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentView not implemented")
}
func (UnimplementedCoverServer) GetFavoriteViews(context.Context, *GetFavoriteViewsRequest) (*GetFavoriteViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteViews not implemented")
}
func (UnimplementedCoverServer) PublishView(context.Context, *PublishViewRequest) (*PublishViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishView not implemented")
}
func (UnimplementedCoverServer) AddFavorite(context.Context, *AddFavoriteRequest) (*AddFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFavorite not implemented")
}
func (UnimplementedCoverServer) RemoveFavorite(context.Context, *RemoveFavoriteRequest) (*RemoveFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFavorite not implemented")
}
func (UnimplementedCoverServer) UpdateView(context.Context, *UpdateViewRequest) (*UpdateViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateView not implemented")
}
func (UnimplementedCoverServer) UpdateViewLayout(context.Context, *UpdateViewLayoutRequest) (*UpdateViewLayoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateViewLayout not implemented")
}
func (UnimplementedCoverServer) UpdateViewWidget(context.Context, *UpdateViewWidgetRequest) (*UpdateViewWidgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateViewWidget not implemented")
}
func (UnimplementedCoverServer) DeleteView(context.Context, *DeleteViewRequest) (*DeleteViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteView not implemented")
}
func (UnimplementedCoverServer) UpdateSideMenuState(context.Context, *UpdateSideMenuStateRequest) (*UpdateSideMenuStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSideMenuState not implemented")
}
func (UnimplementedCoverServer) AddSideMenuFavorite(context.Context, *AddSideMenuFavoriteRequest) (*AddSideMenuFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSideMenuFavorite not implemented")
}
func (UnimplementedCoverServer) RemoveSideMenuFavorite(context.Context, *RemoveSideMenuFavoriteRequest) (*RemoveSideMenuFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSideMenuFavorite not implemented")
}
func (UnimplementedCoverServer) CreateCostGroup(context.Context, *CreateCostGroupRequest) (*CreateCostGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCostGroup not implemented")
}
func (UnimplementedCoverServer) GetCostGroups(context.Context, *GetCostGroupsRequest) (*GetCostGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostGroups not implemented")
}
func (UnimplementedCoverServer) GetCostGroupDetails(context.Context, *GetCostGroupDetailsRequest) (*GetCostGroupDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostGroupDetails not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupName(context.Context, *UpdateCostGroupNameRequest) (*UpdateCostGroupNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupName not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupDescription(context.Context, *UpdateCostGroupDescriptionRequest) (*UpdateCostGroupDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupDescription not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupImage(context.Context, *UpdateCostGroupImageRequest) (*UpdateCostGroupImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupImage not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupIcon(context.Context, *UpdateCostGroupIconRequest) (*UpdateCostGroupIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupIcon not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupColorTheme(context.Context, *UpdateCostGroupColorThemeRequest) (*UpdateCostGroupColorThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupColorTheme not implemented")
}
func (UnimplementedCoverServer) UpdateCostGroupCombinations(context.Context, *UpdateCostGroupCombinationsRequest) (*UpdateCostGroupCombinationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCostGroupCombinations not implemented")
}
func (UnimplementedCoverServer) ResolveCostGroupCombinations(context.Context, *ResolveCostGroupCombinationsRequest) (*ResolveCostGroupCombinationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveCostGroupCombinations not implemented")
}
func (UnimplementedCoverServer) AssignCostGroupMember(context.Context, *AssignCostGroupMemberRequest) (*AssignCostGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignCostGroupMember not implemented")
}
func (UnimplementedCoverServer) RemoveCostGroupMember(context.Context, *RemoveCostGroupMemberRequest) (*RemoveCostGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCostGroupMember not implemented")
}
func (UnimplementedCoverServer) DeleteCostGroup(context.Context, *DeleteCostGroupRequest) (*DeleteCostGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCostGroup not implemented")
}
func (UnimplementedCoverServer) GetAccountAccessTemplateUrl(context.Context, *GetAccountAccessTemplateUrlRequest) (*GetAccountAccessTemplateUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountAccessTemplateUrl not implemented")
}
func (UnimplementedCoverServer) ListAccountAccess(*ListAccountAccessRequest, Cover_ListAccountAccessServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAccountAccess not implemented")
}
func (UnimplementedCoverServer) GetAccountAccess(context.Context, *GetAccountAccessRequest) (*AccountAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountAccess not implemented")
}
func (UnimplementedCoverServer) CreateAccountAccess(context.Context, *CreateAccountAccessRequest) (*AccountAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountAccess not implemented")
}
func (UnimplementedCoverServer) UpdateAccountAccess(context.Context, *UpdateAccountAccessRequest) (*api.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountAccess not implemented")
}
func (UnimplementedCoverServer) DeleteAccountAccess(context.Context, *DeleteAccountAccessRequest) (*DeleteAccountAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountAccess not implemented")
}
func (UnimplementedCoverServer) RegisterAccount(context.Context, *RegisterAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccount not implemented")
}
func (UnimplementedCoverServer) ListAssets(*ListAssetsRequest, Cover_ListAssetsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedCoverServer) GetAssetsSummary(context.Context, *GetAssetsSummaryRequest) (*GetAssetsSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetsSummary not implemented")
}
func (UnimplementedCoverServer) GetCostUsage(*GetCostUsageRequest, Cover_GetCostUsageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCostUsage not implemented")
}
func (UnimplementedCoverServer) GetRightSizingRecommendation(context.Context, *GetRightSizingRecommendationRequest) (*GetRightSizingRecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRightSizingRecommendation not implemented")
}
func (UnimplementedCoverServer) ModifyResourceType(context.Context, *ModifyResourceTypeRequest) (*ModifyResourceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyResourceType not implemented")
}
func (UnimplementedCoverServer) TerminateResource(context.Context, *TerminateResourceRequest) (*TerminateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateResource not implemented")
}
func (UnimplementedCoverServer) UploadChargeCode(Cover_UploadChargeCodeServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadChargeCode not implemented")
}
func (UnimplementedCoverServer) AssignPayer(context.Context, *AssignPayerRequest) (*AssignPayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPayer not implemented")
}
func (UnimplementedCoverServer) GetPayers(context.Context, *GetPayersRequest) (*GetPayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayers not implemented")
}
func (UnimplementedCoverServer) GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedCoverServer) GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedCoverServer) GetRegions(context.Context, *GetRegionsRequest) (*GetRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegions not implemented")
}
func (UnimplementedCoverServer) GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedCoverServer) ListFees(*ListFeesRequest, Cover_ListFeesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFees not implemented")
}
func (UnimplementedCoverServer) GetFeeDetails(context.Context, *GetFeeDetailsRequest) (*FeeDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeDetails not implemented")
}
func (UnimplementedCoverServer) CreateFeeReallocation(*CreateFeeReallocationRequest, Cover_CreateFeeReallocationServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateFeeReallocation not implemented")
}
func (UnimplementedCoverServer) UpdateFeeDetails(context.Context, *UpdateFeeDetailsRequest) (*api.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeeDetails not implemented")
}
func (UnimplementedCoverServer) DeleteFeeDetails(context.Context, *DeleteFeeDetailsRequest) (*DeleteFeeDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeeDetails not implemented")
}
func (UnimplementedCoverServer) mustEmbedUnimplementedCoverServer() {}

// UnsafeCoverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoverServer will
// result in compilation errors.
type UnsafeCoverServer interface {
	mustEmbedUnimplementedCoverServer()
}

func RegisterCoverServer(s grpc.ServiceRegistrar, srv CoverServer) {
	s.RegisterService(&Cover_ServiceDesc, srv)
}

func _Cover_OnboardOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).OnboardOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_OnboardOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).OnboardOrg(ctx, req.(*OnboardOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_InviteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).InviteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_InviteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).InviteMember(ctx, req.(*InviteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ActivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ActivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ActivateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ActivateUser(ctx, req.(*ActivateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateMember(ctx, req.(*CreateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetMemberDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetMemberDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetMemberDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetMemberDetails(ctx, req.(*GetMemberDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetMemberCostGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberCostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetMemberCostGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetMemberCostGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetMemberCostGroup(ctx, req.(*GetMemberCostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateMemberPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateMemberPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateMemberPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateMemberPermission(ctx, req.(*UpdateMemberPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetUserDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetUserDetails(ctx, req.(*GetUserDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserAvatar(ctx, req.(*UpdateUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserIcon(ctx, req.(*UpdateUserIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserColorTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserColorThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserColorTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserColorTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserColorTheme(ctx, req.(*UpdateUserColorThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserName(ctx, req.(*UpdateUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserEmail(ctx, req.(*UpdateUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserMainView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserMainViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserMainView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserMainView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserMainView(ctx, req.(*UpdateUserMainViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ResetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ResetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ResetUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ResetUserPassword(ctx, req.(*ResetUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserLocale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLocaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserLocale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserLocale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserLocale(ctx, req.(*UpdateUserLocaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserAppTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAppThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserAppTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserAppTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserAppTheme(ctx, req.(*UpdateUserAppThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserTimezone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserTimezone(ctx, req.(*UpdateUserTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateUserAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateUserAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateUserAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateUserAttributes(ctx, req.(*UpdateUserAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateView(ctx, req.(*CreateViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetViews(ctx, req.(*GetViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetCurrentView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetCurrentView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetCurrentView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetCurrentView(ctx, req.(*GetCurrentViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetFavoriteViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetFavoriteViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetFavoriteViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetFavoriteViews(ctx, req.(*GetFavoriteViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_PublishView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).PublishView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_PublishView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).PublishView(ctx, req.(*PublishViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_AddFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).AddFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_AddFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).AddFavorite(ctx, req.(*AddFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_RemoveFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).RemoveFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_RemoveFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).RemoveFavorite(ctx, req.(*RemoveFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateView(ctx, req.(*UpdateViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateViewLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateViewLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateViewLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateViewLayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateViewLayout(ctx, req.(*UpdateViewLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateViewWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateViewWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateViewWidget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateViewWidget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateViewWidget(ctx, req.(*UpdateViewWidgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteView(ctx, req.(*DeleteViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateSideMenuState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSideMenuStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateSideMenuState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateSideMenuState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateSideMenuState(ctx, req.(*UpdateSideMenuStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_AddSideMenuFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSideMenuFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).AddSideMenuFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_AddSideMenuFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).AddSideMenuFavorite(ctx, req.(*AddSideMenuFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_RemoveSideMenuFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSideMenuFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).RemoveSideMenuFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_RemoveSideMenuFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).RemoveSideMenuFavorite(ctx, req.(*RemoveSideMenuFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateCostGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateCostGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateCostGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateCostGroup(ctx, req.(*CreateCostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetCostGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetCostGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetCostGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetCostGroups(ctx, req.(*GetCostGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetCostGroupDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostGroupDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetCostGroupDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetCostGroupDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetCostGroupDetails(ctx, req.(*GetCostGroupDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateCostGroupName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupName(ctx, req.(*UpdateCostGroupNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateCostGroupDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupDescription(ctx, req.(*UpdateCostGroupDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateCostGroupImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupImage(ctx, req.(*UpdateCostGroupImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateCostGroupIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupIcon(ctx, req.(*UpdateCostGroupIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupColorTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupColorThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupColorTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateCostGroupColorTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupColorTheme(ctx, req.(*UpdateCostGroupColorThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateCostGroupCombinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostGroupCombinationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateCostGroupCombinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateCostGroupCombinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateCostGroupCombinations(ctx, req.(*UpdateCostGroupCombinationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ResolveCostGroupCombinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveCostGroupCombinationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ResolveCostGroupCombinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ResolveCostGroupCombinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ResolveCostGroupCombinations(ctx, req.(*ResolveCostGroupCombinationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_AssignCostGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignCostGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).AssignCostGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_AssignCostGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).AssignCostGroupMember(ctx, req.(*AssignCostGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_RemoveCostGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCostGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).RemoveCostGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_RemoveCostGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).RemoveCostGroupMember(ctx, req.(*RemoveCostGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteCostGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteCostGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteCostGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteCostGroup(ctx, req.(*DeleteCostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetAccountAccessTemplateUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountAccessTemplateUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetAccountAccessTemplateUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetAccountAccessTemplateUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetAccountAccessTemplateUrl(ctx, req.(*GetAccountAccessTemplateUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListAccountAccess_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAccountAccessRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListAccountAccess(m, &coverListAccountAccessServer{stream})
}

type Cover_ListAccountAccessServer interface {
	Send(*AccountAccess) error
	grpc.ServerStream
}

type coverListAccountAccessServer struct {
	grpc.ServerStream
}

func (x *coverListAccountAccessServer) Send(m *AccountAccess) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_GetAccountAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetAccountAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetAccountAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetAccountAccess(ctx, req.(*GetAccountAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateAccountAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).CreateAccountAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_CreateAccountAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).CreateAccountAccess(ctx, req.(*CreateAccountAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UpdateAccountAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateAccountAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateAccountAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateAccountAccess(ctx, req.(*UpdateAccountAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteAccountAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteAccountAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteAccountAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteAccountAccess(ctx, req.(*DeleteAccountAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).RegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_RegisterAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).RegisterAccount(ctx, req.(*RegisterAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListAssets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAssetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListAssets(m, &coverListAssetsServer{stream})
}

type Cover_ListAssetsServer interface {
	Send(*Resource) error
	grpc.ServerStream
}

type coverListAssetsServer struct {
	grpc.ServerStream
}

func (x *coverListAssetsServer) Send(m *Resource) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_GetAssetsSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetsSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetAssetsSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetAssetsSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetAssetsSummary(ctx, req.(*GetAssetsSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetCostUsage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCostUsageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).GetCostUsage(m, &coverGetCostUsageServer{stream})
}

type Cover_GetCostUsageServer interface {
	Send(*CostItem) error
	grpc.ServerStream
}

type coverGetCostUsageServer struct {
	grpc.ServerStream
}

func (x *coverGetCostUsageServer) Send(m *CostItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_GetRightSizingRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRightSizingRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetRightSizingRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetRightSizingRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetRightSizingRecommendation(ctx, req.(*GetRightSizingRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ModifyResourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyResourceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).ModifyResourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_ModifyResourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).ModifyResourceType(ctx, req.(*ModifyResourceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_TerminateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).TerminateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_TerminateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).TerminateResource(ctx, req.(*TerminateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_UploadChargeCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoverServer).UploadChargeCode(&coverUploadChargeCodeServer{stream})
}

type Cover_UploadChargeCodeServer interface {
	SendAndClose(*UploadChargeCodeResponse) error
	Recv() (*UploadChargeCodeRequest, error)
	grpc.ServerStream
}

type coverUploadChargeCodeServer struct {
	grpc.ServerStream
}

func (x *coverUploadChargeCodeServer) SendAndClose(m *UploadChargeCodeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coverUploadChargeCodeServer) Recv() (*UploadChargeCodeRequest, error) {
	m := new(UploadChargeCodeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cover_AssignPayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).AssignPayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_AssignPayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).AssignPayer(ctx, req.(*AssignPayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetPayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetPayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetPayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetPayers(ctx, req.(*GetPayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetServices(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetRegions(ctx, req.(*GetRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetTags(ctx, req.(*GetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_ListFees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListFeesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).ListFees(m, &coverListFeesServer{stream})
}

type Cover_ListFeesServer interface {
	Send(*FeeDetails) error
	grpc.ServerStream
}

type coverListFeesServer struct {
	grpc.ServerStream
}

func (x *coverListFeesServer) Send(m *FeeDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_GetFeeDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeeDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).GetFeeDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_GetFeeDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).GetFeeDetails(ctx, req.(*GetFeeDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_CreateFeeReallocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateFeeReallocationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoverServer).CreateFeeReallocation(m, &coverCreateFeeReallocationServer{stream})
}

type Cover_CreateFeeReallocationServer interface {
	Send(*FeeDetails) error
	grpc.ServerStream
}

type coverCreateFeeReallocationServer struct {
	grpc.ServerStream
}

func (x *coverCreateFeeReallocationServer) Send(m *FeeDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _Cover_UpdateFeeDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeeDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).UpdateFeeDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_UpdateFeeDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).UpdateFeeDetails(ctx, req.(*UpdateFeeDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cover_DeleteFeeDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeeDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverServer).DeleteFeeDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cover_DeleteFeeDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverServer).DeleteFeeDetails(ctx, req.(*DeleteFeeDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cover_ServiceDesc is the grpc.ServiceDesc for Cover service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cover_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.cover.v1.Cover",
	HandlerType: (*CoverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnboardOrg",
			Handler:    _Cover_OnboardOrg_Handler,
		},
		{
			MethodName: "InviteMember",
			Handler:    _Cover_InviteMember_Handler,
		},
		{
			MethodName: "ActivateUser",
			Handler:    _Cover_ActivateUser_Handler,
		},
		{
			MethodName: "CreateMember",
			Handler:    _Cover_CreateMember_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _Cover_GetMembers_Handler,
		},
		{
			MethodName: "GetMemberDetails",
			Handler:    _Cover_GetMemberDetails_Handler,
		},
		{
			MethodName: "GetMemberCostGroup",
			Handler:    _Cover_GetMemberCostGroup_Handler,
		},
		{
			MethodName: "UpdateMemberPermission",
			Handler:    _Cover_UpdateMemberPermission_Handler,
		},
		{
			MethodName: "GetUserDetails",
			Handler:    _Cover_GetUserDetails_Handler,
		},
		{
			MethodName: "UpdateUserAvatar",
			Handler:    _Cover_UpdateUserAvatar_Handler,
		},
		{
			MethodName: "UpdateUserIcon",
			Handler:    _Cover_UpdateUserIcon_Handler,
		},
		{
			MethodName: "UpdateUserColorTheme",
			Handler:    _Cover_UpdateUserColorTheme_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _Cover_UpdateUserName_Handler,
		},
		{
			MethodName: "UpdateUserEmail",
			Handler:    _Cover_UpdateUserEmail_Handler,
		},
		{
			MethodName: "UpdateUserMainView",
			Handler:    _Cover_UpdateUserMainView_Handler,
		},
		{
			MethodName: "ResetUserPassword",
			Handler:    _Cover_ResetUserPassword_Handler,
		},
		{
			MethodName: "UpdateUserLocale",
			Handler:    _Cover_UpdateUserLocale_Handler,
		},
		{
			MethodName: "UpdateUserAppTheme",
			Handler:    _Cover_UpdateUserAppTheme_Handler,
		},
		{
			MethodName: "UpdateUserTimezone",
			Handler:    _Cover_UpdateUserTimezone_Handler,
		},
		{
			MethodName: "UpdateUserAttributes",
			Handler:    _Cover_UpdateUserAttributes_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _Cover_DeleteMember_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Cover_ResetPassword_Handler,
		},
		{
			MethodName: "CreateView",
			Handler:    _Cover_CreateView_Handler,
		},
		{
			MethodName: "GetViews",
			Handler:    _Cover_GetViews_Handler,
		},
		{
			MethodName: "GetCurrentView",
			Handler:    _Cover_GetCurrentView_Handler,
		},
		{
			MethodName: "GetFavoriteViews",
			Handler:    _Cover_GetFavoriteViews_Handler,
		},
		{
			MethodName: "PublishView",
			Handler:    _Cover_PublishView_Handler,
		},
		{
			MethodName: "AddFavorite",
			Handler:    _Cover_AddFavorite_Handler,
		},
		{
			MethodName: "RemoveFavorite",
			Handler:    _Cover_RemoveFavorite_Handler,
		},
		{
			MethodName: "UpdateView",
			Handler:    _Cover_UpdateView_Handler,
		},
		{
			MethodName: "UpdateViewLayout",
			Handler:    _Cover_UpdateViewLayout_Handler,
		},
		{
			MethodName: "UpdateViewWidget",
			Handler:    _Cover_UpdateViewWidget_Handler,
		},
		{
			MethodName: "DeleteView",
			Handler:    _Cover_DeleteView_Handler,
		},
		{
			MethodName: "UpdateSideMenuState",
			Handler:    _Cover_UpdateSideMenuState_Handler,
		},
		{
			MethodName: "AddSideMenuFavorite",
			Handler:    _Cover_AddSideMenuFavorite_Handler,
		},
		{
			MethodName: "RemoveSideMenuFavorite",
			Handler:    _Cover_RemoveSideMenuFavorite_Handler,
		},
		{
			MethodName: "CreateCostGroup",
			Handler:    _Cover_CreateCostGroup_Handler,
		},
		{
			MethodName: "GetCostGroups",
			Handler:    _Cover_GetCostGroups_Handler,
		},
		{
			MethodName: "GetCostGroupDetails",
			Handler:    _Cover_GetCostGroupDetails_Handler,
		},
		{
			MethodName: "UpdateCostGroupName",
			Handler:    _Cover_UpdateCostGroupName_Handler,
		},
		{
			MethodName: "UpdateCostGroupDescription",
			Handler:    _Cover_UpdateCostGroupDescription_Handler,
		},
		{
			MethodName: "UpdateCostGroupImage",
			Handler:    _Cover_UpdateCostGroupImage_Handler,
		},
		{
			MethodName: "UpdateCostGroupIcon",
			Handler:    _Cover_UpdateCostGroupIcon_Handler,
		},
		{
			MethodName: "UpdateCostGroupColorTheme",
			Handler:    _Cover_UpdateCostGroupColorTheme_Handler,
		},
		{
			MethodName: "UpdateCostGroupCombinations",
			Handler:    _Cover_UpdateCostGroupCombinations_Handler,
		},
		{
			MethodName: "ResolveCostGroupCombinations",
			Handler:    _Cover_ResolveCostGroupCombinations_Handler,
		},
		{
			MethodName: "AssignCostGroupMember",
			Handler:    _Cover_AssignCostGroupMember_Handler,
		},
		{
			MethodName: "RemoveCostGroupMember",
			Handler:    _Cover_RemoveCostGroupMember_Handler,
		},
		{
			MethodName: "DeleteCostGroup",
			Handler:    _Cover_DeleteCostGroup_Handler,
		},
		{
			MethodName: "GetAccountAccessTemplateUrl",
			Handler:    _Cover_GetAccountAccessTemplateUrl_Handler,
		},
		{
			MethodName: "GetAccountAccess",
			Handler:    _Cover_GetAccountAccess_Handler,
		},
		{
			MethodName: "CreateAccountAccess",
			Handler:    _Cover_CreateAccountAccess_Handler,
		},
		{
			MethodName: "UpdateAccountAccess",
			Handler:    _Cover_UpdateAccountAccess_Handler,
		},
		{
			MethodName: "DeleteAccountAccess",
			Handler:    _Cover_DeleteAccountAccess_Handler,
		},
		{
			MethodName: "RegisterAccount",
			Handler:    _Cover_RegisterAccount_Handler,
		},
		{
			MethodName: "GetAssetsSummary",
			Handler:    _Cover_GetAssetsSummary_Handler,
		},
		{
			MethodName: "GetRightSizingRecommendation",
			Handler:    _Cover_GetRightSizingRecommendation_Handler,
		},
		{
			MethodName: "ModifyResourceType",
			Handler:    _Cover_ModifyResourceType_Handler,
		},
		{
			MethodName: "TerminateResource",
			Handler:    _Cover_TerminateResource_Handler,
		},
		{
			MethodName: "AssignPayer",
			Handler:    _Cover_AssignPayer_Handler,
		},
		{
			MethodName: "GetPayers",
			Handler:    _Cover_GetPayers_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _Cover_GetAccounts_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _Cover_GetServices_Handler,
		},
		{
			MethodName: "GetRegions",
			Handler:    _Cover_GetRegions_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _Cover_GetTags_Handler,
		},
		{
			MethodName: "GetFeeDetails",
			Handler:    _Cover_GetFeeDetails_Handler,
		},
		{
			MethodName: "UpdateFeeDetails",
			Handler:    _Cover_UpdateFeeDetails_Handler,
		},
		{
			MethodName: "DeleteFeeDetails",
			Handler:    _Cover_DeleteFeeDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAccountAccess",
			Handler:       _Cover_ListAccountAccess_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAssets",
			Handler:       _Cover_ListAssets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCostUsage",
			Handler:       _Cover_GetCostUsage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadChargeCode",
			Handler:       _Cover_UploadChargeCode_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListFees",
			Handler:       _Cover_ListFees_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateFeeReallocation",
			Handler:       _Cover_CreateFeeReallocation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cover/v1/cover.proto",
}
