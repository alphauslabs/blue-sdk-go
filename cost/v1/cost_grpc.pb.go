// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: cost/v1/cost.proto

package cost

import (
	context "context"
	api "github.com/alphauslabs/blue-sdk-go/api"
	ripple "github.com/alphauslabs/blue-sdk-go/api/ripple"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CostClient is the client API for Cost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CostClient interface {
	// Lists vendor payer accounts. For AWS, these are management accounts (formerly known as master or payer accounts); for Azure, these are subscriptions, for GCP, these are projects.
	ListPayerAccounts(ctx context.Context, in *ListPayerAccountsRequest, opts ...grpc.CallOption) (Cost_ListPayerAccountsClient, error)
	// Gets a vendor payer account. This API includes all of the account's metadata. See https://alphauslabs.github.io/blueapi/ for the list of supported attributes. For AWS, this means a management account (formerly known as master or payer account); for Azure, this means a subscription, for GCP, this means a project.
	GetPayerAccount(ctx context.Context, in *GetPayerAccountRequest, opts ...grpc.CallOption) (*ripple.Payer, error)
	// Gets a payer account's import history, which is a list of timestamps our system tracks when the account's data are imported to our system, which in turn, triggers processing. At the moment, this only supports AWS (CUR files). You can also set {id} to `*` to return all payers' information under the organization.
	GetPayerAccountImportHistory(ctx context.Context, in *GetPayerAccountImportHistoryRequest, opts ...grpc.CallOption) (Cost_GetPayerAccountImportHistoryClient, error)
	// Registers a vendor payer account. This is now deprecated for AWS payer accounts. To register an AWS payer account, check out the 'CreateDefaultCostAccess' API.
	CreatePayerAccount(ctx context.Context, in *CreatePayerAccountRequest, opts ...grpc.CallOption) (*api.Account, error)
	// Deletes a vendor payer account.
	DeletePayerAccount(ctx context.Context, in *DeletePayerAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all vendor accounts.
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (Cost_ListAccountsClient, error)
	// Gets a vendor account. This API includes all of the account's metadata. See https://alphauslabs.github.io/blueapi/ for the list of supported attributes.
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*api.Account, error)
	// Registers a vendor account.
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*api.Account, error)
	// WORK-IN-PROGRESS: Deletes a vendor account.
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists the vendor calculator's queued accounts for calculation. If result is non-empty, it means calculation is still in progress for the returned accounts. Only available in Ripple.
	ListCalculatorRunningAccounts(ctx context.Context, in *ListCalculatorRunningAccountsRequest, opts ...grpc.CallOption) (Cost_ListCalculatorRunningAccountsClient, error)
	// WORK-IN-PROGRESS: Gets the vendor cost calculator's current configuration.
	GetCalculatorConfig(ctx context.Context, in *GetCalculatorConfigRequest, opts ...grpc.CallOption) (*GetCalculatorConfigResponse, error)
	// Initiates an ondemand import of all registered CUR files. See [https://help.alphaus.cloud/en/articles/3612555-ripple-aws-things-you-need-to-prepare-before-starting] for more information.
	ImportCurFiles(ctx context.Context, in *ImportCurFilesRequest, opts ...grpc.CallOption) (*api.Operation, error)
	// Triggers monthly calculations for costs and invoices at either organization or billing group level. For the AWS calculator, aggregation is done at daily and monthly level. Also, all occurrences of the character `|` (pipe) in the CUR descriptions and tag key/values are replaced with the `/` (forward-slash) character. This is due to the `|` character having a special designation in the data processing workflows.
	CalculateCosts(ctx context.Context, in *CalculateCostsRequest, opts ...grpc.CallOption) (*api.Operation, error)
	// Lists vendor costs calculations history and statuses.
	ListCalculationsHistory(ctx context.Context, in *ListCalculationsHistoryRequest, opts ...grpc.CallOption) (*ListCalculationsHistoryResponse, error)
	// WORK-IN-PROGRESS: Lists the schedules of your monthly calculations. At the moment, only one schedule is allowed per account. Only available in Ripple.
	ListCalculationsSchedules(ctx context.Context, in *ListCalculationsSchedulesRequest, opts ...grpc.CallOption) (*ListCalculationsSchedulesResponse, error)
	// WORK-IN-PROGRESS: Creates a schedule to trigger your monthly calculations.  Only available in Ripple.
	CreateCalculationsSchedule(ctx context.Context, in *CreateCalculationsScheduleRequest, opts ...grpc.CallOption) (*CalculationsSchedule, error)
	// WORK-IN-PROGRESS: Deletes the schedule of your monthly calculations. Only available in Ripple.
	DeleteCalculationsSchedule(ctx context.Context, in *DeleteCalculationsScheduleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Reads the available cost attributes of an organization (Ripple) or billing group (Wave). Similar to the `ReadCosts` API but without the aggregated usages and costs. At the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadCostAttributes(ctx context.Context, in *ReadCostAttributesRequest, opts ...grpc.CallOption) (Cost_ReadCostAttributesClient, error)
	// Reads the usage-based cost details of an organization (Ripple) or billing group (Wave). At the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadCosts(ctx context.Context, in *ReadCostsRequest, opts ...grpc.CallOption) (Cost_ReadCostsClient, error)
	// Reads the non-usage-based details of an organization (Ripple) or billing group (Wave). This API covers non-usage-based adjustments, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. At the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadAdjustments(ctx context.Context, in *ReadAdjustmentsRequest, opts ...grpc.CallOption) (Cost_ReadAdjustmentsClient, error)
	// Reads the usage-based tag costs of a billing group. At the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadTagCosts(ctx context.Context, in *ReadTagCostsRequest, opts ...grpc.CallOption) (Cost_ReadTagCostsClient, error)
	// Reads the usage-based non tag costs of a billing group. At the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadNonTagCosts(ctx context.Context, in *ReadNonTagCostsRequest, opts ...grpc.CallOption) (Cost_ReadNonTagCostsClient, error)
	// Fetches cost forecasts for the specified billing group. Includes historical cost (up to previous month) and forecasted cost (up to three months for now).
	GetForecasts(ctx context.Context, in *GetForecastsRequest, opts ...grpc.CallOption) (*GetForecastsResponse, error)
	// Fetches monthly accumulated costs vs forecasted cost vs budget for the id.
	GetMonthlyCostForecast(ctx context.Context, in *GetMonthlyCostForecastRequest, opts ...grpc.CallOption) (*GetMonthlyCostForecastResponse, error)
	// Fetches previous month cost vs current month forecast vs current accumulated cost per category for id.
	GetMonthOnMonthCostForecast(ctx context.Context, in *GetMonthOnMonthCostForecastRequest, opts ...grpc.CallOption) (*GetMonthOnMonthCostForecastResponse, error)
	// Fetches current month daily forecast vs current accumulated daily cost for id.
	GetMonthToDateCostForecast(ctx context.Context, in *GetMonthToDateCostForecastRequest, opts ...grpc.CallOption) (*GetMonthToDateCostForecastResponse, error)
	// Fetches monthly budget for the account/acctgroup id.
	GetAccountBudget(ctx context.Context, in *GetAccountBudgetRequest, opts ...grpc.CallOption) (*GetAccountBudgetResponse, error)
	// Creates monthly budget for the account/acctgroup id.
	CreateAccountBudget(ctx context.Context, in *CreateAccountBudgetRequest, opts ...grpc.CallOption) (*CreateAccountBudgetResponse, error)
	// Updates monthly budget for the account/acctgroup id.
	UpdateAccountBudget(ctx context.Context, in *UpdateAccountBudgetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Removes monthly budget for the account/acctgroup id from database.
	DeleteAccountBudget(ctx context.Context, in *DeleteAccountBudgetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Get cost opmtimization recommendations for an organization (or MSP).
	GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (*GetRecommendationsResponse, error)
	// Get cost reduction details for an organization (or MSP).
	GetCostReduction(ctx context.Context, in *GetCostReductionRequest, opts ...grpc.CallOption) (*GetCostReductionResponse, error)
	// WORK-IN-PROGRESS: Get the utilization details for an organization (or MSP).
	GetUtilization(ctx context.Context, in *GetUtilizationRequest, opts ...grpc.CallOption) (*GetUtilizationResponse, error)
	// WORK-IN-PROGRESS: Get coverage options details for an organization (or MSP).
	GetCoverageOptions(ctx context.Context, in *GetCoverageOptionsRequest, opts ...grpc.CallOption) (*GetCoverageOptionsResponse, error)
	// WORK-IN-PROGRESS: Get ondemand cost details for an organization (or MSP).
	GetCoverageOndemand(ctx context.Context, in *GetCoverageOndemandRequest, opts ...grpc.CallOption) (*GetCoverageOndemandResponse, error)
	// WORK-IN-PROGRESS: Get the breakeven point details for the RI or SP.
	GetBreakevenPoint(ctx context.Context, in *GetBreakevenPointRequest, opts ...grpc.CallOption) (*GetBreakevenPointResponse, error)
}

type costClient struct {
	cc grpc.ClientConnInterface
}

func NewCostClient(cc grpc.ClientConnInterface) CostClient {
	return &costClient{cc}
}

func (c *costClient) ListPayerAccounts(ctx context.Context, in *ListPayerAccountsRequest, opts ...grpc.CallOption) (Cost_ListPayerAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[0], "/blueapi.cost.v1.Cost/ListPayerAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &costListPayerAccountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ListPayerAccountsClient interface {
	Recv() (*api.Account, error)
	grpc.ClientStream
}

type costListPayerAccountsClient struct {
	grpc.ClientStream
}

func (x *costListPayerAccountsClient) Recv() (*api.Account, error) {
	m := new(api.Account)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) GetPayerAccount(ctx context.Context, in *GetPayerAccountRequest, opts ...grpc.CallOption) (*ripple.Payer, error) {
	out := new(ripple.Payer)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetPayerAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetPayerAccountImportHistory(ctx context.Context, in *GetPayerAccountImportHistoryRequest, opts ...grpc.CallOption) (Cost_GetPayerAccountImportHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[1], "/blueapi.cost.v1.Cost/GetPayerAccountImportHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &costGetPayerAccountImportHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_GetPayerAccountImportHistoryClient interface {
	Recv() (*GetPayerAccountImportHistoryResponse, error)
	grpc.ClientStream
}

type costGetPayerAccountImportHistoryClient struct {
	grpc.ClientStream
}

func (x *costGetPayerAccountImportHistoryClient) Recv() (*GetPayerAccountImportHistoryResponse, error) {
	m := new(GetPayerAccountImportHistoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) CreatePayerAccount(ctx context.Context, in *CreatePayerAccountRequest, opts ...grpc.CallOption) (*api.Account, error) {
	out := new(api.Account)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/CreatePayerAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) DeletePayerAccount(ctx context.Context, in *DeletePayerAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/DeletePayerAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (Cost_ListAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[2], "/blueapi.cost.v1.Cost/ListAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &costListAccountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ListAccountsClient interface {
	Recv() (*api.Account, error)
	grpc.ClientStream
}

type costListAccountsClient struct {
	grpc.ClientStream
}

func (x *costListAccountsClient) Recv() (*api.Account, error) {
	m := new(api.Account)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*api.Account, error) {
	out := new(api.Account)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*api.Account, error) {
	out := new(api.Account)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) ListCalculatorRunningAccounts(ctx context.Context, in *ListCalculatorRunningAccountsRequest, opts ...grpc.CallOption) (Cost_ListCalculatorRunningAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[3], "/blueapi.cost.v1.Cost/ListCalculatorRunningAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &costListCalculatorRunningAccountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ListCalculatorRunningAccountsClient interface {
	Recv() (*ListCalculatorRunningAccountsResponse, error)
	grpc.ClientStream
}

type costListCalculatorRunningAccountsClient struct {
	grpc.ClientStream
}

func (x *costListCalculatorRunningAccountsClient) Recv() (*ListCalculatorRunningAccountsResponse, error) {
	m := new(ListCalculatorRunningAccountsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) GetCalculatorConfig(ctx context.Context, in *GetCalculatorConfigRequest, opts ...grpc.CallOption) (*GetCalculatorConfigResponse, error) {
	out := new(GetCalculatorConfigResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetCalculatorConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) ImportCurFiles(ctx context.Context, in *ImportCurFilesRequest, opts ...grpc.CallOption) (*api.Operation, error) {
	out := new(api.Operation)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/ImportCurFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) CalculateCosts(ctx context.Context, in *CalculateCostsRequest, opts ...grpc.CallOption) (*api.Operation, error) {
	out := new(api.Operation)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/CalculateCosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) ListCalculationsHistory(ctx context.Context, in *ListCalculationsHistoryRequest, opts ...grpc.CallOption) (*ListCalculationsHistoryResponse, error) {
	out := new(ListCalculationsHistoryResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/ListCalculationsHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) ListCalculationsSchedules(ctx context.Context, in *ListCalculationsSchedulesRequest, opts ...grpc.CallOption) (*ListCalculationsSchedulesResponse, error) {
	out := new(ListCalculationsSchedulesResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/ListCalculationsSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) CreateCalculationsSchedule(ctx context.Context, in *CreateCalculationsScheduleRequest, opts ...grpc.CallOption) (*CalculationsSchedule, error) {
	out := new(CalculationsSchedule)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/CreateCalculationsSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) DeleteCalculationsSchedule(ctx context.Context, in *DeleteCalculationsScheduleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/DeleteCalculationsSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) ReadCostAttributes(ctx context.Context, in *ReadCostAttributesRequest, opts ...grpc.CallOption) (Cost_ReadCostAttributesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[4], "/blueapi.cost.v1.Cost/ReadCostAttributes", opts...)
	if err != nil {
		return nil, err
	}
	x := &costReadCostAttributesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ReadCostAttributesClient interface {
	Recv() (*CostAttributeItem, error)
	grpc.ClientStream
}

type costReadCostAttributesClient struct {
	grpc.ClientStream
}

func (x *costReadCostAttributesClient) Recv() (*CostAttributeItem, error) {
	m := new(CostAttributeItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) ReadCosts(ctx context.Context, in *ReadCostsRequest, opts ...grpc.CallOption) (Cost_ReadCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[5], "/blueapi.cost.v1.Cost/ReadCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &costReadCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ReadCostsClient interface {
	Recv() (*CostItem, error)
	grpc.ClientStream
}

type costReadCostsClient struct {
	grpc.ClientStream
}

func (x *costReadCostsClient) Recv() (*CostItem, error) {
	m := new(CostItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) ReadAdjustments(ctx context.Context, in *ReadAdjustmentsRequest, opts ...grpc.CallOption) (Cost_ReadAdjustmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[6], "/blueapi.cost.v1.Cost/ReadAdjustments", opts...)
	if err != nil {
		return nil, err
	}
	x := &costReadAdjustmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ReadAdjustmentsClient interface {
	Recv() (*CostItem, error)
	grpc.ClientStream
}

type costReadAdjustmentsClient struct {
	grpc.ClientStream
}

func (x *costReadAdjustmentsClient) Recv() (*CostItem, error) {
	m := new(CostItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) ReadTagCosts(ctx context.Context, in *ReadTagCostsRequest, opts ...grpc.CallOption) (Cost_ReadTagCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[7], "/blueapi.cost.v1.Cost/ReadTagCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &costReadTagCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ReadTagCostsClient interface {
	Recv() (*CostItem, error)
	grpc.ClientStream
}

type costReadTagCostsClient struct {
	grpc.ClientStream
}

func (x *costReadTagCostsClient) Recv() (*CostItem, error) {
	m := new(CostItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) ReadNonTagCosts(ctx context.Context, in *ReadNonTagCostsRequest, opts ...grpc.CallOption) (Cost_ReadNonTagCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[8], "/blueapi.cost.v1.Cost/ReadNonTagCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &costReadNonTagCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ReadNonTagCostsClient interface {
	Recv() (*CostItem, error)
	grpc.ClientStream
}

type costReadNonTagCostsClient struct {
	grpc.ClientStream
}

func (x *costReadNonTagCostsClient) Recv() (*CostItem, error) {
	m := new(CostItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) GetForecasts(ctx context.Context, in *GetForecastsRequest, opts ...grpc.CallOption) (*GetForecastsResponse, error) {
	out := new(GetForecastsResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetForecasts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetMonthlyCostForecast(ctx context.Context, in *GetMonthlyCostForecastRequest, opts ...grpc.CallOption) (*GetMonthlyCostForecastResponse, error) {
	out := new(GetMonthlyCostForecastResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetMonthlyCostForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetMonthOnMonthCostForecast(ctx context.Context, in *GetMonthOnMonthCostForecastRequest, opts ...grpc.CallOption) (*GetMonthOnMonthCostForecastResponse, error) {
	out := new(GetMonthOnMonthCostForecastResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetMonthOnMonthCostForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetMonthToDateCostForecast(ctx context.Context, in *GetMonthToDateCostForecastRequest, opts ...grpc.CallOption) (*GetMonthToDateCostForecastResponse, error) {
	out := new(GetMonthToDateCostForecastResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetMonthToDateCostForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetAccountBudget(ctx context.Context, in *GetAccountBudgetRequest, opts ...grpc.CallOption) (*GetAccountBudgetResponse, error) {
	out := new(GetAccountBudgetResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetAccountBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) CreateAccountBudget(ctx context.Context, in *CreateAccountBudgetRequest, opts ...grpc.CallOption) (*CreateAccountBudgetResponse, error) {
	out := new(CreateAccountBudgetResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/CreateAccountBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) UpdateAccountBudget(ctx context.Context, in *UpdateAccountBudgetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/UpdateAccountBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) DeleteAccountBudget(ctx context.Context, in *DeleteAccountBudgetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/DeleteAccountBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (*GetRecommendationsResponse, error) {
	out := new(GetRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetCostReduction(ctx context.Context, in *GetCostReductionRequest, opts ...grpc.CallOption) (*GetCostReductionResponse, error) {
	out := new(GetCostReductionResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetCostReduction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetUtilization(ctx context.Context, in *GetUtilizationRequest, opts ...grpc.CallOption) (*GetUtilizationResponse, error) {
	out := new(GetUtilizationResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetUtilization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetCoverageOptions(ctx context.Context, in *GetCoverageOptionsRequest, opts ...grpc.CallOption) (*GetCoverageOptionsResponse, error) {
	out := new(GetCoverageOptionsResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetCoverageOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetCoverageOndemand(ctx context.Context, in *GetCoverageOndemandRequest, opts ...grpc.CallOption) (*GetCoverageOndemandResponse, error) {
	out := new(GetCoverageOndemandResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetCoverageOndemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetBreakevenPoint(ctx context.Context, in *GetBreakevenPointRequest, opts ...grpc.CallOption) (*GetBreakevenPointResponse, error) {
	out := new(GetBreakevenPointResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetBreakevenPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CostServer is the server API for Cost service.
// All implementations must embed UnimplementedCostServer
// for forward compatibility
type CostServer interface {
	// Lists vendor payer accounts. For AWS, these are management accounts (formerly known as master or payer accounts); for Azure, these are subscriptions, for GCP, these are projects.
	ListPayerAccounts(*ListPayerAccountsRequest, Cost_ListPayerAccountsServer) error
	// Gets a vendor payer account. This API includes all of the account's metadata. See https://alphauslabs.github.io/blueapi/ for the list of supported attributes. For AWS, this means a management account (formerly known as master or payer account); for Azure, this means a subscription, for GCP, this means a project.
	GetPayerAccount(context.Context, *GetPayerAccountRequest) (*ripple.Payer, error)
	// Gets a payer account's import history, which is a list of timestamps our system tracks when the account's data are imported to our system, which in turn, triggers processing. At the moment, this only supports AWS (CUR files). You can also set {id} to `*` to return all payers' information under the organization.
	GetPayerAccountImportHistory(*GetPayerAccountImportHistoryRequest, Cost_GetPayerAccountImportHistoryServer) error
	// Registers a vendor payer account. This is now deprecated for AWS payer accounts. To register an AWS payer account, check out the 'CreateDefaultCostAccess' API.
	CreatePayerAccount(context.Context, *CreatePayerAccountRequest) (*api.Account, error)
	// Deletes a vendor payer account.
	DeletePayerAccount(context.Context, *DeletePayerAccountRequest) (*emptypb.Empty, error)
	// Lists all vendor accounts.
	ListAccounts(*ListAccountsRequest, Cost_ListAccountsServer) error
	// Gets a vendor account. This API includes all of the account's metadata. See https://alphauslabs.github.io/blueapi/ for the list of supported attributes.
	GetAccount(context.Context, *GetAccountRequest) (*api.Account, error)
	// Registers a vendor account.
	CreateAccount(context.Context, *CreateAccountRequest) (*api.Account, error)
	// WORK-IN-PROGRESS: Deletes a vendor account.
	DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error)
	// Lists the vendor calculator's queued accounts for calculation. If result is non-empty, it means calculation is still in progress for the returned accounts. Only available in Ripple.
	ListCalculatorRunningAccounts(*ListCalculatorRunningAccountsRequest, Cost_ListCalculatorRunningAccountsServer) error
	// WORK-IN-PROGRESS: Gets the vendor cost calculator's current configuration.
	GetCalculatorConfig(context.Context, *GetCalculatorConfigRequest) (*GetCalculatorConfigResponse, error)
	// Initiates an ondemand import of all registered CUR files. See [https://help.alphaus.cloud/en/articles/3612555-ripple-aws-things-you-need-to-prepare-before-starting] for more information.
	ImportCurFiles(context.Context, *ImportCurFilesRequest) (*api.Operation, error)
	// Triggers monthly calculations for costs and invoices at either organization or billing group level. For the AWS calculator, aggregation is done at daily and monthly level. Also, all occurrences of the character `|` (pipe) in the CUR descriptions and tag key/values are replaced with the `/` (forward-slash) character. This is due to the `|` character having a special designation in the data processing workflows.
	CalculateCosts(context.Context, *CalculateCostsRequest) (*api.Operation, error)
	// Lists vendor costs calculations history and statuses.
	ListCalculationsHistory(context.Context, *ListCalculationsHistoryRequest) (*ListCalculationsHistoryResponse, error)
	// WORK-IN-PROGRESS: Lists the schedules of your monthly calculations. At the moment, only one schedule is allowed per account. Only available in Ripple.
	ListCalculationsSchedules(context.Context, *ListCalculationsSchedulesRequest) (*ListCalculationsSchedulesResponse, error)
	// WORK-IN-PROGRESS: Creates a schedule to trigger your monthly calculations.  Only available in Ripple.
	CreateCalculationsSchedule(context.Context, *CreateCalculationsScheduleRequest) (*CalculationsSchedule, error)
	// WORK-IN-PROGRESS: Deletes the schedule of your monthly calculations. Only available in Ripple.
	DeleteCalculationsSchedule(context.Context, *DeleteCalculationsScheduleRequest) (*emptypb.Empty, error)
	// Reads the available cost attributes of an organization (Ripple) or billing group (Wave). Similar to the `ReadCosts` API but without the aggregated usages and costs. At the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadCostAttributes(*ReadCostAttributesRequest, Cost_ReadCostAttributesServer) error
	// Reads the usage-based cost details of an organization (Ripple) or billing group (Wave). At the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadCosts(*ReadCostsRequest, Cost_ReadCostsServer) error
	// Reads the non-usage-based details of an organization (Ripple) or billing group (Wave). This API covers non-usage-based adjustments, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. At the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadAdjustments(*ReadAdjustmentsRequest, Cost_ReadAdjustmentsServer) error
	// Reads the usage-based tag costs of a billing group. At the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadTagCosts(*ReadTagCostsRequest, Cost_ReadTagCostsServer) error
	// Reads the usage-based non tag costs of a billing group. At the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadNonTagCosts(*ReadNonTagCostsRequest, Cost_ReadNonTagCostsServer) error
	// Fetches cost forecasts for the specified billing group. Includes historical cost (up to previous month) and forecasted cost (up to three months for now).
	GetForecasts(context.Context, *GetForecastsRequest) (*GetForecastsResponse, error)
	// Fetches monthly accumulated costs vs forecasted cost vs budget for the id.
	GetMonthlyCostForecast(context.Context, *GetMonthlyCostForecastRequest) (*GetMonthlyCostForecastResponse, error)
	// Fetches previous month cost vs current month forecast vs current accumulated cost per category for id.
	GetMonthOnMonthCostForecast(context.Context, *GetMonthOnMonthCostForecastRequest) (*GetMonthOnMonthCostForecastResponse, error)
	// Fetches current month daily forecast vs current accumulated daily cost for id.
	GetMonthToDateCostForecast(context.Context, *GetMonthToDateCostForecastRequest) (*GetMonthToDateCostForecastResponse, error)
	// Fetches monthly budget for the account/acctgroup id.
	GetAccountBudget(context.Context, *GetAccountBudgetRequest) (*GetAccountBudgetResponse, error)
	// Creates monthly budget for the account/acctgroup id.
	CreateAccountBudget(context.Context, *CreateAccountBudgetRequest) (*CreateAccountBudgetResponse, error)
	// Updates monthly budget for the account/acctgroup id.
	UpdateAccountBudget(context.Context, *UpdateAccountBudgetRequest) (*emptypb.Empty, error)
	// Removes monthly budget for the account/acctgroup id from database.
	DeleteAccountBudget(context.Context, *DeleteAccountBudgetRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Get cost opmtimization recommendations for an organization (or MSP).
	GetRecommendations(context.Context, *GetRecommendationsRequest) (*GetRecommendationsResponse, error)
	// Get cost reduction details for an organization (or MSP).
	GetCostReduction(context.Context, *GetCostReductionRequest) (*GetCostReductionResponse, error)
	// WORK-IN-PROGRESS: Get the utilization details for an organization (or MSP).
	GetUtilization(context.Context, *GetUtilizationRequest) (*GetUtilizationResponse, error)
	// WORK-IN-PROGRESS: Get coverage options details for an organization (or MSP).
	GetCoverageOptions(context.Context, *GetCoverageOptionsRequest) (*GetCoverageOptionsResponse, error)
	// WORK-IN-PROGRESS: Get ondemand cost details for an organization (or MSP).
	GetCoverageOndemand(context.Context, *GetCoverageOndemandRequest) (*GetCoverageOndemandResponse, error)
	// WORK-IN-PROGRESS: Get the breakeven point details for the RI or SP.
	GetBreakevenPoint(context.Context, *GetBreakevenPointRequest) (*GetBreakevenPointResponse, error)
	mustEmbedUnimplementedCostServer()
}

// UnimplementedCostServer must be embedded to have forward compatible implementations.
type UnimplementedCostServer struct {
}

func (UnimplementedCostServer) ListPayerAccounts(*ListPayerAccountsRequest, Cost_ListPayerAccountsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPayerAccounts not implemented")
}
func (UnimplementedCostServer) GetPayerAccount(context.Context, *GetPayerAccountRequest) (*ripple.Payer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayerAccount not implemented")
}
func (UnimplementedCostServer) GetPayerAccountImportHistory(*GetPayerAccountImportHistoryRequest, Cost_GetPayerAccountImportHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPayerAccountImportHistory not implemented")
}
func (UnimplementedCostServer) CreatePayerAccount(context.Context, *CreatePayerAccountRequest) (*api.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayerAccount not implemented")
}
func (UnimplementedCostServer) DeletePayerAccount(context.Context, *DeletePayerAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayerAccount not implemented")
}
func (UnimplementedCostServer) ListAccounts(*ListAccountsRequest, Cost_ListAccountsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedCostServer) GetAccount(context.Context, *GetAccountRequest) (*api.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedCostServer) CreateAccount(context.Context, *CreateAccountRequest) (*api.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedCostServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedCostServer) ListCalculatorRunningAccounts(*ListCalculatorRunningAccountsRequest, Cost_ListCalculatorRunningAccountsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCalculatorRunningAccounts not implemented")
}
func (UnimplementedCostServer) GetCalculatorConfig(context.Context, *GetCalculatorConfigRequest) (*GetCalculatorConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCalculatorConfig not implemented")
}
func (UnimplementedCostServer) ImportCurFiles(context.Context, *ImportCurFilesRequest) (*api.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCurFiles not implemented")
}
func (UnimplementedCostServer) CalculateCosts(context.Context, *CalculateCostsRequest) (*api.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateCosts not implemented")
}
func (UnimplementedCostServer) ListCalculationsHistory(context.Context, *ListCalculationsHistoryRequest) (*ListCalculationsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCalculationsHistory not implemented")
}
func (UnimplementedCostServer) ListCalculationsSchedules(context.Context, *ListCalculationsSchedulesRequest) (*ListCalculationsSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCalculationsSchedules not implemented")
}
func (UnimplementedCostServer) CreateCalculationsSchedule(context.Context, *CreateCalculationsScheduleRequest) (*CalculationsSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCalculationsSchedule not implemented")
}
func (UnimplementedCostServer) DeleteCalculationsSchedule(context.Context, *DeleteCalculationsScheduleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCalculationsSchedule not implemented")
}
func (UnimplementedCostServer) ReadCostAttributes(*ReadCostAttributesRequest, Cost_ReadCostAttributesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadCostAttributes not implemented")
}
func (UnimplementedCostServer) ReadCosts(*ReadCostsRequest, Cost_ReadCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadCosts not implemented")
}
func (UnimplementedCostServer) ReadAdjustments(*ReadAdjustmentsRequest, Cost_ReadAdjustmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadAdjustments not implemented")
}
func (UnimplementedCostServer) ReadTagCosts(*ReadTagCostsRequest, Cost_ReadTagCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadTagCosts not implemented")
}
func (UnimplementedCostServer) ReadNonTagCosts(*ReadNonTagCostsRequest, Cost_ReadNonTagCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadNonTagCosts not implemented")
}
func (UnimplementedCostServer) GetForecasts(context.Context, *GetForecastsRequest) (*GetForecastsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecasts not implemented")
}
func (UnimplementedCostServer) GetMonthlyCostForecast(context.Context, *GetMonthlyCostForecastRequest) (*GetMonthlyCostForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyCostForecast not implemented")
}
func (UnimplementedCostServer) GetMonthOnMonthCostForecast(context.Context, *GetMonthOnMonthCostForecastRequest) (*GetMonthOnMonthCostForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthOnMonthCostForecast not implemented")
}
func (UnimplementedCostServer) GetMonthToDateCostForecast(context.Context, *GetMonthToDateCostForecastRequest) (*GetMonthToDateCostForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthToDateCostForecast not implemented")
}
func (UnimplementedCostServer) GetAccountBudget(context.Context, *GetAccountBudgetRequest) (*GetAccountBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBudget not implemented")
}
func (UnimplementedCostServer) CreateAccountBudget(context.Context, *CreateAccountBudgetRequest) (*CreateAccountBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountBudget not implemented")
}
func (UnimplementedCostServer) UpdateAccountBudget(context.Context, *UpdateAccountBudgetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountBudget not implemented")
}
func (UnimplementedCostServer) DeleteAccountBudget(context.Context, *DeleteAccountBudgetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountBudget not implemented")
}
func (UnimplementedCostServer) GetRecommendations(context.Context, *GetRecommendationsRequest) (*GetRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendations not implemented")
}
func (UnimplementedCostServer) GetCostReduction(context.Context, *GetCostReductionRequest) (*GetCostReductionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCostReduction not implemented")
}
func (UnimplementedCostServer) GetUtilization(context.Context, *GetUtilizationRequest) (*GetUtilizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUtilization not implemented")
}
func (UnimplementedCostServer) GetCoverageOptions(context.Context, *GetCoverageOptionsRequest) (*GetCoverageOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoverageOptions not implemented")
}
func (UnimplementedCostServer) GetCoverageOndemand(context.Context, *GetCoverageOndemandRequest) (*GetCoverageOndemandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoverageOndemand not implemented")
}
func (UnimplementedCostServer) GetBreakevenPoint(context.Context, *GetBreakevenPointRequest) (*GetBreakevenPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBreakevenPoint not implemented")
}
func (UnimplementedCostServer) mustEmbedUnimplementedCostServer() {}

// UnsafeCostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CostServer will
// result in compilation errors.
type UnsafeCostServer interface {
	mustEmbedUnimplementedCostServer()
}

func RegisterCostServer(s grpc.ServiceRegistrar, srv CostServer) {
	s.RegisterService(&Cost_ServiceDesc, srv)
}

func _Cost_ListPayerAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPayerAccountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ListPayerAccounts(m, &costListPayerAccountsServer{stream})
}

type Cost_ListPayerAccountsServer interface {
	Send(*api.Account) error
	grpc.ServerStream
}

type costListPayerAccountsServer struct {
	grpc.ServerStream
}

func (x *costListPayerAccountsServer) Send(m *api.Account) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_GetPayerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetPayerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetPayerAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetPayerAccount(ctx, req.(*GetPayerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetPayerAccountImportHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPayerAccountImportHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).GetPayerAccountImportHistory(m, &costGetPayerAccountImportHistoryServer{stream})
}

type Cost_GetPayerAccountImportHistoryServer interface {
	Send(*GetPayerAccountImportHistoryResponse) error
	grpc.ServerStream
}

type costGetPayerAccountImportHistoryServer struct {
	grpc.ServerStream
}

func (x *costGetPayerAccountImportHistoryServer) Send(m *GetPayerAccountImportHistoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_CreatePayerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).CreatePayerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/CreatePayerAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).CreatePayerAccount(ctx, req.(*CreatePayerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_DeletePayerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePayerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).DeletePayerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/DeletePayerAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).DeletePayerAccount(ctx, req.(*DeletePayerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_ListAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAccountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ListAccounts(m, &costListAccountsServer{stream})
}

type Cost_ListAccountsServer interface {
	Send(*api.Account) error
	grpc.ServerStream
}

type costListAccountsServer struct {
	grpc.ServerStream
}

func (x *costListAccountsServer) Send(m *api.Account) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_ListCalculatorRunningAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCalculatorRunningAccountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ListCalculatorRunningAccounts(m, &costListCalculatorRunningAccountsServer{stream})
}

type Cost_ListCalculatorRunningAccountsServer interface {
	Send(*ListCalculatorRunningAccountsResponse) error
	grpc.ServerStream
}

type costListCalculatorRunningAccountsServer struct {
	grpc.ServerStream
}

func (x *costListCalculatorRunningAccountsServer) Send(m *ListCalculatorRunningAccountsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_GetCalculatorConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCalculatorConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetCalculatorConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetCalculatorConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetCalculatorConfig(ctx, req.(*GetCalculatorConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_ImportCurFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCurFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).ImportCurFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/ImportCurFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).ImportCurFiles(ctx, req.(*ImportCurFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_CalculateCosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateCostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).CalculateCosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/CalculateCosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).CalculateCosts(ctx, req.(*CalculateCostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_ListCalculationsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCalculationsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).ListCalculationsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/ListCalculationsHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).ListCalculationsHistory(ctx, req.(*ListCalculationsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_ListCalculationsSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCalculationsSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).ListCalculationsSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/ListCalculationsSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).ListCalculationsSchedules(ctx, req.(*ListCalculationsSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_CreateCalculationsSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCalculationsScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).CreateCalculationsSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/CreateCalculationsSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).CreateCalculationsSchedule(ctx, req.(*CreateCalculationsScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_DeleteCalculationsSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCalculationsScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).DeleteCalculationsSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/DeleteCalculationsSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).DeleteCalculationsSchedule(ctx, req.(*DeleteCalculationsScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_ReadCostAttributes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadCostAttributesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ReadCostAttributes(m, &costReadCostAttributesServer{stream})
}

type Cost_ReadCostAttributesServer interface {
	Send(*CostAttributeItem) error
	grpc.ServerStream
}

type costReadCostAttributesServer struct {
	grpc.ServerStream
}

func (x *costReadCostAttributesServer) Send(m *CostAttributeItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_ReadCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ReadCosts(m, &costReadCostsServer{stream})
}

type Cost_ReadCostsServer interface {
	Send(*CostItem) error
	grpc.ServerStream
}

type costReadCostsServer struct {
	grpc.ServerStream
}

func (x *costReadCostsServer) Send(m *CostItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_ReadAdjustments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadAdjustmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ReadAdjustments(m, &costReadAdjustmentsServer{stream})
}

type Cost_ReadAdjustmentsServer interface {
	Send(*CostItem) error
	grpc.ServerStream
}

type costReadAdjustmentsServer struct {
	grpc.ServerStream
}

func (x *costReadAdjustmentsServer) Send(m *CostItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_ReadTagCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadTagCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ReadTagCosts(m, &costReadTagCostsServer{stream})
}

type Cost_ReadTagCostsServer interface {
	Send(*CostItem) error
	grpc.ServerStream
}

type costReadTagCostsServer struct {
	grpc.ServerStream
}

func (x *costReadTagCostsServer) Send(m *CostItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_ReadNonTagCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadNonTagCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ReadNonTagCosts(m, &costReadNonTagCostsServer{stream})
}

type Cost_ReadNonTagCostsServer interface {
	Send(*CostItem) error
	grpc.ServerStream
}

type costReadNonTagCostsServer struct {
	grpc.ServerStream
}

func (x *costReadNonTagCostsServer) Send(m *CostItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_GetForecasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecastsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetForecasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetForecasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetForecasts(ctx, req.(*GetForecastsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetMonthlyCostForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyCostForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetMonthlyCostForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetMonthlyCostForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetMonthlyCostForecast(ctx, req.(*GetMonthlyCostForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetMonthOnMonthCostForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthOnMonthCostForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetMonthOnMonthCostForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetMonthOnMonthCostForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetMonthOnMonthCostForecast(ctx, req.(*GetMonthOnMonthCostForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetMonthToDateCostForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthToDateCostForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetMonthToDateCostForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetMonthToDateCostForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetMonthToDateCostForecast(ctx, req.(*GetMonthToDateCostForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetAccountBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetAccountBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetAccountBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetAccountBudget(ctx, req.(*GetAccountBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_CreateAccountBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).CreateAccountBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/CreateAccountBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).CreateAccountBudget(ctx, req.(*CreateAccountBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_UpdateAccountBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).UpdateAccountBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/UpdateAccountBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).UpdateAccountBudget(ctx, req.(*UpdateAccountBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_DeleteAccountBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).DeleteAccountBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/DeleteAccountBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).DeleteAccountBudget(ctx, req.(*DeleteAccountBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetRecommendations(ctx, req.(*GetRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetCostReduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCostReductionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetCostReduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetCostReduction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetCostReduction(ctx, req.(*GetCostReductionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetUtilization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUtilizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetUtilization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetUtilization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetUtilization(ctx, req.(*GetUtilizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetCoverageOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoverageOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetCoverageOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetCoverageOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetCoverageOptions(ctx, req.(*GetCoverageOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetCoverageOndemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoverageOndemandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetCoverageOndemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetCoverageOndemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetCoverageOndemand(ctx, req.(*GetCoverageOndemandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetBreakevenPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBreakevenPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetBreakevenPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetBreakevenPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetBreakevenPoint(ctx, req.(*GetBreakevenPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cost_ServiceDesc is the grpc.ServiceDesc for Cost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.cost.v1.Cost",
	HandlerType: (*CostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPayerAccount",
			Handler:    _Cost_GetPayerAccount_Handler,
		},
		{
			MethodName: "CreatePayerAccount",
			Handler:    _Cost_CreatePayerAccount_Handler,
		},
		{
			MethodName: "DeletePayerAccount",
			Handler:    _Cost_DeletePayerAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Cost_GetAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Cost_CreateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _Cost_DeleteAccount_Handler,
		},
		{
			MethodName: "GetCalculatorConfig",
			Handler:    _Cost_GetCalculatorConfig_Handler,
		},
		{
			MethodName: "ImportCurFiles",
			Handler:    _Cost_ImportCurFiles_Handler,
		},
		{
			MethodName: "CalculateCosts",
			Handler:    _Cost_CalculateCosts_Handler,
		},
		{
			MethodName: "ListCalculationsHistory",
			Handler:    _Cost_ListCalculationsHistory_Handler,
		},
		{
			MethodName: "ListCalculationsSchedules",
			Handler:    _Cost_ListCalculationsSchedules_Handler,
		},
		{
			MethodName: "CreateCalculationsSchedule",
			Handler:    _Cost_CreateCalculationsSchedule_Handler,
		},
		{
			MethodName: "DeleteCalculationsSchedule",
			Handler:    _Cost_DeleteCalculationsSchedule_Handler,
		},
		{
			MethodName: "GetForecasts",
			Handler:    _Cost_GetForecasts_Handler,
		},
		{
			MethodName: "GetMonthlyCostForecast",
			Handler:    _Cost_GetMonthlyCostForecast_Handler,
		},
		{
			MethodName: "GetMonthOnMonthCostForecast",
			Handler:    _Cost_GetMonthOnMonthCostForecast_Handler,
		},
		{
			MethodName: "GetMonthToDateCostForecast",
			Handler:    _Cost_GetMonthToDateCostForecast_Handler,
		},
		{
			MethodName: "GetAccountBudget",
			Handler:    _Cost_GetAccountBudget_Handler,
		},
		{
			MethodName: "CreateAccountBudget",
			Handler:    _Cost_CreateAccountBudget_Handler,
		},
		{
			MethodName: "UpdateAccountBudget",
			Handler:    _Cost_UpdateAccountBudget_Handler,
		},
		{
			MethodName: "DeleteAccountBudget",
			Handler:    _Cost_DeleteAccountBudget_Handler,
		},
		{
			MethodName: "GetRecommendations",
			Handler:    _Cost_GetRecommendations_Handler,
		},
		{
			MethodName: "GetCostReduction",
			Handler:    _Cost_GetCostReduction_Handler,
		},
		{
			MethodName: "GetUtilization",
			Handler:    _Cost_GetUtilization_Handler,
		},
		{
			MethodName: "GetCoverageOptions",
			Handler:    _Cost_GetCoverageOptions_Handler,
		},
		{
			MethodName: "GetCoverageOndemand",
			Handler:    _Cost_GetCoverageOndemand_Handler,
		},
		{
			MethodName: "GetBreakevenPoint",
			Handler:    _Cost_GetBreakevenPoint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPayerAccounts",
			Handler:       _Cost_ListPayerAccounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPayerAccountImportHistory",
			Handler:       _Cost_GetPayerAccountImportHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAccounts",
			Handler:       _Cost_ListAccounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListCalculatorRunningAccounts",
			Handler:       _Cost_ListCalculatorRunningAccounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadCostAttributes",
			Handler:       _Cost_ReadCostAttributes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadCosts",
			Handler:       _Cost_ReadCosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadAdjustments",
			Handler:       _Cost_ReadAdjustments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadTagCosts",
			Handler:       _Cost_ReadTagCosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadNonTagCosts",
			Handler:       _Cost_ReadNonTagCosts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cost/v1/cost.proto",
}
