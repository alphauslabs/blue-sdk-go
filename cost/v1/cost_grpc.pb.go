// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cost

import (
	context "context"
	api "github.com/alphauslabs/blue-sdk-go/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CostClient is the client API for Cost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CostClient interface {
	// Lists vendor payer accounts. For AWS, these are management accounts (formerly known
	// as master or payer accounts); for Azure, these are subscriptions, for GCP, these
	// are projects.
	ListPayerAccounts(ctx context.Context, in *ListPayerAccountsRequest, opts ...grpc.CallOption) (Cost_ListPayerAccountsClient, error)
	// Gets a vendor payer account. This API includes all of the account's metadata.
	// See https://alphauslabs.github.io/blueapi/ for the list of supported attributes.
	// For AWS, this means a management account (formerly known as master or payer account);
	// for Azure, this means a subscription, for GCP, this means a project.
	GetPayerAccount(ctx context.Context, in *GetPayerAccountRequest, opts ...grpc.CallOption) (*api.Account, error)
	// Gets a payer account's import history, which is a list of timestamps our system tracks when the account's data are
	// imported to our system, which in turn, triggers processing. At the moment, this only supports AWS (CUR files).
	GetPayerAccountImportHistory(ctx context.Context, in *GetPayerAccountImportHistoryRequest, opts ...grpc.CallOption) (*GetPayerAccountImportHistoryResponse, error)
	// Registers a vendor payer account.
	CreatePayerAccount(ctx context.Context, in *CreatePayerAccountRequest, opts ...grpc.CallOption) (*api.Account, error)
	// Deletes a vendor payer account.
	DeletePayerAccount(ctx context.Context, in *DeletePayerAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all vendor accounts.
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (Cost_ListAccountsClient, error)
	// Gets a vendor account. This API includes all of the account's metadata. See
	// https://alphauslabs.github.io/blueapi/ for the list of supported attributes.
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*api.Account, error)
	// Registers a vendor account.
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*api.Account, error)
	// Deletes a vendor account.
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets the vendor cost calculator's current configuration.
	GetCalculatorConfig(ctx context.Context, in *GetCalculatorConfigRequest, opts ...grpc.CallOption) (*GetCalculatorConfigResponse, error)
	// Initiates an ondemand import of all registered CUR files. See
	// [https://help.alphaus.cloud/en/articles/3612555-ripple-aws-things-you-need-to-prepare-before-starting]
	// for more information.
	ImportCurFiles(ctx context.Context, in *ImportCurFilesRequest, opts ...grpc.CallOption) (*api.Operation, error)
	// Triggers monthly calculations for costs and invoices at either organization or billing group level.
	CalculateCosts(ctx context.Context, in *CalculateCostsRequest, opts ...grpc.CallOption) (*api.Operation, error)
	// Lists vendor costs calculations history and statuses.
	ListCalculationsHistory(ctx context.Context, in *ListCalculationsHistoryRequest, opts ...grpc.CallOption) (*ListCalculationsHistoryResponse, error)
	// Reads the usage-based cost details of an organization (Ripple) or billing group (Wave).
	// At the moment, the supported {vendor} is 'aws'. If datetime range parameters are
	// not set, month-to-date (current month) will be returned.
	ReadCosts(ctx context.Context, in *ReadCostsRequest, opts ...grpc.CallOption) (Cost_ReadCostsClient, error)
	// Reads the non-usage-based details of an organization (Ripple) or billing group (Wave).
	// This API covers non-usage-based adjustments, such as Fees, Credits, Discounts, Tax,
	// Upfront Fees, etc. At the moment, the supported {vendor} is 'aws'. If datetime
	// range parameters are not set, month-to-date (current month) will be returned.
	ReadAdjustments(ctx context.Context, in *ReadAdjustmentsRequest, opts ...grpc.CallOption) (Cost_ReadAdjustmentsClient, error)
	// (Deprecated, use cost.ReadTagCosts instead) Reads the usage-based tag costs of a billing group.
	// At the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date
	// (current month) will be returned.
	ReadBillingGroupTagCosts(ctx context.Context, in *ReadBillingGroupTagCostsRequest, opts ...grpc.CallOption) (Cost_ReadBillingGroupTagCostsClient, error)
	// (Deprecated, use cost.ReadNonTagCosts instead) Reads the usage-based non tag costs of a billing group.
	// At the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date
	// (current month) will be returned.
	ReadBillingGroupNonTagCosts(ctx context.Context, in *ReadBillingGroupNonTagCostsRequest, opts ...grpc.CallOption) (Cost_ReadBillingGroupNonTagCostsClient, error)
	// Reads the usage-based tag costs of a billing group. At the moment, the supported {vendor} is
	// 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadTagCosts(ctx context.Context, in *ReadTagCostsRequest, opts ...grpc.CallOption) (Cost_ReadTagCostsClient, error)
	// Reads the usage-based non tag costs of a billing group. At the moment, the supported {vendor} is
	// 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadNonTagCosts(ctx context.Context, in *ReadNonTagCostsRequest, opts ...grpc.CallOption) (Cost_ReadNonTagCostsClient, error)
	// Fetches cost forecasts for the specified billing group.
	// Includes historical cost (up to previous month) and forecasted cost (up to three months for now).
	GetForecasts(ctx context.Context, in *GetForecastsRequest, opts ...grpc.CallOption) (*GetForecastsResponse, error)
	// Fetches monthly accumulated costs vs forecasted cost vs budget for the id.
	GetMonthlyCostForecast(ctx context.Context, in *GetMonthlyCostForecastRequest, opts ...grpc.CallOption) (*GetMonthlyCostForecastResponse, error)
	// Fetches previous month cost vs current month forecast vs current accumulated cost per category for id
	GetMonthOnMonthCostForecast(ctx context.Context, in *GetMonthOnMonthCostForecastRequest, opts ...grpc.CallOption) (*GetMonthOnMonthCostForecastResponse, error)
	// Fetches current month daily forecast vs current accumulated daily cost for id
	GetMonthToDateCostForecast(ctx context.Context, in *GetMonthToDateCostForecastRequest, opts ...grpc.CallOption) (*GetMonthToDateCostForecastResponse, error)
}

type costClient struct {
	cc grpc.ClientConnInterface
}

func NewCostClient(cc grpc.ClientConnInterface) CostClient {
	return &costClient{cc}
}

func (c *costClient) ListPayerAccounts(ctx context.Context, in *ListPayerAccountsRequest, opts ...grpc.CallOption) (Cost_ListPayerAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[0], "/blueapi.cost.v1.Cost/ListPayerAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &costListPayerAccountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ListPayerAccountsClient interface {
	Recv() (*api.Account, error)
	grpc.ClientStream
}

type costListPayerAccountsClient struct {
	grpc.ClientStream
}

func (x *costListPayerAccountsClient) Recv() (*api.Account, error) {
	m := new(api.Account)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) GetPayerAccount(ctx context.Context, in *GetPayerAccountRequest, opts ...grpc.CallOption) (*api.Account, error) {
	out := new(api.Account)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetPayerAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetPayerAccountImportHistory(ctx context.Context, in *GetPayerAccountImportHistoryRequest, opts ...grpc.CallOption) (*GetPayerAccountImportHistoryResponse, error) {
	out := new(GetPayerAccountImportHistoryResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetPayerAccountImportHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) CreatePayerAccount(ctx context.Context, in *CreatePayerAccountRequest, opts ...grpc.CallOption) (*api.Account, error) {
	out := new(api.Account)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/CreatePayerAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) DeletePayerAccount(ctx context.Context, in *DeletePayerAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/DeletePayerAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (Cost_ListAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[1], "/blueapi.cost.v1.Cost/ListAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &costListAccountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ListAccountsClient interface {
	Recv() (*api.Account, error)
	grpc.ClientStream
}

type costListAccountsClient struct {
	grpc.ClientStream
}

func (x *costListAccountsClient) Recv() (*api.Account, error) {
	m := new(api.Account)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*api.Account, error) {
	out := new(api.Account)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*api.Account, error) {
	out := new(api.Account)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetCalculatorConfig(ctx context.Context, in *GetCalculatorConfigRequest, opts ...grpc.CallOption) (*GetCalculatorConfigResponse, error) {
	out := new(GetCalculatorConfigResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetCalculatorConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) ImportCurFiles(ctx context.Context, in *ImportCurFilesRequest, opts ...grpc.CallOption) (*api.Operation, error) {
	out := new(api.Operation)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/ImportCurFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) CalculateCosts(ctx context.Context, in *CalculateCostsRequest, opts ...grpc.CallOption) (*api.Operation, error) {
	out := new(api.Operation)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/CalculateCosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) ListCalculationsHistory(ctx context.Context, in *ListCalculationsHistoryRequest, opts ...grpc.CallOption) (*ListCalculationsHistoryResponse, error) {
	out := new(ListCalculationsHistoryResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/ListCalculationsHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) ReadCosts(ctx context.Context, in *ReadCostsRequest, opts ...grpc.CallOption) (Cost_ReadCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[2], "/blueapi.cost.v1.Cost/ReadCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &costReadCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ReadCostsClient interface {
	Recv() (*CostItem, error)
	grpc.ClientStream
}

type costReadCostsClient struct {
	grpc.ClientStream
}

func (x *costReadCostsClient) Recv() (*CostItem, error) {
	m := new(CostItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) ReadAdjustments(ctx context.Context, in *ReadAdjustmentsRequest, opts ...grpc.CallOption) (Cost_ReadAdjustmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[3], "/blueapi.cost.v1.Cost/ReadAdjustments", opts...)
	if err != nil {
		return nil, err
	}
	x := &costReadAdjustmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ReadAdjustmentsClient interface {
	Recv() (*AdjustmentItem, error)
	grpc.ClientStream
}

type costReadAdjustmentsClient struct {
	grpc.ClientStream
}

func (x *costReadAdjustmentsClient) Recv() (*AdjustmentItem, error) {
	m := new(AdjustmentItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) ReadBillingGroupTagCosts(ctx context.Context, in *ReadBillingGroupTagCostsRequest, opts ...grpc.CallOption) (Cost_ReadBillingGroupTagCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[4], "/blueapi.cost.v1.Cost/ReadBillingGroupTagCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &costReadBillingGroupTagCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ReadBillingGroupTagCostsClient interface {
	Recv() (*CostItem, error)
	grpc.ClientStream
}

type costReadBillingGroupTagCostsClient struct {
	grpc.ClientStream
}

func (x *costReadBillingGroupTagCostsClient) Recv() (*CostItem, error) {
	m := new(CostItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) ReadBillingGroupNonTagCosts(ctx context.Context, in *ReadBillingGroupNonTagCostsRequest, opts ...grpc.CallOption) (Cost_ReadBillingGroupNonTagCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[5], "/blueapi.cost.v1.Cost/ReadBillingGroupNonTagCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &costReadBillingGroupNonTagCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ReadBillingGroupNonTagCostsClient interface {
	Recv() (*CostItem, error)
	grpc.ClientStream
}

type costReadBillingGroupNonTagCostsClient struct {
	grpc.ClientStream
}

func (x *costReadBillingGroupNonTagCostsClient) Recv() (*CostItem, error) {
	m := new(CostItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) ReadTagCosts(ctx context.Context, in *ReadTagCostsRequest, opts ...grpc.CallOption) (Cost_ReadTagCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[6], "/blueapi.cost.v1.Cost/ReadTagCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &costReadTagCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ReadTagCostsClient interface {
	Recv() (*CostItem, error)
	grpc.ClientStream
}

type costReadTagCostsClient struct {
	grpc.ClientStream
}

func (x *costReadTagCostsClient) Recv() (*CostItem, error) {
	m := new(CostItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) ReadNonTagCosts(ctx context.Context, in *ReadNonTagCostsRequest, opts ...grpc.CallOption) (Cost_ReadNonTagCostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cost_ServiceDesc.Streams[7], "/blueapi.cost.v1.Cost/ReadNonTagCosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &costReadNonTagCostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cost_ReadNonTagCostsClient interface {
	Recv() (*CostItem, error)
	grpc.ClientStream
}

type costReadNonTagCostsClient struct {
	grpc.ClientStream
}

func (x *costReadNonTagCostsClient) Recv() (*CostItem, error) {
	m := new(CostItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *costClient) GetForecasts(ctx context.Context, in *GetForecastsRequest, opts ...grpc.CallOption) (*GetForecastsResponse, error) {
	out := new(GetForecastsResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetForecasts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetMonthlyCostForecast(ctx context.Context, in *GetMonthlyCostForecastRequest, opts ...grpc.CallOption) (*GetMonthlyCostForecastResponse, error) {
	out := new(GetMonthlyCostForecastResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetMonthlyCostForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetMonthOnMonthCostForecast(ctx context.Context, in *GetMonthOnMonthCostForecastRequest, opts ...grpc.CallOption) (*GetMonthOnMonthCostForecastResponse, error) {
	out := new(GetMonthOnMonthCostForecastResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetMonthOnMonthCostForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costClient) GetMonthToDateCostForecast(ctx context.Context, in *GetMonthToDateCostForecastRequest, opts ...grpc.CallOption) (*GetMonthToDateCostForecastResponse, error) {
	out := new(GetMonthToDateCostForecastResponse)
	err := c.cc.Invoke(ctx, "/blueapi.cost.v1.Cost/GetMonthToDateCostForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CostServer is the server API for Cost service.
// All implementations must embed UnimplementedCostServer
// for forward compatibility
type CostServer interface {
	// Lists vendor payer accounts. For AWS, these are management accounts (formerly known
	// as master or payer accounts); for Azure, these are subscriptions, for GCP, these
	// are projects.
	ListPayerAccounts(*ListPayerAccountsRequest, Cost_ListPayerAccountsServer) error
	// Gets a vendor payer account. This API includes all of the account's metadata.
	// See https://alphauslabs.github.io/blueapi/ for the list of supported attributes.
	// For AWS, this means a management account (formerly known as master or payer account);
	// for Azure, this means a subscription, for GCP, this means a project.
	GetPayerAccount(context.Context, *GetPayerAccountRequest) (*api.Account, error)
	// Gets a payer account's import history, which is a list of timestamps our system tracks when the account's data are
	// imported to our system, which in turn, triggers processing. At the moment, this only supports AWS (CUR files).
	GetPayerAccountImportHistory(context.Context, *GetPayerAccountImportHistoryRequest) (*GetPayerAccountImportHistoryResponse, error)
	// Registers a vendor payer account.
	CreatePayerAccount(context.Context, *CreatePayerAccountRequest) (*api.Account, error)
	// Deletes a vendor payer account.
	DeletePayerAccount(context.Context, *DeletePayerAccountRequest) (*emptypb.Empty, error)
	// Lists all vendor accounts.
	ListAccounts(*ListAccountsRequest, Cost_ListAccountsServer) error
	// Gets a vendor account. This API includes all of the account's metadata. See
	// https://alphauslabs.github.io/blueapi/ for the list of supported attributes.
	GetAccount(context.Context, *GetAccountRequest) (*api.Account, error)
	// Registers a vendor account.
	CreateAccount(context.Context, *CreateAccountRequest) (*api.Account, error)
	// Deletes a vendor account.
	DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error)
	// Gets the vendor cost calculator's current configuration.
	GetCalculatorConfig(context.Context, *GetCalculatorConfigRequest) (*GetCalculatorConfigResponse, error)
	// Initiates an ondemand import of all registered CUR files. See
	// [https://help.alphaus.cloud/en/articles/3612555-ripple-aws-things-you-need-to-prepare-before-starting]
	// for more information.
	ImportCurFiles(context.Context, *ImportCurFilesRequest) (*api.Operation, error)
	// Triggers monthly calculations for costs and invoices at either organization or billing group level.
	CalculateCosts(context.Context, *CalculateCostsRequest) (*api.Operation, error)
	// Lists vendor costs calculations history and statuses.
	ListCalculationsHistory(context.Context, *ListCalculationsHistoryRequest) (*ListCalculationsHistoryResponse, error)
	// Reads the usage-based cost details of an organization (Ripple) or billing group (Wave).
	// At the moment, the supported {vendor} is 'aws'. If datetime range parameters are
	// not set, month-to-date (current month) will be returned.
	ReadCosts(*ReadCostsRequest, Cost_ReadCostsServer) error
	// Reads the non-usage-based details of an organization (Ripple) or billing group (Wave).
	// This API covers non-usage-based adjustments, such as Fees, Credits, Discounts, Tax,
	// Upfront Fees, etc. At the moment, the supported {vendor} is 'aws'. If datetime
	// range parameters are not set, month-to-date (current month) will be returned.
	ReadAdjustments(*ReadAdjustmentsRequest, Cost_ReadAdjustmentsServer) error
	// (Deprecated, use cost.ReadTagCosts instead) Reads the usage-based tag costs of a billing group.
	// At the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date
	// (current month) will be returned.
	ReadBillingGroupTagCosts(*ReadBillingGroupTagCostsRequest, Cost_ReadBillingGroupTagCostsServer) error
	// (Deprecated, use cost.ReadNonTagCosts instead) Reads the usage-based non tag costs of a billing group.
	// At the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date
	// (current month) will be returned.
	ReadBillingGroupNonTagCosts(*ReadBillingGroupNonTagCostsRequest, Cost_ReadBillingGroupNonTagCostsServer) error
	// Reads the usage-based tag costs of a billing group. At the moment, the supported {vendor} is
	// 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadTagCosts(*ReadTagCostsRequest, Cost_ReadTagCostsServer) error
	// Reads the usage-based non tag costs of a billing group. At the moment, the supported {vendor} is
	// 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
	ReadNonTagCosts(*ReadNonTagCostsRequest, Cost_ReadNonTagCostsServer) error
	// Fetches cost forecasts for the specified billing group.
	// Includes historical cost (up to previous month) and forecasted cost (up to three months for now).
	GetForecasts(context.Context, *GetForecastsRequest) (*GetForecastsResponse, error)
	// Fetches monthly accumulated costs vs forecasted cost vs budget for the id.
	GetMonthlyCostForecast(context.Context, *GetMonthlyCostForecastRequest) (*GetMonthlyCostForecastResponse, error)
	// Fetches previous month cost vs current month forecast vs current accumulated cost per category for id
	GetMonthOnMonthCostForecast(context.Context, *GetMonthOnMonthCostForecastRequest) (*GetMonthOnMonthCostForecastResponse, error)
	// Fetches current month daily forecast vs current accumulated daily cost for id
	GetMonthToDateCostForecast(context.Context, *GetMonthToDateCostForecastRequest) (*GetMonthToDateCostForecastResponse, error)
	mustEmbedUnimplementedCostServer()
}

// UnimplementedCostServer must be embedded to have forward compatible implementations.
type UnimplementedCostServer struct {
}

func (UnimplementedCostServer) ListPayerAccounts(*ListPayerAccountsRequest, Cost_ListPayerAccountsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPayerAccounts not implemented")
}
func (UnimplementedCostServer) GetPayerAccount(context.Context, *GetPayerAccountRequest) (*api.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayerAccount not implemented")
}
func (UnimplementedCostServer) GetPayerAccountImportHistory(context.Context, *GetPayerAccountImportHistoryRequest) (*GetPayerAccountImportHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayerAccountImportHistory not implemented")
}
func (UnimplementedCostServer) CreatePayerAccount(context.Context, *CreatePayerAccountRequest) (*api.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayerAccount not implemented")
}
func (UnimplementedCostServer) DeletePayerAccount(context.Context, *DeletePayerAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayerAccount not implemented")
}
func (UnimplementedCostServer) ListAccounts(*ListAccountsRequest, Cost_ListAccountsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedCostServer) GetAccount(context.Context, *GetAccountRequest) (*api.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedCostServer) CreateAccount(context.Context, *CreateAccountRequest) (*api.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedCostServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedCostServer) GetCalculatorConfig(context.Context, *GetCalculatorConfigRequest) (*GetCalculatorConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCalculatorConfig not implemented")
}
func (UnimplementedCostServer) ImportCurFiles(context.Context, *ImportCurFilesRequest) (*api.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCurFiles not implemented")
}
func (UnimplementedCostServer) CalculateCosts(context.Context, *CalculateCostsRequest) (*api.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateCosts not implemented")
}
func (UnimplementedCostServer) ListCalculationsHistory(context.Context, *ListCalculationsHistoryRequest) (*ListCalculationsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCalculationsHistory not implemented")
}
func (UnimplementedCostServer) ReadCosts(*ReadCostsRequest, Cost_ReadCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadCosts not implemented")
}
func (UnimplementedCostServer) ReadAdjustments(*ReadAdjustmentsRequest, Cost_ReadAdjustmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadAdjustments not implemented")
}
func (UnimplementedCostServer) ReadBillingGroupTagCosts(*ReadBillingGroupTagCostsRequest, Cost_ReadBillingGroupTagCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadBillingGroupTagCosts not implemented")
}
func (UnimplementedCostServer) ReadBillingGroupNonTagCosts(*ReadBillingGroupNonTagCostsRequest, Cost_ReadBillingGroupNonTagCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadBillingGroupNonTagCosts not implemented")
}
func (UnimplementedCostServer) ReadTagCosts(*ReadTagCostsRequest, Cost_ReadTagCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadTagCosts not implemented")
}
func (UnimplementedCostServer) ReadNonTagCosts(*ReadNonTagCostsRequest, Cost_ReadNonTagCostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadNonTagCosts not implemented")
}
func (UnimplementedCostServer) GetForecasts(context.Context, *GetForecastsRequest) (*GetForecastsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecasts not implemented")
}
func (UnimplementedCostServer) GetMonthlyCostForecast(context.Context, *GetMonthlyCostForecastRequest) (*GetMonthlyCostForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyCostForecast not implemented")
}
func (UnimplementedCostServer) GetMonthOnMonthCostForecast(context.Context, *GetMonthOnMonthCostForecastRequest) (*GetMonthOnMonthCostForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthOnMonthCostForecast not implemented")
}
func (UnimplementedCostServer) GetMonthToDateCostForecast(context.Context, *GetMonthToDateCostForecastRequest) (*GetMonthToDateCostForecastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthToDateCostForecast not implemented")
}
func (UnimplementedCostServer) mustEmbedUnimplementedCostServer() {}

// UnsafeCostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CostServer will
// result in compilation errors.
type UnsafeCostServer interface {
	mustEmbedUnimplementedCostServer()
}

func RegisterCostServer(s grpc.ServiceRegistrar, srv CostServer) {
	s.RegisterService(&Cost_ServiceDesc, srv)
}

func _Cost_ListPayerAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPayerAccountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ListPayerAccounts(m, &costListPayerAccountsServer{stream})
}

type Cost_ListPayerAccountsServer interface {
	Send(*api.Account) error
	grpc.ServerStream
}

type costListPayerAccountsServer struct {
	grpc.ServerStream
}

func (x *costListPayerAccountsServer) Send(m *api.Account) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_GetPayerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetPayerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetPayerAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetPayerAccount(ctx, req.(*GetPayerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetPayerAccountImportHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayerAccountImportHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetPayerAccountImportHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetPayerAccountImportHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetPayerAccountImportHistory(ctx, req.(*GetPayerAccountImportHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_CreatePayerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).CreatePayerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/CreatePayerAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).CreatePayerAccount(ctx, req.(*CreatePayerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_DeletePayerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePayerAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).DeletePayerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/DeletePayerAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).DeletePayerAccount(ctx, req.(*DeletePayerAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_ListAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAccountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ListAccounts(m, &costListAccountsServer{stream})
}

type Cost_ListAccountsServer interface {
	Send(*api.Account) error
	grpc.ServerStream
}

type costListAccountsServer struct {
	grpc.ServerStream
}

func (x *costListAccountsServer) Send(m *api.Account) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetCalculatorConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCalculatorConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetCalculatorConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetCalculatorConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetCalculatorConfig(ctx, req.(*GetCalculatorConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_ImportCurFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCurFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).ImportCurFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/ImportCurFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).ImportCurFiles(ctx, req.(*ImportCurFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_CalculateCosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateCostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).CalculateCosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/CalculateCosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).CalculateCosts(ctx, req.(*CalculateCostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_ListCalculationsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCalculationsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).ListCalculationsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/ListCalculationsHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).ListCalculationsHistory(ctx, req.(*ListCalculationsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_ReadCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ReadCosts(m, &costReadCostsServer{stream})
}

type Cost_ReadCostsServer interface {
	Send(*CostItem) error
	grpc.ServerStream
}

type costReadCostsServer struct {
	grpc.ServerStream
}

func (x *costReadCostsServer) Send(m *CostItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_ReadAdjustments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadAdjustmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ReadAdjustments(m, &costReadAdjustmentsServer{stream})
}

type Cost_ReadAdjustmentsServer interface {
	Send(*AdjustmentItem) error
	grpc.ServerStream
}

type costReadAdjustmentsServer struct {
	grpc.ServerStream
}

func (x *costReadAdjustmentsServer) Send(m *AdjustmentItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_ReadBillingGroupTagCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadBillingGroupTagCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ReadBillingGroupTagCosts(m, &costReadBillingGroupTagCostsServer{stream})
}

type Cost_ReadBillingGroupTagCostsServer interface {
	Send(*CostItem) error
	grpc.ServerStream
}

type costReadBillingGroupTagCostsServer struct {
	grpc.ServerStream
}

func (x *costReadBillingGroupTagCostsServer) Send(m *CostItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_ReadBillingGroupNonTagCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadBillingGroupNonTagCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ReadBillingGroupNonTagCosts(m, &costReadBillingGroupNonTagCostsServer{stream})
}

type Cost_ReadBillingGroupNonTagCostsServer interface {
	Send(*CostItem) error
	grpc.ServerStream
}

type costReadBillingGroupNonTagCostsServer struct {
	grpc.ServerStream
}

func (x *costReadBillingGroupNonTagCostsServer) Send(m *CostItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_ReadTagCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadTagCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ReadTagCosts(m, &costReadTagCostsServer{stream})
}

type Cost_ReadTagCostsServer interface {
	Send(*CostItem) error
	grpc.ServerStream
}

type costReadTagCostsServer struct {
	grpc.ServerStream
}

func (x *costReadTagCostsServer) Send(m *CostItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_ReadNonTagCosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadNonTagCostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CostServer).ReadNonTagCosts(m, &costReadNonTagCostsServer{stream})
}

type Cost_ReadNonTagCostsServer interface {
	Send(*CostItem) error
	grpc.ServerStream
}

type costReadNonTagCostsServer struct {
	grpc.ServerStream
}

func (x *costReadNonTagCostsServer) Send(m *CostItem) error {
	return x.ServerStream.SendMsg(m)
}

func _Cost_GetForecasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecastsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetForecasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetForecasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetForecasts(ctx, req.(*GetForecastsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetMonthlyCostForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyCostForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetMonthlyCostForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetMonthlyCostForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetMonthlyCostForecast(ctx, req.(*GetMonthlyCostForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetMonthOnMonthCostForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthOnMonthCostForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetMonthOnMonthCostForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetMonthOnMonthCostForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetMonthOnMonthCostForecast(ctx, req.(*GetMonthOnMonthCostForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cost_GetMonthToDateCostForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthToDateCostForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostServer).GetMonthToDateCostForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blueapi.cost.v1.Cost/GetMonthToDateCostForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostServer).GetMonthToDateCostForecast(ctx, req.(*GetMonthToDateCostForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cost_ServiceDesc is the grpc.ServiceDesc for Cost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.cost.v1.Cost",
	HandlerType: (*CostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPayerAccount",
			Handler:    _Cost_GetPayerAccount_Handler,
		},
		{
			MethodName: "GetPayerAccountImportHistory",
			Handler:    _Cost_GetPayerAccountImportHistory_Handler,
		},
		{
			MethodName: "CreatePayerAccount",
			Handler:    _Cost_CreatePayerAccount_Handler,
		},
		{
			MethodName: "DeletePayerAccount",
			Handler:    _Cost_DeletePayerAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Cost_GetAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Cost_CreateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _Cost_DeleteAccount_Handler,
		},
		{
			MethodName: "GetCalculatorConfig",
			Handler:    _Cost_GetCalculatorConfig_Handler,
		},
		{
			MethodName: "ImportCurFiles",
			Handler:    _Cost_ImportCurFiles_Handler,
		},
		{
			MethodName: "CalculateCosts",
			Handler:    _Cost_CalculateCosts_Handler,
		},
		{
			MethodName: "ListCalculationsHistory",
			Handler:    _Cost_ListCalculationsHistory_Handler,
		},
		{
			MethodName: "GetForecasts",
			Handler:    _Cost_GetForecasts_Handler,
		},
		{
			MethodName: "GetMonthlyCostForecast",
			Handler:    _Cost_GetMonthlyCostForecast_Handler,
		},
		{
			MethodName: "GetMonthOnMonthCostForecast",
			Handler:    _Cost_GetMonthOnMonthCostForecast_Handler,
		},
		{
			MethodName: "GetMonthToDateCostForecast",
			Handler:    _Cost_GetMonthToDateCostForecast_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPayerAccounts",
			Handler:       _Cost_ListPayerAccounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAccounts",
			Handler:       _Cost_ListAccounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadCosts",
			Handler:       _Cost_ReadCosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadAdjustments",
			Handler:       _Cost_ReadAdjustments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadBillingGroupTagCosts",
			Handler:       _Cost_ReadBillingGroupTagCosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadBillingGroupNonTagCosts",
			Handler:       _Cost_ReadBillingGroupNonTagCosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadTagCosts",
			Handler:       _Cost_ReadTagCosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadNonTagCosts",
			Handler:       _Cost_ReadNonTagCosts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cost/v1/cost.proto",
}
