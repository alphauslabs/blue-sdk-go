// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.1
// source: cost/v1/cost.proto

package cost

import (
	api "github.com/alphauslabs/blue-sdk-go/api"
	aws "github.com/alphauslabs/blue-sdk-go/api/aws"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for the Cost.ListManagementAccounts rpc.
type ListManagementAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListManagementAccountsRequest) Reset() {
	*x = ListManagementAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListManagementAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListManagementAccountsRequest) ProtoMessage() {}

func (x *ListManagementAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListManagementAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListManagementAccountsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{0}
}

// Request message for the Cost.GetManagementAccount rpc.
type GetManagementAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The id of the account to get.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetManagementAccountRequest) Reset() {
	*x = GetManagementAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetManagementAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManagementAccountRequest) ProtoMessage() {}

func (x *GetManagementAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManagementAccountRequest.ProtoReflect.Descriptor instead.
func (*GetManagementAccountRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{1}
}

func (x *GetManagementAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the Cost.GetManagementAccountUpdateHistory rpc.
type GetManagementAccountUpdateHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The management account id to query.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. The month to query. If empty, defaults to current month.
	// Format is `yyyymm`. For example, June 2021 will be `202106`.
	Month string `protobuf:"bytes,2,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *GetManagementAccountUpdateHistoryRequest) Reset() {
	*x = GetManagementAccountUpdateHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetManagementAccountUpdateHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManagementAccountUpdateHistoryRequest) ProtoMessage() {}

func (x *GetManagementAccountUpdateHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManagementAccountUpdateHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetManagementAccountUpdateHistoryRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{2}
}

func (x *GetManagementAccountUpdateHistoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetManagementAccountUpdateHistoryRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

// Response message for the Cost.GetManagementAccountUpdateHistory rpc.
type GetManagementAccountUpdateHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The management account id being queried.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The month being queried.
	Month string `protobuf:"bytes,2,opt,name=month,proto3" json:"month,omitempty"`
	// The list of timestamps the account was updated and imported.
	Timestamps []string `protobuf:"bytes,3,rep,name=timestamps,proto3" json:"timestamps,omitempty"`
}

func (x *GetManagementAccountUpdateHistoryResponse) Reset() {
	*x = GetManagementAccountUpdateHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetManagementAccountUpdateHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManagementAccountUpdateHistoryResponse) ProtoMessage() {}

func (x *GetManagementAccountUpdateHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManagementAccountUpdateHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetManagementAccountUpdateHistoryResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{3}
}

func (x *GetManagementAccountUpdateHistoryResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetManagementAccountUpdateHistoryResponse) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *GetManagementAccountUpdateHistoryResponse) GetTimestamps() []string {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

// Request message for the Cost.CreateManagementAccount rpc.
type CreateManagementAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The id of the management account.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. The name, or description of the management account.
	// This is set to `id` when not specified.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Required. S3 Bucket name.
	BucketName string `protobuf:"bytes,3,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	// Optional. Prefix.
	Prefix string `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Required. Report name.
	ReportName string `protobuf:"bytes,5,opt,name=reportName,proto3" json:"reportName,omitempty"`
	// Required. Role ARN for Alphaus to assume for access.
	RoleArn string `protobuf:"bytes,6,opt,name=roleArn,proto3" json:"roleArn,omitempty"`
}

func (x *CreateManagementAccountRequest) Reset() {
	*x = CreateManagementAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateManagementAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateManagementAccountRequest) ProtoMessage() {}

func (x *CreateManagementAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateManagementAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateManagementAccountRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{4}
}

func (x *CreateManagementAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateManagementAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateManagementAccountRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *CreateManagementAccountRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *CreateManagementAccountRequest) GetReportName() string {
	if x != nil {
		return x.ReportName
	}
	return ""
}

func (x *CreateManagementAccountRequest) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

// Request message for the Cost.DeleteManagementAccount rpc.
type DeleteManagementAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The id of the management account.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteManagementAccountRequest) Reset() {
	*x = DeleteManagementAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteManagementAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteManagementAccountRequest) ProtoMessage() {}

func (x *DeleteManagementAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteManagementAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteManagementAccountRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteManagementAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the Cost.ListAccounts rpc.
type ListAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *ListAccountsRequest) Reset() {
	*x = ListAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsRequest) ProtoMessage() {}

func (x *ListAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListAccountsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{6}
}

func (x *ListAccountsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

// Response message for the Cost.ListAccounts rpc.
type ListAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aws *aws.Account `protobuf:"bytes,1,opt,name=aws,proto3" json:"aws,omitempty"`
}

func (x *ListAccountsResponse) Reset() {
	*x = ListAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsResponse) ProtoMessage() {}

func (x *ListAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListAccountsResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{7}
}

func (x *ListAccountsResponse) GetAws() *aws.Account {
	if x != nil {
		return x.Aws
	}
	return nil
}

// Request message for the Cost.GetAccount rpc.
type GetAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The account id to retrieve.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{8}
}

func (x *GetAccountRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response message for the Cost.GetAccount rpc.
type GetAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aws *aws.Account `protobuf:"bytes,1,opt,name=aws,proto3" json:"aws,omitempty"`
}

func (x *GetAccountResponse) Reset() {
	*x = GetAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountResponse) ProtoMessage() {}

func (x *GetAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountResponse.ProtoReflect.Descriptor instead.
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{9}
}

func (x *GetAccountResponse) GetAws() *aws.Account {
	if x != nil {
		return x.Aws
	}
	return nil
}

// AWS-specific options for registering an account.
type CreateAccountOptionsAws struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The management account id (formerly known as master, or payer) to
	// which an account belongs to, initially. If the account is moved to another
	// management account, the system is able to detect it and set this value
	// accordingly.
	ManagementAccountId string `protobuf:"bytes,1,opt,name=managementAccountId,proto3" json:"managementAccountId,omitempty"`
}

func (x *CreateAccountOptionsAws) Reset() {
	*x = CreateAccountOptionsAws{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountOptionsAws) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountOptionsAws) ProtoMessage() {}

func (x *CreateAccountOptionsAws) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountOptionsAws.ProtoReflect.Descriptor instead.
func (*CreateAccountOptionsAws) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{10}
}

func (x *CreateAccountOptionsAws) GetManagementAccountId() string {
	if x != nil {
		return x.ManagementAccountId
	}
	return ""
}

// Request message for the Cost.CreateAccount rpc.
type CreateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The account id to register.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. If empty, set to the value of `id`.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The parent `companyId` of the billing group to which this account
	// will belong to.
	Parent string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. AWS-specific options.
	AwsOptions *CreateAccountOptionsAws `protobuf:"bytes,5,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *CreateAccountRequest) Reset() {
	*x = CreateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountRequest) ProtoMessage() {}

func (x *CreateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{11}
}

func (x *CreateAccountRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAccountRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateAccountRequest) GetAwsOptions() *CreateAccountOptionsAws {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

// Response message for the Cost.CreateAccount rpc.
type CreateAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aws *aws.Account `protobuf:"bytes,1,opt,name=aws,proto3" json:"aws,omitempty"`
}

func (x *CreateAccountResponse) Reset() {
	*x = CreateAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountResponse) ProtoMessage() {}

func (x *CreateAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateAccountResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{12}
}

func (x *CreateAccountResponse) GetAws() *aws.Account {
	if x != nil {
		return x.Aws
	}
	return nil
}

// Request message for the Cost.DeleteAccount rpc.
type DeleteAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The account id to delete.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAccountRequest) Reset() {
	*x = DeleteAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountRequest) ProtoMessage() {}

func (x *DeleteAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteAccountRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DeleteAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the Cost.ImportCurFiles rpc.
type ImportCurFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The month to import. If empty, it defaults to the current month.
	// Format is `yyyymm`. For example, June 2021 will be `202106`.
	Month string `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	// Optional. A comma-separated list of management accounts to import. If empty,
	// all CURs associated with all your management accounts will be imported.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ImportCurFilesRequest) Reset() {
	*x = ImportCurFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportCurFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportCurFilesRequest) ProtoMessage() {}

func (x *ImportCurFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportCurFilesRequest.ProtoReflect.Descriptor instead.
func (*ImportCurFilesRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{14}
}

func (x *ImportCurFilesRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *ImportCurFilesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Response message wrapper for cloud costs.
type CostItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aws *aws.Cost `protobuf:"bytes,1,opt,name=aws,proto3" json:"aws,omitempty"`
}

func (x *CostItem) Reset() {
	*x = CostItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostItem) ProtoMessage() {}

func (x *CostItem) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostItem.ProtoReflect.Descriptor instead.
func (*CostItem) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{15}
}

func (x *CostItem) GetAws() *aws.Cost {
	if x != nil {
		return x.Aws
	}
	return nil
}

// AWS-specific options.
type AwsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. If set to true, stream will include resource tags. Note that this could
	// potentially increase the data size if you have lots of tag information.
	IncludeTags bool `protobuf:"varint,1,opt,name=includeTags,proto3" json:"includeTags,omitempty"`
	// Optional. If set to true, stream will include resource cost category information.
	// Note that this could potentially increase the data size if you have lots of cost
	// category information.
	IncludeCostCategories bool `protobuf:"varint,2,opt,name=includeCostCategories,proto3" json:"includeCostCategories,omitempty"`
}

func (x *AwsOptions) Reset() {
	*x = AwsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsOptions) ProtoMessage() {}

func (x *AwsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsOptions.ProtoReflect.Descriptor instead.
func (*AwsOptions) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{16}
}

func (x *AwsOptions) GetIncludeTags() bool {
	if x != nil {
		return x.IncludeTags
	}
	return false
}

func (x *AwsOptions) GetIncludeCostCategories() bool {
	if x != nil {
		return x.IncludeCostCategories
	}
	return false
}

// Request message for the Cost.CalculateCosts rpc.
type CalculateCostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. If set to a particular billing group, calculate for that billing group.
	// If empty, calculate for all billing groups.
	//
	// At the moment, for AWS, this is only valid for account type billing groups, not
	// tag billing groups. If a tag billing group is provided, it is discarded and the
	// calculation is done for the whole organization.
	CompanyId string `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"`
	// Optional. The month to calculate. If empty, it defaults to the previous month.
	// Format is `yyyymm`. For example, June 2021 will be `202106`.
	Month string `protobuf:"bytes,3,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *CalculateCostsRequest) Reset() {
	*x = CalculateCostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateCostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateCostsRequest) ProtoMessage() {}

func (x *CalculateCostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateCostsRequest.ProtoReflect.Descriptor instead.
func (*CalculateCostsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{17}
}

func (x *CalculateCostsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CalculateCostsRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *CalculateCostsRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

// Request message for the Cost.ReadCosts rpc.
type ReadCostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. If set, reads the usage-based cost details of this billing group. Valid
	// only if `accountId` is not set. If both `companyId` and `accountId` are not set,
	// reads the usage-based cost details of the whole organization.
	// Only valid for Ripple users. Implied (or discarded) for Wave(Pro) users.
	CompanyId string `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"`
	// Optional. If set, reads the usage-based cost details of this account. Also invalidates
	// the `billingGroupId` value even if set. If both `billingGroupId` and `accountId` are
	// not set, reads the usage-based cost details of the whole organization.
	AccountId string `protobuf:"bytes,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// Optional. Timestamp to start streaming data from. If not set, the first day of the
	// current month will be used. Format: yyyymmdd.
	StartTime string `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// Optional. Timestamp to end the streaming data. If not set, current date will be used.
	// Format: `yyyymmd`.
	EndTime string `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	// Optional. AWS-specific request options.
	AwsOptions *AwsOptions `protobuf:"bytes,6,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *ReadCostsRequest) Reset() {
	*x = ReadCostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCostsRequest) ProtoMessage() {}

func (x *ReadCostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCostsRequest.ProtoReflect.Descriptor instead.
func (*ReadCostsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{18}
}

func (x *ReadCostsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ReadCostsRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *ReadCostsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReadCostsRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ReadCostsRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ReadCostsRequest) GetAwsOptions() *AwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

// Response message wrapper for cloud cost adjustments.
type AdjustmentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aws *aws.Adjustment `protobuf:"bytes,1,opt,name=aws,proto3" json:"aws,omitempty"`
}

func (x *AdjustmentItem) Reset() {
	*x = AdjustmentItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjustmentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustmentItem) ProtoMessage() {}

func (x *AdjustmentItem) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustmentItem.ProtoReflect.Descriptor instead.
func (*AdjustmentItem) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{19}
}

func (x *AdjustmentItem) GetAws() *aws.Adjustment {
	if x != nil {
		return x.Aws
	}
	return nil
}

// Request message for the Cost.ReadAdjustments rpc.
type ReadAdjustmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. If set, reads the non-usage-based adjustment details of this billing group.
	// Valid only if `accountId` is not set. If both `companyId` and `accountId` are not
	// set, reads the adjustment details of the whole organization.
	// Only valid for Ripple users. Implied (or discarded) for Wave(Pro) users.
	CompanyId string `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"`
	// Optional. If set, reads the non-usaged-based adjustment details of this account. Also
	// invalidates the `billingGroupId` value even if set. If both `billingGroupId` and
	// `accountId` are not set, reads the adjustment details of the whole organization.
	AccountId string `protobuf:"bytes,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// Optional. Timestamp to start streaming data from. If not set, the first day of the
	// current month will be used. Format: `yyyymmdd`.
	StartTime string `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// Optional. Timestamp to end the streaming data. If not set, current date will be used.
	// Format: `yyyymmdd`.
	EndTime string `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *ReadAdjustmentsRequest) Reset() {
	*x = ReadAdjustmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadAdjustmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAdjustmentsRequest) ProtoMessage() {}

func (x *ReadAdjustmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAdjustmentsRequest.ProtoReflect.Descriptor instead.
func (*ReadAdjustmentsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{20}
}

func (x *ReadAdjustmentsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ReadAdjustmentsRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *ReadAdjustmentsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReadAdjustmentsRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ReadAdjustmentsRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

// Request message for the Cost.ReadBillingGroupTagCosts rpc.
type ReadBillingGroupTagCostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The company id to stream.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. Timestamp to start streaming data from. If not set, the first day of the
	// current month will be used. Format: `yyyymmdd`.
	StartTime string `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// Optional. Timestamp to end the streaming data. If not set, current date will be used.
	// Format: `yyyymmdd`.
	EndTime string `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *ReadBillingGroupTagCostsRequest) Reset() {
	*x = ReadBillingGroupTagCostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadBillingGroupTagCostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadBillingGroupTagCostsRequest) ProtoMessage() {}

func (x *ReadBillingGroupTagCostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadBillingGroupTagCostsRequest.ProtoReflect.Descriptor instead.
func (*ReadBillingGroupTagCostsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{21}
}

func (x *ReadBillingGroupTagCostsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ReadBillingGroupTagCostsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadBillingGroupTagCostsRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ReadBillingGroupTagCostsRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

// Request message for the Cost.ReadBillingGroupNonTagCosts rpc.
type ReadBillingGroupNonTagCostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The company id to stream.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. Timestamp to start streaming data from. If not set, the first day of the
	// current month will be used. Format: `yyyymmdd`.
	StartTime string `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// Optional. Timestamp to end the streaming data. If not set, current date will be used.
	// Format: `yyyymmdd`.
	EndTime string `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *ReadBillingGroupNonTagCostsRequest) Reset() {
	*x = ReadBillingGroupNonTagCostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadBillingGroupNonTagCostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadBillingGroupNonTagCostsRequest) ProtoMessage() {}

func (x *ReadBillingGroupNonTagCostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadBillingGroupNonTagCostsRequest.ProtoReflect.Descriptor instead.
func (*ReadBillingGroupNonTagCostsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{22}
}

func (x *ReadBillingGroupNonTagCostsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ReadBillingGroupNonTagCostsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadBillingGroupNonTagCostsRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ReadBillingGroupNonTagCostsRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

// Request message for CreateBudgetConfig.
type CreateBudgetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Budget configuration to save.
	BudgetConfig *api.BudgetConfiguration `protobuf:"bytes,2,opt,name=budgetConfig,proto3" json:"budgetConfig,omitempty"`
}

func (x *CreateBudgetConfigRequest) Reset() {
	*x = CreateBudgetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBudgetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBudgetConfigRequest) ProtoMessage() {}

func (x *CreateBudgetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBudgetConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateBudgetConfigRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{23}
}

func (x *CreateBudgetConfigRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateBudgetConfigRequest) GetBudgetConfig() *api.BudgetConfiguration {
	if x != nil {
		return x.BudgetConfig
	}
	return nil
}

// Request message for UpdateBudgetConfig.
type UpdateBudgetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Budget configuration id to update.
	BudgetConfigId string `protobuf:"bytes,2,opt,name=budgetConfigId,proto3" json:"budgetConfigId,omitempty"`
	// Required. Budget configuration with update information.
	BudgetConfig *api.BudgetConfiguration `protobuf:"bytes,3,opt,name=budgetConfig,proto3" json:"budgetConfig,omitempty"`
}

func (x *UpdateBudgetConfigRequest) Reset() {
	*x = UpdateBudgetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBudgetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBudgetConfigRequest) ProtoMessage() {}

func (x *UpdateBudgetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBudgetConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateBudgetConfigRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateBudgetConfigRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *UpdateBudgetConfigRequest) GetBudgetConfigId() string {
	if x != nil {
		return x.BudgetConfigId
	}
	return ""
}

func (x *UpdateBudgetConfigRequest) GetBudgetConfig() *api.BudgetConfiguration {
	if x != nil {
		return x.BudgetConfig
	}
	return nil
}

// Request message for GetBudgetConfig.
type GetBudgetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Valid values are `aws`, `azure`, and `gcp`.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Billing group id to retrieve.
	BillingGroupId string `protobuf:"bytes,2,opt,name=billingGroupId,proto3" json:"billingGroupId,omitempty"`
	// Optional. If set, only budget configuration for the specified account is returned.
	AccountId string `protobuf:"bytes,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
}

func (x *GetBudgetConfigRequest) Reset() {
	*x = GetBudgetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBudgetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBudgetConfigRequest) ProtoMessage() {}

func (x *GetBudgetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBudgetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetBudgetConfigRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{25}
}

func (x *GetBudgetConfigRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetBudgetConfigRequest) GetBillingGroupId() string {
	if x != nil {
		return x.BillingGroupId
	}
	return ""
}

func (x *GetBudgetConfigRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Response message for GetBudgetConfig.
// If accountId is specified in the request, only one budget configuration is returned.
type GetBudgetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*api.BudgetConfiguration `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetBudgetConfigResponse) Reset() {
	*x = GetBudgetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBudgetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBudgetConfigResponse) ProtoMessage() {}

func (x *GetBudgetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBudgetConfigResponse.ProtoReflect.Descriptor instead.
func (*GetBudgetConfigResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{26}
}

func (x *GetBudgetConfigResponse) GetData() []*api.BudgetConfiguration {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request message for GetForecasts per billing group.
type GetForecastsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. Company Id of Billing Group to retrieve.
	// Default value is user's Company Id
	CompanyId string `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"`
	// Optional. Forecast frequency. Valid values are `daily` and `monthly`.
	// Default value is `daily`.
	Frequency string `protobuf:"bytes,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Optional. Forecast granularity. Valid values are `account`, `category` and `product`.
	// Default value is `account`.
	Level string `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	// Optional. Starting date to get data.
	// If from_date is less than current date, historical costs are included.
	// If from_date is greater than current date, only forecasted costs are returned.
	// Format: `yyyy-mm-dd`.
	FromDate string `protobuf:"bytes,5,opt,name=fromDate,proto3" json:"fromDate,omitempty"`
	// Optional. Last date to get forecast cost.
	// Currently, we only support 90 days forecasting from the first day of current month.
	// Format: `yyyy-mm-dd`.
	ToDate string `protobuf:"bytes,6,opt,name=toDate,proto3" json:"toDate,omitempty"`
}

func (x *GetForecastsRequest) Reset() {
	*x = GetForecastsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForecastsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastsRequest) ProtoMessage() {}

func (x *GetForecastsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastsRequest.ProtoReflect.Descriptor instead.
func (*GetForecastsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{27}
}

func (x *GetForecastsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetForecastsRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *GetForecastsRequest) GetFrequency() string {
	if x != nil {
		return x.Frequency
	}
	return ""
}

func (x *GetForecastsRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *GetForecastsRequest) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *GetForecastsRequest) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

// Response message for GetForecasts per billing group.
type GetForecastsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *api.BillingGroupForecast `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetForecastsResponse) Reset() {
	*x = GetForecastsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForecastsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastsResponse) ProtoMessage() {}

func (x *GetForecastsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastsResponse.ProtoReflect.Descriptor instead.
func (*GetForecastsResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{28}
}

func (x *GetForecastsResponse) GetData() *api.BillingGroupForecast {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request message for GetMonthToDateForecast per billing group.
type GetMonthToDateForecastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. Company Id of Billing Group to retrieve.
	// Default value is user's Company Id
	CompanyId string `protobuf:"bytes,2,opt,name=companyId,proto3" json:"companyId,omitempty"`
}

func (x *GetMonthToDateForecastRequest) Reset() {
	*x = GetMonthToDateForecastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonthToDateForecastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthToDateForecastRequest) ProtoMessage() {}

func (x *GetMonthToDateForecastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthToDateForecastRequest.ProtoReflect.Descriptor instead.
func (*GetMonthToDateForecastRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{29}
}

func (x *GetMonthToDateForecastRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetMonthToDateForecastRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

// Response message for GetMonthToDateForecast per billing group.
type GetMonthToDateForecastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *api.BillingGroupMonthToDateForecast `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMonthToDateForecastResponse) Reset() {
	*x = GetMonthToDateForecastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonthToDateForecastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthToDateForecastResponse) ProtoMessage() {}

func (x *GetMonthToDateForecastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthToDateForecastResponse.ProtoReflect.Descriptor instead.
func (*GetMonthToDateForecastResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{30}
}

func (x *GetMonthToDateForecastResponse) GetData() *api.BillingGroupMonthToDateForecast {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_cost_v1_cost_proto protoreflect.FileDescriptor

var file_cost_v1_cost_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x1f, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x2d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x50, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x22, 0x71, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x22, 0x30,
	0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2d, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22,
	0x42, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x03,
	0x61, 0x77, 0x73, 0x22, 0x3b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x03, 0x61,
	0x77, 0x73, 0x22, 0x4b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x77, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xb4, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0a,
	0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x77, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x43, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x03, 0x61, 0x77, 0x73, 0x22, 0x3e, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x15, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x33, 0x0a, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x27,
	0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x43, 0x6f,
	0x73, 0x74, 0x52, 0x03, 0x61, 0x77, 0x73, 0x22, 0x64, 0x0a, 0x0a, 0x41, 0x77, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x54, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x63, 0x0a,
	0x15, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x22, 0xdb, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x3f, 0x0a, 0x0e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x61, 0x77,
	0x73, 0x22, 0xa4, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x61,
	0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67,
	0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a,
	0x22, 0x52, 0x65, 0x61, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x62, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa1,
	0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c,
	0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x76, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb3, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x4d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x55, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x6f, 0x44, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x9f, 0x17, 0x0a, 0x04,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x63, 0x74, 0x73, 0x30, 0x01, 0x12, 0x84, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xce, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x39, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x77,
	0x73, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x63, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x88, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x63, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7c, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12,
	0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x72, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x73, 0x0a, 0x0e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x77, 0x73, 0x3a, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x78, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x73, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x3a, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x09, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x73,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x52,
	0x65, 0x61, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x3a,
	0x01, 0x2a, 0x30, 0x01, 0x12, 0xa0, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x64, 0x42, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x73, 0x74,
	0x73, 0x12, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x35,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x63, 0x6f, 0x73, 0x74, 0x73,
	0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0xa9, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x61, 0x64,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x6e, 0x54,
	0x61, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x6e, 0x54, 0x61, 0x67,
	0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22,
	0x30, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x6e, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x3a, 0x72, 0x65, 0x61,
	0x64, 0x30, 0x01, 0x12, 0x92, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x38,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0c, 0x62, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa3, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x1a, 0x33, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x7b, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x7d,
	0x3a, 0x0c, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x90,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x62, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x7b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x73, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0xa7,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x6f, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d,
	0x2f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x2d, 0x74, 0x6f, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x82, 0x01, 0x92, 0x41, 0x7f, 0x12, 0x2f,
	0x42, 0x61, 0x73, 0x65, 0x20, 0x55, 0x52, 0x4c, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x1a,
	0x4c, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75,
	0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72,
	0x65, 0x65, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x42, 0xfc, 0x02,
	0x0a, 0x16, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x09, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x92, 0x41, 0xb0, 0x02, 0x12, 0xce, 0x01, 0x0a,
	0x1a, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x20, 0x42, 0x6c, 0x75, 0x65, 0x3a, 0x20, 0x43,
	0x6f, 0x73, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x1a, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x20, 0x42, 0x6c, 0x75, 0x65, 0x3a, 0x20, 0x43, 0x6f, 0x73,
	0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x69, 0x6f, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x2a,
	0x57, 0x0a, 0x1b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x3a, 0x20, 0x41, 0x70, 0x61, 0x63,
	0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x32, 0x2e, 0x30, 0x12, 0x38,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e,
	0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x72, 0x5d, 0x0a,
	0x25, 0x4d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x75, 0x73, 0x20, 0x42, 0x6c, 0x75, 0x65, 0x3a, 0x20, 0x43, 0x6f, 0x73, 0x74, 0x20, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x69, 0x6f, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cost_v1_cost_proto_rawDescOnce sync.Once
	file_cost_v1_cost_proto_rawDescData = file_cost_v1_cost_proto_rawDesc
)

func file_cost_v1_cost_proto_rawDescGZIP() []byte {
	file_cost_v1_cost_proto_rawDescOnce.Do(func() {
		file_cost_v1_cost_proto_rawDescData = protoimpl.X.CompressGZIP(file_cost_v1_cost_proto_rawDescData)
	})
	return file_cost_v1_cost_proto_rawDescData
}

var file_cost_v1_cost_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_cost_v1_cost_proto_goTypes = []interface{}{
	(*ListManagementAccountsRequest)(nil),             // 0: blueapi.cost.v1.ListManagementAccountsRequest
	(*GetManagementAccountRequest)(nil),               // 1: blueapi.cost.v1.GetManagementAccountRequest
	(*GetManagementAccountUpdateHistoryRequest)(nil),  // 2: blueapi.cost.v1.GetManagementAccountUpdateHistoryRequest
	(*GetManagementAccountUpdateHistoryResponse)(nil), // 3: blueapi.cost.v1.GetManagementAccountUpdateHistoryResponse
	(*CreateManagementAccountRequest)(nil),            // 4: blueapi.cost.v1.CreateManagementAccountRequest
	(*DeleteManagementAccountRequest)(nil),            // 5: blueapi.cost.v1.DeleteManagementAccountRequest
	(*ListAccountsRequest)(nil),                       // 6: blueapi.cost.v1.ListAccountsRequest
	(*ListAccountsResponse)(nil),                      // 7: blueapi.cost.v1.ListAccountsResponse
	(*GetAccountRequest)(nil),                         // 8: blueapi.cost.v1.GetAccountRequest
	(*GetAccountResponse)(nil),                        // 9: blueapi.cost.v1.GetAccountResponse
	(*CreateAccountOptionsAws)(nil),                   // 10: blueapi.cost.v1.CreateAccountOptionsAws
	(*CreateAccountRequest)(nil),                      // 11: blueapi.cost.v1.CreateAccountRequest
	(*CreateAccountResponse)(nil),                     // 12: blueapi.cost.v1.CreateAccountResponse
	(*DeleteAccountRequest)(nil),                      // 13: blueapi.cost.v1.DeleteAccountRequest
	(*ImportCurFilesRequest)(nil),                     // 14: blueapi.cost.v1.ImportCurFilesRequest
	(*CostItem)(nil),                                  // 15: blueapi.cost.v1.CostItem
	(*AwsOptions)(nil),                                // 16: blueapi.cost.v1.AwsOptions
	(*CalculateCostsRequest)(nil),                     // 17: blueapi.cost.v1.CalculateCostsRequest
	(*ReadCostsRequest)(nil),                          // 18: blueapi.cost.v1.ReadCostsRequest
	(*AdjustmentItem)(nil),                            // 19: blueapi.cost.v1.AdjustmentItem
	(*ReadAdjustmentsRequest)(nil),                    // 20: blueapi.cost.v1.ReadAdjustmentsRequest
	(*ReadBillingGroupTagCostsRequest)(nil),           // 21: blueapi.cost.v1.ReadBillingGroupTagCostsRequest
	(*ReadBillingGroupNonTagCostsRequest)(nil),        // 22: blueapi.cost.v1.ReadBillingGroupNonTagCostsRequest
	(*CreateBudgetConfigRequest)(nil),                 // 23: blueapi.cost.v1.CreateBudgetConfigRequest
	(*UpdateBudgetConfigRequest)(nil),                 // 24: blueapi.cost.v1.UpdateBudgetConfigRequest
	(*GetBudgetConfigRequest)(nil),                    // 25: blueapi.cost.v1.GetBudgetConfigRequest
	(*GetBudgetConfigResponse)(nil),                   // 26: blueapi.cost.v1.GetBudgetConfigResponse
	(*GetForecastsRequest)(nil),                       // 27: blueapi.cost.v1.GetForecastsRequest
	(*GetForecastsResponse)(nil),                      // 28: blueapi.cost.v1.GetForecastsResponse
	(*GetMonthToDateForecastRequest)(nil),             // 29: blueapi.cost.v1.GetMonthToDateForecastRequest
	(*GetMonthToDateForecastResponse)(nil),            // 30: blueapi.cost.v1.GetMonthToDateForecastResponse
	(*aws.Account)(nil),                               // 31: blueapi.api.aws.Account
	(*aws.Cost)(nil),                                  // 32: blueapi.api.aws.Cost
	(*aws.Adjustment)(nil),                            // 33: blueapi.api.aws.Adjustment
	(*api.BudgetConfiguration)(nil),                   // 34: blueapi.api.BudgetConfiguration
	(*api.BillingGroupForecast)(nil),                  // 35: blueapi.api.BillingGroupForecast
	(*api.BillingGroupMonthToDateForecast)(nil),       // 36: blueapi.api.BillingGroupMonthToDateForecast
	(*emptypb.Empty)(nil),                             // 37: google.protobuf.Empty
	(*api.Operation)(nil),                             // 38: blueapi.api.Operation
}
var file_cost_v1_cost_proto_depIdxs = []int32{
	31, // 0: blueapi.cost.v1.ListAccountsResponse.aws:type_name -> blueapi.api.aws.Account
	31, // 1: blueapi.cost.v1.GetAccountResponse.aws:type_name -> blueapi.api.aws.Account
	10, // 2: blueapi.cost.v1.CreateAccountRequest.awsOptions:type_name -> blueapi.cost.v1.CreateAccountOptionsAws
	31, // 3: blueapi.cost.v1.CreateAccountResponse.aws:type_name -> blueapi.api.aws.Account
	32, // 4: blueapi.cost.v1.CostItem.aws:type_name -> blueapi.api.aws.Cost
	16, // 5: blueapi.cost.v1.ReadCostsRequest.awsOptions:type_name -> blueapi.cost.v1.AwsOptions
	33, // 6: blueapi.cost.v1.AdjustmentItem.aws:type_name -> blueapi.api.aws.Adjustment
	34, // 7: blueapi.cost.v1.CreateBudgetConfigRequest.budgetConfig:type_name -> blueapi.api.BudgetConfiguration
	34, // 8: blueapi.cost.v1.UpdateBudgetConfigRequest.budgetConfig:type_name -> blueapi.api.BudgetConfiguration
	34, // 9: blueapi.cost.v1.GetBudgetConfigResponse.data:type_name -> blueapi.api.BudgetConfiguration
	35, // 10: blueapi.cost.v1.GetForecastsResponse.data:type_name -> blueapi.api.BillingGroupForecast
	36, // 11: blueapi.cost.v1.GetMonthToDateForecastResponse.data:type_name -> blueapi.api.BillingGroupMonthToDateForecast
	0,  // 12: blueapi.cost.v1.Cost.ListManagementAccounts:input_type -> blueapi.cost.v1.ListManagementAccountsRequest
	1,  // 13: blueapi.cost.v1.Cost.GetManagementAccount:input_type -> blueapi.cost.v1.GetManagementAccountRequest
	2,  // 14: blueapi.cost.v1.Cost.GetManagementAccountUpdateHistory:input_type -> blueapi.cost.v1.GetManagementAccountUpdateHistoryRequest
	4,  // 15: blueapi.cost.v1.Cost.CreateManagementAccount:input_type -> blueapi.cost.v1.CreateManagementAccountRequest
	5,  // 16: blueapi.cost.v1.Cost.DeleteManagementAccount:input_type -> blueapi.cost.v1.DeleteManagementAccountRequest
	6,  // 17: blueapi.cost.v1.Cost.ListAccounts:input_type -> blueapi.cost.v1.ListAccountsRequest
	8,  // 18: blueapi.cost.v1.Cost.GetAccount:input_type -> blueapi.cost.v1.GetAccountRequest
	11, // 19: blueapi.cost.v1.Cost.CreateAccount:input_type -> blueapi.cost.v1.CreateAccountRequest
	13, // 20: blueapi.cost.v1.Cost.DeleteAccount:input_type -> blueapi.cost.v1.DeleteAccountRequest
	14, // 21: blueapi.cost.v1.Cost.ImportCurFiles:input_type -> blueapi.cost.v1.ImportCurFilesRequest
	17, // 22: blueapi.cost.v1.Cost.CalculateCosts:input_type -> blueapi.cost.v1.CalculateCostsRequest
	18, // 23: blueapi.cost.v1.Cost.ReadCosts:input_type -> blueapi.cost.v1.ReadCostsRequest
	20, // 24: blueapi.cost.v1.Cost.ReadAdjustments:input_type -> blueapi.cost.v1.ReadAdjustmentsRequest
	21, // 25: blueapi.cost.v1.Cost.ReadBillingGroupTagCosts:input_type -> blueapi.cost.v1.ReadBillingGroupTagCostsRequest
	22, // 26: blueapi.cost.v1.Cost.ReadBillingGroupNonTagCosts:input_type -> blueapi.cost.v1.ReadBillingGroupNonTagCostsRequest
	23, // 27: blueapi.cost.v1.Cost.CreateBudgetConfig:input_type -> blueapi.cost.v1.CreateBudgetConfigRequest
	24, // 28: blueapi.cost.v1.Cost.UpdateBudgetConfig:input_type -> blueapi.cost.v1.UpdateBudgetConfigRequest
	25, // 29: blueapi.cost.v1.Cost.GetBudgetConfig:input_type -> blueapi.cost.v1.GetBudgetConfigRequest
	27, // 30: blueapi.cost.v1.Cost.GetForecasts:input_type -> blueapi.cost.v1.GetForecastsRequest
	29, // 31: blueapi.cost.v1.Cost.GetMonthToDateForecast:input_type -> blueapi.cost.v1.GetMonthToDateForecastRequest
	31, // 32: blueapi.cost.v1.Cost.ListManagementAccounts:output_type -> blueapi.api.aws.Account
	31, // 33: blueapi.cost.v1.Cost.GetManagementAccount:output_type -> blueapi.api.aws.Account
	3,  // 34: blueapi.cost.v1.Cost.GetManagementAccountUpdateHistory:output_type -> blueapi.cost.v1.GetManagementAccountUpdateHistoryResponse
	31, // 35: blueapi.cost.v1.Cost.CreateManagementAccount:output_type -> blueapi.api.aws.Account
	37, // 36: blueapi.cost.v1.Cost.DeleteManagementAccount:output_type -> google.protobuf.Empty
	7,  // 37: blueapi.cost.v1.Cost.ListAccounts:output_type -> blueapi.cost.v1.ListAccountsResponse
	9,  // 38: blueapi.cost.v1.Cost.GetAccount:output_type -> blueapi.cost.v1.GetAccountResponse
	12, // 39: blueapi.cost.v1.Cost.CreateAccount:output_type -> blueapi.cost.v1.CreateAccountResponse
	37, // 40: blueapi.cost.v1.Cost.DeleteAccount:output_type -> google.protobuf.Empty
	38, // 41: blueapi.cost.v1.Cost.ImportCurFiles:output_type -> blueapi.api.Operation
	38, // 42: blueapi.cost.v1.Cost.CalculateCosts:output_type -> blueapi.api.Operation
	15, // 43: blueapi.cost.v1.Cost.ReadCosts:output_type -> blueapi.cost.v1.CostItem
	19, // 44: blueapi.cost.v1.Cost.ReadAdjustments:output_type -> blueapi.cost.v1.AdjustmentItem
	15, // 45: blueapi.cost.v1.Cost.ReadBillingGroupTagCosts:output_type -> blueapi.cost.v1.CostItem
	15, // 46: blueapi.cost.v1.Cost.ReadBillingGroupNonTagCosts:output_type -> blueapi.cost.v1.CostItem
	37, // 47: blueapi.cost.v1.Cost.CreateBudgetConfig:output_type -> google.protobuf.Empty
	37, // 48: blueapi.cost.v1.Cost.UpdateBudgetConfig:output_type -> google.protobuf.Empty
	26, // 49: blueapi.cost.v1.Cost.GetBudgetConfig:output_type -> blueapi.cost.v1.GetBudgetConfigResponse
	28, // 50: blueapi.cost.v1.Cost.GetForecasts:output_type -> blueapi.cost.v1.GetForecastsResponse
	30, // 51: blueapi.cost.v1.Cost.GetMonthToDateForecast:output_type -> blueapi.cost.v1.GetMonthToDateForecastResponse
	32, // [32:52] is the sub-list for method output_type
	12, // [12:32] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_cost_v1_cost_proto_init() }
func file_cost_v1_cost_proto_init() {
	if File_cost_v1_cost_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cost_v1_cost_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListManagementAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetManagementAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetManagementAccountUpdateHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetManagementAccountUpdateHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateManagementAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteManagementAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountOptionsAws); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportCurFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateCostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjustmentItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadAdjustmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadBillingGroupTagCostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadBillingGroupNonTagCostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBudgetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBudgetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBudgetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBudgetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForecastsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForecastsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonthToDateForecastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonthToDateForecastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cost_v1_cost_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cost_v1_cost_proto_goTypes,
		DependencyIndexes: file_cost_v1_cost_proto_depIdxs,
		MessageInfos:      file_cost_v1_cost_proto_msgTypes,
	}.Build()
	File_cost_v1_cost_proto = out.File
	file_cost_v1_cost_proto_rawDesc = nil
	file_cost_v1_cost_proto_goTypes = nil
	file_cost_v1_cost_proto_depIdxs = nil
}
