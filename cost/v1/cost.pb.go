// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: cost/v1/cost.proto

package cost

import (
	api "github.com/alphauslabs/blue-sdk-go/api"
	aws "github.com/alphauslabs/blue-sdk-go/api/aws"
	ripple "github.com/alphauslabs/blue-sdk-go/api/ripple"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for the Cost.ListPayerAccounts rpc.
type ListPayerAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *ListPayerAccountsRequest) Reset() {
	*x = ListPayerAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPayerAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPayerAccountsRequest) ProtoMessage() {}

func (x *ListPayerAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPayerAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListPayerAccountsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{0}
}

func (x *ListPayerAccountsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

// Request message for the Cost.GetPayerAccount rpc.
type GetPayerAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The id of the account to get.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPayerAccountRequest) Reset() {
	*x = GetPayerAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayerAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayerAccountRequest) ProtoMessage() {}

func (x *GetPayerAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayerAccountRequest.ProtoReflect.Descriptor instead.
func (*GetPayerAccountRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{1}
}

func (x *GetPayerAccountRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetPayerAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the Cost.GetPayerAccountImportHistory rpc.
type GetPayerAccountImportHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The account id to query. Could be `*`, which implies all payers.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. The UTC month to query. If empty, defaults to current month. Format is `yyyymm`. For example, June 2021 will be `202106`.
	Month string `protobuf:"bytes,3,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *GetPayerAccountImportHistoryRequest) Reset() {
	*x = GetPayerAccountImportHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayerAccountImportHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayerAccountImportHistoryRequest) ProtoMessage() {}

func (x *GetPayerAccountImportHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayerAccountImportHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetPayerAccountImportHistoryRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{2}
}

func (x *GetPayerAccountImportHistoryRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetPayerAccountImportHistoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPayerAccountImportHistoryRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

// Response message for the Cost.GetPayerAccountImportHistory rpc.
type GetPayerAccountImportHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The queried account id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The queried UTC month.
	Month string `protobuf:"bytes,2,opt,name=month,proto3" json:"month,omitempty"`
	// List of timestamps in RFC3339 format with the `T` separator. Example: `2019-10-12T07:20:50.52Z`
	Timestamps []string `protobuf:"bytes,3,rep,name=timestamps,proto3" json:"timestamps,omitempty"`
}

func (x *GetPayerAccountImportHistoryResponse) Reset() {
	*x = GetPayerAccountImportHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayerAccountImportHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayerAccountImportHistoryResponse) ProtoMessage() {}

func (x *GetPayerAccountImportHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayerAccountImportHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetPayerAccountImportHistoryResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{3}
}

func (x *GetPayerAccountImportHistoryResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPayerAccountImportHistoryResponse) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *GetPayerAccountImportHistoryResponse) GetTimestamps() []string {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

// See [https://help.alphaus.cloud/en/articles/3612555-ripple-aws-things-you-need-to-prepare-before-starting] for more information.
//
// See [https://docs.aws.amazon.com/cur/latest/userguide/cur-create.html] for more information. Requirements include: Additional report details = 'Include Resource IDS' enabled, Prefix = non-empty (recommendation only), Time granularity = 'Hourly', File format = 'text/csv'.
type CreatePayerAccountRequestAwsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The id of the management account.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. The name, or description of the management account. This is set to `id` when not specified.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Required. S3 Bucket name.
	BucketName string `protobuf:"bytes,3,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	// Optional. Prefix.
	Prefix string `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Required. Report name.
	ReportName string `protobuf:"bytes,5,opt,name=reportName,proto3" json:"reportName,omitempty"`
	// Required. Role ARN for Alphaus to assume for access.
	RoleArn string `protobuf:"bytes,6,opt,name=roleArn,proto3" json:"roleArn,omitempty"`
}

func (x *CreatePayerAccountRequestAwsOptions) Reset() {
	*x = CreatePayerAccountRequestAwsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePayerAccountRequestAwsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePayerAccountRequestAwsOptions) ProtoMessage() {}

func (x *CreatePayerAccountRequestAwsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePayerAccountRequestAwsOptions.ProtoReflect.Descriptor instead.
func (*CreatePayerAccountRequestAwsOptions) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePayerAccountRequestAwsOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreatePayerAccountRequestAwsOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePayerAccountRequestAwsOptions) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *CreatePayerAccountRequestAwsOptions) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *CreatePayerAccountRequestAwsOptions) GetReportName() string {
	if x != nil {
		return x.ReportName
	}
	return ""
}

func (x *CreatePayerAccountRequestAwsOptions) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

// Request message for the Cost.CreatePayerAccount rpc.
type CreatePayerAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required for the `aws` vendor. AWS-specific options.
	AwsOptions *CreatePayerAccountRequestAwsOptions `protobuf:"bytes,2,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *CreatePayerAccountRequest) Reset() {
	*x = CreatePayerAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePayerAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePayerAccountRequest) ProtoMessage() {}

func (x *CreatePayerAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePayerAccountRequest.ProtoReflect.Descriptor instead.
func (*CreatePayerAccountRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePayerAccountRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreatePayerAccountRequest) GetAwsOptions() *CreatePayerAccountRequestAwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

// Request message for the Cost.DeletePayerAccount rpc.
type DeletePayerAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The id of the account.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeletePayerAccountRequest) Reset() {
	*x = DeletePayerAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePayerAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePayerAccountRequest) ProtoMessage() {}

func (x *DeletePayerAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePayerAccountRequest.ProtoReflect.Descriptor instead.
func (*DeletePayerAccountRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{6}
}

func (x *DeletePayerAccountRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DeletePayerAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the Cost.ListAccounts rpc.
type ListAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *ListAccountsRequest) Reset() {
	*x = ListAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsRequest) ProtoMessage() {}

func (x *ListAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListAccountsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{7}
}

func (x *ListAccountsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

// Request message for the Cost.GetAccount rpc.
type GetAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The account id to retrieve.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{8}
}

func (x *GetAccountRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// AWS-specific options for registering an account.
type CreateAccountRequestAwsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The management account id (formerly known as master, or payer) to which an account belongs to, initially. If the account is moved to another management account, the system is able to detect it and set this value accordingly.
	ManagementAccountId string `protobuf:"bytes,1,opt,name=managementAccountId,proto3" json:"managementAccountId,omitempty"`
}

func (x *CreateAccountRequestAwsOptions) Reset() {
	*x = CreateAccountRequestAwsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountRequestAwsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountRequestAwsOptions) ProtoMessage() {}

func (x *CreateAccountRequestAwsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountRequestAwsOptions.ProtoReflect.Descriptor instead.
func (*CreateAccountRequestAwsOptions) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{9}
}

func (x *CreateAccountRequestAwsOptions) GetManagementAccountId() string {
	if x != nil {
		return x.ManagementAccountId
	}
	return ""
}

// Request message for the Cost.CreateAccount rpc.
type CreateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The account id to register.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. If empty, set to the value of `id`.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The parent `billingInternalId` of the billing group to which this account will belong to.
	Parent string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required for the `aws` vendor. AWS-specific options.
	AwsOptions *CreateAccountRequestAwsOptions `protobuf:"bytes,5,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *CreateAccountRequest) Reset() {
	*x = CreateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountRequest) ProtoMessage() {}

func (x *CreateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{10}
}

func (x *CreateAccountRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAccountRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateAccountRequest) GetAwsOptions() *CreateAccountRequestAwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

// Request message for the Cost.DeleteAccount rpc.
type DeleteAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The account id to delete.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAccountRequest) Reset() {
	*x = DeleteAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountRequest) ProtoMessage() {}

func (x *DeleteAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteAccountRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DeleteAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the Cost.ListCalculatorRunningAccounts rpc.
type ListCalculatorRunningAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. The UTC month to query. Defaults to current month if empty. Format is `yyyymm`. For example, June 2021 will be `202106`.
	Month string `protobuf:"bytes,2,opt,name=month,proto3" json:"month,omitempty"`
}

func (x *ListCalculatorRunningAccountsRequest) Reset() {
	*x = ListCalculatorRunningAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalculatorRunningAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalculatorRunningAccountsRequest) ProtoMessage() {}

func (x *ListCalculatorRunningAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalculatorRunningAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListCalculatorRunningAccountsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{12}
}

func (x *ListCalculatorRunningAccountsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCalculatorRunningAccountsRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

// Response message for the Cost.ListCalculatorRunningAccounts rpc.
type ListCalculatorRunningAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AWS-specific entry.
	Aws *ListCalculatorRunningAccountsResponse_AwsRunningAccount `protobuf:"bytes,1,opt,name=aws,proto3" json:"aws,omitempty"`
}

func (x *ListCalculatorRunningAccountsResponse) Reset() {
	*x = ListCalculatorRunningAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalculatorRunningAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalculatorRunningAccountsResponse) ProtoMessage() {}

func (x *ListCalculatorRunningAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalculatorRunningAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListCalculatorRunningAccountsResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{13}
}

func (x *ListCalculatorRunningAccountsResponse) GetAws() *ListCalculatorRunningAccountsResponse_AwsRunningAccount {
	if x != nil {
		return x.Aws
	}
	return nil
}

// Request message for the Cost.GetCalculatorConfig rpc.
type GetCalculatorConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *GetCalculatorConfigRequest) Reset() {
	*x = GetCalculatorConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCalculatorConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalculatorConfigRequest) ProtoMessage() {}

func (x *GetCalculatorConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalculatorConfigRequest.ProtoReflect.Descriptor instead.
func (*GetCalculatorConfigRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{14}
}

func (x *GetCalculatorConfigRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

// Response message for the Cost.GetCalculatorConfig rpc.
type GetCalculatorConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aws *aws.CalculatorConfig `protobuf:"bytes,1,opt,name=aws,proto3" json:"aws,omitempty"`
}

func (x *GetCalculatorConfigResponse) Reset() {
	*x = GetCalculatorConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCalculatorConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalculatorConfigResponse) ProtoMessage() {}

func (x *GetCalculatorConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalculatorConfigResponse.ProtoReflect.Descriptor instead.
func (*GetCalculatorConfigResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{15}
}

func (x *GetCalculatorConfigResponse) GetAws() *aws.CalculatorConfig {
	if x != nil {
		return x.Aws
	}
	return nil
}

// Request message for the Cost.ImportCurFiles rpc.
type ImportCurFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The UTC month to import. If empty, it defaults to the current month. Format is `yyyymm`. For example, June 2021 will be `202106`.
	Month string `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	// Optional. A comma-separated list of management accounts to import. If empty, all CURs associated with all your management accounts will be imported.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ImportCurFilesRequest) Reset() {
	*x = ImportCurFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportCurFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportCurFilesRequest) ProtoMessage() {}

func (x *ImportCurFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportCurFilesRequest.ProtoReflect.Descriptor instead.
func (*ImportCurFilesRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{16}
}

func (x *ImportCurFilesRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *ImportCurFilesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Response message wrapper for cloud costs.
type CostItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aws *aws.Cost `protobuf:"bytes,1,opt,name=aws,proto3" json:"aws,omitempty"`
}

func (x *CostItem) Reset() {
	*x = CostItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostItem) ProtoMessage() {}

func (x *CostItem) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostItem.ProtoReflect.Descriptor instead.
func (*CostItem) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{17}
}

func (x *CostItem) GetAws() *aws.Cost {
	if x != nil {
		return x.Aws
	}
	return nil
}

type CalculateCostsRequestAwsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. If set to true, discard existing calculation operation(s), if any, and make this as the active/latest one. By default, if there is an ongoing operation during the call, the request will fail.
	Force bool `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"`
	// Optional. If set to true, only calculate for account-type billing groups. If both `accountsOnly` and `tagsOnly` are set to true, `accountsOnly` will prevail.
	AccountsOnly bool `protobuf:"varint,2,opt,name=accountsOnly,proto3" json:"accountsOnly,omitempty"`
	// Optional. If set to true, only calculate for tags-type billing groups. Discarded when the organization doesn't have any tag-based billing groups configured. If both `accountsOnly` and `tagsOnly` are set to true, `accountsOnly` will prevail.
	TagsOnly bool `protobuf:"varint,3,opt,name=tagsOnly,proto3" json:"tagsOnly,omitempty"`
}

func (x *CalculateCostsRequestAwsOptions) Reset() {
	*x = CalculateCostsRequestAwsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateCostsRequestAwsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateCostsRequestAwsOptions) ProtoMessage() {}

func (x *CalculateCostsRequestAwsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateCostsRequestAwsOptions.ProtoReflect.Descriptor instead.
func (*CalculateCostsRequestAwsOptions) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{18}
}

func (x *CalculateCostsRequestAwsOptions) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *CalculateCostsRequestAwsOptions) GetAccountsOnly() bool {
	if x != nil {
		return x.AccountsOnly
	}
	return false
}

func (x *CalculateCostsRequestAwsOptions) GetTagsOnly() bool {
	if x != nil {
		return x.TagsOnly
	}
	return false
}

// Request message for the Cost.CalculateCosts rpc.
type CalculateCostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. If set to a particular billing group, calculate for that billing group. If empty, calculate for all billing groups.
	//
	// At the moment, for AWS, this is only valid for account type billing groups, not tag billing groups. If a tag billing group is provided, it is discarded and the calculation is done for the whole organization.
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Optional. The UTC month to calculate. If empty, it defaults to the previous month. Format is `yyyymm`. For example, June 2021 will be `202106`.
	Month string `protobuf:"bytes,3,opt,name=month,proto3" json:"month,omitempty"`
	// Optional. Valid only for the `aws` vendor. AWS-specific options.
	AwsOptions *CalculateCostsRequestAwsOptions `protobuf:"bytes,4,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *CalculateCostsRequest) Reset() {
	*x = CalculateCostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateCostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateCostsRequest) ProtoMessage() {}

func (x *CalculateCostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateCostsRequest.ProtoReflect.Descriptor instead.
func (*CalculateCostsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{19}
}

func (x *CalculateCostsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CalculateCostsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CalculateCostsRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *CalculateCostsRequest) GetAwsOptions() *CalculateCostsRequestAwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

// Request message for the Cost.ListCalculationsHistory rpc.
type ListCalculationsHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. List operations on and after this date. Format is yyyymmdd. For example, if you want to list all operations starting from June 01, 2021, set to `20210601`. If not set, defaults to the first day of the current UTC month.
	AsOf string `protobuf:"bytes,2,opt,name=asOf,proto3" json:"asOf,omitempty"`
	// Optional. If true, exclude all operations that are marked as done. Include by default.
	ExcludeDone bool `protobuf:"varint,3,opt,name=excludeDone,proto3" json:"excludeDone,omitempty"`
}

func (x *ListCalculationsHistoryRequest) Reset() {
	*x = ListCalculationsHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalculationsHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalculationsHistoryRequest) ProtoMessage() {}

func (x *ListCalculationsHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalculationsHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListCalculationsHistoryRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{20}
}

func (x *ListCalculationsHistoryRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCalculationsHistoryRequest) GetAsOf() string {
	if x != nil {
		return x.AsOf
	}
	return ""
}

func (x *ListCalculationsHistoryRequest) GetExcludeDone() bool {
	if x != nil {
		return x.ExcludeDone
	}
	return false
}

// AWS-specific response message for the Cost.ListCalculationsHistory rpc. Should be compatible with the Operations API.
type ListCalculationsHistoryAwsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []*api.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *ListCalculationsHistoryAwsResponse) Reset() {
	*x = ListCalculationsHistoryAwsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalculationsHistoryAwsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalculationsHistoryAwsResponse) ProtoMessage() {}

func (x *ListCalculationsHistoryAwsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalculationsHistoryAwsResponse.ProtoReflect.Descriptor instead.
func (*ListCalculationsHistoryAwsResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{21}
}

func (x *ListCalculationsHistoryAwsResponse) GetOperations() []*api.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

// Response message for the Cost.ListCalculationsHistory rpc.
type ListCalculationsHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aws *ListCalculationsHistoryAwsResponse `protobuf:"bytes,1,opt,name=aws,proto3" json:"aws,omitempty"`
}

func (x *ListCalculationsHistoryResponse) Reset() {
	*x = ListCalculationsHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalculationsHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalculationsHistoryResponse) ProtoMessage() {}

func (x *ListCalculationsHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalculationsHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListCalculationsHistoryResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{22}
}

func (x *ListCalculationsHistoryResponse) GetAws() *ListCalculationsHistoryAwsResponse {
	if x != nil {
		return x.Aws
	}
	return nil
}

type CalculationsSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The schedule id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The desired schedule in UTC, using the [cron](https://man7.org/linux/man-pages/man5/crontab.5.html) format.
	Schedule string `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// The schedule for the next run in UTC.
	NextRun string `protobuf:"bytes,3,opt,name=nextRun,proto3" json:"nextRun,omitempty"`
	// The channel id to use for notifications.
	NotificationChannel string `protobuf:"bytes,4,opt,name=notificationChannel,proto3" json:"notificationChannel,omitempty"`
	// If set to true, force calculations to proceed regardless of run status.
	Force bool `protobuf:"varint,5,opt,name=force,proto3" json:"force,omitempty"`
	// If set to true, skips the actual calculations.
	DryRun bool `protobuf:"varint,6,opt,name=dryRun,proto3" json:"dryRun,omitempty"`
	// The current state of this schedule. Normally set to "OK", or empty if no issues. Otherwise, will contain an error string.
	Status string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CalculationsSchedule) Reset() {
	*x = CalculationsSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculationsSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculationsSchedule) ProtoMessage() {}

func (x *CalculationsSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculationsSchedule.ProtoReflect.Descriptor instead.
func (*CalculationsSchedule) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{23}
}

func (x *CalculationsSchedule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CalculationsSchedule) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *CalculationsSchedule) GetNextRun() string {
	if x != nil {
		return x.NextRun
	}
	return ""
}

func (x *CalculationsSchedule) GetNotificationChannel() string {
	if x != nil {
		return x.NotificationChannel
	}
	return ""
}

func (x *CalculationsSchedule) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *CalculationsSchedule) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *CalculationsSchedule) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Request message for the Cost.ListCalculationsSchedules rpc.
type ListCalculationsSchedulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *ListCalculationsSchedulesRequest) Reset() {
	*x = ListCalculationsSchedulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalculationsSchedulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalculationsSchedulesRequest) ProtoMessage() {}

func (x *ListCalculationsSchedulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalculationsSchedulesRequest.ProtoReflect.Descriptor instead.
func (*ListCalculationsSchedulesRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{24}
}

func (x *ListCalculationsSchedulesRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

// Response message for the Cost.ListCalculationsSchedules rpc.
type ListCalculationsSchedulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedules []*CalculationsSchedule `protobuf:"bytes,1,rep,name=schedules,proto3" json:"schedules,omitempty"`
}

func (x *ListCalculationsSchedulesResponse) Reset() {
	*x = ListCalculationsSchedulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalculationsSchedulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalculationsSchedulesResponse) ProtoMessage() {}

func (x *ListCalculationsSchedulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalculationsSchedulesResponse.ProtoReflect.Descriptor instead.
func (*ListCalculationsSchedulesResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{25}
}

func (x *ListCalculationsSchedulesResponse) GetSchedules() []*CalculationsSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

// Request message for the Cost.CreateCalculationsSchedule rpc.
type CreateCalculationsScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The desired schedule in UTC, using the [cron](https://man7.org/linux/man-pages/man5/crontab.5.html) format, and applies to the previous month upon trigger.
	Schedule string `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// Optional. The channel id to use for notifications. At the moment, only email-type notification channels are supported. If not set, your default channel will be used. And if non-existent, an email-type notification channel will be created using your primary email address.
	NotificationChannel string `protobuf:"bytes,3,opt,name=notificationChannel,proto3" json:"notificationChannel,omitempty"`
	// Optional. Not used at the moment.
	Force bool `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	// Optional. If set to true, skips the actual calculations. Useful as test, or reminder.
	DryRun bool `protobuf:"varint,5,opt,name=dryRun,proto3" json:"dryRun,omitempty"`
}

func (x *CreateCalculationsScheduleRequest) Reset() {
	*x = CreateCalculationsScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCalculationsScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCalculationsScheduleRequest) ProtoMessage() {}

func (x *CreateCalculationsScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCalculationsScheduleRequest.ProtoReflect.Descriptor instead.
func (*CreateCalculationsScheduleRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{26}
}

func (x *CreateCalculationsScheduleRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateCalculationsScheduleRequest) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *CreateCalculationsScheduleRequest) GetNotificationChannel() string {
	if x != nil {
		return x.NotificationChannel
	}
	return ""
}

func (x *CreateCalculationsScheduleRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *CreateCalculationsScheduleRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

// Request message for the Cost.DeleteCalculationsSchedule rpc.
type DeleteCalculationsScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The id to delete. Can be set to either `-` or `*`, which means all.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCalculationsScheduleRequest) Reset() {
	*x = DeleteCalculationsScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCalculationsScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCalculationsScheduleRequest) ProtoMessage() {}

func (x *DeleteCalculationsScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCalculationsScheduleRequest.ProtoReflect.Descriptor instead.
func (*DeleteCalculationsScheduleRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteCalculationsScheduleRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DeleteCalculationsScheduleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for the Cost.ReadCostAttributes rpc.
type ReadCostAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. If set, reads the cost attributes of this group. Only valid for Ripple users. Implied as the parent billing group for Wave(Pro) users.
	//
	// For AWS Ripple, only billing internal ids are supported at the moment. Overriden when `accountId` is set to anything other than `*`. Set this and `accountId` to `*` to read the cost attributes of the whole organization. Optional for AWS Wave(Pro).
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Optional. You can set it to a single account or a comma-separated list of accounts.
	//
	// For AWS, setting this will override `groupId`. Set this and `groupId` to `*` to read the cost attributes of the whole organization.
	AccountId string `protobuf:"bytes,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// Optional. The UTC date to start streaming data from. If not set, the first day of the current month will be used. Format: `yyyymmdd`. The oldest supported date is `20200101`.
	StartTime string `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// Optional. The UTC date to end the streaming data. If not set, current date will be used. Format: `yyyymmdd`.
	EndTime string `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	// Optional. Valid only for the `aws` vendor. AWS-specific options.
	AwsOptions *ReadCostAttributesRequest_AwsOptions `protobuf:"bytes,6,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *ReadCostAttributesRequest) Reset() {
	*x = ReadCostAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCostAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCostAttributesRequest) ProtoMessage() {}

func (x *ReadCostAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCostAttributesRequest.ProtoReflect.Descriptor instead.
func (*ReadCostAttributesRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{28}
}

func (x *ReadCostAttributesRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ReadCostAttributesRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ReadCostAttributesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReadCostAttributesRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ReadCostAttributesRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ReadCostAttributesRequest) GetAwsOptions() *ReadCostAttributesRequest_AwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

// Response message for the Cost.ReadCostAttributes rpc.
type CostAttributeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aws *aws.CostAttribute `protobuf:"bytes,1,opt,name=aws,proto3" json:"aws,omitempty"`
}

func (x *CostAttributeItem) Reset() {
	*x = CostAttributeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostAttributeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostAttributeItem) ProtoMessage() {}

func (x *CostAttributeItem) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostAttributeItem.ProtoReflect.Descriptor instead.
func (*CostAttributeItem) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{29}
}

func (x *CostAttributeItem) GetAws() *aws.CostAttribute {
	if x != nil {
		return x.Aws
	}
	return nil
}

// A map of "key:value" column filters. Dependent on `groupByColumns` and/or `groupByMonth`. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
//
// For example, if you like to filter `productCode` to return only `AmazonEC2`, set to `{"productCode":"eq:AmazonEC2"}` or `{"productCode":"AmazonEC2"}`. You can also use a regular expression like `{"productCode":"re:AmazonEC2|AmazonRDS"}`, which means return all AmazonEC2 or AmazonRDS lineitems. Or reverse regexp, such as `{"productCode":"!re:^AmazonEC2$"}`, which means return all items except `AmazonEC2`.
type ReadCostsRequestAwsOptionsFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AndFilters map[string]string `protobuf:"bytes,1,rep,name=andFilters,proto3" json:"andFilters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReadCostsRequestAwsOptionsFilters) Reset() {
	*x = ReadCostsRequestAwsOptionsFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCostsRequestAwsOptionsFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCostsRequestAwsOptionsFilters) ProtoMessage() {}

func (x *ReadCostsRequestAwsOptionsFilters) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCostsRequestAwsOptionsFilters.ProtoReflect.Descriptor instead.
func (*ReadCostsRequestAwsOptionsFilters) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{30}
}

func (x *ReadCostsRequestAwsOptionsFilters) GetAndFilters() map[string]string {
	if x != nil {
		return x.AndFilters
	}
	return nil
}

// AWS-specific options for ReadCostsRequest.
type ReadCostsRequestAwsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A comma-separated list of columns to aggregate the data into. Valid values are `productCode`, `serviceCode`, `region`, `zone`, `usageType`, `instanceType`, `operation`, `invoiceId`, `description`, and `resourceId`. A special value of `none` is also supported, which means query by date or month per account only.
	//
	// For example, if you only want the services and region data, you can set this field to `productCode,region`. Your input sequence doesn't matter (although the sequence above is recommended) as the actual sequence is already fixed in the return data (see the definition in https://github.com/alphauslabs/blueapi/blob/main/api/aws/cost.proto), which is generic to specific, top to bottom. Invalid values are discarded. Excluded columns will be empty.
	GroupByColumns string `protobuf:"bytes,1,opt,name=groupByColumns,proto3" json:"groupByColumns,omitempty"`
	// Optional. If set to true, return data grouped by month within the date range. If you want data that is grouped per account per month, set this to `true`, then set `groupByColumns` to `none`.
	//
	// You can also use `groupByColumns` while setting this to true. If `groupByColumns` is empty, the default grouping is `productCode`.
	GroupByMonth bool `protobuf:"varint,2,opt,name=groupByMonth,proto3" json:"groupByMonth,omitempty"`
	// Optional. If set to true, group all input accounts into one. Valid only if `groupByMonth` is true.
	GroupAccounts bool `protobuf:"varint,8,opt,name=groupAccounts,proto3" json:"groupAccounts,omitempty"`
	// Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
	Filters []*ReadCostsRequestAwsOptionsFilters `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. A list of filtering options specific for tags. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc. Discarded when `groupByColumns` field is set or if `groupByMonth` is true.
	TagFilters []*ReadCostsRequestAwsOptions_TagFilters `protobuf:"bytes,9,rep,name=tagFilters,proto3" json:"tagFilters,omitempty"`
	// Optional. If set to true, stream will include resource tags. Discarded when `groupByColumns` field is set or if `groupByMonth` is true.
	IncludeTags bool `protobuf:"varint,4,opt,name=includeTags,proto3" json:"includeTags,omitempty"`
	// Optional. If set to true, stream will include resource cost category information. Discarded when `groupByColumns` field is set or if `groupByMonth` is true.
	IncludeCostCategories bool `protobuf:"varint,5,opt,name=includeCostCategories,proto3" json:"includeCostCategories,omitempty"`
	// Optional. Set to US dollars (USD) by default (AWS CUR's default currency). You can set it to the desired three-letter currency symbol (i.e. JPY, EUR, GBP), in which case, it will use the latest exchange rates provided by https://fixer.io. If you prefer a custom exchange rate, you can append the rate to the currency's three-letter symbol. For example, `JPY:110.622` for the Japanese Yen. Note that the exchange rate should be against the US dollar (USD).
	ToCurrency string `protobuf:"bytes,6,opt,name=toCurrency,proto3" json:"toCurrency,omitempty"`
	// Optional. If set to true, always get the up-to-date calculation results. This data isn't necessarily in-sync with your invoice data as AWS could still have updated your CUR files even after you created your invoices. By default, returned data are those that are always in-sync with your invoices.
	//
	// This field is discarded for Wave(Pro) users. You will always get the latest data that is in-sync with your invoices.
	ForceLatest bool `protobuf:"varint,7,opt,name=forceLatest,proto3" json:"forceLatest,omitempty"`
	// If true, force API to not use cached data.
	NoCache bool `protobuf:"varint,10,opt,name=noCache,proto3" json:"noCache,omitempty"`
}

func (x *ReadCostsRequestAwsOptions) Reset() {
	*x = ReadCostsRequestAwsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCostsRequestAwsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCostsRequestAwsOptions) ProtoMessage() {}

func (x *ReadCostsRequestAwsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCostsRequestAwsOptions.ProtoReflect.Descriptor instead.
func (*ReadCostsRequestAwsOptions) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{31}
}

func (x *ReadCostsRequestAwsOptions) GetGroupByColumns() string {
	if x != nil {
		return x.GroupByColumns
	}
	return ""
}

func (x *ReadCostsRequestAwsOptions) GetGroupByMonth() bool {
	if x != nil {
		return x.GroupByMonth
	}
	return false
}

func (x *ReadCostsRequestAwsOptions) GetGroupAccounts() bool {
	if x != nil {
		return x.GroupAccounts
	}
	return false
}

func (x *ReadCostsRequestAwsOptions) GetFilters() []*ReadCostsRequestAwsOptionsFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ReadCostsRequestAwsOptions) GetTagFilters() []*ReadCostsRequestAwsOptions_TagFilters {
	if x != nil {
		return x.TagFilters
	}
	return nil
}

func (x *ReadCostsRequestAwsOptions) GetIncludeTags() bool {
	if x != nil {
		return x.IncludeTags
	}
	return false
}

func (x *ReadCostsRequestAwsOptions) GetIncludeCostCategories() bool {
	if x != nil {
		return x.IncludeCostCategories
	}
	return false
}

func (x *ReadCostsRequestAwsOptions) GetToCurrency() string {
	if x != nil {
		return x.ToCurrency
	}
	return ""
}

func (x *ReadCostsRequestAwsOptions) GetForceLatest() bool {
	if x != nil {
		return x.ForceLatest
	}
	return false
}

func (x *ReadCostsRequestAwsOptions) GetNoCache() bool {
	if x != nil {
		return x.NoCache
	}
	return false
}

// Request message for the Cost.ReadCosts rpc.
type ReadCostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. If set, reads the usage-based cost details of this group. Only valid for Ripple users. Implied as the parent billing group for Wave(Pro) users.
	//
	// For AWS Ripple, only billing internal ids are supported at the moment. Overriden when `accountId` is set to anything other than `*`. Set this and `accountId` to `*` to read the usage-based cost details of the whole organization. Optional for AWS Wave(Pro).
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Optional. You can set it to a single account or a comma-separated list of accounts.
	//
	// For AWS, setting this will override `groupId`. Set this and `groupId` to `*` to read the usage-based cost details of the whole organization.
	AccountId string `protobuf:"bytes,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// Optional. The UTC date to start streaming data from. If not set, the first day of the current month will be used. Format: `yyyymmdd`. The oldest supported date is `20200101`.
	StartTime string `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// Optional. The UTC date to end the streaming data. If not set, current date will be used. Format: `yyyymmd`.
	EndTime string `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	// Optional. Valid only for the `aws` vendor. AWS-specific options.
	AwsOptions *ReadCostsRequestAwsOptions `protobuf:"bytes,6,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *ReadCostsRequest) Reset() {
	*x = ReadCostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCostsRequest) ProtoMessage() {}

func (x *ReadCostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCostsRequest.ProtoReflect.Descriptor instead.
func (*ReadCostsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{32}
}

func (x *ReadCostsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ReadCostsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ReadCostsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReadCostsRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ReadCostsRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ReadCostsRequest) GetAwsOptions() *ReadCostsRequestAwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

type ReadAdjustmentsRequestAwsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Set to US dollars (USD) by default (AWS CUR's default currency). You can set it to the desired three-letter currency symbol (i.e. JPY, EUR, GBP), in which case, it will use the latest exchange rates provided by https://fixer.io. If you prefer a custom exchange rate, you can append the rate to the currency's three-letter symbol. For example, `JPY:110.622` for the Japanese Yen. Note that the exchange rate should be against the US dollar (USD).
	ToCurrency string `protobuf:"bytes,1,opt,name=toCurrency,proto3" json:"toCurrency,omitempty"`
}

func (x *ReadAdjustmentsRequestAwsOptions) Reset() {
	*x = ReadAdjustmentsRequestAwsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadAdjustmentsRequestAwsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAdjustmentsRequestAwsOptions) ProtoMessage() {}

func (x *ReadAdjustmentsRequestAwsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAdjustmentsRequestAwsOptions.ProtoReflect.Descriptor instead.
func (*ReadAdjustmentsRequestAwsOptions) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{33}
}

func (x *ReadAdjustmentsRequestAwsOptions) GetToCurrency() string {
	if x != nil {
		return x.ToCurrency
	}
	return ""
}

// Request message for the Cost.ReadAdjustments rpc.
type ReadAdjustmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. At the moment, only billing internal ids are supported. If set, reads the non-usage-based adjustment details of this group. Valid only if `accountId` is not set. If both `groupId` and `accountId` are not set, reads the adjustment details of the whole organization. Only valid for Ripple users. Implied (or discarded) for Wave(Pro) users.
	GroupId string `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Optional. If set, reads the non-usaged-based adjustment details of this account. Also invalidates the `billingInternalId` value even if set. If both `billingInternalId` and `accountId` are not set, reads the adjustment details of the whole organization.
	AccountId string `protobuf:"bytes,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// Optional. The UTC date to start streaming data from. If not set, the first day of the current month will be used. Format: `yyyymmdd`.
	StartTime string `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// Optional. The UTC date to end the streaming data. If not set, current date will be used. Format: `yyyymmdd`.
	EndTime string `protobuf:"bytes,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	// Optional. Valid only for the `aws` vendor. AWS-specific options.
	AwsOptions *ReadAdjustmentsRequestAwsOptions `protobuf:"bytes,6,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *ReadAdjustmentsRequest) Reset() {
	*x = ReadAdjustmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadAdjustmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAdjustmentsRequest) ProtoMessage() {}

func (x *ReadAdjustmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAdjustmentsRequest.ProtoReflect.Descriptor instead.
func (*ReadAdjustmentsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{34}
}

func (x *ReadAdjustmentsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ReadAdjustmentsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ReadAdjustmentsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReadAdjustmentsRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ReadAdjustmentsRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ReadAdjustmentsRequest) GetAwsOptions() *ReadAdjustmentsRequestAwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

type ReadTagCostsRequestAwsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. If set, only return data for this tagId.
	TagId string `protobuf:"bytes,1,opt,name=tagId,proto3" json:"tagId,omitempty"`
}

func (x *ReadTagCostsRequestAwsOptions) Reset() {
	*x = ReadTagCostsRequestAwsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTagCostsRequestAwsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTagCostsRequestAwsOptions) ProtoMessage() {}

func (x *ReadTagCostsRequestAwsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTagCostsRequestAwsOptions.ProtoReflect.Descriptor instead.
func (*ReadTagCostsRequestAwsOptions) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{35}
}

func (x *ReadTagCostsRequestAwsOptions) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

// Request message for the Cost.ReadTagCosts rpc.
type ReadTagCostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The billing internal id to stream.
	BillingInternalId string `protobuf:"bytes,2,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	// Optional. Timestamp to start streaming data from. If not set, the first day of the current month will be used. Format: `yyyymmdd`.
	StartTime string `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// Optional. Timestamp to end the streaming data. If not set, current date will be used. Format: `yyyymmdd`.
	EndTime string `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	// Optional. Group services and costs by months in the range of `startTime` and `endTime`. If not set, daily data will be returned.
	GroupByMonths bool `protobuf:"varint,5,opt,name=groupByMonths,proto3" json:"groupByMonths,omitempty"`
	// Optional. Valid only for the `aws` vendor. AWS-specific options.
	AwsOptions *ReadTagCostsRequestAwsOptions `protobuf:"bytes,6,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *ReadTagCostsRequest) Reset() {
	*x = ReadTagCostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTagCostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTagCostsRequest) ProtoMessage() {}

func (x *ReadTagCostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTagCostsRequest.ProtoReflect.Descriptor instead.
func (*ReadTagCostsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{36}
}

func (x *ReadTagCostsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ReadTagCostsRequest) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *ReadTagCostsRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ReadTagCostsRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ReadTagCostsRequest) GetGroupByMonths() bool {
	if x != nil {
		return x.GroupByMonths
	}
	return false
}

func (x *ReadTagCostsRequest) GetAwsOptions() *ReadTagCostsRequestAwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

// Request message for the Cost.ReadNonTagCosts rpc.
type ReadNonTagCostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. The billing internal id to stream.
	BillingInternalId string `protobuf:"bytes,2,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	// Optional. Timestamp to start streaming data from. If not set, the first day of the current month will be used. Format: `yyyymmdd`.
	StartTime string `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// Optional. Timestamp to end the streaming data. If not set, current date will be used. Format: `yyyymmdd`.
	EndTime string `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	// Optional. Group services and costs by months in the range of `startTime` and `endTime`. If not set, daily data will be returned.
	GroupByMonths bool `protobuf:"varint,5,opt,name=groupByMonths,proto3" json:"groupByMonths,omitempty"`
}

func (x *ReadNonTagCostsRequest) Reset() {
	*x = ReadNonTagCostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadNonTagCostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadNonTagCostsRequest) ProtoMessage() {}

func (x *ReadNonTagCostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadNonTagCostsRequest.ProtoReflect.Descriptor instead.
func (*ReadNonTagCostsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{37}
}

func (x *ReadNonTagCostsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ReadNonTagCostsRequest) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *ReadNonTagCostsRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ReadNonTagCostsRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ReadNonTagCostsRequest) GetGroupByMonths() bool {
	if x != nil {
		return x.GroupByMonths
	}
	return false
}

// Request message for GetForecasts per billing group.
type GetForecastsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. Company Id of Billing Group to retrieve. Default value is user's Company Id
	BillingInternalId string `protobuf:"bytes,2,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	// Optional. Forecast frequency. Valid values are `daily` and `monthly`.
	// Default value is `daily`.
	Frequency string `protobuf:"bytes,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Optional. Forecast granularity. Valid values are `account`, `category` and `product`. Default value is `account`.
	Level string `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	// Optional. Start date to get cost forecast. If from_date is less than current date, historical costs are included. If from_date is greater than current date, only forecasted costs are returned. Format: `yyyy-mm-dd`.
	FromDate string `protobuf:"bytes,5,opt,name=fromDate,proto3" json:"fromDate,omitempty"`
	// Optional. End date to get cost forecast. Currently, we only support 90 days forecasting from the first day of current month. Format: `yyyy-mm-dd`.
	ToDate string `protobuf:"bytes,6,opt,name=toDate,proto3" json:"toDate,omitempty"`
}

func (x *GetForecastsRequest) Reset() {
	*x = GetForecastsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForecastsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastsRequest) ProtoMessage() {}

func (x *GetForecastsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastsRequest.ProtoReflect.Descriptor instead.
func (*GetForecastsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{38}
}

func (x *GetForecastsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetForecastsRequest) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *GetForecastsRequest) GetFrequency() string {
	if x != nil {
		return x.Frequency
	}
	return ""
}

func (x *GetForecastsRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *GetForecastsRequest) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *GetForecastsRequest) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

// Response message for GetForecasts per billing group.
type GetForecastsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *api.BillingGroupForecast `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetForecastsResponse) Reset() {
	*x = GetForecastsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForecastsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastsResponse) ProtoMessage() {}

func (x *GetForecastsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastsResponse.ProtoReflect.Descriptor instead.
func (*GetForecastsResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{39}
}

func (x *GetForecastsResponse) GetData() *api.BillingGroupForecast {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request message for GetMonthlyCostForecast
type GetMonthlyCostForecastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. 'account' or 'acctgroup'
	Level string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	// Required. Account or AccountGroup Id
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. Start month to get cost forecast. Format: `yyyymm`.
	FromDate string `protobuf:"bytes,4,opt,name=fromDate,proto3" json:"fromDate,omitempty"`
	// Optional. Last month to get cost forecast. Format: `yyyymm`.
	ToDate string `protobuf:"bytes,5,opt,name=toDate,proto3" json:"toDate,omitempty"`
}

func (x *GetMonthlyCostForecastRequest) Reset() {
	*x = GetMonthlyCostForecastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonthlyCostForecastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthlyCostForecastRequest) ProtoMessage() {}

func (x *GetMonthlyCostForecastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthlyCostForecastRequest.ProtoReflect.Descriptor instead.
func (*GetMonthlyCostForecastRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{40}
}

func (x *GetMonthlyCostForecastRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetMonthlyCostForecastRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *GetMonthlyCostForecastRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetMonthlyCostForecastRequest) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *GetMonthlyCostForecastRequest) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

// Response message for GetMonthlyCostForecast
type GetMonthlyCostForecastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data      []*api.MonthlyCostForecast `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Timestamp string                     `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetMonthlyCostForecastResponse) Reset() {
	*x = GetMonthlyCostForecastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonthlyCostForecastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthlyCostForecastResponse) ProtoMessage() {}

func (x *GetMonthlyCostForecastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthlyCostForecastResponse.ProtoReflect.Descriptor instead.
func (*GetMonthlyCostForecastResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{41}
}

func (x *GetMonthlyCostForecastResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetMonthlyCostForecastResponse) GetData() []*api.MonthlyCostForecast {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetMonthlyCostForecastResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// Request message for GetMonthOnMonthCostForecast
type GetMonthOnMonthCostForecastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. 'account' or 'acctgroup'
	Level string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	// Required. Account or AccountGroup Id
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	//Optional. Default is current month. Format: `yyyymm`.
	Date string `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GetMonthOnMonthCostForecastRequest) Reset() {
	*x = GetMonthOnMonthCostForecastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonthOnMonthCostForecastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthOnMonthCostForecastRequest) ProtoMessage() {}

func (x *GetMonthOnMonthCostForecastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthOnMonthCostForecastRequest.ProtoReflect.Descriptor instead.
func (*GetMonthOnMonthCostForecastRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{42}
}

func (x *GetMonthOnMonthCostForecastRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetMonthOnMonthCostForecastRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *GetMonthOnMonthCostForecastRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetMonthOnMonthCostForecastRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// Response message for GetMonthOnMonthCostForecast
type GetMonthOnMonthCostForecastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data      []*api.MonthOnMonthCostForecast `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Timestamp string                          `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetMonthOnMonthCostForecastResponse) Reset() {
	*x = GetMonthOnMonthCostForecastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonthOnMonthCostForecastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthOnMonthCostForecastResponse) ProtoMessage() {}

func (x *GetMonthOnMonthCostForecastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthOnMonthCostForecastResponse.ProtoReflect.Descriptor instead.
func (*GetMonthOnMonthCostForecastResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{43}
}

func (x *GetMonthOnMonthCostForecastResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetMonthOnMonthCostForecastResponse) GetData() []*api.MonthOnMonthCostForecast {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetMonthOnMonthCostForecastResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// Request message for GetMonthToDateCostForecast
type GetMonthToDateCostForecastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. 'account' or 'acctgroup'
	Level string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	// Required. Account or AccountGroup Id
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	//Optional. Default is current month. Format: `yyyymm`.
	Date string `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GetMonthToDateCostForecastRequest) Reset() {
	*x = GetMonthToDateCostForecastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonthToDateCostForecastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthToDateCostForecastRequest) ProtoMessage() {}

func (x *GetMonthToDateCostForecastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthToDateCostForecastRequest.ProtoReflect.Descriptor instead.
func (*GetMonthToDateCostForecastRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{44}
}

func (x *GetMonthToDateCostForecastRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetMonthToDateCostForecastRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *GetMonthToDateCostForecastRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetMonthToDateCostForecastRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// Response message for GetMonthToDateCostForecast
type GetMonthToDateCostForecastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Budget    float64                        `protobuf:"fixed64,2,opt,name=budget,proto3" json:"budget,omitempty"`
	Data      []*api.MonthToDateCostForecast `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Timestamp string                         `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetMonthToDateCostForecastResponse) Reset() {
	*x = GetMonthToDateCostForecastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonthToDateCostForecastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonthToDateCostForecastResponse) ProtoMessage() {}

func (x *GetMonthToDateCostForecastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonthToDateCostForecastResponse.ProtoReflect.Descriptor instead.
func (*GetMonthToDateCostForecastResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{45}
}

func (x *GetMonthToDateCostForecastResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetMonthToDateCostForecastResponse) GetBudget() float64 {
	if x != nil {
		return x.Budget
	}
	return 0
}

func (x *GetMonthToDateCostForecastResponse) GetData() []*api.MonthToDateCostForecast {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetMonthToDateCostForecastResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// Request message for GetAccountBudget
type GetAccountBudgetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. 'account' or 'acctgroup'
	Level string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	// Required. Account or AccountGroup Id
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. Default is current year. Format: `yyyy`.
	Year string `protobuf:"bytes,4,opt,name=year,proto3" json:"year,omitempty"`
}

func (x *GetAccountBudgetRequest) Reset() {
	*x = GetAccountBudgetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountBudgetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountBudgetRequest) ProtoMessage() {}

func (x *GetAccountBudgetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountBudgetRequest.ProtoReflect.Descriptor instead.
func (*GetAccountBudgetRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{46}
}

func (x *GetAccountBudgetRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetAccountBudgetRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *GetAccountBudgetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetAccountBudgetRequest) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

// Response message for GetAccountBudget
type GetAccountBudgetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *api.Budget `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAccountBudgetResponse) Reset() {
	*x = GetAccountBudgetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountBudgetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountBudgetResponse) ProtoMessage() {}

func (x *GetAccountBudgetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountBudgetResponse.ProtoReflect.Descriptor instead.
func (*GetAccountBudgetResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{47}
}

func (x *GetAccountBudgetResponse) GetData() *api.Budget {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request message for CreateAccountBudget
type CreateAccountBudgetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. 'account' or 'acctgroup'
	Level string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	// Required. Account or AccountGroup Id
	Id   string      `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Data *api.Budget `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateAccountBudgetRequest) Reset() {
	*x = CreateAccountBudgetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountBudgetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountBudgetRequest) ProtoMessage() {}

func (x *CreateAccountBudgetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountBudgetRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountBudgetRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{48}
}

func (x *CreateAccountBudgetRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateAccountBudgetRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *CreateAccountBudgetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateAccountBudgetRequest) GetData() *api.Budget {
	if x != nil {
		return x.Data
	}
	return nil
}

// Response message for CreateAccountBudget
type CreateAccountBudgetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Budget Id
	BudgetId string `protobuf:"bytes,1,opt,name=budgetId,proto3" json:"budgetId,omitempty"`
}

func (x *CreateAccountBudgetResponse) Reset() {
	*x = CreateAccountBudgetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountBudgetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountBudgetResponse) ProtoMessage() {}

func (x *CreateAccountBudgetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountBudgetResponse.ProtoReflect.Descriptor instead.
func (*CreateAccountBudgetResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{49}
}

func (x *CreateAccountBudgetResponse) GetBudgetId() string {
	if x != nil {
		return x.BudgetId
	}
	return ""
}

// Request message for UpdateAccountBudget
type UpdateAccountBudgetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Budget Id
	BudgetId string      `protobuf:"bytes,2,opt,name=budgetId,proto3" json:"budgetId,omitempty"`
	Data     *api.Budget `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateAccountBudgetRequest) Reset() {
	*x = UpdateAccountBudgetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountBudgetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountBudgetRequest) ProtoMessage() {}

func (x *UpdateAccountBudgetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountBudgetRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccountBudgetRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateAccountBudgetRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *UpdateAccountBudgetRequest) GetBudgetId() string {
	if x != nil {
		return x.BudgetId
	}
	return ""
}

func (x *UpdateAccountBudgetRequest) GetData() *api.Budget {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request message for DeleteAccountBudget
type DeleteAccountBudgetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Budget Id
	BudgetId string `protobuf:"bytes,2,opt,name=budgetId,proto3" json:"budgetId,omitempty"`
}

func (x *DeleteAccountBudgetRequest) Reset() {
	*x = DeleteAccountBudgetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountBudgetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountBudgetRequest) ProtoMessage() {}

func (x *DeleteAccountBudgetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountBudgetRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountBudgetRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{51}
}

func (x *DeleteAccountBudgetRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DeleteAccountBudgetRequest) GetBudgetId() string {
	if x != nil {
		return x.BudgetId
	}
	return ""
}

type GetRecommendationsRequestAwsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Valid values: 'reservation', 'rightsizing', 'scheduling'. Only 'reservation' is supported for now.
	RecommendationType string `protobuf:"bytes,1,opt,name=recommendationType,proto3" json:"recommendationType,omitempty"`
	// For recommendationType = 'reservation'. Optional. Valid values: 'combined', 'individual'
	// Default: 'combined'
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// For recommendationType = 'reservation'. Optional. List of Services ["AmazonEC2", "AmazonRDS", "AmazonElastiCache", "AmazonES", "AmazonRedshift"]. Default: Empty list.
	RiServices []string `protobuf:"bytes,3,rep,name=riServices,proto3" json:"riServices,omitempty"`
	// For recommendationType = 'reservation'. Optional. List of Services ["AmazonECS", "AmazonEKS", "AWSLambda"]. Default: Empty list.
	SpServices []string `protobuf:"bytes,4,rep,name=spServices,proto3" json:"spServices,omitempty"`
	// For recommendationType = 'reservation'. Optional. If set to "true", recommends EC2 Instance Savings Plan that will cover usage not covered by RI. Default: false.
	PurchaseEC2SavingsPlan bool `protobuf:"varint,5,opt,name=purchaseEC2SavingsPlan,proto3" json:"purchaseEC2SavingsPlan,omitempty"`
	// For recommendationType = 'reservation'. Optional. Valid values: '1yr', '3yr'. Default: '1yr'.
	Term string `protobuf:"bytes,6,opt,name=term,proto3" json:"term,omitempty"`
	// For recommendationType = 'reservation'. Optional. Valid values: 'standard', 'convertible'. Default: 'standard'.
	OfferingClass string `protobuf:"bytes,7,opt,name=offeringClass,proto3" json:"offeringClass,omitempty"`
	// For recommendationType = 'reservation'. Optional. Valid values: 'allUpfront', 'partialUpfront', 'noUpfront'. Default: 'allUpfront'.
	PaymentOption string `protobuf:"bytes,8,opt,name=paymentOption,proto3" json:"paymentOption,omitempty"`
	// For recommendationType = 'reservation'. Optional. Percentage of the usage (in NormalizedUnits) to be covered by Reserved Instance or Savings Plan. Default: 100.
	CoveragePercentage float64 `protobuf:"fixed64,9,opt,name=coveragePercentage,proto3" json:"coveragePercentage,omitempty"`
}

func (x *GetRecommendationsRequestAwsOptions) Reset() {
	*x = GetRecommendationsRequestAwsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendationsRequestAwsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationsRequestAwsOptions) ProtoMessage() {}

func (x *GetRecommendationsRequestAwsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationsRequestAwsOptions.ProtoReflect.Descriptor instead.
func (*GetRecommendationsRequestAwsOptions) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{52}
}

func (x *GetRecommendationsRequestAwsOptions) GetRecommendationType() string {
	if x != nil {
		return x.RecommendationType
	}
	return ""
}

func (x *GetRecommendationsRequestAwsOptions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetRecommendationsRequestAwsOptions) GetRiServices() []string {
	if x != nil {
		return x.RiServices
	}
	return nil
}

func (x *GetRecommendationsRequestAwsOptions) GetSpServices() []string {
	if x != nil {
		return x.SpServices
	}
	return nil
}

func (x *GetRecommendationsRequestAwsOptions) GetPurchaseEC2SavingsPlan() bool {
	if x != nil {
		return x.PurchaseEC2SavingsPlan
	}
	return false
}

func (x *GetRecommendationsRequestAwsOptions) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *GetRecommendationsRequestAwsOptions) GetOfferingClass() string {
	if x != nil {
		return x.OfferingClass
	}
	return ""
}

func (x *GetRecommendationsRequestAwsOptions) GetPaymentOption() string {
	if x != nil {
		return x.PaymentOption
	}
	return ""
}

func (x *GetRecommendationsRequestAwsOptions) GetCoveragePercentage() float64 {
	if x != nil {
		return x.CoveragePercentage
	}
	return 0
}

// Request message for GetRecommendations
type GetRecommendationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Organization Id.
	OrgId string `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	// Required. List of Account Ids.
	Accounts []string `protobuf:"bytes,3,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// Required if vendor = 'aws'
	AwsOptions *GetRecommendationsRequestAwsOptions `protobuf:"bytes,4,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *GetRecommendationsRequest) Reset() {
	*x = GetRecommendationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationsRequest) ProtoMessage() {}

func (x *GetRecommendationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationsRequest.ProtoReflect.Descriptor instead.
func (*GetRecommendationsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{53}
}

func (x *GetRecommendationsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetRecommendationsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetRecommendationsRequest) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *GetRecommendationsRequest) GetAwsOptions() *GetRecommendationsRequestAwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

// Request message for GetRecommendations
type GetRecommendationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId              string                  `protobuf:"bytes,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	AwsRecommendations *aws.AwsRecommendations `protobuf:"bytes,2,opt,name=awsRecommendations,proto3" json:"awsRecommendations,omitempty"`
}

func (x *GetRecommendationsResponse) Reset() {
	*x = GetRecommendationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationsResponse) ProtoMessage() {}

func (x *GetRecommendationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationsResponse.ProtoReflect.Descriptor instead.
func (*GetRecommendationsResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{54}
}

func (x *GetRecommendationsResponse) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetRecommendationsResponse) GetAwsRecommendations() *aws.AwsRecommendations {
	if x != nil {
		return x.AwsRecommendations
	}
	return nil
}

// Request message for GetCostReduction
type GetCostReductionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Organization Id.
	OrgId string `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	// Required. Valid values: 'all', 'reservation', 'savingsplan'
	ReductionDisplay string `protobuf:"bytes,3,opt,name=reductionDisplay,proto3" json:"reductionDisplay,omitempty"`
	// Optional. If set to "true", details of the RI or SP list is returned. Default: false.
	IncludeDetails bool `protobuf:"varint,4,opt,name=includeDetails,proto3" json:"includeDetails,omitempty"`
	// Optional. The start date of the displayed data. If not set, the first day of the current month will be used. Format: yyyy-mm-dd.
	FromDate string `protobuf:"bytes,5,opt,name=fromDate,proto3" json:"fromDate,omitempty"`
	// Optional. The end date of the displayed data. If not set, current date will be used. Format: yyyy-mm-dd.
	ToDate string `protobuf:"bytes,6,opt,name=toDate,proto3" json:"toDate,omitempty"`
	// Optional. Payer Id.
	PayerId string `protobuf:"bytes,7,opt,name=payerId,proto3" json:"payerId,omitempty"`
	// Optional. Billing group Id.
	BillingInternalId string `protobuf:"bytes,8,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	// Optional. Account group Id.
	GroupId string `protobuf:"bytes,9,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Optional. List of Account Ids.
	Accounts []string `protobuf:"bytes,10,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// Optional. List of services.
	Services []string `protobuf:"bytes,11,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *GetCostReductionRequest) Reset() {
	*x = GetCostReductionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostReductionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostReductionRequest) ProtoMessage() {}

func (x *GetCostReductionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostReductionRequest.ProtoReflect.Descriptor instead.
func (*GetCostReductionRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{55}
}

func (x *GetCostReductionRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetCostReductionRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetCostReductionRequest) GetReductionDisplay() string {
	if x != nil {
		return x.ReductionDisplay
	}
	return ""
}

func (x *GetCostReductionRequest) GetIncludeDetails() bool {
	if x != nil {
		return x.IncludeDetails
	}
	return false
}

func (x *GetCostReductionRequest) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *GetCostReductionRequest) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

func (x *GetCostReductionRequest) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

func (x *GetCostReductionRequest) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *GetCostReductionRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetCostReductionRequest) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *GetCostReductionRequest) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

// Response message for GetCostReduction
type GetCostReductionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId             string                 `protobuf:"bytes,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	AwsCostReductions *aws.AwsCostReductions `protobuf:"bytes,2,opt,name=awsCostReductions,proto3" json:"awsCostReductions,omitempty"`
}

func (x *GetCostReductionResponse) Reset() {
	*x = GetCostReductionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCostReductionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCostReductionResponse) ProtoMessage() {}

func (x *GetCostReductionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCostReductionResponse.ProtoReflect.Descriptor instead.
func (*GetCostReductionResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{56}
}

func (x *GetCostReductionResponse) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetCostReductionResponse) GetAwsCostReductions() *aws.AwsCostReductions {
	if x != nil {
		return x.AwsCostReductions
	}
	return nil
}

// Request message for GetUtilization
type GetUtilizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Organization Id.
	OrgId string `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	// Required. For AWS, "ri" or "sp".
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Optional. The start date of the displayed data. If not set, the first day of the current month will be used. Format: yyyy-mm-dd.
	FromDate string `protobuf:"bytes,4,opt,name=fromDate,proto3" json:"fromDate,omitempty"`
	// Optional. The end date of the displayed data. If not set, current date will be used. Format: yyyy-mm-dd.
	ToDate string `protobuf:"bytes,5,opt,name=toDate,proto3" json:"toDate,omitempty"`
	// Optional. Payer Id.
	PayerId string `protobuf:"bytes,6,opt,name=payerId,proto3" json:"payerId,omitempty"`
	// Optional. Billing group Id.
	BillingInternalId string `protobuf:"bytes,7,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	// Optional. Account group Id.
	GroupId string `protobuf:"bytes,8,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *GetUtilizationRequest) Reset() {
	*x = GetUtilizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUtilizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUtilizationRequest) ProtoMessage() {}

func (x *GetUtilizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUtilizationRequest.ProtoReflect.Descriptor instead.
func (*GetUtilizationRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{57}
}

func (x *GetUtilizationRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetUtilizationRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetUtilizationRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetUtilizationRequest) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *GetUtilizationRequest) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

func (x *GetUtilizationRequest) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

func (x *GetUtilizationRequest) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *GetUtilizationRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// Response message for GetUtilization
type GetUtilizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId           string                 `protobuf:"bytes,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	UtilizationData []*api.UtilizationData `protobuf:"bytes,2,rep,name=utilizationData,proto3" json:"utilizationData,omitempty"`
}

func (x *GetUtilizationResponse) Reset() {
	*x = GetUtilizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUtilizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUtilizationResponse) ProtoMessage() {}

func (x *GetUtilizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUtilizationResponse.ProtoReflect.Descriptor instead.
func (*GetUtilizationResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{58}
}

func (x *GetUtilizationResponse) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetUtilizationResponse) GetUtilizationData() []*api.UtilizationData {
	if x != nil {
		return x.UtilizationData
	}
	return nil
}

// Request message for GetCoverageOptions
type GetCoverageOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Organization Id.
	OrgId string `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	// Required. Available values: day, hour.
	Period string `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
	// Optional. The start date of the displayed data. If not set, the first day of the current month will be used. Format: yyyy-mm-dd.
	FromDate string `protobuf:"bytes,4,opt,name=fromDate,proto3" json:"fromDate,omitempty"`
	// Optional. The end date of the displayed data. If not set, current date will be used. Format: yyyy-mm-dd.
	ToDate string `protobuf:"bytes,5,opt,name=toDate,proto3" json:"toDate,omitempty"`
	// Optional. Payer Id.
	PayerId string `protobuf:"bytes,6,opt,name=payerId,proto3" json:"payerId,omitempty"`
	// Optional. Billing group Id.
	BillingInternalId string `protobuf:"bytes,7,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	// Optional. Account group Id.
	GroupId string `protobuf:"bytes,8,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Optional. List of Account Ids.
	Accounts []string `protobuf:"bytes,9,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// Optional. List of services.
	Services []string `protobuf:"bytes,10,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *GetCoverageOptionsRequest) Reset() {
	*x = GetCoverageOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoverageOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoverageOptionsRequest) ProtoMessage() {}

func (x *GetCoverageOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoverageOptionsRequest.ProtoReflect.Descriptor instead.
func (*GetCoverageOptionsRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{59}
}

func (x *GetCoverageOptionsRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetCoverageOptionsRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetCoverageOptionsRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *GetCoverageOptionsRequest) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *GetCoverageOptionsRequest) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

func (x *GetCoverageOptionsRequest) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

func (x *GetCoverageOptionsRequest) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *GetCoverageOptionsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetCoverageOptionsRequest) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *GetCoverageOptionsRequest) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

// Response message for GetCoverageOptions
type GetCoverageOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId       string             `protobuf:"bytes,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	OptionsData []*api.OptionsData `protobuf:"bytes,2,rep,name=optionsData,proto3" json:"optionsData,omitempty"`
}

func (x *GetCoverageOptionsResponse) Reset() {
	*x = GetCoverageOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoverageOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoverageOptionsResponse) ProtoMessage() {}

func (x *GetCoverageOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoverageOptionsResponse.ProtoReflect.Descriptor instead.
func (*GetCoverageOptionsResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{60}
}

func (x *GetCoverageOptionsResponse) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetCoverageOptionsResponse) GetOptionsData() []*api.OptionsData {
	if x != nil {
		return x.OptionsData
	}
	return nil
}

// Request message for GetCoverageOndemand
type GetCoverageOndemandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Organization Id.
	OrgId string `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	// Required. Available values: day, hour
	Period string `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
	// Optional. The start date of the displayed data. If not set, the first day of the current month will be used. Format: yyyy-mm-dd.
	FromDate string `protobuf:"bytes,4,opt,name=fromDate,proto3" json:"fromDate,omitempty"`
	// Optional. The end date of the displayed data. If not set, current date will be used. Format: yyyy-mm-dd.
	ToDate string `protobuf:"bytes,5,opt,name=toDate,proto3" json:"toDate,omitempty"`
	// Optional. Payer Id.
	PayerId string `protobuf:"bytes,6,opt,name=payerId,proto3" json:"payerId,omitempty"`
	// Optional. Billing group Id.
	BillingInternalId string `protobuf:"bytes,7,opt,name=billingInternalId,proto3" json:"billingInternalId,omitempty"`
	// Optional. Account group Id.
	GroupId string `protobuf:"bytes,8,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Optional. List of Account Ids.
	Accounts []string `protobuf:"bytes,9,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// Optional. List of services.
	Services []string `protobuf:"bytes,10,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *GetCoverageOndemandRequest) Reset() {
	*x = GetCoverageOndemandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoverageOndemandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoverageOndemandRequest) ProtoMessage() {}

func (x *GetCoverageOndemandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoverageOndemandRequest.ProtoReflect.Descriptor instead.
func (*GetCoverageOndemandRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{61}
}

func (x *GetCoverageOndemandRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetCoverageOndemandRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetCoverageOndemandRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *GetCoverageOndemandRequest) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *GetCoverageOndemandRequest) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

func (x *GetCoverageOndemandRequest) GetPayerId() string {
	if x != nil {
		return x.PayerId
	}
	return ""
}

func (x *GetCoverageOndemandRequest) GetBillingInternalId() string {
	if x != nil {
		return x.BillingInternalId
	}
	return ""
}

func (x *GetCoverageOndemandRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetCoverageOndemandRequest) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *GetCoverageOndemandRequest) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

// Response message for GetCoverageOndemand
type GetCoverageOndemandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId        string              `protobuf:"bytes,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	OndemandData []*api.OndemandData `protobuf:"bytes,2,rep,name=ondemandData,proto3" json:"ondemandData,omitempty"`
}

func (x *GetCoverageOndemandResponse) Reset() {
	*x = GetCoverageOndemandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoverageOndemandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoverageOndemandResponse) ProtoMessage() {}

func (x *GetCoverageOndemandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoverageOndemandResponse.ProtoReflect.Descriptor instead.
func (*GetCoverageOndemandResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{62}
}

func (x *GetCoverageOndemandResponse) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetCoverageOndemandResponse) GetOndemandData() []*api.OndemandData {
	if x != nil {
		return x.OndemandData
	}
	return nil
}

// Request message for GetBreakevenPoint
type GetBreakevenPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Organization Id.
	OrgId string `protobuf:"bytes,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	// Required. For AWS, "ri" or "sp".
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Required. RI/SP Arn.
	Arn string `protobuf:"bytes,4,opt,name=arn,proto3" json:"arn,omitempty"`
}

func (x *GetBreakevenPointRequest) Reset() {
	*x = GetBreakevenPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBreakevenPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBreakevenPointRequest) ProtoMessage() {}

func (x *GetBreakevenPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBreakevenPointRequest.ProtoReflect.Descriptor instead.
func (*GetBreakevenPointRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{63}
}

func (x *GetBreakevenPointRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetBreakevenPointRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetBreakevenPointRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetBreakevenPointRequest) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

// Response message for GetBreakevenPoint
type GetBreakevenPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId            string                `protobuf:"bytes,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	AwsCostBreakeven *aws.AwsCostBreakeven `protobuf:"bytes,2,opt,name=awsCostBreakeven,proto3" json:"awsCostBreakeven,omitempty"`
}

func (x *GetBreakevenPointResponse) Reset() {
	*x = GetBreakevenPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBreakevenPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBreakevenPointResponse) ProtoMessage() {}

func (x *GetBreakevenPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBreakevenPointResponse.ProtoReflect.Descriptor instead.
func (*GetBreakevenPointResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{64}
}

func (x *GetBreakevenPointResponse) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetBreakevenPointResponse) GetAwsCostBreakeven() *aws.AwsCostBreakeven {
	if x != nil {
		return x.AwsCostBreakeven
	}
	return nil
}

// Request message for the ListCostFilters rpc.
type ListCostFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *ListCostFiltersRequest) Reset() {
	*x = ListCostFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCostFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCostFiltersRequest) ProtoMessage() {}

func (x *ListCostFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCostFiltersRequest.ProtoReflect.Descriptor instead.
func (*ListCostFiltersRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{65}
}

func (x *ListCostFiltersRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

// Response message for the ListCostFilters rpc.
type ListCostFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CostFilters []*ListCostFilters `protobuf:"bytes,1,rep,name=costFilters,proto3" json:"costFilters,omitempty"`
}

func (x *ListCostFiltersResponse) Reset() {
	*x = ListCostFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCostFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCostFiltersResponse) ProtoMessage() {}

func (x *ListCostFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCostFiltersResponse.ProtoReflect.Descriptor instead.
func (*ListCostFiltersResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{66}
}

func (x *ListCostFiltersResponse) GetCostFilters() []*ListCostFilters {
	if x != nil {
		return x.CostFilters
	}
	return nil
}

// Response message for the ListCostFilters rpc.
type ListCostFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Filter Id.
	FilterId string `protobuf:"bytes,1,opt,name=filterId,proto3" json:"filterId,omitempty"`
	// Required. Filter Name.
	FilterName string `protobuf:"bytes,2,opt,name=filterName,proto3" json:"filterName,omitempty"`
	// Required. Vendor.
	Vendor string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Optional. If set, reads the usage-based cost details of this group. Only valid for Ripple users. Implied as the parent billing group for Wave(Pro) users.
	//
	// For AWS Ripple, only billing internal ids are supported at the moment. Overriden when `accountId` is set to anything other than `*`. Set this and `accountId` to `*` to read the usage-based cost details of the whole organization. Optional for AWS Wave(Pro).
	GroupId string `protobuf:"bytes,4,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Optional. You can set it to a single account or a comma-separated list of accounts.
	//
	// For AWS, setting this will override `groupId`. Set this and `groupId` to `*` to read the usage-based cost details of the whole organization.
	AccountId string `protobuf:"bytes,5,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// Optional. Valid only for the `aws` vendor. AWS-specific options.
	AwsOptions *ReadCostsRequestAwsOptions `protobuf:"bytes,6,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *ListCostFilters) Reset() {
	*x = ListCostFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCostFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCostFilters) ProtoMessage() {}

func (x *ListCostFilters) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCostFilters.ProtoReflect.Descriptor instead.
func (*ListCostFilters) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{67}
}

func (x *ListCostFilters) GetFilterId() string {
	if x != nil {
		return x.FilterId
	}
	return ""
}

func (x *ListCostFilters) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

func (x *ListCostFilters) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ListCostFilters) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ListCostFilters) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListCostFilters) GetAwsOptions() *ReadCostsRequestAwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

// Request message for the CreateCostFilters rpc.
type CreateCostFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Filter Name. Specify characters between 1 ~ 100
	FilterName string `protobuf:"bytes,2,opt,name=filterName,proto3" json:"filterName,omitempty"`
	// Required. If set, reads the usage-based cost details of this group. Only valid for Ripple users. Implied as the parent billing group for Wave(Pro) users.
	//
	// For AWS Ripple, only billing internal ids are supported at the moment. Overriden when `accountId` is set to anything other than `*`. Set this and `accountId` to `*` to read the usage-based cost details of the whole organization. Optional for AWS Wave(Pro).
	GroupId string `protobuf:"bytes,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Required. You can set it to a single account or a comma-separated list of accounts.
	//
	// For AWS, setting this will override `groupId`. Set this and `groupId` to `*` to read the usage-based cost details of the whole organization.
	AccountId string `protobuf:"bytes,4,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// Required. Valid only for the `aws` vendor. AWS-specific options.
	AwsOptions *ReadCostsRequestAwsOptions `protobuf:"bytes,5,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *CreateCostFiltersRequest) Reset() {
	*x = CreateCostFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCostFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCostFiltersRequest) ProtoMessage() {}

func (x *CreateCostFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCostFiltersRequest.ProtoReflect.Descriptor instead.
func (*CreateCostFiltersRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{68}
}

func (x *CreateCostFiltersRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateCostFiltersRequest) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

func (x *CreateCostFiltersRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CreateCostFiltersRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateCostFiltersRequest) GetAwsOptions() *ReadCostsRequestAwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

// Response message for the CreateCostFilters rpc.
type CreateCostFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Filter Id.
	FilterId string `protobuf:"bytes,1,opt,name=filterId,proto3" json:"filterId,omitempty"`
}

func (x *CreateCostFiltersResponse) Reset() {
	*x = CreateCostFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCostFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCostFiltersResponse) ProtoMessage() {}

func (x *CreateCostFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCostFiltersResponse.ProtoReflect.Descriptor instead.
func (*CreateCostFiltersResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{69}
}

func (x *CreateCostFiltersResponse) GetFilterId() string {
	if x != nil {
		return x.FilterId
	}
	return ""
}

// Request message for the UpdateCostFilters rpc.
type UpdateCostFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Filter Id.
	FilterId string `protobuf:"bytes,2,opt,name=filterId,proto3" json:"filterId,omitempty"`
	// Required. Filter Name. Specify characters between 1 ~ 100
	FilterName string `protobuf:"bytes,3,opt,name=filterName,proto3" json:"filterName,omitempty"`
	// Required. If set, reads the usage-based cost details of this group. Only valid for Ripple users. Implied as the parent billing group for Wave(Pro) users.
	//
	// For AWS Ripple, only billing internal ids are supported at the moment. Overriden when `accountId` is set to anything other than `*`. Set this and `accountId` to `*` to read the usage-based cost details of the whole organization. Optional for AWS Wave(Pro).
	GroupId string `protobuf:"bytes,4,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// Required. You can set it to a single account or a comma-separated list of accounts.
	//
	// For AWS, setting this will override `groupId`. Set this and `groupId` to `*` to read the usage-based cost details of the whole organization.
	AccountId string `protobuf:"bytes,5,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// Required. Valid only for the `aws` vendor. AWS-specific options.
	AwsOptions *ReadCostsRequestAwsOptions `protobuf:"bytes,6,opt,name=awsOptions,proto3" json:"awsOptions,omitempty"`
}

func (x *UpdateCostFiltersRequest) Reset() {
	*x = UpdateCostFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostFiltersRequest) ProtoMessage() {}

func (x *UpdateCostFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostFiltersRequest.ProtoReflect.Descriptor instead.
func (*UpdateCostFiltersRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateCostFiltersRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *UpdateCostFiltersRequest) GetFilterId() string {
	if x != nil {
		return x.FilterId
	}
	return ""
}

func (x *UpdateCostFiltersRequest) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

func (x *UpdateCostFiltersRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *UpdateCostFiltersRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UpdateCostFiltersRequest) GetAwsOptions() *ReadCostsRequestAwsOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

// Response message for the UpdateCostFilters rpc.
type UpdateCostFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Filter Id.
	FilterId string `protobuf:"bytes,1,opt,name=filterId,proto3" json:"filterId,omitempty"`
}

func (x *UpdateCostFiltersResponse) Reset() {
	*x = UpdateCostFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCostFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCostFiltersResponse) ProtoMessage() {}

func (x *UpdateCostFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCostFiltersResponse.ProtoReflect.Descriptor instead.
func (*UpdateCostFiltersResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateCostFiltersResponse) GetFilterId() string {
	if x != nil {
		return x.FilterId
	}
	return ""
}

// Request message for the DeleteCostFilters rpc.
type DeleteCostFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Filter Id to delete.
	FilterId string `protobuf:"bytes,2,opt,name=filterId,proto3" json:"filterId,omitempty"`
}

func (x *DeleteCostFiltersRequest) Reset() {
	*x = DeleteCostFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCostFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCostFiltersRequest) ProtoMessage() {}

func (x *DeleteCostFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCostFiltersRequest.ProtoReflect.Descriptor instead.
func (*DeleteCostFiltersRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteCostFiltersRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DeleteCostFiltersRequest) GetFilterId() string {
	if x != nil {
		return x.FilterId
	}
	return ""
}

// Request message for the ExportCostFiltersFile rpc.
type ExportCostFiltersFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. At the moment, only `aws` is supported.
	Vendor string `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Required. Filter Id.
	FilterId string `protobuf:"bytes,2,opt,name=filterId,proto3" json:"filterId,omitempty"`
	// Optional. The UTC date to start streaming data from. If not set, the first day of the current month will be used. Format: `yyyymmdd`. The oldest supported date is `20200101`.
	StartTime string `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// Optional. The UTC date to end the streaming data. If not set, current date will be used. Format: `yyyymmd`.
	EndTime string `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	// Optional. If set to true, return data grouped by month within the date range. If you want data that is grouped per account per month, set this to `true`, then set `groupByColumns` to `none`.
	GroupByMonth bool `protobuf:"varint,5,opt,name=groupByMonth,proto3" json:"groupByMonth,omitempty"`
}

func (x *ExportCostFiltersFileRequest) Reset() {
	*x = ExportCostFiltersFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportCostFiltersFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportCostFiltersFileRequest) ProtoMessage() {}

func (x *ExportCostFiltersFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportCostFiltersFileRequest.ProtoReflect.Descriptor instead.
func (*ExportCostFiltersFileRequest) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{73}
}

func (x *ExportCostFiltersFileRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ExportCostFiltersFileRequest) GetFilterId() string {
	if x != nil {
		return x.FilterId
	}
	return ""
}

func (x *ExportCostFiltersFileRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ExportCostFiltersFileRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ExportCostFiltersFileRequest) GetGroupByMonth() bool {
	if x != nil {
		return x.GroupByMonth
	}
	return false
}

// Response message for the ExportCostFiltersFile rpc.
type ExportCostFiltersFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. URL of exported file.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ExportCostFiltersFileResponse) Reset() {
	*x = ExportCostFiltersFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportCostFiltersFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportCostFiltersFileResponse) ProtoMessage() {}

func (x *ExportCostFiltersFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportCostFiltersFileResponse.ProtoReflect.Descriptor instead.
func (*ExportCostFiltersFileResponse) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{74}
}

func (x *ExportCostFiltersFileResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ListCalculatorRunningAccountsResponse_AwsRunningAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The queried month. Format is yyyy-mm.
	Month string `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	// The AWS account that is actively processing.
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// The target date the account is processing for.
	Date string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	// The timestamp when the calculation has started.
	Started string `protobuf:"bytes,4,opt,name=started,proto3" json:"started,omitempty"`
}

func (x *ListCalculatorRunningAccountsResponse_AwsRunningAccount) Reset() {
	*x = ListCalculatorRunningAccountsResponse_AwsRunningAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCalculatorRunningAccountsResponse_AwsRunningAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalculatorRunningAccountsResponse_AwsRunningAccount) ProtoMessage() {}

func (x *ListCalculatorRunningAccountsResponse_AwsRunningAccount) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalculatorRunningAccountsResponse_AwsRunningAccount.ProtoReflect.Descriptor instead.
func (*ListCalculatorRunningAccountsResponse_AwsRunningAccount) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ListCalculatorRunningAccountsResponse_AwsRunningAccount) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *ListCalculatorRunningAccountsResponse_AwsRunningAccount) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ListCalculatorRunningAccountsResponse_AwsRunningAccount) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ListCalculatorRunningAccountsResponse_AwsRunningAccount) GetStarted() string {
	if x != nil {
		return x.Started
	}
	return ""
}

type ReadCostAttributesRequest_AwsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A comma-separated list of dimensions to query. Valid values are `productCode`, `serviceCode`, `region`, `zone`, `usageType`, `instanceType`, `operation`, `invoiceId`, `description`, `resourceId`, `tags`, and `costCategories`. Sequence doesn't matter. An empty value implies all attributes will be returned.
	Dimensions string `protobuf:"bytes,1,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
}

func (x *ReadCostAttributesRequest_AwsOptions) Reset() {
	*x = ReadCostAttributesRequest_AwsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCostAttributesRequest_AwsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCostAttributesRequest_AwsOptions) ProtoMessage() {}

func (x *ReadCostAttributesRequest_AwsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCostAttributesRequest_AwsOptions.ProtoReflect.Descriptor instead.
func (*ReadCostAttributesRequest_AwsOptions) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{28, 0}
}

func (x *ReadCostAttributesRequest_AwsOptions) GetDimensions() string {
	if x != nil {
		return x.Dimensions
	}
	return ""
}

// A map of "key:value" tag filters. The key indicates the tag key while the value is the filter tag value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
//
// For example, if you want to query lineitems with the tag `project:MY_PROJECT`, set to `{"project":"MY_PROJECT"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
type ReadCostsRequestAwsOptions_TagFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AndFilters map[string]string `protobuf:"bytes,1,rep,name=andFilters,proto3" json:"andFilters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReadCostsRequestAwsOptions_TagFilters) Reset() {
	*x = ReadCostsRequestAwsOptions_TagFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cost_v1_cost_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCostsRequestAwsOptions_TagFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCostsRequestAwsOptions_TagFilters) ProtoMessage() {}

func (x *ReadCostsRequestAwsOptions_TagFilters) ProtoReflect() protoreflect.Message {
	mi := &file_cost_v1_cost_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCostsRequestAwsOptions_TagFilters.ProtoReflect.Descriptor instead.
func (*ReadCostsRequestAwsOptions_TagFilters) Descriptor() ([]byte, []int) {
	return file_cost_v1_cost_proto_rawDescGZIP(), []int{31, 0}
}

func (x *ReadCostsRequestAwsOptions_TagFilters) GetAndFilters() map[string]string {
	if x != nil {
		return x.AndFilters
	}
	return nil
}

var File_cost_v1_cost_proto protoreflect.FileDescriptor

var file_cost_v1_cost_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x61, 0x70,
	0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x76, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x77, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x77, 0x73, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x72, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x69, 0x70, 0x70, 0x6c, 0x65, 0x2f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x32, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x22, 0x40, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x63, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0x6c, 0x0a, 0x24, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0a,
	0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x43, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x3b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3e, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0xf6, 0x01, 0x0a, 0x25,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x77, 0x73, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x03, 0x61, 0x77,
	0x73, 0x1a, 0x71, 0x0a, 0x11, 0x41, 0x77, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x22, 0x34, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x52, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x61, 0x77, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x61, 0x77, 0x73, 0x22, 0x45,
	0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x33, 0x0a, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x27, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x03, 0x61, 0x77, 0x73, 0x22, 0x77, 0x0a, 0x1f, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4f,
	0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x73, 0x4f,
	0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x61, 0x67, 0x73, 0x4f,
	0x6e, 0x6c, 0x79, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x50, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6e, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73, 0x4f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x73, 0x4f, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x44, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x22, 0x5c, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x41, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x68, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41,
	0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x61, 0x77, 0x73, 0x22,
	0xd4, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x30,
	0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3a, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x22, 0x68, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xb7, 0x01, 0x0a,
	0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x22, 0x4b, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x61, 0x77, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x2c, 0x0a, 0x0a, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45,
	0x0a, 0x11, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x03, 0x61, 0x77, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x0a, 0x61,
	0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0x3d, 0x0a, 0x0f, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e,
	0x05, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x4c, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a,
	0x0a, 0x74, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54,
	0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x54, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x6e, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x1a, 0xb3, 0x01, 0x0a, 0x0a, 0x54, 0x61,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x0a, 0x61, 0x6e, 0x64, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe7, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0a,
	0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61,
	0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x42, 0x0a, 0x20, 0x52, 0x65, 0x61,
	0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xf3, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x51, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x77, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x35, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x67, 0x43, 0x6f,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x13, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x4e,
	0x6f, 0x6e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x22, 0x4d, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x22, 0x84,
	0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x76, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x4f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x8e, 0x01,
	0x0a, 0x23, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x6f,
	0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x75,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x62, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x6b, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x43, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x83,
	0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22,
	0x79, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0xf1, 0x02, 0x0a,
	0x23, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x69, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x45, 0x43, 0x32, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x45, 0x43, 0x32, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x22, 0xbb, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x87,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x12, 0x61, 0x77, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x41, 0x77, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x61, 0x77, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe9, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x43, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x77, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x61, 0x77, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xaf, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x0c, 0x6f, 0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c,
	0x6f, 0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x76, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x22, 0x80, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x76, 0x65, 0x6e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x4d, 0x0a, 0x10, 0x61, 0x77, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x76, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x41, 0x77, 0x73,
	0x43, 0x6f, 0x73, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x76, 0x65, 0x6e, 0x52, 0x10, 0x61,
	0x77, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x76, 0x65, 0x6e, 0x22,
	0x30, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x22, 0x5d, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b,
	0x63, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x22, 0xea, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x4b, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd7, 0x01,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x61, 0x77,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x37, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xf3, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x61, 0x77, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x37, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x4e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xae, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x22, 0x31, 0x0a, 0x1d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x32, 0x84, 0x30, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x73, 0x30,
	0x01, 0x12, 0x77, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x69, 0x70, 0x70,
	0x6c, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x65, 0x72, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xbd, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x30, 0x01, 0x12, 0x76, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x7a, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x7d, 0x2f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6b,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x24,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6e, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x72, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a,
	0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc1, 0x01, 0x0a, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x7d, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12,
	0x98, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6f, 0x0a, 0x0e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x63, 0x75,
	0x72, 0x3a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x0e, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x26, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x7d, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x3a, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xa7, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0xaf, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x31,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x32, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x7d, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9a, 0x01, 0x0a,
	0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x2a,
	0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9a, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x1a, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0x83, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x2a, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d,
	0x2f, 0x63, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x12, 0xad, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x2d, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x3a, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x74, 0x72, 0x73, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x6f, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x3a,
	0x72, 0x65, 0x61, 0x64, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x61, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x78, 0x0a,
	0x0c, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x24, 0x2e,
	0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x25,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x3a, 0x72, 0x65,
	0x61, 0x64, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64,
	0x4e, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x4e, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x6e, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x63, 0x6f, 0x73, 0x74,
	0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x7b, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x66,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x43, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x43, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x73, 0x2f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x2f, 0x7b, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc4, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x6f, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x43, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x73, 0x2f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x2d, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x2f, 0x7b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0xc0, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x6f, 0x44,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12,
	0x32, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x6f,
	0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33,
	0x12, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x66,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x2d, 0x74,
	0x6f, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x7d, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x7d, 0x2f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x7d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9d, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12,
	0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62,
	0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d,
	0x2f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x7d, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x85, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12,
	0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x1a, 0x1e, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x62, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x2f, 0x7b, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12,
	0x82, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x7d, 0x2f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x62, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x7d, 0x12, 0xa3, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x62, 0x6c,
	0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x7d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x97, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x7d, 0x3a, 0x72, 0x65, 0x61,
	0x64, 0x3a, 0x01, 0x2a, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x7d, 0x12, 0xa4, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x7d, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4f,
	0x6e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x7d, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x6f, 0x6e, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x7d, 0x3a, 0x72, 0x65, 0x61,
	0x64, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x76, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x62, 0x6c, 0x75,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x76, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x76, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x7d, 0x2f, 0x62, 0x65, 0x70, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x7d, 0x1a, 0x94, 0x01, 0x92, 0x41, 0x90, 0x01, 0x12, 0x40, 0x28, 0x42, 0x45, 0x54,
	0x41, 0x29, 0x20, 0x43, 0x6f, 0x73, 0x74, 0x20, 0x41, 0x50, 0x49, 0x2e, 0x20, 0x42, 0x61, 0x73,
	0x65, 0x20, 0x55, 0x52, 0x4c, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x6d, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x1a, 0x4c, 0x0a, 0x12,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61,
	0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x2f,
	0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x42, 0xfc, 0x02, 0x0a, 0x16, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x09, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x73, 0x74, 0x92, 0x41, 0xb0, 0x02, 0x12, 0xce, 0x01, 0x0a, 0x1a, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x75, 0x73, 0x20, 0x42, 0x6c, 0x75, 0x65, 0x3a, 0x20, 0x43, 0x6f, 0x73, 0x74,
	0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x1a, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x75, 0x73, 0x20, 0x42, 0x6c, 0x75, 0x65, 0x3a, 0x20, 0x43, 0x6f, 0x73, 0x74, 0x20, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x69, 0x6f, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x2a, 0x57, 0x0a, 0x1b,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x3a, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x32, 0x2e, 0x30, 0x12, 0x38, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x62, 0x6c, 0x75, 0x65,
	0x61, 0x70, 0x69, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x72, 0x5d, 0x0a, 0x25, 0x4d, 0x6f,
	0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x75, 0x73,
	0x20, 0x42, 0x6c, 0x75, 0x65, 0x3a, 0x20, 0x43, 0x6f, 0x73, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x75, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x69, 0x6f, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x63, 0x6f, 0x73, 0x74, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cost_v1_cost_proto_rawDescOnce sync.Once
	file_cost_v1_cost_proto_rawDescData = file_cost_v1_cost_proto_rawDesc
)

func file_cost_v1_cost_proto_rawDescGZIP() []byte {
	file_cost_v1_cost_proto_rawDescOnce.Do(func() {
		file_cost_v1_cost_proto_rawDescData = protoimpl.X.CompressGZIP(file_cost_v1_cost_proto_rawDescData)
	})
	return file_cost_v1_cost_proto_rawDescData
}

var file_cost_v1_cost_proto_msgTypes = make([]protoimpl.MessageInfo, 80)
var file_cost_v1_cost_proto_goTypes = []interface{}{
	(*ListPayerAccountsRequest)(nil),                                // 0: blueapi.cost.v1.ListPayerAccountsRequest
	(*GetPayerAccountRequest)(nil),                                  // 1: blueapi.cost.v1.GetPayerAccountRequest
	(*GetPayerAccountImportHistoryRequest)(nil),                     // 2: blueapi.cost.v1.GetPayerAccountImportHistoryRequest
	(*GetPayerAccountImportHistoryResponse)(nil),                    // 3: blueapi.cost.v1.GetPayerAccountImportHistoryResponse
	(*CreatePayerAccountRequestAwsOptions)(nil),                     // 4: blueapi.cost.v1.CreatePayerAccountRequestAwsOptions
	(*CreatePayerAccountRequest)(nil),                               // 5: blueapi.cost.v1.CreatePayerAccountRequest
	(*DeletePayerAccountRequest)(nil),                               // 6: blueapi.cost.v1.DeletePayerAccountRequest
	(*ListAccountsRequest)(nil),                                     // 7: blueapi.cost.v1.ListAccountsRequest
	(*GetAccountRequest)(nil),                                       // 8: blueapi.cost.v1.GetAccountRequest
	(*CreateAccountRequestAwsOptions)(nil),                          // 9: blueapi.cost.v1.CreateAccountRequestAwsOptions
	(*CreateAccountRequest)(nil),                                    // 10: blueapi.cost.v1.CreateAccountRequest
	(*DeleteAccountRequest)(nil),                                    // 11: blueapi.cost.v1.DeleteAccountRequest
	(*ListCalculatorRunningAccountsRequest)(nil),                    // 12: blueapi.cost.v1.ListCalculatorRunningAccountsRequest
	(*ListCalculatorRunningAccountsResponse)(nil),                   // 13: blueapi.cost.v1.ListCalculatorRunningAccountsResponse
	(*GetCalculatorConfigRequest)(nil),                              // 14: blueapi.cost.v1.GetCalculatorConfigRequest
	(*GetCalculatorConfigResponse)(nil),                             // 15: blueapi.cost.v1.GetCalculatorConfigResponse
	(*ImportCurFilesRequest)(nil),                                   // 16: blueapi.cost.v1.ImportCurFilesRequest
	(*CostItem)(nil),                                                // 17: blueapi.cost.v1.CostItem
	(*CalculateCostsRequestAwsOptions)(nil),                         // 18: blueapi.cost.v1.CalculateCostsRequestAwsOptions
	(*CalculateCostsRequest)(nil),                                   // 19: blueapi.cost.v1.CalculateCostsRequest
	(*ListCalculationsHistoryRequest)(nil),                          // 20: blueapi.cost.v1.ListCalculationsHistoryRequest
	(*ListCalculationsHistoryAwsResponse)(nil),                      // 21: blueapi.cost.v1.ListCalculationsHistoryAwsResponse
	(*ListCalculationsHistoryResponse)(nil),                         // 22: blueapi.cost.v1.ListCalculationsHistoryResponse
	(*CalculationsSchedule)(nil),                                    // 23: blueapi.cost.v1.CalculationsSchedule
	(*ListCalculationsSchedulesRequest)(nil),                        // 24: blueapi.cost.v1.ListCalculationsSchedulesRequest
	(*ListCalculationsSchedulesResponse)(nil),                       // 25: blueapi.cost.v1.ListCalculationsSchedulesResponse
	(*CreateCalculationsScheduleRequest)(nil),                       // 26: blueapi.cost.v1.CreateCalculationsScheduleRequest
	(*DeleteCalculationsScheduleRequest)(nil),                       // 27: blueapi.cost.v1.DeleteCalculationsScheduleRequest
	(*ReadCostAttributesRequest)(nil),                               // 28: blueapi.cost.v1.ReadCostAttributesRequest
	(*CostAttributeItem)(nil),                                       // 29: blueapi.cost.v1.CostAttributeItem
	(*ReadCostsRequestAwsOptionsFilters)(nil),                       // 30: blueapi.cost.v1.ReadCostsRequestAwsOptionsFilters
	(*ReadCostsRequestAwsOptions)(nil),                              // 31: blueapi.cost.v1.ReadCostsRequestAwsOptions
	(*ReadCostsRequest)(nil),                                        // 32: blueapi.cost.v1.ReadCostsRequest
	(*ReadAdjustmentsRequestAwsOptions)(nil),                        // 33: blueapi.cost.v1.ReadAdjustmentsRequestAwsOptions
	(*ReadAdjustmentsRequest)(nil),                                  // 34: blueapi.cost.v1.ReadAdjustmentsRequest
	(*ReadTagCostsRequestAwsOptions)(nil),                           // 35: blueapi.cost.v1.ReadTagCostsRequestAwsOptions
	(*ReadTagCostsRequest)(nil),                                     // 36: blueapi.cost.v1.ReadTagCostsRequest
	(*ReadNonTagCostsRequest)(nil),                                  // 37: blueapi.cost.v1.ReadNonTagCostsRequest
	(*GetForecastsRequest)(nil),                                     // 38: blueapi.cost.v1.GetForecastsRequest
	(*GetForecastsResponse)(nil),                                    // 39: blueapi.cost.v1.GetForecastsResponse
	(*GetMonthlyCostForecastRequest)(nil),                           // 40: blueapi.cost.v1.GetMonthlyCostForecastRequest
	(*GetMonthlyCostForecastResponse)(nil),                          // 41: blueapi.cost.v1.GetMonthlyCostForecastResponse
	(*GetMonthOnMonthCostForecastRequest)(nil),                      // 42: blueapi.cost.v1.GetMonthOnMonthCostForecastRequest
	(*GetMonthOnMonthCostForecastResponse)(nil),                     // 43: blueapi.cost.v1.GetMonthOnMonthCostForecastResponse
	(*GetMonthToDateCostForecastRequest)(nil),                       // 44: blueapi.cost.v1.GetMonthToDateCostForecastRequest
	(*GetMonthToDateCostForecastResponse)(nil),                      // 45: blueapi.cost.v1.GetMonthToDateCostForecastResponse
	(*GetAccountBudgetRequest)(nil),                                 // 46: blueapi.cost.v1.GetAccountBudgetRequest
	(*GetAccountBudgetResponse)(nil),                                // 47: blueapi.cost.v1.GetAccountBudgetResponse
	(*CreateAccountBudgetRequest)(nil),                              // 48: blueapi.cost.v1.CreateAccountBudgetRequest
	(*CreateAccountBudgetResponse)(nil),                             // 49: blueapi.cost.v1.CreateAccountBudgetResponse
	(*UpdateAccountBudgetRequest)(nil),                              // 50: blueapi.cost.v1.UpdateAccountBudgetRequest
	(*DeleteAccountBudgetRequest)(nil),                              // 51: blueapi.cost.v1.DeleteAccountBudgetRequest
	(*GetRecommendationsRequestAwsOptions)(nil),                     // 52: blueapi.cost.v1.GetRecommendationsRequestAwsOptions
	(*GetRecommendationsRequest)(nil),                               // 53: blueapi.cost.v1.GetRecommendationsRequest
	(*GetRecommendationsResponse)(nil),                              // 54: blueapi.cost.v1.GetRecommendationsResponse
	(*GetCostReductionRequest)(nil),                                 // 55: blueapi.cost.v1.GetCostReductionRequest
	(*GetCostReductionResponse)(nil),                                // 56: blueapi.cost.v1.GetCostReductionResponse
	(*GetUtilizationRequest)(nil),                                   // 57: blueapi.cost.v1.GetUtilizationRequest
	(*GetUtilizationResponse)(nil),                                  // 58: blueapi.cost.v1.GetUtilizationResponse
	(*GetCoverageOptionsRequest)(nil),                               // 59: blueapi.cost.v1.GetCoverageOptionsRequest
	(*GetCoverageOptionsResponse)(nil),                              // 60: blueapi.cost.v1.GetCoverageOptionsResponse
	(*GetCoverageOndemandRequest)(nil),                              // 61: blueapi.cost.v1.GetCoverageOndemandRequest
	(*GetCoverageOndemandResponse)(nil),                             // 62: blueapi.cost.v1.GetCoverageOndemandResponse
	(*GetBreakevenPointRequest)(nil),                                // 63: blueapi.cost.v1.GetBreakevenPointRequest
	(*GetBreakevenPointResponse)(nil),                               // 64: blueapi.cost.v1.GetBreakevenPointResponse
	(*ListCostFiltersRequest)(nil),                                  // 65: blueapi.cost.v1.ListCostFiltersRequest
	(*ListCostFiltersResponse)(nil),                                 // 66: blueapi.cost.v1.ListCostFiltersResponse
	(*ListCostFilters)(nil),                                         // 67: blueapi.cost.v1.ListCostFilters
	(*CreateCostFiltersRequest)(nil),                                // 68: blueapi.cost.v1.CreateCostFiltersRequest
	(*CreateCostFiltersResponse)(nil),                               // 69: blueapi.cost.v1.CreateCostFiltersResponse
	(*UpdateCostFiltersRequest)(nil),                                // 70: blueapi.cost.v1.UpdateCostFiltersRequest
	(*UpdateCostFiltersResponse)(nil),                               // 71: blueapi.cost.v1.UpdateCostFiltersResponse
	(*DeleteCostFiltersRequest)(nil),                                // 72: blueapi.cost.v1.DeleteCostFiltersRequest
	(*ExportCostFiltersFileRequest)(nil),                            // 73: blueapi.cost.v1.ExportCostFiltersFileRequest
	(*ExportCostFiltersFileResponse)(nil),                           // 74: blueapi.cost.v1.ExportCostFiltersFileResponse
	(*ListCalculatorRunningAccountsResponse_AwsRunningAccount)(nil), // 75: blueapi.cost.v1.ListCalculatorRunningAccountsResponse.AwsRunningAccount
	(*ReadCostAttributesRequest_AwsOptions)(nil),                    // 76: blueapi.cost.v1.ReadCostAttributesRequest.AwsOptions
	nil, // 77: blueapi.cost.v1.ReadCostsRequestAwsOptionsFilters.AndFiltersEntry
	(*ReadCostsRequestAwsOptions_TagFilters)(nil), // 78: blueapi.cost.v1.ReadCostsRequestAwsOptions.TagFilters
	nil,                                  // 79: blueapi.cost.v1.ReadCostsRequestAwsOptions.TagFilters.AndFiltersEntry
	(*aws.CalculatorConfig)(nil),         // 80: blueapi.api.aws.CalculatorConfig
	(*aws.Cost)(nil),                     // 81: blueapi.api.aws.Cost
	(*api.Operation)(nil),                // 82: blueapi.api.Operation
	(*aws.CostAttribute)(nil),            // 83: blueapi.api.aws.CostAttribute
	(*api.BillingGroupForecast)(nil),     // 84: blueapi.api.BillingGroupForecast
	(*api.MonthlyCostForecast)(nil),      // 85: blueapi.api.MonthlyCostForecast
	(*api.MonthOnMonthCostForecast)(nil), // 86: blueapi.api.MonthOnMonthCostForecast
	(*api.MonthToDateCostForecast)(nil),  // 87: blueapi.api.MonthToDateCostForecast
	(*api.Budget)(nil),                   // 88: blueapi.api.Budget
	(*aws.AwsRecommendations)(nil),       // 89: blueapi.api.aws.AwsRecommendations
	(*aws.AwsCostReductions)(nil),        // 90: blueapi.api.aws.AwsCostReductions
	(*api.UtilizationData)(nil),          // 91: blueapi.api.UtilizationData
	(*api.OptionsData)(nil),              // 92: blueapi.api.OptionsData
	(*api.OndemandData)(nil),             // 93: blueapi.api.OndemandData
	(*aws.AwsCostBreakeven)(nil),         // 94: blueapi.api.aws.AwsCostBreakeven
	(*api.Account)(nil),                  // 95: blueapi.api.Account
	(*ripple.Payer)(nil),                 // 96: blueapi.api.ripple.Payer
	(*emptypb.Empty)(nil),                // 97: google.protobuf.Empty
}
var file_cost_v1_cost_proto_depIdxs = []int32{
	4,  // 0: blueapi.cost.v1.CreatePayerAccountRequest.awsOptions:type_name -> blueapi.cost.v1.CreatePayerAccountRequestAwsOptions
	9,  // 1: blueapi.cost.v1.CreateAccountRequest.awsOptions:type_name -> blueapi.cost.v1.CreateAccountRequestAwsOptions
	75, // 2: blueapi.cost.v1.ListCalculatorRunningAccountsResponse.aws:type_name -> blueapi.cost.v1.ListCalculatorRunningAccountsResponse.AwsRunningAccount
	80, // 3: blueapi.cost.v1.GetCalculatorConfigResponse.aws:type_name -> blueapi.api.aws.CalculatorConfig
	81, // 4: blueapi.cost.v1.CostItem.aws:type_name -> blueapi.api.aws.Cost
	18, // 5: blueapi.cost.v1.CalculateCostsRequest.awsOptions:type_name -> blueapi.cost.v1.CalculateCostsRequestAwsOptions
	82, // 6: blueapi.cost.v1.ListCalculationsHistoryAwsResponse.operations:type_name -> blueapi.api.Operation
	21, // 7: blueapi.cost.v1.ListCalculationsHistoryResponse.aws:type_name -> blueapi.cost.v1.ListCalculationsHistoryAwsResponse
	23, // 8: blueapi.cost.v1.ListCalculationsSchedulesResponse.schedules:type_name -> blueapi.cost.v1.CalculationsSchedule
	76, // 9: blueapi.cost.v1.ReadCostAttributesRequest.awsOptions:type_name -> blueapi.cost.v1.ReadCostAttributesRequest.AwsOptions
	83, // 10: blueapi.cost.v1.CostAttributeItem.aws:type_name -> blueapi.api.aws.CostAttribute
	77, // 11: blueapi.cost.v1.ReadCostsRequestAwsOptionsFilters.andFilters:type_name -> blueapi.cost.v1.ReadCostsRequestAwsOptionsFilters.AndFiltersEntry
	30, // 12: blueapi.cost.v1.ReadCostsRequestAwsOptions.filters:type_name -> blueapi.cost.v1.ReadCostsRequestAwsOptionsFilters
	78, // 13: blueapi.cost.v1.ReadCostsRequestAwsOptions.tagFilters:type_name -> blueapi.cost.v1.ReadCostsRequestAwsOptions.TagFilters
	31, // 14: blueapi.cost.v1.ReadCostsRequest.awsOptions:type_name -> blueapi.cost.v1.ReadCostsRequestAwsOptions
	33, // 15: blueapi.cost.v1.ReadAdjustmentsRequest.awsOptions:type_name -> blueapi.cost.v1.ReadAdjustmentsRequestAwsOptions
	35, // 16: blueapi.cost.v1.ReadTagCostsRequest.awsOptions:type_name -> blueapi.cost.v1.ReadTagCostsRequestAwsOptions
	84, // 17: blueapi.cost.v1.GetForecastsResponse.data:type_name -> blueapi.api.BillingGroupForecast
	85, // 18: blueapi.cost.v1.GetMonthlyCostForecastResponse.data:type_name -> blueapi.api.MonthlyCostForecast
	86, // 19: blueapi.cost.v1.GetMonthOnMonthCostForecastResponse.data:type_name -> blueapi.api.MonthOnMonthCostForecast
	87, // 20: blueapi.cost.v1.GetMonthToDateCostForecastResponse.data:type_name -> blueapi.api.MonthToDateCostForecast
	88, // 21: blueapi.cost.v1.GetAccountBudgetResponse.data:type_name -> blueapi.api.Budget
	88, // 22: blueapi.cost.v1.CreateAccountBudgetRequest.data:type_name -> blueapi.api.Budget
	88, // 23: blueapi.cost.v1.UpdateAccountBudgetRequest.data:type_name -> blueapi.api.Budget
	52, // 24: blueapi.cost.v1.GetRecommendationsRequest.awsOptions:type_name -> blueapi.cost.v1.GetRecommendationsRequestAwsOptions
	89, // 25: blueapi.cost.v1.GetRecommendationsResponse.awsRecommendations:type_name -> blueapi.api.aws.AwsRecommendations
	90, // 26: blueapi.cost.v1.GetCostReductionResponse.awsCostReductions:type_name -> blueapi.api.aws.AwsCostReductions
	91, // 27: blueapi.cost.v1.GetUtilizationResponse.utilizationData:type_name -> blueapi.api.UtilizationData
	92, // 28: blueapi.cost.v1.GetCoverageOptionsResponse.optionsData:type_name -> blueapi.api.OptionsData
	93, // 29: blueapi.cost.v1.GetCoverageOndemandResponse.ondemandData:type_name -> blueapi.api.OndemandData
	94, // 30: blueapi.cost.v1.GetBreakevenPointResponse.awsCostBreakeven:type_name -> blueapi.api.aws.AwsCostBreakeven
	67, // 31: blueapi.cost.v1.ListCostFiltersResponse.costFilters:type_name -> blueapi.cost.v1.ListCostFilters
	31, // 32: blueapi.cost.v1.ListCostFilters.awsOptions:type_name -> blueapi.cost.v1.ReadCostsRequestAwsOptions
	31, // 33: blueapi.cost.v1.CreateCostFiltersRequest.awsOptions:type_name -> blueapi.cost.v1.ReadCostsRequestAwsOptions
	31, // 34: blueapi.cost.v1.UpdateCostFiltersRequest.awsOptions:type_name -> blueapi.cost.v1.ReadCostsRequestAwsOptions
	79, // 35: blueapi.cost.v1.ReadCostsRequestAwsOptions.TagFilters.andFilters:type_name -> blueapi.cost.v1.ReadCostsRequestAwsOptions.TagFilters.AndFiltersEntry
	0,  // 36: blueapi.cost.v1.Cost.ListPayerAccounts:input_type -> blueapi.cost.v1.ListPayerAccountsRequest
	1,  // 37: blueapi.cost.v1.Cost.GetPayerAccount:input_type -> blueapi.cost.v1.GetPayerAccountRequest
	2,  // 38: blueapi.cost.v1.Cost.GetPayerAccountImportHistory:input_type -> blueapi.cost.v1.GetPayerAccountImportHistoryRequest
	5,  // 39: blueapi.cost.v1.Cost.CreatePayerAccount:input_type -> blueapi.cost.v1.CreatePayerAccountRequest
	6,  // 40: blueapi.cost.v1.Cost.DeletePayerAccount:input_type -> blueapi.cost.v1.DeletePayerAccountRequest
	7,  // 41: blueapi.cost.v1.Cost.ListAccounts:input_type -> blueapi.cost.v1.ListAccountsRequest
	8,  // 42: blueapi.cost.v1.Cost.GetAccount:input_type -> blueapi.cost.v1.GetAccountRequest
	10, // 43: blueapi.cost.v1.Cost.CreateAccount:input_type -> blueapi.cost.v1.CreateAccountRequest
	11, // 44: blueapi.cost.v1.Cost.DeleteAccount:input_type -> blueapi.cost.v1.DeleteAccountRequest
	12, // 45: blueapi.cost.v1.Cost.ListCalculatorRunningAccounts:input_type -> blueapi.cost.v1.ListCalculatorRunningAccountsRequest
	14, // 46: blueapi.cost.v1.Cost.GetCalculatorConfig:input_type -> blueapi.cost.v1.GetCalculatorConfigRequest
	16, // 47: blueapi.cost.v1.Cost.ImportCurFiles:input_type -> blueapi.cost.v1.ImportCurFilesRequest
	19, // 48: blueapi.cost.v1.Cost.CalculateCosts:input_type -> blueapi.cost.v1.CalculateCostsRequest
	20, // 49: blueapi.cost.v1.Cost.ListCalculationsHistory:input_type -> blueapi.cost.v1.ListCalculationsHistoryRequest
	24, // 50: blueapi.cost.v1.Cost.ListCalculationsSchedules:input_type -> blueapi.cost.v1.ListCalculationsSchedulesRequest
	26, // 51: blueapi.cost.v1.Cost.CreateCalculationsSchedule:input_type -> blueapi.cost.v1.CreateCalculationsScheduleRequest
	27, // 52: blueapi.cost.v1.Cost.DeleteCalculationsSchedule:input_type -> blueapi.cost.v1.DeleteCalculationsScheduleRequest
	65, // 53: blueapi.cost.v1.Cost.ListCostFilters:input_type -> blueapi.cost.v1.ListCostFiltersRequest
	68, // 54: blueapi.cost.v1.Cost.CreateCostFilters:input_type -> blueapi.cost.v1.CreateCostFiltersRequest
	70, // 55: blueapi.cost.v1.Cost.UpdateCostFilters:input_type -> blueapi.cost.v1.UpdateCostFiltersRequest
	72, // 56: blueapi.cost.v1.Cost.DeleteCostFilters:input_type -> blueapi.cost.v1.DeleteCostFiltersRequest
	73, // 57: blueapi.cost.v1.Cost.ExportCostFiltersFile:input_type -> blueapi.cost.v1.ExportCostFiltersFileRequest
	28, // 58: blueapi.cost.v1.Cost.ReadCostAttributes:input_type -> blueapi.cost.v1.ReadCostAttributesRequest
	32, // 59: blueapi.cost.v1.Cost.ReadCosts:input_type -> blueapi.cost.v1.ReadCostsRequest
	34, // 60: blueapi.cost.v1.Cost.ReadAdjustments:input_type -> blueapi.cost.v1.ReadAdjustmentsRequest
	36, // 61: blueapi.cost.v1.Cost.ReadTagCosts:input_type -> blueapi.cost.v1.ReadTagCostsRequest
	37, // 62: blueapi.cost.v1.Cost.ReadNonTagCosts:input_type -> blueapi.cost.v1.ReadNonTagCostsRequest
	38, // 63: blueapi.cost.v1.Cost.GetForecasts:input_type -> blueapi.cost.v1.GetForecastsRequest
	40, // 64: blueapi.cost.v1.Cost.GetMonthlyCostForecast:input_type -> blueapi.cost.v1.GetMonthlyCostForecastRequest
	42, // 65: blueapi.cost.v1.Cost.GetMonthOnMonthCostForecast:input_type -> blueapi.cost.v1.GetMonthOnMonthCostForecastRequest
	44, // 66: blueapi.cost.v1.Cost.GetMonthToDateCostForecast:input_type -> blueapi.cost.v1.GetMonthToDateCostForecastRequest
	46, // 67: blueapi.cost.v1.Cost.GetAccountBudget:input_type -> blueapi.cost.v1.GetAccountBudgetRequest
	48, // 68: blueapi.cost.v1.Cost.CreateAccountBudget:input_type -> blueapi.cost.v1.CreateAccountBudgetRequest
	50, // 69: blueapi.cost.v1.Cost.UpdateAccountBudget:input_type -> blueapi.cost.v1.UpdateAccountBudgetRequest
	51, // 70: blueapi.cost.v1.Cost.DeleteAccountBudget:input_type -> blueapi.cost.v1.DeleteAccountBudgetRequest
	53, // 71: blueapi.cost.v1.Cost.GetRecommendations:input_type -> blueapi.cost.v1.GetRecommendationsRequest
	55, // 72: blueapi.cost.v1.Cost.GetCostReduction:input_type -> blueapi.cost.v1.GetCostReductionRequest
	57, // 73: blueapi.cost.v1.Cost.GetUtilization:input_type -> blueapi.cost.v1.GetUtilizationRequest
	59, // 74: blueapi.cost.v1.Cost.GetCoverageOptions:input_type -> blueapi.cost.v1.GetCoverageOptionsRequest
	61, // 75: blueapi.cost.v1.Cost.GetCoverageOndemand:input_type -> blueapi.cost.v1.GetCoverageOndemandRequest
	63, // 76: blueapi.cost.v1.Cost.GetBreakevenPoint:input_type -> blueapi.cost.v1.GetBreakevenPointRequest
	95, // 77: blueapi.cost.v1.Cost.ListPayerAccounts:output_type -> blueapi.api.Account
	96, // 78: blueapi.cost.v1.Cost.GetPayerAccount:output_type -> blueapi.api.ripple.Payer
	3,  // 79: blueapi.cost.v1.Cost.GetPayerAccountImportHistory:output_type -> blueapi.cost.v1.GetPayerAccountImportHistoryResponse
	95, // 80: blueapi.cost.v1.Cost.CreatePayerAccount:output_type -> blueapi.api.Account
	97, // 81: blueapi.cost.v1.Cost.DeletePayerAccount:output_type -> google.protobuf.Empty
	95, // 82: blueapi.cost.v1.Cost.ListAccounts:output_type -> blueapi.api.Account
	95, // 83: blueapi.cost.v1.Cost.GetAccount:output_type -> blueapi.api.Account
	95, // 84: blueapi.cost.v1.Cost.CreateAccount:output_type -> blueapi.api.Account
	97, // 85: blueapi.cost.v1.Cost.DeleteAccount:output_type -> google.protobuf.Empty
	13, // 86: blueapi.cost.v1.Cost.ListCalculatorRunningAccounts:output_type -> blueapi.cost.v1.ListCalculatorRunningAccountsResponse
	15, // 87: blueapi.cost.v1.Cost.GetCalculatorConfig:output_type -> blueapi.cost.v1.GetCalculatorConfigResponse
	82, // 88: blueapi.cost.v1.Cost.ImportCurFiles:output_type -> blueapi.api.Operation
	82, // 89: blueapi.cost.v1.Cost.CalculateCosts:output_type -> blueapi.api.Operation
	22, // 90: blueapi.cost.v1.Cost.ListCalculationsHistory:output_type -> blueapi.cost.v1.ListCalculationsHistoryResponse
	25, // 91: blueapi.cost.v1.Cost.ListCalculationsSchedules:output_type -> blueapi.cost.v1.ListCalculationsSchedulesResponse
	23, // 92: blueapi.cost.v1.Cost.CreateCalculationsSchedule:output_type -> blueapi.cost.v1.CalculationsSchedule
	97, // 93: blueapi.cost.v1.Cost.DeleteCalculationsSchedule:output_type -> google.protobuf.Empty
	66, // 94: blueapi.cost.v1.Cost.ListCostFilters:output_type -> blueapi.cost.v1.ListCostFiltersResponse
	69, // 95: blueapi.cost.v1.Cost.CreateCostFilters:output_type -> blueapi.cost.v1.CreateCostFiltersResponse
	71, // 96: blueapi.cost.v1.Cost.UpdateCostFilters:output_type -> blueapi.cost.v1.UpdateCostFiltersResponse
	97, // 97: blueapi.cost.v1.Cost.DeleteCostFilters:output_type -> google.protobuf.Empty
	74, // 98: blueapi.cost.v1.Cost.ExportCostFiltersFile:output_type -> blueapi.cost.v1.ExportCostFiltersFileResponse
	29, // 99: blueapi.cost.v1.Cost.ReadCostAttributes:output_type -> blueapi.cost.v1.CostAttributeItem
	17, // 100: blueapi.cost.v1.Cost.ReadCosts:output_type -> blueapi.cost.v1.CostItem
	17, // 101: blueapi.cost.v1.Cost.ReadAdjustments:output_type -> blueapi.cost.v1.CostItem
	17, // 102: blueapi.cost.v1.Cost.ReadTagCosts:output_type -> blueapi.cost.v1.CostItem
	17, // 103: blueapi.cost.v1.Cost.ReadNonTagCosts:output_type -> blueapi.cost.v1.CostItem
	39, // 104: blueapi.cost.v1.Cost.GetForecasts:output_type -> blueapi.cost.v1.GetForecastsResponse
	41, // 105: blueapi.cost.v1.Cost.GetMonthlyCostForecast:output_type -> blueapi.cost.v1.GetMonthlyCostForecastResponse
	43, // 106: blueapi.cost.v1.Cost.GetMonthOnMonthCostForecast:output_type -> blueapi.cost.v1.GetMonthOnMonthCostForecastResponse
	45, // 107: blueapi.cost.v1.Cost.GetMonthToDateCostForecast:output_type -> blueapi.cost.v1.GetMonthToDateCostForecastResponse
	47, // 108: blueapi.cost.v1.Cost.GetAccountBudget:output_type -> blueapi.cost.v1.GetAccountBudgetResponse
	49, // 109: blueapi.cost.v1.Cost.CreateAccountBudget:output_type -> blueapi.cost.v1.CreateAccountBudgetResponse
	97, // 110: blueapi.cost.v1.Cost.UpdateAccountBudget:output_type -> google.protobuf.Empty
	97, // 111: blueapi.cost.v1.Cost.DeleteAccountBudget:output_type -> google.protobuf.Empty
	54, // 112: blueapi.cost.v1.Cost.GetRecommendations:output_type -> blueapi.cost.v1.GetRecommendationsResponse
	56, // 113: blueapi.cost.v1.Cost.GetCostReduction:output_type -> blueapi.cost.v1.GetCostReductionResponse
	58, // 114: blueapi.cost.v1.Cost.GetUtilization:output_type -> blueapi.cost.v1.GetUtilizationResponse
	60, // 115: blueapi.cost.v1.Cost.GetCoverageOptions:output_type -> blueapi.cost.v1.GetCoverageOptionsResponse
	62, // 116: blueapi.cost.v1.Cost.GetCoverageOndemand:output_type -> blueapi.cost.v1.GetCoverageOndemandResponse
	64, // 117: blueapi.cost.v1.Cost.GetBreakevenPoint:output_type -> blueapi.cost.v1.GetBreakevenPointResponse
	77, // [77:118] is the sub-list for method output_type
	36, // [36:77] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_cost_v1_cost_proto_init() }
func file_cost_v1_cost_proto_init() {
	if File_cost_v1_cost_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cost_v1_cost_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPayerAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPayerAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPayerAccountImportHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPayerAccountImportHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePayerAccountRequestAwsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePayerAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePayerAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountRequestAwsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalculatorRunningAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalculatorRunningAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCalculatorConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCalculatorConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportCurFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateCostsRequestAwsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateCostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalculationsHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalculationsHistoryAwsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalculationsHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculationsSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalculationsSchedulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalculationsSchedulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCalculationsScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCalculationsScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCostAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostAttributeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCostsRequestAwsOptionsFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCostsRequestAwsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadAdjustmentsRequestAwsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadAdjustmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTagCostsRequestAwsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTagCostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadNonTagCostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForecastsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForecastsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonthlyCostForecastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonthlyCostForecastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonthOnMonthCostForecastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonthOnMonthCostForecastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonthToDateCostForecastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonthToDateCostForecastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountBudgetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountBudgetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountBudgetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountBudgetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountBudgetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountBudgetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecommendationsRequestAwsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecommendationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecommendationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCostReductionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCostReductionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUtilizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUtilizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoverageOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoverageOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoverageOndemandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoverageOndemandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBreakevenPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBreakevenPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCostFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCostFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCostFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCostFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCostFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCostFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCostFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCostFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportCostFiltersFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportCostFiltersFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCalculatorRunningAccountsResponse_AwsRunningAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCostAttributesRequest_AwsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cost_v1_cost_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCostsRequestAwsOptions_TagFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cost_v1_cost_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   80,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cost_v1_cost_proto_goTypes,
		DependencyIndexes: file_cost_v1_cost_proto_depIdxs,
		MessageInfos:      file_cost_v1_cost_proto_msgTypes,
	}.Build()
	File_cost_v1_cost_proto = out.File
	file_cost_v1_cost_proto_rawDesc = nil
	file_cost_v1_cost_proto_goTypes = nil
	file_cost_v1_cost_proto_depIdxs = nil
}
