// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: admin/v1/admin.proto

package admin

import (
	context "context"
	api "github.com/alphauslabs/blue-sdk-go/api"
	protos "github.com/alphauslabs/blue-sdk-go/protos"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Admin_ListAccountGroups_FullMethodName                     = "/blueapi.admin.v1.Admin/ListAccountGroups"
	Admin_GetAccountGroup_FullMethodName                       = "/blueapi.admin.v1.Admin/GetAccountGroup"
	Admin_GetDefaultCostAccessTemplateUrl_FullMethodName       = "/blueapi.admin.v1.Admin/GetDefaultCostAccessTemplateUrl"
	Admin_ListDefaultCostAccess_FullMethodName                 = "/blueapi.admin.v1.Admin/ListDefaultCostAccess"
	Admin_GetDefaultCostAccess_FullMethodName                  = "/blueapi.admin.v1.Admin/GetDefaultCostAccess"
	Admin_CreateDefaultCostAccess_FullMethodName               = "/blueapi.admin.v1.Admin/CreateDefaultCostAccess"
	Admin_UpdateDefaultCostAccess_FullMethodName               = "/blueapi.admin.v1.Admin/UpdateDefaultCostAccess"
	Admin_DeleteDefaultCostAccess_FullMethodName               = "/blueapi.admin.v1.Admin/DeleteDefaultCostAccess"
	Admin_GetCloudWatchMetricsStreamTemplateUrl_FullMethodName = "/blueapi.admin.v1.Admin/GetCloudWatchMetricsStreamTemplateUrl"
	Admin_CreateCloudWatchMetricsStream_FullMethodName         = "/blueapi.admin.v1.Admin/CreateCloudWatchMetricsStream"
	Admin_CreateProformaCur_FullMethodName                     = "/blueapi.admin.v1.Admin/CreateProformaCur"
	Admin_GetNotificationSettings_FullMethodName               = "/blueapi.admin.v1.Admin/GetNotificationSettings"
	Admin_SaveNotificationSettings_FullMethodName              = "/blueapi.admin.v1.Admin/SaveNotificationSettings"
	Admin_ListNotificationChannels_FullMethodName              = "/blueapi.admin.v1.Admin/ListNotificationChannels"
	Admin_GetNotificationChannel_FullMethodName                = "/blueapi.admin.v1.Admin/GetNotificationChannel"
	Admin_CreateNotificationChannel_FullMethodName             = "/blueapi.admin.v1.Admin/CreateNotificationChannel"
	Admin_CreateDefaultNotificationChannel_FullMethodName      = "/blueapi.admin.v1.Admin/CreateDefaultNotificationChannel"
	Admin_UpdateNotificationChannel_FullMethodName             = "/blueapi.admin.v1.Admin/UpdateNotificationChannel"
	Admin_DeleteNotificationChannel_FullMethodName             = "/blueapi.admin.v1.Admin/DeleteNotificationChannel"
	Admin_ListNotifications_FullMethodName                     = "/blueapi.admin.v1.Admin/ListNotifications"
	Admin_GetNotification_FullMethodName                       = "/blueapi.admin.v1.Admin/GetNotification"
	Admin_CreateNotification_FullMethodName                    = "/blueapi.admin.v1.Admin/CreateNotification"
	Admin_UpdateNotification_FullMethodName                    = "/blueapi.admin.v1.Admin/UpdateNotification"
	Admin_DeleteNotification_FullMethodName                    = "/blueapi.admin.v1.Admin/DeleteNotification"
	Admin_ExportAuditLogs_FullMethodName                       = "/blueapi.admin.v1.Admin/ExportAuditLogs"
	Admin_GetWaveFeatures_FullMethodName                       = "/blueapi.admin.v1.Admin/GetWaveFeatures"
	Admin_UpdateWaveFeatureSetting_FullMethodName              = "/blueapi.admin.v1.Admin/UpdateWaveFeatureSetting"
	Admin_GetMSPDefaultMeta_FullMethodName                     = "/blueapi.admin.v1.Admin/GetMSPDefaultMeta"
	Admin_UpdateMSPDefaultMeta_FullMethodName                  = "/blueapi.admin.v1.Admin/UpdateMSPDefaultMeta"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Admin service definition.
type AdminClient interface {
	// Lists all account groups.
	ListAccountGroups(ctx context.Context, in *ListAccountGroupsRequest, opts ...grpc.CallOption) (Admin_ListAccountGroupsClient, error)
	// Gets an account group.
	GetAccountGroup(ctx context.Context, in *GetAccountGroupRequest, opts ...grpc.CallOption) (*GetAccountGroupResponse, error)
	// Gets a CloudFormation launch URL for enabling the default cross-account access to your account's cost information based on type. See comments on the type for more information on what each template does.
	GetDefaultCostAccessTemplateUrl(ctx context.Context, in *GetDefaultCostAccessTemplateUrlRequest, opts ...grpc.CallOption) (*GetDefaultCostAccessTemplateUrlResponse, error)
	// Lists the default cross-account access role(s) attached to accounts under caller.
	ListDefaultCostAccess(ctx context.Context, in *ListDefaultCostAccessRequest, opts ...grpc.CallOption) (Admin_ListDefaultCostAccessClient, error)
	// Gets the current default cross-account role attached to the input target.
	GetDefaultCostAccess(ctx context.Context, in *GetDefaultCostAccessRequest, opts ...grpc.CallOption) (*DefaultCostAccess, error)
	// Starts validation of a default cross-account access stack deployment. If successful, the IAM role created from the CloudFormation stack will be registered to the target.
	CreateDefaultCostAccess(ctx context.Context, in *CreateDefaultCostAccessRequest, opts ...grpc.CallOption) (*DefaultCostAccess, error)
	// Starts an update to an existing default cross-account access CloudFormation stack for template changes, if any. Only call this API if the status of your default cross-account access is 'outdated'.
	UpdateDefaultCostAccess(ctx context.Context, in *UpdateDefaultCostAccessRequest, opts ...grpc.CallOption) (*protos.Operation, error)
	// Deletes the current default cross-account access role attached to this target account. This does not delete the CloudFormation deployment in your account.
	DeleteDefaultCostAccess(ctx context.Context, in *DeleteDefaultCostAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Gets a CloudFormation launch URL for enabling CloudWatch metrics streaming on a target account.
	GetCloudWatchMetricsStreamTemplateUrl(ctx context.Context, in *GetCloudWatchMetricsStreamTemplateUrlRequest, opts ...grpc.CallOption) (*GetCloudWatchMetricsStreamTemplateUrlResponse, error)
	// WORK-IN-PROGRESS: Starts validation of a CloudWatch Metrics streaming stack deployment.
	CreateCloudWatchMetricsStream(ctx context.Context, in *CreateCloudWatchMetricsStreamRequest, opts ...grpc.CallOption) (*CloudWatchMetricsStream, error)
	// WORK-IN-PROGRESS: Configure AWS Proforma Cost and Usage Report.
	CreateProformaCur(ctx context.Context, in *CreateProformaCurRequest, opts ...grpc.CallOption) (*ProformaCur, error)
	// Get notification settings for login user's organization or group.
	GetNotificationSettings(ctx context.Context, in *GetNotificationSettingsRequest, opts ...grpc.CallOption) (*api.NotificationSettings, error)
	// Creates or updates notification settings for login user's organization or group.
	SaveNotificationSettings(ctx context.Context, in *SaveNotificationSettingsRequest, opts ...grpc.CallOption) (*api.NotificationSettings, error)
	// Lists all notification channels for login user's organization or group.
	ListNotificationChannels(ctx context.Context, in *ListNotificationChannelsRequest, opts ...grpc.CallOption) (*ListNotificationChannelsResponse, error)
	// Gets notification channel for login user's organization or group.
	GetNotificationChannel(ctx context.Context, in *GetNotificationChannelRequest, opts ...grpc.CallOption) (*api.NotificationChannel, error)
	// WORK-IN-PROGRESS: Creates notification settings for login user's organization or group.
	CreateNotificationChannel(ctx context.Context, in *CreateNotificationChannelRequest, opts ...grpc.CallOption) (*api.NotificationChannel, error)
	// Creates a default notification channel of type email based on the caller's primary email address.
	CreateDefaultNotificationChannel(ctx context.Context, in *CreateDefaultNotificationChannelRequest, opts ...grpc.CallOption) (*api.NotificationChannel, error)
	// WORK-IN-PROGRESS: Updates notification settings for login user's organization or group.
	UpdateNotificationChannel(ctx context.Context, in *UpdateNotificationChannelRequest, opts ...grpc.CallOption) (*api.NotificationChannel, error)
	// Deletes notification settings for login user's organization or group.
	DeleteNotificationChannel(ctx context.Context, in *DeleteNotificationChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: List all notification for login user's organization.
	ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error)
	// WORK-IN-PROGRESS: Get notifications for login user's organization.
	GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*api.Notification, error)
	// WORK-IN-PROGRESS: Creates notification for login user's organization.
	CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*api.Notification, error)
	// WORK-IN-PROGRESS: Updates notification for login user's organization.
	UpdateNotification(ctx context.Context, in *UpdateNotificationRequest, opts ...grpc.CallOption) (*api.Notification, error)
	// WORK-IN-PROGRESS: Deletes notification for login user's organization.
	DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Exports audit logs for login user's organization.
	ExportAuditLogs(ctx context.Context, in *ExportAuditLogsRequest, opts ...grpc.CallOption) (*api.AuditExport, error)
	// WORK-IN-PROGRESS: Get settings value for wave features management per organization
	GetWaveFeatures(ctx context.Context, in *GetWaveFeaturesRequest, opts ...grpc.CallOption) (*GetWaveFeaturesResponse, error)
	// WORK-IN-PROGRESS: Updates the wave feature management default value per organization
	UpdateWaveFeatureSetting(ctx context.Context, in *UpdateWaveFeatureSettingRequest, opts ...grpc.CallOption) (*GetWaveFeaturesResponse, error)
	// WORK-IN-PROGRESS: Fetch the default meta saved per organization
	GetMSPDefaultMeta(ctx context.Context, in *GetMSPDefaultMetaRequest, opts ...grpc.CallOption) (*GetMSPDefaultMetaResponse, error)
	// WORK-IN-PROGRESS: Set the default meta saved per organization
	UpdateMSPDefaultMeta(ctx context.Context, in *UpdateMSPDefaultMetaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) ListAccountGroups(ctx context.Context, in *ListAccountGroupsRequest, opts ...grpc.CallOption) (Admin_ListAccountGroupsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Admin_ServiceDesc.Streams[0], Admin_ListAccountGroups_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &adminListAccountGroupsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Admin_ListAccountGroupsClient interface {
	Recv() (*ListAccountGroupsResponse, error)
	grpc.ClientStream
}

type adminListAccountGroupsClient struct {
	grpc.ClientStream
}

func (x *adminListAccountGroupsClient) Recv() (*ListAccountGroupsResponse, error) {
	m := new(ListAccountGroupsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminClient) GetAccountGroup(ctx context.Context, in *GetAccountGroupRequest, opts ...grpc.CallOption) (*GetAccountGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountGroupResponse)
	err := c.cc.Invoke(ctx, Admin_GetAccountGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDefaultCostAccessTemplateUrl(ctx context.Context, in *GetDefaultCostAccessTemplateUrlRequest, opts ...grpc.CallOption) (*GetDefaultCostAccessTemplateUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDefaultCostAccessTemplateUrlResponse)
	err := c.cc.Invoke(ctx, Admin_GetDefaultCostAccessTemplateUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListDefaultCostAccess(ctx context.Context, in *ListDefaultCostAccessRequest, opts ...grpc.CallOption) (Admin_ListDefaultCostAccessClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Admin_ServiceDesc.Streams[1], Admin_ListDefaultCostAccess_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &adminListDefaultCostAccessClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Admin_ListDefaultCostAccessClient interface {
	Recv() (*DefaultCostAccess, error)
	grpc.ClientStream
}

type adminListDefaultCostAccessClient struct {
	grpc.ClientStream
}

func (x *adminListDefaultCostAccessClient) Recv() (*DefaultCostAccess, error) {
	m := new(DefaultCostAccess)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminClient) GetDefaultCostAccess(ctx context.Context, in *GetDefaultCostAccessRequest, opts ...grpc.CallOption) (*DefaultCostAccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultCostAccess)
	err := c.cc.Invoke(ctx, Admin_GetDefaultCostAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateDefaultCostAccess(ctx context.Context, in *CreateDefaultCostAccessRequest, opts ...grpc.CallOption) (*DefaultCostAccess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefaultCostAccess)
	err := c.cc.Invoke(ctx, Admin_CreateDefaultCostAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateDefaultCostAccess(ctx context.Context, in *UpdateDefaultCostAccessRequest, opts ...grpc.CallOption) (*protos.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(protos.Operation)
	err := c.cc.Invoke(ctx, Admin_UpdateDefaultCostAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteDefaultCostAccess(ctx context.Context, in *DeleteDefaultCostAccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_DeleteDefaultCostAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetCloudWatchMetricsStreamTemplateUrl(ctx context.Context, in *GetCloudWatchMetricsStreamTemplateUrlRequest, opts ...grpc.CallOption) (*GetCloudWatchMetricsStreamTemplateUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCloudWatchMetricsStreamTemplateUrlResponse)
	err := c.cc.Invoke(ctx, Admin_GetCloudWatchMetricsStreamTemplateUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateCloudWatchMetricsStream(ctx context.Context, in *CreateCloudWatchMetricsStreamRequest, opts ...grpc.CallOption) (*CloudWatchMetricsStream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloudWatchMetricsStream)
	err := c.cc.Invoke(ctx, Admin_CreateCloudWatchMetricsStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateProformaCur(ctx context.Context, in *CreateProformaCurRequest, opts ...grpc.CallOption) (*ProformaCur, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaCur)
	err := c.cc.Invoke(ctx, Admin_CreateProformaCur_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetNotificationSettings(ctx context.Context, in *GetNotificationSettingsRequest, opts ...grpc.CallOption) (*api.NotificationSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.NotificationSettings)
	err := c.cc.Invoke(ctx, Admin_GetNotificationSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SaveNotificationSettings(ctx context.Context, in *SaveNotificationSettingsRequest, opts ...grpc.CallOption) (*api.NotificationSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.NotificationSettings)
	err := c.cc.Invoke(ctx, Admin_SaveNotificationSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListNotificationChannels(ctx context.Context, in *ListNotificationChannelsRequest, opts ...grpc.CallOption) (*ListNotificationChannelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotificationChannelsResponse)
	err := c.cc.Invoke(ctx, Admin_ListNotificationChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetNotificationChannel(ctx context.Context, in *GetNotificationChannelRequest, opts ...grpc.CallOption) (*api.NotificationChannel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.NotificationChannel)
	err := c.cc.Invoke(ctx, Admin_GetNotificationChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateNotificationChannel(ctx context.Context, in *CreateNotificationChannelRequest, opts ...grpc.CallOption) (*api.NotificationChannel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.NotificationChannel)
	err := c.cc.Invoke(ctx, Admin_CreateNotificationChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateDefaultNotificationChannel(ctx context.Context, in *CreateDefaultNotificationChannelRequest, opts ...grpc.CallOption) (*api.NotificationChannel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.NotificationChannel)
	err := c.cc.Invoke(ctx, Admin_CreateDefaultNotificationChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateNotificationChannel(ctx context.Context, in *UpdateNotificationChannelRequest, opts ...grpc.CallOption) (*api.NotificationChannel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.NotificationChannel)
	err := c.cc.Invoke(ctx, Admin_UpdateNotificationChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteNotificationChannel(ctx context.Context, in *DeleteNotificationChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_DeleteNotificationChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotificationsResponse)
	err := c.cc.Invoke(ctx, Admin_ListNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*api.Notification, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.Notification)
	err := c.cc.Invoke(ctx, Admin_GetNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*api.Notification, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.Notification)
	err := c.cc.Invoke(ctx, Admin_CreateNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateNotification(ctx context.Context, in *UpdateNotificationRequest, opts ...grpc.CallOption) (*api.Notification, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.Notification)
	err := c.cc.Invoke(ctx, Admin_UpdateNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_DeleteNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ExportAuditLogs(ctx context.Context, in *ExportAuditLogsRequest, opts ...grpc.CallOption) (*api.AuditExport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(api.AuditExport)
	err := c.cc.Invoke(ctx, Admin_ExportAuditLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetWaveFeatures(ctx context.Context, in *GetWaveFeaturesRequest, opts ...grpc.CallOption) (*GetWaveFeaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWaveFeaturesResponse)
	err := c.cc.Invoke(ctx, Admin_GetWaveFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateWaveFeatureSetting(ctx context.Context, in *UpdateWaveFeatureSettingRequest, opts ...grpc.CallOption) (*GetWaveFeaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWaveFeaturesResponse)
	err := c.cc.Invoke(ctx, Admin_UpdateWaveFeatureSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetMSPDefaultMeta(ctx context.Context, in *GetMSPDefaultMetaRequest, opts ...grpc.CallOption) (*GetMSPDefaultMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMSPDefaultMetaResponse)
	err := c.cc.Invoke(ctx, Admin_GetMSPDefaultMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateMSPDefaultMeta(ctx context.Context, in *UpdateMSPDefaultMetaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_UpdateMSPDefaultMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
//
// Admin service definition.
type AdminServer interface {
	// Lists all account groups.
	ListAccountGroups(*ListAccountGroupsRequest, Admin_ListAccountGroupsServer) error
	// Gets an account group.
	GetAccountGroup(context.Context, *GetAccountGroupRequest) (*GetAccountGroupResponse, error)
	// Gets a CloudFormation launch URL for enabling the default cross-account access to your account's cost information based on type. See comments on the type for more information on what each template does.
	GetDefaultCostAccessTemplateUrl(context.Context, *GetDefaultCostAccessTemplateUrlRequest) (*GetDefaultCostAccessTemplateUrlResponse, error)
	// Lists the default cross-account access role(s) attached to accounts under caller.
	ListDefaultCostAccess(*ListDefaultCostAccessRequest, Admin_ListDefaultCostAccessServer) error
	// Gets the current default cross-account role attached to the input target.
	GetDefaultCostAccess(context.Context, *GetDefaultCostAccessRequest) (*DefaultCostAccess, error)
	// Starts validation of a default cross-account access stack deployment. If successful, the IAM role created from the CloudFormation stack will be registered to the target.
	CreateDefaultCostAccess(context.Context, *CreateDefaultCostAccessRequest) (*DefaultCostAccess, error)
	// Starts an update to an existing default cross-account access CloudFormation stack for template changes, if any. Only call this API if the status of your default cross-account access is 'outdated'.
	UpdateDefaultCostAccess(context.Context, *UpdateDefaultCostAccessRequest) (*protos.Operation, error)
	// Deletes the current default cross-account access role attached to this target account. This does not delete the CloudFormation deployment in your account.
	DeleteDefaultCostAccess(context.Context, *DeleteDefaultCostAccessRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Gets a CloudFormation launch URL for enabling CloudWatch metrics streaming on a target account.
	GetCloudWatchMetricsStreamTemplateUrl(context.Context, *GetCloudWatchMetricsStreamTemplateUrlRequest) (*GetCloudWatchMetricsStreamTemplateUrlResponse, error)
	// WORK-IN-PROGRESS: Starts validation of a CloudWatch Metrics streaming stack deployment.
	CreateCloudWatchMetricsStream(context.Context, *CreateCloudWatchMetricsStreamRequest) (*CloudWatchMetricsStream, error)
	// WORK-IN-PROGRESS: Configure AWS Proforma Cost and Usage Report.
	CreateProformaCur(context.Context, *CreateProformaCurRequest) (*ProformaCur, error)
	// Get notification settings for login user's organization or group.
	GetNotificationSettings(context.Context, *GetNotificationSettingsRequest) (*api.NotificationSettings, error)
	// Creates or updates notification settings for login user's organization or group.
	SaveNotificationSettings(context.Context, *SaveNotificationSettingsRequest) (*api.NotificationSettings, error)
	// Lists all notification channels for login user's organization or group.
	ListNotificationChannels(context.Context, *ListNotificationChannelsRequest) (*ListNotificationChannelsResponse, error)
	// Gets notification channel for login user's organization or group.
	GetNotificationChannel(context.Context, *GetNotificationChannelRequest) (*api.NotificationChannel, error)
	// WORK-IN-PROGRESS: Creates notification settings for login user's organization or group.
	CreateNotificationChannel(context.Context, *CreateNotificationChannelRequest) (*api.NotificationChannel, error)
	// Creates a default notification channel of type email based on the caller's primary email address.
	CreateDefaultNotificationChannel(context.Context, *CreateDefaultNotificationChannelRequest) (*api.NotificationChannel, error)
	// WORK-IN-PROGRESS: Updates notification settings for login user's organization or group.
	UpdateNotificationChannel(context.Context, *UpdateNotificationChannelRequest) (*api.NotificationChannel, error)
	// Deletes notification settings for login user's organization or group.
	DeleteNotificationChannel(context.Context, *DeleteNotificationChannelRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: List all notification for login user's organization.
	ListNotifications(context.Context, *ListNotificationsRequest) (*ListNotificationsResponse, error)
	// WORK-IN-PROGRESS: Get notifications for login user's organization.
	GetNotification(context.Context, *GetNotificationRequest) (*api.Notification, error)
	// WORK-IN-PROGRESS: Creates notification for login user's organization.
	CreateNotification(context.Context, *CreateNotificationRequest) (*api.Notification, error)
	// WORK-IN-PROGRESS: Updates notification for login user's organization.
	UpdateNotification(context.Context, *UpdateNotificationRequest) (*api.Notification, error)
	// WORK-IN-PROGRESS: Deletes notification for login user's organization.
	DeleteNotification(context.Context, *DeleteNotificationRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Exports audit logs for login user's organization.
	ExportAuditLogs(context.Context, *ExportAuditLogsRequest) (*api.AuditExport, error)
	// WORK-IN-PROGRESS: Get settings value for wave features management per organization
	GetWaveFeatures(context.Context, *GetWaveFeaturesRequest) (*GetWaveFeaturesResponse, error)
	// WORK-IN-PROGRESS: Updates the wave feature management default value per organization
	UpdateWaveFeatureSetting(context.Context, *UpdateWaveFeatureSettingRequest) (*GetWaveFeaturesResponse, error)
	// WORK-IN-PROGRESS: Fetch the default meta saved per organization
	GetMSPDefaultMeta(context.Context, *GetMSPDefaultMetaRequest) (*GetMSPDefaultMetaResponse, error)
	// WORK-IN-PROGRESS: Set the default meta saved per organization
	UpdateMSPDefaultMeta(context.Context, *UpdateMSPDefaultMetaRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) ListAccountGroups(*ListAccountGroupsRequest, Admin_ListAccountGroupsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAccountGroups not implemented")
}
func (UnimplementedAdminServer) GetAccountGroup(context.Context, *GetAccountGroupRequest) (*GetAccountGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountGroup not implemented")
}
func (UnimplementedAdminServer) GetDefaultCostAccessTemplateUrl(context.Context, *GetDefaultCostAccessTemplateUrlRequest) (*GetDefaultCostAccessTemplateUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultCostAccessTemplateUrl not implemented")
}
func (UnimplementedAdminServer) ListDefaultCostAccess(*ListDefaultCostAccessRequest, Admin_ListDefaultCostAccessServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDefaultCostAccess not implemented")
}
func (UnimplementedAdminServer) GetDefaultCostAccess(context.Context, *GetDefaultCostAccessRequest) (*DefaultCostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultCostAccess not implemented")
}
func (UnimplementedAdminServer) CreateDefaultCostAccess(context.Context, *CreateDefaultCostAccessRequest) (*DefaultCostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDefaultCostAccess not implemented")
}
func (UnimplementedAdminServer) UpdateDefaultCostAccess(context.Context, *UpdateDefaultCostAccessRequest) (*protos.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefaultCostAccess not implemented")
}
func (UnimplementedAdminServer) DeleteDefaultCostAccess(context.Context, *DeleteDefaultCostAccessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDefaultCostAccess not implemented")
}
func (UnimplementedAdminServer) GetCloudWatchMetricsStreamTemplateUrl(context.Context, *GetCloudWatchMetricsStreamTemplateUrlRequest) (*GetCloudWatchMetricsStreamTemplateUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudWatchMetricsStreamTemplateUrl not implemented")
}
func (UnimplementedAdminServer) CreateCloudWatchMetricsStream(context.Context, *CreateCloudWatchMetricsStreamRequest) (*CloudWatchMetricsStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudWatchMetricsStream not implemented")
}
func (UnimplementedAdminServer) CreateProformaCur(context.Context, *CreateProformaCurRequest) (*ProformaCur, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProformaCur not implemented")
}
func (UnimplementedAdminServer) GetNotificationSettings(context.Context, *GetNotificationSettingsRequest) (*api.NotificationSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationSettings not implemented")
}
func (UnimplementedAdminServer) SaveNotificationSettings(context.Context, *SaveNotificationSettingsRequest) (*api.NotificationSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNotificationSettings not implemented")
}
func (UnimplementedAdminServer) ListNotificationChannels(context.Context, *ListNotificationChannelsRequest) (*ListNotificationChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotificationChannels not implemented")
}
func (UnimplementedAdminServer) GetNotificationChannel(context.Context, *GetNotificationChannelRequest) (*api.NotificationChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationChannel not implemented")
}
func (UnimplementedAdminServer) CreateNotificationChannel(context.Context, *CreateNotificationChannelRequest) (*api.NotificationChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationChannel not implemented")
}
func (UnimplementedAdminServer) CreateDefaultNotificationChannel(context.Context, *CreateDefaultNotificationChannelRequest) (*api.NotificationChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDefaultNotificationChannel not implemented")
}
func (UnimplementedAdminServer) UpdateNotificationChannel(context.Context, *UpdateNotificationChannelRequest) (*api.NotificationChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationChannel not implemented")
}
func (UnimplementedAdminServer) DeleteNotificationChannel(context.Context, *DeleteNotificationChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotificationChannel not implemented")
}
func (UnimplementedAdminServer) ListNotifications(context.Context, *ListNotificationsRequest) (*ListNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifications not implemented")
}
func (UnimplementedAdminServer) GetNotification(context.Context, *GetNotificationRequest) (*api.Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotification not implemented")
}
func (UnimplementedAdminServer) CreateNotification(context.Context, *CreateNotificationRequest) (*api.Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedAdminServer) UpdateNotification(context.Context, *UpdateNotificationRequest) (*api.Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotification not implemented")
}
func (UnimplementedAdminServer) DeleteNotification(context.Context, *DeleteNotificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotification not implemented")
}
func (UnimplementedAdminServer) ExportAuditLogs(context.Context, *ExportAuditLogsRequest) (*api.AuditExport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportAuditLogs not implemented")
}
func (UnimplementedAdminServer) GetWaveFeatures(context.Context, *GetWaveFeaturesRequest) (*GetWaveFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWaveFeatures not implemented")
}
func (UnimplementedAdminServer) UpdateWaveFeatureSetting(context.Context, *UpdateWaveFeatureSettingRequest) (*GetWaveFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWaveFeatureSetting not implemented")
}
func (UnimplementedAdminServer) GetMSPDefaultMeta(context.Context, *GetMSPDefaultMetaRequest) (*GetMSPDefaultMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMSPDefaultMeta not implemented")
}
func (UnimplementedAdminServer) UpdateMSPDefaultMeta(context.Context, *UpdateMSPDefaultMetaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMSPDefaultMeta not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_ListAccountGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAccountGroupsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServer).ListAccountGroups(m, &adminListAccountGroupsServer{ServerStream: stream})
}

type Admin_ListAccountGroupsServer interface {
	Send(*ListAccountGroupsResponse) error
	grpc.ServerStream
}

type adminListAccountGroupsServer struct {
	grpc.ServerStream
}

func (x *adminListAccountGroupsServer) Send(m *ListAccountGroupsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Admin_GetAccountGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAccountGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetAccountGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAccountGroup(ctx, req.(*GetAccountGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDefaultCostAccessTemplateUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultCostAccessTemplateUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDefaultCostAccessTemplateUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetDefaultCostAccessTemplateUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDefaultCostAccessTemplateUrl(ctx, req.(*GetDefaultCostAccessTemplateUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListDefaultCostAccess_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDefaultCostAccessRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServer).ListDefaultCostAccess(m, &adminListDefaultCostAccessServer{ServerStream: stream})
}

type Admin_ListDefaultCostAccessServer interface {
	Send(*DefaultCostAccess) error
	grpc.ServerStream
}

type adminListDefaultCostAccessServer struct {
	grpc.ServerStream
}

func (x *adminListDefaultCostAccessServer) Send(m *DefaultCostAccess) error {
	return x.ServerStream.SendMsg(m)
}

func _Admin_GetDefaultCostAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultCostAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDefaultCostAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetDefaultCostAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDefaultCostAccess(ctx, req.(*GetDefaultCostAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateDefaultCostAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDefaultCostAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateDefaultCostAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateDefaultCostAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateDefaultCostAccess(ctx, req.(*CreateDefaultCostAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateDefaultCostAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefaultCostAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateDefaultCostAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateDefaultCostAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateDefaultCostAccess(ctx, req.(*UpdateDefaultCostAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteDefaultCostAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDefaultCostAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteDefaultCostAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteDefaultCostAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteDefaultCostAccess(ctx, req.(*DeleteDefaultCostAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetCloudWatchMetricsStreamTemplateUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudWatchMetricsStreamTemplateUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetCloudWatchMetricsStreamTemplateUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetCloudWatchMetricsStreamTemplateUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetCloudWatchMetricsStreamTemplateUrl(ctx, req.(*GetCloudWatchMetricsStreamTemplateUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateCloudWatchMetricsStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudWatchMetricsStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateCloudWatchMetricsStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateCloudWatchMetricsStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateCloudWatchMetricsStream(ctx, req.(*CreateCloudWatchMetricsStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateProformaCur_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProformaCurRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateProformaCur(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateProformaCur_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateProformaCur(ctx, req.(*CreateProformaCurRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetNotificationSettings(ctx, req.(*GetNotificationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SaveNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveNotificationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SaveNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SaveNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SaveNotificationSettings(ctx, req.(*SaveNotificationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListNotificationChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListNotificationChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ListNotificationChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListNotificationChannels(ctx, req.(*ListNotificationChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetNotificationChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetNotificationChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetNotificationChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetNotificationChannel(ctx, req.(*GetNotificationChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateNotificationChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateNotificationChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateNotificationChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateNotificationChannel(ctx, req.(*CreateNotificationChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateDefaultNotificationChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDefaultNotificationChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateDefaultNotificationChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateDefaultNotificationChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateDefaultNotificationChannel(ctx, req.(*CreateDefaultNotificationChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateNotificationChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateNotificationChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateNotificationChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateNotificationChannel(ctx, req.(*UpdateNotificationChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteNotificationChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteNotificationChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteNotificationChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteNotificationChannel(ctx, req.(*DeleteNotificationChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ListNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListNotifications(ctx, req.(*ListNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetNotification(ctx, req.(*GetNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateNotification(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateNotification(ctx, req.(*UpdateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteNotification(ctx, req.(*DeleteNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ExportAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ExportAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ExportAuditLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ExportAuditLogs(ctx, req.(*ExportAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetWaveFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWaveFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetWaveFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetWaveFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetWaveFeatures(ctx, req.(*GetWaveFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateWaveFeatureSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWaveFeatureSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateWaveFeatureSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateWaveFeatureSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateWaveFeatureSetting(ctx, req.(*UpdateWaveFeatureSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetMSPDefaultMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMSPDefaultMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetMSPDefaultMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetMSPDefaultMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetMSPDefaultMeta(ctx, req.(*GetMSPDefaultMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateMSPDefaultMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMSPDefaultMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateMSPDefaultMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateMSPDefaultMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateMSPDefaultMeta(ctx, req.(*UpdateMSPDefaultMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.admin.v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountGroup",
			Handler:    _Admin_GetAccountGroup_Handler,
		},
		{
			MethodName: "GetDefaultCostAccessTemplateUrl",
			Handler:    _Admin_GetDefaultCostAccessTemplateUrl_Handler,
		},
		{
			MethodName: "GetDefaultCostAccess",
			Handler:    _Admin_GetDefaultCostAccess_Handler,
		},
		{
			MethodName: "CreateDefaultCostAccess",
			Handler:    _Admin_CreateDefaultCostAccess_Handler,
		},
		{
			MethodName: "UpdateDefaultCostAccess",
			Handler:    _Admin_UpdateDefaultCostAccess_Handler,
		},
		{
			MethodName: "DeleteDefaultCostAccess",
			Handler:    _Admin_DeleteDefaultCostAccess_Handler,
		},
		{
			MethodName: "GetCloudWatchMetricsStreamTemplateUrl",
			Handler:    _Admin_GetCloudWatchMetricsStreamTemplateUrl_Handler,
		},
		{
			MethodName: "CreateCloudWatchMetricsStream",
			Handler:    _Admin_CreateCloudWatchMetricsStream_Handler,
		},
		{
			MethodName: "CreateProformaCur",
			Handler:    _Admin_CreateProformaCur_Handler,
		},
		{
			MethodName: "GetNotificationSettings",
			Handler:    _Admin_GetNotificationSettings_Handler,
		},
		{
			MethodName: "SaveNotificationSettings",
			Handler:    _Admin_SaveNotificationSettings_Handler,
		},
		{
			MethodName: "ListNotificationChannels",
			Handler:    _Admin_ListNotificationChannels_Handler,
		},
		{
			MethodName: "GetNotificationChannel",
			Handler:    _Admin_GetNotificationChannel_Handler,
		},
		{
			MethodName: "CreateNotificationChannel",
			Handler:    _Admin_CreateNotificationChannel_Handler,
		},
		{
			MethodName: "CreateDefaultNotificationChannel",
			Handler:    _Admin_CreateDefaultNotificationChannel_Handler,
		},
		{
			MethodName: "UpdateNotificationChannel",
			Handler:    _Admin_UpdateNotificationChannel_Handler,
		},
		{
			MethodName: "DeleteNotificationChannel",
			Handler:    _Admin_DeleteNotificationChannel_Handler,
		},
		{
			MethodName: "ListNotifications",
			Handler:    _Admin_ListNotifications_Handler,
		},
		{
			MethodName: "GetNotification",
			Handler:    _Admin_GetNotification_Handler,
		},
		{
			MethodName: "CreateNotification",
			Handler:    _Admin_CreateNotification_Handler,
		},
		{
			MethodName: "UpdateNotification",
			Handler:    _Admin_UpdateNotification_Handler,
		},
		{
			MethodName: "DeleteNotification",
			Handler:    _Admin_DeleteNotification_Handler,
		},
		{
			MethodName: "ExportAuditLogs",
			Handler:    _Admin_ExportAuditLogs_Handler,
		},
		{
			MethodName: "GetWaveFeatures",
			Handler:    _Admin_GetWaveFeatures_Handler,
		},
		{
			MethodName: "UpdateWaveFeatureSetting",
			Handler:    _Admin_UpdateWaveFeatureSetting_Handler,
		},
		{
			MethodName: "GetMSPDefaultMeta",
			Handler:    _Admin_GetMSPDefaultMeta_Handler,
		},
		{
			MethodName: "UpdateMSPDefaultMeta",
			Handler:    _Admin_UpdateMSPDefaultMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAccountGroups",
			Handler:       _Admin_ListAccountGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListDefaultCostAccess",
			Handler:       _Admin_ListDefaultCostAccess_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin/v1/admin.proto",
}
