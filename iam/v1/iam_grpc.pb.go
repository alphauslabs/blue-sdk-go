// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: iam/v1/iam.proto

package iam

import (
	context "context"
	api "github.com/alphauslabs/blue-sdk-go/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Iam_WhoAmI_FullMethodName                                     = "/blueapi.iam.v1.Iam/WhoAmI"
	Iam_ListUsers_FullMethodName                                  = "/blueapi.iam.v1.Iam/ListUsers"
	Iam_GetUser_FullMethodName                                    = "/blueapi.iam.v1.Iam/GetUser"
	Iam_CreateUser_FullMethodName                                 = "/blueapi.iam.v1.Iam/CreateUser"
	Iam_DeleteUser_FullMethodName                                 = "/blueapi.iam.v1.Iam/DeleteUser"
	Iam_CreateGroupRootUser_FullMethodName                        = "/blueapi.iam.v1.Iam/CreateGroupRootUser"
	Iam_ListGroupRootUsers_FullMethodName                         = "/blueapi.iam.v1.Iam/ListGroupRootUsers"
	Iam_GetGroupRootUser_FullMethodName                           = "/blueapi.iam.v1.Iam/GetGroupRootUser"
	Iam_DeleteGroupRootUser_FullMethodName                        = "/blueapi.iam.v1.Iam/DeleteGroupRootUser"
	Iam_GetFeatureFlags_FullMethodName                            = "/blueapi.iam.v1.Iam/GetFeatureFlags"
	Iam_UpdateFeatureFlags_FullMethodName                         = "/blueapi.iam.v1.Iam/UpdateFeatureFlags"
	Iam_ListApiClients_FullMethodName                             = "/blueapi.iam.v1.Iam/ListApiClients"
	Iam_CreateApiClient_FullMethodName                            = "/blueapi.iam.v1.Iam/CreateApiClient"
	Iam_DeleteApiClient_FullMethodName                            = "/blueapi.iam.v1.Iam/DeleteApiClient"
	Iam_ListPermissions_FullMethodName                            = "/blueapi.iam.v1.Iam/ListPermissions"
	Iam_ListRoles_FullMethodName                                  = "/blueapi.iam.v1.Iam/ListRoles"
	Iam_CreateRole_FullMethodName                                 = "/blueapi.iam.v1.Iam/CreateRole"
	Iam_UpdateRole_FullMethodName                                 = "/blueapi.iam.v1.Iam/UpdateRole"
	Iam_DeleteRole_FullMethodName                                 = "/blueapi.iam.v1.Iam/DeleteRole"
	Iam_ListUserRoleMappings_FullMethodName                       = "/blueapi.iam.v1.Iam/ListUserRoleMappings"
	Iam_CreateUserRoleMapping_FullMethodName                      = "/blueapi.iam.v1.Iam/CreateUserRoleMapping"
	Iam_UpdateUserRoleMapping_FullMethodName                      = "/blueapi.iam.v1.Iam/UpdateUserRoleMapping"
	Iam_ListIdentityProviders_FullMethodName                      = "/blueapi.iam.v1.Iam/ListIdentityProviders"
	Iam_CreateIdentityProvider_FullMethodName                     = "/blueapi.iam.v1.Iam/CreateIdentityProvider"
	Iam_DeleteIdentityProvider_FullMethodName                     = "/blueapi.iam.v1.Iam/DeleteIdentityProvider"
	Iam_ListIpFilters_FullMethodName                              = "/blueapi.iam.v1.Iam/ListIpFilters"
	Iam_CreateIpFilter_FullMethodName                             = "/blueapi.iam.v1.Iam/CreateIpFilter"
	Iam_DeleteIpFilter_FullMethodName                             = "/blueapi.iam.v1.Iam/DeleteIpFilter"
	Iam_CreatePartnerToken_FullMethodName                         = "/blueapi.iam.v1.Iam/CreatePartnerToken"
	Iam_RefreshPartnerToken_FullMethodName                        = "/blueapi.iam.v1.Iam/RefreshPartnerToken"
	Iam_VerifyUserForResetPassword_FullMethodName                 = "/blueapi.iam.v1.Iam/VerifyUserForResetPassword"
	Iam_ValidateResetPasswordLinkAndChangePassword_FullMethodName = "/blueapi.iam.v1.Iam/ValidateResetPasswordLinkAndChangePassword"
	Iam_GetMFAUsers_FullMethodName                                = "/blueapi.iam.v1.Iam/GetMFAUsers"
)

// IamClient is the client API for Iam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IamClient interface {
	// Gets user information about the caller. This call includes all of the user metadata.
	// See [https://alphauslabs.github.io/blueapi/] for the list of supported attributes.
	WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*api.User, error)
	// Lists all subusers.
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (Iam_ListUsersClient, error)
	// Gets subuser information. This call includes all of the subuser metadata. See
	// [https://alphauslabs.github.io/blueapi/] for the list of supported attributes.
	// If the `{name}` parameter is `me` or `-`, returns the caller information, which
	// is equivalent to `WhoAmI()` or `GET:/iam/v*/whoami`.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*api.User, error)
	// Creates a subuser.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*api.User, error)
	// Deletes a subuser.
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Creates a new root user for a billing group or access group.
	CreateGroupRootUser(ctx context.Context, in *CreateGroupRootUserRequest, opts ...grpc.CallOption) (*api.GroupRootUser, error)
	// WORK-IN-PROGRESS: Retrieves all the existing group root users asscoiated with the organization.
	ListGroupRootUsers(ctx context.Context, in *ListGroupRootUsersRequest, opts ...grpc.CallOption) (Iam_ListGroupRootUsersClient, error)
	// WORK-IN-PROGRESS: Retrieves a group root user.
	GetGroupRootUser(ctx context.Context, in *GetGroupRootRequest, opts ...grpc.CallOption) (*api.GroupRootUser, error)
	// WORK-IN-PROGRESS: Deletes an existing group root user.
	DeleteGroupRootUser(ctx context.Context, in *DeleteGroupRootUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Retrieves the features available to a user on an Alphaus product. For a list of valid feature flags, see our documentation at https://alphauslabs.github.io/blueapi/apis/iam.html.
	GetFeatureFlags(ctx context.Context, in *GetFeatureFlagsRequest, opts ...grpc.CallOption) (*api.FeatureFlags, error)
	// WORK-IN-PROGRESS: Updates the features available to a user on an Alphaus product. For a list of valid feature flags, see our documentation at https://alphauslabs.github.io/blueapi/apis/iam.html.
	UpdateFeatureFlags(ctx context.Context, in *UpdateFeatureFlagsRequest, opts ...grpc.CallOption) (*api.FeatureFlags, error)
	// Lists all API clients belonging to the caller.
	ListApiClients(ctx context.Context, in *ListApiClientsRequest, opts ...grpc.CallOption) (Iam_ListApiClientsClient, error)
	// Creates an API client for the caller.
	CreateApiClient(ctx context.Context, in *CreateApiClientRequest, opts ...grpc.CallOption) (*api.ApiClient, error)
	// Deletes an API client belonging to the caller.
	DeleteApiClient(ctx context.Context, in *DeleteApiClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Lists all permissions based on the input's scope. For reference, supported permissions can be found on [https://github.com/mobingi/rbac-permissions].
	ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	// WORK-IN-PROGRESS: Lists all available roles.
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	// WORK-IN-PROGRESS: Creates a role. If your `permissions` list contains an `Admin` entry, all other entries will be discarded except `Admin`. Roles are root user-level. That means all roles created by the root user, or any subuser that has permissions to create roles, are available to all subusers.
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*api.Role, error)
	// WORK-IN-PROGRESS: Updates a role. If role name is different, rename mapped role name.
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*api.Role, error)
	// WORK-IN-PROGRESS: Deletes a role. Deleting a role will also remove all mappings.
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Lists roles attached to the caller or the input.
	ListUserRoleMappings(ctx context.Context, in *ListUserRoleMappingsRequest, opts ...grpc.CallOption) (*ListUserRoleMappingsResponse, error)
	// WORK-IN-PROGRESS: Maps roles to a subuser. You can only map (or attach) up to 5 roles to a user per namespace. There is no limit for filtering rules per user.
	CreateUserRoleMapping(ctx context.Context, in *CreateUserRoleMappingRequest, opts ...grpc.CallOption) (*CreateUserRoleMappingResponse, error)
	// WORK-IN-PROGRESS: Updates user-to-role mappings. You can only map (or attach) up to 5 roles to a user per namespace. There is no limit for filtering rules per user.
	UpdateUserRoleMapping(ctx context.Context, in *UpdateUserRoleMappingRequest, opts ...grpc.CallOption) (*UpdateUserRoleMappingResponse, error)
	// Lists all SSO Identity Providers (IdP).
	ListIdentityProviders(ctx context.Context, in *ListIdentityProvidersRequest, opts ...grpc.CallOption) (*ListIdentityProvidersResponse, error)
	// Registers an SSO Identity Provider (IdP).
	CreateIdentityProvider(ctx context.Context, in *CreateIdentityProviderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes an SSO Identity Provider (IdP).
	DeleteIdentityProvider(ctx context.Context, in *DeleteIdentityProviderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all IP filters. At the moment, this API is only available to root users.
	ListIpFilters(ctx context.Context, in *ListIpFiltersRequest, opts ...grpc.CallOption) (Iam_ListIpFiltersClient, error)
	// Creates an IP filter item for IP blacklisting or whitelisting. At the moment, this API is only available to root users.
	CreateIpFilter(ctx context.Context, in *CreateIpFilterRequest, opts ...grpc.CallOption) (*IpFilter, error)
	// Deletes an IP filter item. At the moment, this API is only available to root users.
	DeleteIpFilter(ctx context.Context, in *DeleteIpFilterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// BETA: Creates a partner token for custom integrations. Available only to Ripple and Cover users.
	CreatePartnerToken(ctx context.Context, in *CreatePartnerTokenRequest, opts ...grpc.CallOption) (*PartnerToken, error)
	// BETA: Refreshes an expired partner token. Only partners are expected to call this API.
	RefreshPartnerToken(ctx context.Context, in *RefreshPartnerTokenRequest, opts ...grpc.CallOption) (*PartnerToken, error)
	// WORK-IN-PROGRESS: Verify User Input For Reset Password
	VerifyUserForResetPassword(ctx context.Context, in *VerifyUserForResetPasswordRequest, opts ...grpc.CallOption) (*VerifyUserForResetPasswordResponse, error)
	// WORK-IN-PROGRESS: Validate reset password link and proceed to update password
	ValidateResetPasswordLinkAndChangePassword(ctx context.Context, in *ValidateResetPasswordLinkAndChangePasswordRequest, opts ...grpc.CallOption) (*ValidateResetPasswordLinkAndChangePasswordResponse, error)
	// WORK-IN-PROGRESS: List MFA users info for login user's organization based on status.
	GetMFAUsers(ctx context.Context, in *MFAUsersInfoRequest, opts ...grpc.CallOption) (*MFAUsersInfoResponse, error)
}

type iamClient struct {
	cc grpc.ClientConnInterface
}

func NewIamClient(cc grpc.ClientConnInterface) IamClient {
	return &iamClient{cc}
}

func (c *iamClient) WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*api.User, error) {
	out := new(api.User)
	err := c.cc.Invoke(ctx, Iam_WhoAmI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (Iam_ListUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Iam_ServiceDesc.Streams[0], Iam_ListUsers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &iamListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Iam_ListUsersClient interface {
	Recv() (*api.User, error)
	grpc.ClientStream
}

type iamListUsersClient struct {
	grpc.ClientStream
}

func (x *iamListUsersClient) Recv() (*api.User, error) {
	m := new(api.User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iamClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*api.User, error) {
	out := new(api.User)
	err := c.cc.Invoke(ctx, Iam_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*api.User, error) {
	out := new(api.User)
	err := c.cc.Invoke(ctx, Iam_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Iam_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) CreateGroupRootUser(ctx context.Context, in *CreateGroupRootUserRequest, opts ...grpc.CallOption) (*api.GroupRootUser, error) {
	out := new(api.GroupRootUser)
	err := c.cc.Invoke(ctx, Iam_CreateGroupRootUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ListGroupRootUsers(ctx context.Context, in *ListGroupRootUsersRequest, opts ...grpc.CallOption) (Iam_ListGroupRootUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Iam_ServiceDesc.Streams[1], Iam_ListGroupRootUsers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &iamListGroupRootUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Iam_ListGroupRootUsersClient interface {
	Recv() (*api.GroupRootUser, error)
	grpc.ClientStream
}

type iamListGroupRootUsersClient struct {
	grpc.ClientStream
}

func (x *iamListGroupRootUsersClient) Recv() (*api.GroupRootUser, error) {
	m := new(api.GroupRootUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iamClient) GetGroupRootUser(ctx context.Context, in *GetGroupRootRequest, opts ...grpc.CallOption) (*api.GroupRootUser, error) {
	out := new(api.GroupRootUser)
	err := c.cc.Invoke(ctx, Iam_GetGroupRootUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) DeleteGroupRootUser(ctx context.Context, in *DeleteGroupRootUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Iam_DeleteGroupRootUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) GetFeatureFlags(ctx context.Context, in *GetFeatureFlagsRequest, opts ...grpc.CallOption) (*api.FeatureFlags, error) {
	out := new(api.FeatureFlags)
	err := c.cc.Invoke(ctx, Iam_GetFeatureFlags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) UpdateFeatureFlags(ctx context.Context, in *UpdateFeatureFlagsRequest, opts ...grpc.CallOption) (*api.FeatureFlags, error) {
	out := new(api.FeatureFlags)
	err := c.cc.Invoke(ctx, Iam_UpdateFeatureFlags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ListApiClients(ctx context.Context, in *ListApiClientsRequest, opts ...grpc.CallOption) (Iam_ListApiClientsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Iam_ServiceDesc.Streams[2], Iam_ListApiClients_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &iamListApiClientsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Iam_ListApiClientsClient interface {
	Recv() (*api.ApiClient, error)
	grpc.ClientStream
}

type iamListApiClientsClient struct {
	grpc.ClientStream
}

func (x *iamListApiClientsClient) Recv() (*api.ApiClient, error) {
	m := new(api.ApiClient)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iamClient) CreateApiClient(ctx context.Context, in *CreateApiClientRequest, opts ...grpc.CallOption) (*api.ApiClient, error) {
	out := new(api.ApiClient)
	err := c.cc.Invoke(ctx, Iam_CreateApiClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) DeleteApiClient(ctx context.Context, in *DeleteApiClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Iam_DeleteApiClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	out := new(ListPermissionsResponse)
	err := c.cc.Invoke(ctx, Iam_ListPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, Iam_ListRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*api.Role, error) {
	out := new(api.Role)
	err := c.cc.Invoke(ctx, Iam_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*api.Role, error) {
	out := new(api.Role)
	err := c.cc.Invoke(ctx, Iam_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Iam_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ListUserRoleMappings(ctx context.Context, in *ListUserRoleMappingsRequest, opts ...grpc.CallOption) (*ListUserRoleMappingsResponse, error) {
	out := new(ListUserRoleMappingsResponse)
	err := c.cc.Invoke(ctx, Iam_ListUserRoleMappings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) CreateUserRoleMapping(ctx context.Context, in *CreateUserRoleMappingRequest, opts ...grpc.CallOption) (*CreateUserRoleMappingResponse, error) {
	out := new(CreateUserRoleMappingResponse)
	err := c.cc.Invoke(ctx, Iam_CreateUserRoleMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) UpdateUserRoleMapping(ctx context.Context, in *UpdateUserRoleMappingRequest, opts ...grpc.CallOption) (*UpdateUserRoleMappingResponse, error) {
	out := new(UpdateUserRoleMappingResponse)
	err := c.cc.Invoke(ctx, Iam_UpdateUserRoleMapping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ListIdentityProviders(ctx context.Context, in *ListIdentityProvidersRequest, opts ...grpc.CallOption) (*ListIdentityProvidersResponse, error) {
	out := new(ListIdentityProvidersResponse)
	err := c.cc.Invoke(ctx, Iam_ListIdentityProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) CreateIdentityProvider(ctx context.Context, in *CreateIdentityProviderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Iam_CreateIdentityProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) DeleteIdentityProvider(ctx context.Context, in *DeleteIdentityProviderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Iam_DeleteIdentityProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ListIpFilters(ctx context.Context, in *ListIpFiltersRequest, opts ...grpc.CallOption) (Iam_ListIpFiltersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Iam_ServiceDesc.Streams[3], Iam_ListIpFilters_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &iamListIpFiltersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Iam_ListIpFiltersClient interface {
	Recv() (*IpFilter, error)
	grpc.ClientStream
}

type iamListIpFiltersClient struct {
	grpc.ClientStream
}

func (x *iamListIpFiltersClient) Recv() (*IpFilter, error) {
	m := new(IpFilter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iamClient) CreateIpFilter(ctx context.Context, in *CreateIpFilterRequest, opts ...grpc.CallOption) (*IpFilter, error) {
	out := new(IpFilter)
	err := c.cc.Invoke(ctx, Iam_CreateIpFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) DeleteIpFilter(ctx context.Context, in *DeleteIpFilterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Iam_DeleteIpFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) CreatePartnerToken(ctx context.Context, in *CreatePartnerTokenRequest, opts ...grpc.CallOption) (*PartnerToken, error) {
	out := new(PartnerToken)
	err := c.cc.Invoke(ctx, Iam_CreatePartnerToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) RefreshPartnerToken(ctx context.Context, in *RefreshPartnerTokenRequest, opts ...grpc.CallOption) (*PartnerToken, error) {
	out := new(PartnerToken)
	err := c.cc.Invoke(ctx, Iam_RefreshPartnerToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) VerifyUserForResetPassword(ctx context.Context, in *VerifyUserForResetPasswordRequest, opts ...grpc.CallOption) (*VerifyUserForResetPasswordResponse, error) {
	out := new(VerifyUserForResetPasswordResponse)
	err := c.cc.Invoke(ctx, Iam_VerifyUserForResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ValidateResetPasswordLinkAndChangePassword(ctx context.Context, in *ValidateResetPasswordLinkAndChangePasswordRequest, opts ...grpc.CallOption) (*ValidateResetPasswordLinkAndChangePasswordResponse, error) {
	out := new(ValidateResetPasswordLinkAndChangePasswordResponse)
	err := c.cc.Invoke(ctx, Iam_ValidateResetPasswordLinkAndChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) GetMFAUsers(ctx context.Context, in *MFAUsersInfoRequest, opts ...grpc.CallOption) (*MFAUsersInfoResponse, error) {
	out := new(MFAUsersInfoResponse)
	err := c.cc.Invoke(ctx, Iam_GetMFAUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IamServer is the server API for Iam service.
// All implementations must embed UnimplementedIamServer
// for forward compatibility
type IamServer interface {
	// Gets user information about the caller. This call includes all of the user metadata.
	// See [https://alphauslabs.github.io/blueapi/] for the list of supported attributes.
	WhoAmI(context.Context, *WhoAmIRequest) (*api.User, error)
	// Lists all subusers.
	ListUsers(*ListUsersRequest, Iam_ListUsersServer) error
	// Gets subuser information. This call includes all of the subuser metadata. See
	// [https://alphauslabs.github.io/blueapi/] for the list of supported attributes.
	// If the `{name}` parameter is `me` or `-`, returns the caller information, which
	// is equivalent to `WhoAmI()` or `GET:/iam/v*/whoami`.
	GetUser(context.Context, *GetUserRequest) (*api.User, error)
	// Creates a subuser.
	CreateUser(context.Context, *CreateUserRequest) (*api.User, error)
	// Deletes a subuser.
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Creates a new root user for a billing group or access group.
	CreateGroupRootUser(context.Context, *CreateGroupRootUserRequest) (*api.GroupRootUser, error)
	// WORK-IN-PROGRESS: Retrieves all the existing group root users asscoiated with the organization.
	ListGroupRootUsers(*ListGroupRootUsersRequest, Iam_ListGroupRootUsersServer) error
	// WORK-IN-PROGRESS: Retrieves a group root user.
	GetGroupRootUser(context.Context, *GetGroupRootRequest) (*api.GroupRootUser, error)
	// WORK-IN-PROGRESS: Deletes an existing group root user.
	DeleteGroupRootUser(context.Context, *DeleteGroupRootUserRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Retrieves the features available to a user on an Alphaus product. For a list of valid feature flags, see our documentation at https://alphauslabs.github.io/blueapi/apis/iam.html.
	GetFeatureFlags(context.Context, *GetFeatureFlagsRequest) (*api.FeatureFlags, error)
	// WORK-IN-PROGRESS: Updates the features available to a user on an Alphaus product. For a list of valid feature flags, see our documentation at https://alphauslabs.github.io/blueapi/apis/iam.html.
	UpdateFeatureFlags(context.Context, *UpdateFeatureFlagsRequest) (*api.FeatureFlags, error)
	// Lists all API clients belonging to the caller.
	ListApiClients(*ListApiClientsRequest, Iam_ListApiClientsServer) error
	// Creates an API client for the caller.
	CreateApiClient(context.Context, *CreateApiClientRequest) (*api.ApiClient, error)
	// Deletes an API client belonging to the caller.
	DeleteApiClient(context.Context, *DeleteApiClientRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Lists all permissions based on the input's scope. For reference, supported permissions can be found on [https://github.com/mobingi/rbac-permissions].
	ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)
	// WORK-IN-PROGRESS: Lists all available roles.
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	// WORK-IN-PROGRESS: Creates a role. If your `permissions` list contains an `Admin` entry, all other entries will be discarded except `Admin`. Roles are root user-level. That means all roles created by the root user, or any subuser that has permissions to create roles, are available to all subusers.
	CreateRole(context.Context, *CreateRoleRequest) (*api.Role, error)
	// WORK-IN-PROGRESS: Updates a role. If role name is different, rename mapped role name.
	UpdateRole(context.Context, *UpdateRoleRequest) (*api.Role, error)
	// WORK-IN-PROGRESS: Deletes a role. Deleting a role will also remove all mappings.
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	// WORK-IN-PROGRESS: Lists roles attached to the caller or the input.
	ListUserRoleMappings(context.Context, *ListUserRoleMappingsRequest) (*ListUserRoleMappingsResponse, error)
	// WORK-IN-PROGRESS: Maps roles to a subuser. You can only map (or attach) up to 5 roles to a user per namespace. There is no limit for filtering rules per user.
	CreateUserRoleMapping(context.Context, *CreateUserRoleMappingRequest) (*CreateUserRoleMappingResponse, error)
	// WORK-IN-PROGRESS: Updates user-to-role mappings. You can only map (or attach) up to 5 roles to a user per namespace. There is no limit for filtering rules per user.
	UpdateUserRoleMapping(context.Context, *UpdateUserRoleMappingRequest) (*UpdateUserRoleMappingResponse, error)
	// Lists all SSO Identity Providers (IdP).
	ListIdentityProviders(context.Context, *ListIdentityProvidersRequest) (*ListIdentityProvidersResponse, error)
	// Registers an SSO Identity Provider (IdP).
	CreateIdentityProvider(context.Context, *CreateIdentityProviderRequest) (*emptypb.Empty, error)
	// Deletes an SSO Identity Provider (IdP).
	DeleteIdentityProvider(context.Context, *DeleteIdentityProviderRequest) (*emptypb.Empty, error)
	// Lists all IP filters. At the moment, this API is only available to root users.
	ListIpFilters(*ListIpFiltersRequest, Iam_ListIpFiltersServer) error
	// Creates an IP filter item for IP blacklisting or whitelisting. At the moment, this API is only available to root users.
	CreateIpFilter(context.Context, *CreateIpFilterRequest) (*IpFilter, error)
	// Deletes an IP filter item. At the moment, this API is only available to root users.
	DeleteIpFilter(context.Context, *DeleteIpFilterRequest) (*emptypb.Empty, error)
	// BETA: Creates a partner token for custom integrations. Available only to Ripple and Cover users.
	CreatePartnerToken(context.Context, *CreatePartnerTokenRequest) (*PartnerToken, error)
	// BETA: Refreshes an expired partner token. Only partners are expected to call this API.
	RefreshPartnerToken(context.Context, *RefreshPartnerTokenRequest) (*PartnerToken, error)
	// WORK-IN-PROGRESS: Verify User Input For Reset Password
	VerifyUserForResetPassword(context.Context, *VerifyUserForResetPasswordRequest) (*VerifyUserForResetPasswordResponse, error)
	// WORK-IN-PROGRESS: Validate reset password link and proceed to update password
	ValidateResetPasswordLinkAndChangePassword(context.Context, *ValidateResetPasswordLinkAndChangePasswordRequest) (*ValidateResetPasswordLinkAndChangePasswordResponse, error)
	// WORK-IN-PROGRESS: List MFA users info for login user's organization based on status.
	GetMFAUsers(context.Context, *MFAUsersInfoRequest) (*MFAUsersInfoResponse, error)
	mustEmbedUnimplementedIamServer()
}

// UnimplementedIamServer must be embedded to have forward compatible implementations.
type UnimplementedIamServer struct {
}

func (UnimplementedIamServer) WhoAmI(context.Context, *WhoAmIRequest) (*api.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedIamServer) ListUsers(*ListUsersRequest, Iam_ListUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedIamServer) GetUser(context.Context, *GetUserRequest) (*api.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedIamServer) CreateUser(context.Context, *CreateUserRequest) (*api.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedIamServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedIamServer) CreateGroupRootUser(context.Context, *CreateGroupRootUserRequest) (*api.GroupRootUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupRootUser not implemented")
}
func (UnimplementedIamServer) ListGroupRootUsers(*ListGroupRootUsersRequest, Iam_ListGroupRootUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListGroupRootUsers not implemented")
}
func (UnimplementedIamServer) GetGroupRootUser(context.Context, *GetGroupRootRequest) (*api.GroupRootUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupRootUser not implemented")
}
func (UnimplementedIamServer) DeleteGroupRootUser(context.Context, *DeleteGroupRootUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupRootUser not implemented")
}
func (UnimplementedIamServer) GetFeatureFlags(context.Context, *GetFeatureFlagsRequest) (*api.FeatureFlags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureFlags not implemented")
}
func (UnimplementedIamServer) UpdateFeatureFlags(context.Context, *UpdateFeatureFlagsRequest) (*api.FeatureFlags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeatureFlags not implemented")
}
func (UnimplementedIamServer) ListApiClients(*ListApiClientsRequest, Iam_ListApiClientsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListApiClients not implemented")
}
func (UnimplementedIamServer) CreateApiClient(context.Context, *CreateApiClientRequest) (*api.ApiClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiClient not implemented")
}
func (UnimplementedIamServer) DeleteApiClient(context.Context, *DeleteApiClientRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiClient not implemented")
}
func (UnimplementedIamServer) ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedIamServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedIamServer) CreateRole(context.Context, *CreateRoleRequest) (*api.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedIamServer) UpdateRole(context.Context, *UpdateRoleRequest) (*api.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedIamServer) DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedIamServer) ListUserRoleMappings(context.Context, *ListUserRoleMappingsRequest) (*ListUserRoleMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRoleMappings not implemented")
}
func (UnimplementedIamServer) CreateUserRoleMapping(context.Context, *CreateUserRoleMappingRequest) (*CreateUserRoleMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserRoleMapping not implemented")
}
func (UnimplementedIamServer) UpdateUserRoleMapping(context.Context, *UpdateUserRoleMappingRequest) (*UpdateUserRoleMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRoleMapping not implemented")
}
func (UnimplementedIamServer) ListIdentityProviders(context.Context, *ListIdentityProvidersRequest) (*ListIdentityProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIdentityProviders not implemented")
}
func (UnimplementedIamServer) CreateIdentityProvider(context.Context, *CreateIdentityProviderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdentityProvider not implemented")
}
func (UnimplementedIamServer) DeleteIdentityProvider(context.Context, *DeleteIdentityProviderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdentityProvider not implemented")
}
func (UnimplementedIamServer) ListIpFilters(*ListIpFiltersRequest, Iam_ListIpFiltersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListIpFilters not implemented")
}
func (UnimplementedIamServer) CreateIpFilter(context.Context, *CreateIpFilterRequest) (*IpFilter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpFilter not implemented")
}
func (UnimplementedIamServer) DeleteIpFilter(context.Context, *DeleteIpFilterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIpFilter not implemented")
}
func (UnimplementedIamServer) CreatePartnerToken(context.Context, *CreatePartnerTokenRequest) (*PartnerToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartnerToken not implemented")
}
func (UnimplementedIamServer) RefreshPartnerToken(context.Context, *RefreshPartnerTokenRequest) (*PartnerToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshPartnerToken not implemented")
}
func (UnimplementedIamServer) VerifyUserForResetPassword(context.Context, *VerifyUserForResetPasswordRequest) (*VerifyUserForResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserForResetPassword not implemented")
}
func (UnimplementedIamServer) ValidateResetPasswordLinkAndChangePassword(context.Context, *ValidateResetPasswordLinkAndChangePasswordRequest) (*ValidateResetPasswordLinkAndChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateResetPasswordLinkAndChangePassword not implemented")
}
func (UnimplementedIamServer) GetMFAUsers(context.Context, *MFAUsersInfoRequest) (*MFAUsersInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMFAUsers not implemented")
}
func (UnimplementedIamServer) mustEmbedUnimplementedIamServer() {}

// UnsafeIamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IamServer will
// result in compilation errors.
type UnsafeIamServer interface {
	mustEmbedUnimplementedIamServer()
}

func RegisterIamServer(s grpc.ServiceRegistrar, srv IamServer) {
	s.RegisterService(&Iam_ServiceDesc, srv)
}

func _Iam_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoAmIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_WhoAmI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).WhoAmI(ctx, req.(*WhoAmIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IamServer).ListUsers(m, &iamListUsersServer{stream})
}

type Iam_ListUsersServer interface {
	Send(*api.User) error
	grpc.ServerStream
}

type iamListUsersServer struct {
	grpc.ServerStream
}

func (x *iamListUsersServer) Send(m *api.User) error {
	return x.ServerStream.SendMsg(m)
}

func _Iam_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_CreateGroupRootUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRootUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).CreateGroupRootUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_CreateGroupRootUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).CreateGroupRootUser(ctx, req.(*CreateGroupRootUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ListGroupRootUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListGroupRootUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IamServer).ListGroupRootUsers(m, &iamListGroupRootUsersServer{stream})
}

type Iam_ListGroupRootUsersServer interface {
	Send(*api.GroupRootUser) error
	grpc.ServerStream
}

type iamListGroupRootUsersServer struct {
	grpc.ServerStream
}

func (x *iamListGroupRootUsersServer) Send(m *api.GroupRootUser) error {
	return x.ServerStream.SendMsg(m)
}

func _Iam_GetGroupRootUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).GetGroupRootUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_GetGroupRootUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).GetGroupRootUser(ctx, req.(*GetGroupRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_DeleteGroupRootUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRootUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).DeleteGroupRootUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_DeleteGroupRootUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).DeleteGroupRootUser(ctx, req.(*DeleteGroupRootUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_GetFeatureFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).GetFeatureFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_GetFeatureFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).GetFeatureFlags(ctx, req.(*GetFeatureFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_UpdateFeatureFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeatureFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).UpdateFeatureFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_UpdateFeatureFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).UpdateFeatureFlags(ctx, req.(*UpdateFeatureFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ListApiClients_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListApiClientsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IamServer).ListApiClients(m, &iamListApiClientsServer{stream})
}

type Iam_ListApiClientsServer interface {
	Send(*api.ApiClient) error
	grpc.ServerStream
}

type iamListApiClientsServer struct {
	grpc.ServerStream
}

func (x *iamListApiClientsServer) Send(m *api.ApiClient) error {
	return x.ServerStream.SendMsg(m)
}

func _Iam_CreateApiClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).CreateApiClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_CreateApiClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).CreateApiClient(ctx, req.(*CreateApiClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_DeleteApiClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).DeleteApiClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_DeleteApiClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).DeleteApiClient(ctx, req.(*DeleteApiClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).ListPermissions(ctx, req.(*ListPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ListUserRoleMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRoleMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).ListUserRoleMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_ListUserRoleMappings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).ListUserRoleMappings(ctx, req.(*ListUserRoleMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_CreateUserRoleMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRoleMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).CreateUserRoleMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_CreateUserRoleMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).CreateUserRoleMapping(ctx, req.(*CreateUserRoleMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_UpdateUserRoleMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).UpdateUserRoleMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_UpdateUserRoleMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).UpdateUserRoleMapping(ctx, req.(*UpdateUserRoleMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ListIdentityProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdentityProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).ListIdentityProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_ListIdentityProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).ListIdentityProviders(ctx, req.(*ListIdentityProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_CreateIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentityProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).CreateIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_CreateIdentityProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).CreateIdentityProvider(ctx, req.(*CreateIdentityProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_DeleteIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdentityProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).DeleteIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_DeleteIdentityProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).DeleteIdentityProvider(ctx, req.(*DeleteIdentityProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ListIpFilters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListIpFiltersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IamServer).ListIpFilters(m, &iamListIpFiltersServer{stream})
}

type Iam_ListIpFiltersServer interface {
	Send(*IpFilter) error
	grpc.ServerStream
}

type iamListIpFiltersServer struct {
	grpc.ServerStream
}

func (x *iamListIpFiltersServer) Send(m *IpFilter) error {
	return x.ServerStream.SendMsg(m)
}

func _Iam_CreateIpFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).CreateIpFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_CreateIpFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).CreateIpFilter(ctx, req.(*CreateIpFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_DeleteIpFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIpFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).DeleteIpFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_DeleteIpFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).DeleteIpFilter(ctx, req.(*DeleteIpFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_CreatePartnerToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartnerTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).CreatePartnerToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_CreatePartnerToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).CreatePartnerToken(ctx, req.(*CreatePartnerTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_RefreshPartnerToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshPartnerTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).RefreshPartnerToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_RefreshPartnerToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).RefreshPartnerToken(ctx, req.(*RefreshPartnerTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_VerifyUserForResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserForResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).VerifyUserForResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_VerifyUserForResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).VerifyUserForResetPassword(ctx, req.(*VerifyUserForResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ValidateResetPasswordLinkAndChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateResetPasswordLinkAndChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).ValidateResetPasswordLinkAndChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_ValidateResetPasswordLinkAndChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).ValidateResetPasswordLinkAndChangePassword(ctx, req.(*ValidateResetPasswordLinkAndChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_GetMFAUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MFAUsersInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).GetMFAUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_GetMFAUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).GetMFAUsers(ctx, req.(*MFAUsersInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Iam_ServiceDesc is the grpc.ServiceDesc for Iam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Iam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blueapi.iam.v1.Iam",
	HandlerType: (*IamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhoAmI",
			Handler:    _Iam_WhoAmI_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Iam_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Iam_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Iam_DeleteUser_Handler,
		},
		{
			MethodName: "CreateGroupRootUser",
			Handler:    _Iam_CreateGroupRootUser_Handler,
		},
		{
			MethodName: "GetGroupRootUser",
			Handler:    _Iam_GetGroupRootUser_Handler,
		},
		{
			MethodName: "DeleteGroupRootUser",
			Handler:    _Iam_DeleteGroupRootUser_Handler,
		},
		{
			MethodName: "GetFeatureFlags",
			Handler:    _Iam_GetFeatureFlags_Handler,
		},
		{
			MethodName: "UpdateFeatureFlags",
			Handler:    _Iam_UpdateFeatureFlags_Handler,
		},
		{
			MethodName: "CreateApiClient",
			Handler:    _Iam_CreateApiClient_Handler,
		},
		{
			MethodName: "DeleteApiClient",
			Handler:    _Iam_DeleteApiClient_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _Iam_ListPermissions_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _Iam_ListRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Iam_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Iam_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Iam_DeleteRole_Handler,
		},
		{
			MethodName: "ListUserRoleMappings",
			Handler:    _Iam_ListUserRoleMappings_Handler,
		},
		{
			MethodName: "CreateUserRoleMapping",
			Handler:    _Iam_CreateUserRoleMapping_Handler,
		},
		{
			MethodName: "UpdateUserRoleMapping",
			Handler:    _Iam_UpdateUserRoleMapping_Handler,
		},
		{
			MethodName: "ListIdentityProviders",
			Handler:    _Iam_ListIdentityProviders_Handler,
		},
		{
			MethodName: "CreateIdentityProvider",
			Handler:    _Iam_CreateIdentityProvider_Handler,
		},
		{
			MethodName: "DeleteIdentityProvider",
			Handler:    _Iam_DeleteIdentityProvider_Handler,
		},
		{
			MethodName: "CreateIpFilter",
			Handler:    _Iam_CreateIpFilter_Handler,
		},
		{
			MethodName: "DeleteIpFilter",
			Handler:    _Iam_DeleteIpFilter_Handler,
		},
		{
			MethodName: "CreatePartnerToken",
			Handler:    _Iam_CreatePartnerToken_Handler,
		},
		{
			MethodName: "RefreshPartnerToken",
			Handler:    _Iam_RefreshPartnerToken_Handler,
		},
		{
			MethodName: "VerifyUserForResetPassword",
			Handler:    _Iam_VerifyUserForResetPassword_Handler,
		},
		{
			MethodName: "ValidateResetPasswordLinkAndChangePassword",
			Handler:    _Iam_ValidateResetPasswordLinkAndChangePassword_Handler,
		},
		{
			MethodName: "GetMFAUsers",
			Handler:    _Iam_GetMFAUsers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListUsers",
			Handler:       _Iam_ListUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListGroupRootUsers",
			Handler:       _Iam_ListGroupRootUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListApiClients",
			Handler:       _Iam_ListApiClients_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListIpFilters",
			Handler:       _Iam_ListIpFilters_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "iam/v1/iam.proto",
}
